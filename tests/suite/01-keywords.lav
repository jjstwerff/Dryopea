fn main() {
    // Lavition is a language inspired by rust, but designed to be easier to write.
    // There are many details that differentiate it from it, some of those will be highlighted in the documentation.
    // A simple if statement, 'panic' acts like a normal function.
    // Production code will never panic though it will be logged with possibly addition information.
    if 2 > 5 {
       panic("Incorrect test");
    }

    // More complex logic can be used in boolean expressions.
    // Both '&&' '||' and 'and' 'or' can be used in logical expressions.
    // There are no 'let' or 'mut' keywords for variables, however they cannot switch types inside a function.
    // The '&' expression is the binary and operation.
    a = 12;
    if a > 10 and a & 7 == 4 {
        a += 1;
    } else {
        a -= 1;
    }
    // Assert acts as a normal function because each text constant can contain formatting expressions.
    // In production code the assert statements are omitted, so the code will not break on a missed problem.
    // While debugging the asserts will be evaluated and logged. They can also be used a break points.
    assert(a == 13, "Incorrect value {a} != 13");

    // Each block returns its last expression, so an if statement can be used as an expression.
    b = if a == 13 { "Correct" } else { "Wrong" };
    assert(b == "Correct", "Logic expression");

    // A simple for loop including 1 and omitting 6.
    t = 0;
    for a in 1..6 {
        t += a;
    }
    assert(t == 15, "Total was {t} instead of 15");

    // Loop the reverse of a range. Here, 'rev' disguises itself as a normal function.
    t = 0;
    for a in rev(1..=5) {
        t = t * 10 + a;
    }
    assert(t == 54321, "Result was {t} instead of 54321");

    // This language doesn't contain a 'loop' or 'while' style loop.
    // Treat this as a limiter to prevent hanging loops.
    // There is always a loop variable which can be used as the name of the loop.
    // The length is requested via 'len' that acts like a function on strings or other data structures.
    b = "";
    for x in 1..5 {
        for y in 1..5 {
            if y > x {
                break; // this breaks the inner y loop
            }
            if x * y >= 16 {
                x#break;
            }
            if len(b) > 0 {
                b += "; ";
            }
            b += "{x}:{y}";
        }
    }
    assert(b == "1:1; 2:1; 2:2; 3:1; 3:2; 3:3; 4:1; 4:2; 4:3", "Incorrect sequence '{b}'");

    // To limit the common creation of helper variables it is allowed to request the '#first' or '#count' in a loop.
    // This is similar to the x.iter().enumerate() construction in rust. Though here, it functions with an 'if' filter.
    b = "";
    for x in 1..=9 if x % 3 != 1 {
        if !x#first {
            b += ", ";
        }
        b += "{x#count}:{x}";
    }
    assert(b == "0:2, 1:3, 2:5, 3:6, 4:8, 5:9", "Sequence '{b}'");
}
