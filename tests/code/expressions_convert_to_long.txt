pub fn test() {
    test_value = {123 as long + 2};
    assert(
        test_value == 125l,
        "Test failed {test_value} != 125l"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):long = {#block(2):long
    OpAddLong(OpConvLongFromInt(123i32), OpConvLongFromInt(2i32));
  }#block(2):long;
  if OpEqLong(test_value(1), 125i64) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatLong(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 125l");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for convert_to_long:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=123) -> integer var=test_value[32]:long
   6[36]: ConvLongFromInt(v1: integer) -> long
   7[40]: ConstInt(val=2) -> integer
  12[44]: ConvLongFromInt(v1: integer) -> long
  13[48]: AddLong(v1: long, v2: long) -> long
  14[40]: VarLong(var[32]) -> long var=test_value[32]:long
  17[48]: ConstLong(val=125) -> long
  26[56]: EqLong(v1: long, v2: long) -> boolean
  27[41]: GotoFalseWord(jump=33, if_false: boolean)
  30[40]: GotoWord(jump=85)
  33[40]: ClearText(var[8]) var=__work_1[8]:text
  36[40]: ConstText(_value="Test failed ") -> text
  50[56]: AppendText(var[8], v1: text)
  53[40]: VarLong(var[32]) -> long var=test_value[32]:long
  56[48]: ConstInt(val=0) -> integer
  61[52]: FormatLong(var[8], val: long, radix=10, width: integer, token=32, plus=false, note=false)
  68[40]: ConstText(_value=" != 125l") -> text
  78[56]: AppendText(var[8], v1: text)
  81[40]: VarText(var[8]) -> text var=__work_1[8]:text
  84[56]: Panic(message: text)
  85[40]: FreeText(var[8])
  88[40]: Return(ret=0, value=0, discard=36)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=123) -> 123[32]
    6:[36] ConvLongFromInt(v1=123[32]) -> 123[32]
    7:[40] ConstInt(val=2) -> 2[40]
   12:[44] ConvLongFromInt(v1=2[40]) -> 2[40]
   13:[48] AddLong(v1=123[32], v2=2[40]) -> 125[32]
   14:[40] VarLong(var[32]) -> 125[40]
   17:[48] ConstLong(val=125) -> 125[48]
   26:[56] EqLong(v1=125[40], v2=125[48]) -> true[40]
   27:[41] GotoFalseWord(jump=33, if_false=true[40])
   30:[40] GotoWord(jump=85)
   85:[40] FreeText(var[8])
   88:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
