Test code:
pub fn test() {
    test_value = {123 as long + 2};
    assert(
        test_value == 125l,
        "Test failed {test_value} != 125l"
    );
}

fn test {
  let test_value = {
    OpAddLong(OpConvLongFromInt(123i32), OpConvLongFromInt(2i32));
  };
  if OpEqLong(test_value, 125i64) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatLong(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 125l");
    append_7;
  })};
}

byte-code for convert_to_long:test()
 664[0]: return-address
 664[4]: ConstInt(val=123) -> integer
 669[8]: ConvLongFromInt(v1: integer) -> long
 670[12]: ConstInt(val=2) -> integer
 675[16]: ConvLongFromInt(v1: integer) -> long
 676[20]: AddLong(v1: long, v2: long) -> long
 677[12]: VarLong(var[4]) -> long
 680[20]: ConstLong(val=125) -> long
 689[28]: EqLong(v1: long, v2: long) -> boolean
 690[13]: GenGotoFalseWord(jump=696, if_false: boolean)
 693[12]: GenGotoWord(jump=750)
 696[12]: Text()
 697[36]: ConstText(_value="Test failed ") -> text
 711[52]: AppendText(var[12], v1: text)
 714[36]: VarLong(var[4]) -> long
 717[44]: ConstInt(val=0) -> integer
 722[48]: FormatLong(var[12], val: long, radix=10, width: integer, token=32, plus=false, note=false)
 729[36]: ConstText(_value=" != 125l") -> text
 739[52]: AppendText(var[12], v1: text)
 742[36]: VarText(var[12]) -> text
 745[52]: GenFreeStack(value=16, discard=24)
 749[28]: GenPanic(message: text)
 750[12]: GenReturn(ret=0, value=0, discard=12)

Execute test:
  664:[4] ConstInt(val=123) -> 123[4]
  669:[8] ConvLongFromInt(v1=123[4]) -> 123[4]
  670:[12] ConstInt(val=2) -> 2[12]
  675:[16] ConvLongFromInt(v1=2[12]) -> 2[12]
  676:[20] AddLong(v1=123[4], v2=2[12]) -> 125[4]
  677:[12] VarLong(var[4]) -> 125[12]
  680:[20] ConstLong(val=125) -> 125[20]
  689:[28] EqLong(v1=125[12], v2=125[20]) -> true[12]
  690:[13] GenGotoFalseWord(jump=696, if_false=true[12])
  693:[12] GenGotoWord(jump=750)
  750:[12] GenReturn(ret=4294967295[0], value=0, discard=12)
Finished
