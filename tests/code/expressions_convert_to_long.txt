pub fn test() {
    test_value = {123 as long + 2};
    assert(
        test_value == 125l,
        "Test failed {test_value} != 125l"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:long = {#2 block
    OpAddLong(OpConvLongFromInt(123i32), OpConvLongFromInt(2i32));
  }#2:long;
  if OpEqLong(test_value, 125i64) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatLong(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125l");
    __work_1;
  }#3:text);
}#1

byte-code for convert_to_long:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=123) -> integer var=test_value[28]:long in 1
   6[32]: ConvLongFromInt(v1: integer) -> long
   7[36]: ConstInt(val=2) -> integer
  12[40]: ConvLongFromInt(v1: integer) -> long
  13[44]: AddLong(v1: long, v2: long) -> long
  14[36]: VarLong(var[28]) -> long var=test_value[28]:long in 1
  17[44]: ConstLong(val=125) -> long
  26[52]: EqLong(v1: long, v2: long) -> boolean
  27[37]: GotoFalseWord(jump=33, if_false: boolean)
  30[36]: GotoWord(jump=85)
  33[36]: ClearText(var[4]) var=__work_1[4]:text in 1
  36[36]: ConstText(_value="Test failed ") -> text
  50[52]: AppendText(var[4], v1: text)
  53[36]: VarLong(var[28]) -> long var=test_value[28]:long in 1
  56[44]: ConstInt(val=0) -> integer
  61[48]: FormatLong(var[4], val: long, radix=10, width: integer, token=32, plus=false, note=false)
  68[36]: ConstText(_value=" != 125l") -> text
  78[52]: AppendText(var[4], v1: text)
  81[36]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  84[52]: Panic(message: text)
  85[36]: FreeText(var[4])
  88[36]: Return(ret=0, value=0, discard=36)

