Test code:
pub fn test() {
    test_value = {123 as long + 2};
    assert(
        test_value == 125l,
        "Test failed {test_value} != 125l"
    );
}

fn test {
  let __work_1 = "";
  let test_value = {
    OpAddLong(OpConvLongFromInt(123i32), OpConvLongFromInt(2i32));
  };
  if OpEqLong(test_value, 125i64) {null} else {OpGenPanic({
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatLong(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125l");
    __work_1;
  })};
}

byte-code for convert_to_long:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: ConstInt(val=123) -> integer
 679[32]: ConvLongFromInt(v1: integer) -> long
 680[36]: ConstInt(val=2) -> integer
 685[40]: ConvLongFromInt(v1: integer) -> long
 686[44]: AddLong(v1: long, v2: long) -> long
 687[36]: VarLong(var[28]) -> long
 690[44]: ConstLong(val=125) -> long
 699[52]: EqLong(v1: long, v2: long) -> boolean
 700[37]: GenGotoFalseWord(jump=706, if_false: boolean)
 703[36]: GenGotoWord(jump=758)
 706[36]: ClearText(var[4])
 709[36]: ConstText(_value="Test failed ") -> text(false)
 723[52]: AppendText(var[4], v1: text(false))
 726[36]: VarLong(var[28]) -> long
 729[44]: ConstInt(val=0) -> integer
 734[48]: FormatLong(var[4], val: long, radix=10, width: integer, token=32, plus=false, note=false)
 741[36]: ConstText(_value=" != 125l") -> text(false)
 751[52]: AppendText(var[4], v1: text(false))
 754[36]: VarText(var[4]) -> text(false)
 757[52]: GenPanic(message: text(false))
 758[36]: GenReturn(ret=0, value=0, discard=36)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] ConstInt(val=123) -> 123[32]
  679:[36] ConvLongFromInt(v1=123[32]) -> 123[32]
  680:[40] ConstInt(val=2) -> 2[40]
  685:[44] ConvLongFromInt(v1=2[40]) -> 2[40]
  686:[48] AddLong(v1=123[32], v2=2[40]) -> 125[32]
  687:[40] VarLong(var[32]) -> 125[40]
  690:[48] ConstLong(val=125) -> 125[48]
  699:[56] EqLong(v1=125[40], v2=125[48]) -> true[40]
  700:[41] GenGotoFalseWord(jump=706, if_false=true[40])
  703:[40] GenGotoWord(jump=758)
  758:[40] GenReturn(ret=4294967295[4], value=0, discard=36)
Finished
