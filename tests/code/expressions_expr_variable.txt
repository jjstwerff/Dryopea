Test code:
pub fn test() {
    test_value = {a = 1; a};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}

fn test {
  let test_value = {
    let a = 1i32;
    a;
  };
  if OpEqInt(test_value, 1i32) {null} else {OpGenPanic({
    let append_8 = "Test failed ";
    OpFormatInt(append_8, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_8, " != 1");
    append_8;
  })};
}

byte-code for expr_variable:test()
 664[0]: return-address
 664[4]: ConstInt(val=1) -> integer
 669[8]: VarInt(var[4]) -> integer
 672[12]: GenFreeStack(value=4, discard=4)
 676[8]: VarInt(var[4]) -> integer
 679[12]: ConstInt(val=1) -> integer
 684[16]: EqInt(v1: integer, v2: integer) -> boolean
 685[9]: GenGotoFalseWord(jump=691, if_false: boolean)
 688[8]: GenGotoWord(jump=742)
 691[8]: Text()
 692[32]: ConstText(_value="Test failed ") -> text
 706[48]: AppendText(var[8], v1: text)
 709[32]: VarInt(var[4]) -> integer
 712[36]: ConstInt(val=0) -> integer
 717[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 724[32]: ConstText(_value=" != 1") -> text
 731[48]: AppendText(var[8], v1: text)
 734[32]: VarText(var[8]) -> text
 737[48]: GenFreeStack(value=16, discard=24)
 741[24]: GenPanic(message: text)
 742[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] ConstInt(val=1) -> 1[4]
  669:[8] VarInt(var[4]) -> 1[8]
  672:[12] GenFreeStack(value=4, discard=4)
  676:[8] VarInt(var[4]) -> 1[8]
  679:[12] ConstInt(val=1) -> 1[12]
  684:[16] EqInt(v1=1[8], v2=1[12]) -> true[8]
  685:[9] GenGotoFalseWord(jump=691, if_false=true[8])
  688:[8] GenGotoWord(jump=742)
  742:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
