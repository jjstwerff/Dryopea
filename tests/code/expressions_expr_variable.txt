pub fn test() {
    test_value = {a = 1; a};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 1i32;
    a;
  }#2:integer;
  if OpEqInt(test_value, 1i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1");
    __work_1;
  }#3:text);
}#1

byte-code for expr_variable:test()
 645[0]: return-address
 645[4]: Text() var=__work_1[4]:text in 1
 646[28]: ConstInt(val=1) -> integer var=a[28]:integer in 2
 651[32]: VarInt(var[28]) -> integer var=a[28]:integer in 2
 654[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 658[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 661[36]: ConstInt(val=1) -> integer
 666[40]: EqInt(v1: integer, v2: integer) -> boolean
 667[33]: GotoFalseWord(jump=673, if_false: boolean)
 670[32]: GotoWord(jump=722)
 673[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 676[32]: ConstText(_value="Test failed ") -> text
 690[48]: AppendText(var[4], v1: text)
 693[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 696[36]: ConstInt(val=0) -> integer
 701[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 708[32]: ConstText(_value=" != 1") -> text
 715[48]: AppendText(var[4], v1: text)
 718[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 721[48]: Panic(message: text)
 722[32]: FreeText(var[4])
 725[32]: Return(ret=0, value=0, discard=32)

Execute test:
  645:[8] Text()
  646:[32] ConstInt(val=1) -> 1[32]
  651:[36] VarInt(var[32]) -> 1[36]
  654:[40] FreeStack(value=4, discard=8)
  658:[36] VarInt(var[32]) -> 1[36]
  661:[40] ConstInt(val=1) -> 1[40]
  666:[44] EqInt(v1=1[36], v2=1[40]) -> true[36]
  667:[37] GotoFalseWord(jump=673, if_false=true[36])
  670:[36] GotoWord(jump=722)
  722:[36] FreeText(var[8])
  725:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
