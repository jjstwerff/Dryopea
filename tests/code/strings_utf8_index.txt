pub fn test() {
    test_value = {a="â™¥ðŸ˜ƒ"; a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + "." + a[7]};
    assert(
        test_value == "â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ.",
        "Test failed {test_value} != \"â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ.\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text["__work_1"] = {#2 block
    a:text = "â™¥ðŸ˜ƒ";
    __work_1:text = OpGetTextSub(a, 0i32, -2147483648i32);
    OpAppendText(__work_1, OpGetTextSub(a, 1i32, -2147483648i32));
    OpAppendText(__work_1, OpGetTextSub(a, 2i32, -2147483648i32));
    OpAppendText(__work_1, OpGetTextSub(a, 3i32, -2147483648i32));
    OpAppendText(__work_1, OpGetTextSub(a, 4i32, -2147483648i32));
    OpAppendText(__work_1, OpGetTextSub(a, 5i32, -2147483648i32));
    OpAppendText(__work_1, OpGetTextSub(a, 6i32, -2147483648i32));
    OpAppendText(__work_1, ".");
    OpAppendText(__work_1, OpGetTextSub(a, 7i32, -2147483648i32));
    __work_1;
  }#2:text["__work_1"];
  if OpEqText(test_value, "â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ.") null else OpPanic({#3 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ."");
    __work_2;
  }#3:text);
}#1

byte-code for utf8_index:test()
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text["__work_1"] in 1
   3[76]: Text() var=a[76]:text in 2
   4[100]: ConstText(_value="â™¥ðŸ˜ƒ") -> text
  13[116]: AppendText(var[76], v1: text)
  16[100]: ClearText(var[28]) var=__work_1[28]:text in 1
  19[100]: VarText(var[76]) -> text var=a[76]:text in 2
  22[116]: ConstInt(val=0) -> integer
  27[120]: ConstInt(val=-2147483648) -> integer
  32[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  33[116]: AppendText(var[28], v1: text)
  36[100]: VarText(var[76]) -> text var=a[76]:text in 2
  39[116]: ConstInt(val=1) -> integer
  44[120]: ConstInt(val=-2147483648) -> integer
  49[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  50[116]: AppendText(var[28], v1: text)
  53[100]: VarText(var[76]) -> text var=a[76]:text in 2
  56[116]: ConstInt(val=2) -> integer
  61[120]: ConstInt(val=-2147483648) -> integer
  66[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  67[116]: AppendText(var[28], v1: text)
  70[100]: VarText(var[76]) -> text var=a[76]:text in 2
  73[116]: ConstInt(val=3) -> integer
  78[120]: ConstInt(val=-2147483648) -> integer
  83[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  84[116]: AppendText(var[28], v1: text)
  87[100]: VarText(var[76]) -> text var=a[76]:text in 2
  90[116]: ConstInt(val=4) -> integer
  95[120]: ConstInt(val=-2147483648) -> integer
 100[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 101[116]: AppendText(var[28], v1: text)
 104[100]: VarText(var[76]) -> text var=a[76]:text in 2
 107[116]: ConstInt(val=5) -> integer
 112[120]: ConstInt(val=-2147483648) -> integer
 117[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 118[116]: AppendText(var[28], v1: text)
 121[100]: VarText(var[76]) -> text var=a[76]:text in 2
 124[116]: ConstInt(val=6) -> integer
 129[120]: ConstInt(val=-2147483648) -> integer
 134[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 135[116]: AppendText(var[28], v1: text)
 138[100]: ConstText(_value=".") -> text
 141[116]: AppendText(var[28], v1: text)
 144[100]: VarText(var[76]) -> text var=a[76]:text in 2
 147[116]: ConstInt(val=7) -> integer
 152[120]: ConstInt(val=-2147483648) -> integer
 157[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 158[116]: AppendText(var[28], v1: text)
 161[100]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 164[116]: FreeText(var[76])
 167[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 171[92]: AppendText(var[52], v1: text)
 174[76]: VarText(var[52]) -> text var=test_value[52]:text["__work_1"] in 1
 177[92]: ConstText(_value="â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ.") -> text
 205[108]: EqText(v1: text, v2: text) -> boolean
 206[77]: GotoFalseWord(jump=212, if_false: boolean)
 209[76]: GotoWord(jump=286)
 212[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 215[76]: ConstText(_value="Test failed ") -> text
 229[92]: AppendText(var[4], v1: text)
 232[76]: VarText(var[52]) -> text var=test_value[52]:text["__work_1"] in 1
 235[92]: ConstInt(val=0) -> integer
 240[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 245[76]: ConstText(_value=" != "â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ."") -> text
 279[92]: AppendText(var[4], v1: text)
 282[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 285[92]: Panic(message: text)
 286[76]: FreeText(var[52])
 289[76]: FreeText(var[28])
 292[76]: FreeText(var[4])
 295[76]: Return(ret=0, value=0, discard=76)

