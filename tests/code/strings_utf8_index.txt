pub fn test() {
    test_value = {a="â™¥ðŸ˜ƒ"; a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + "." + a[7]};
    assert(
        test_value == "â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ.",
        "Test failed {test_value} != \"â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ.\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text["__work_1"] = {#2 block
    a:text = "â™¥ðŸ˜ƒ";
    __work_1:text = OpGetCharacter(a, 0i32);
    OpAppendText(__work_1, OpGetCharacter(a, 1i32));
    OpAppendText(__work_1, OpGetCharacter(a, 2i32));
    OpAppendText(__work_1, OpGetCharacter(a, 3i32));
    OpAppendText(__work_1, OpGetCharacter(a, 4i32));
    OpAppendText(__work_1, OpGetCharacter(a, 5i32));
    OpAppendText(__work_1, OpGetCharacter(a, 6i32));
    OpAppendText(__work_1, ".");
    OpAppendText(__work_1, OpGetCharacter(a, 7i32));
    __work_1;
  }#2:text["__work_1"];
  if OpEqText(test_value, "â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ.") null else OpPanic({#3 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "â™¥â™¥â™¥ðŸ˜ƒðŸ˜ƒðŸ˜ƒðŸ˜ƒ."");
    __work_2;
  }#3:text);
}#1

byte-code for utf8_index: