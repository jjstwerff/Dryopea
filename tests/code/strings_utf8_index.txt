pub fn test() {
    test_value = {a="â™¥ğŸ˜ƒ"; a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + "." + a[7]};
    assert(
        test_value == "â™¥â™¥â™¥ğŸ˜ƒğŸ˜ƒğŸ˜ƒğŸ˜ƒ.",
        "Test failed {test_value} != \"â™¥â™¥â™¥ğŸ˜ƒğŸ˜ƒğŸ˜ƒğŸ˜ƒ.\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text = {#2 block
    a:text = "â™¥ğŸ˜ƒ";
    OpAddTextChar(OpAddText(OpAddTextChar(OpAddTextChar(OpAddTextChar(OpAddTextChar(OpAddTextChar(OpAddCharacter(OpGetCharacter(a, 0i32), OpGetCharacter(a, 1i32)), OpGetCharacter(a, 2i32)), OpGetCharacter(a, 3i32)), OpGetCharacter(a, 4i32)), OpGetCharacter(a, 5i32)), OpGetCharacter(a, 6i32)), "."), OpGetCharacter(a, 7i32));
  }#2:text;
  if OpEqText(test_value, "â™¥â™¥â™¥ğŸ˜ƒğŸ˜ƒğŸ˜ƒğŸ˜ƒ.") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "â™¥â™¥â™¥ğŸ˜ƒğŸ˜ƒğŸ˜ƒğŸ˜ƒ."");
    __work_1;
  }#3:text);
}#1

byte-code for utf8_index: