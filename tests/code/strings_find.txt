Test code:
pub fn test() {
    test_value = {v = "something"; v.find("t" + "h")};
    assert(
        test_value == 4,
        "Test failed {test_value} != 4"
    );
}

fn test {
  let __work_2 = "";
  let __work_3 = "";
  let test_value = {
    let v = "something";
    _tp_text_find(v, {
      OpClearText(__work_2);
      OpAppendText(__work_2, "t");
      OpAppendText(__work_2, "h");
      __work_2;
    });
  };
  if OpEqInt(test_value, 4i32) {null} else {OpGenPanic({
    OpClearText(__work_3);
    OpAppendText(__work_3, "Test failed ");
    OpFormatInt(__work_3, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_3, " != 4");
    __work_3;
  })};
}

byte-code for find:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: Text()
 675[52]: ConstText(_value="") -> text(false)
 677[68]: AppendText(var[28], v1: text(false))
 680[52]: Text()
 681[76]: ConstText(_value="something") -> text(false)
 692[92]: AppendText(var[52], v1: text(false))
 695[76]: VarText(var[52]) -> text(false)
 698[92]: ClearText(var[4])
 701[92]: ConstText(_value="t") -> text(false)
 704[108]: AppendText(var[4], v1: text(false))
 707[92]: ConstText(_value="h") -> text(false)
 710[108]: AppendText(var[4], v1: text(false))
 713[92]: VarText(var[4]) -> text(false)
 716[108]: StaticCall(_tp_text_find)
 719[80]: GenFreeStack(value=4, discard=24)
 723[56]: VarInt(var[52]) -> integer
 726[60]: ConstInt(val=4) -> integer
 731[64]: EqInt(v1: integer, v2: integer) -> boolean
 732[57]: GenGotoFalseWord(jump=738, if_false: boolean)
 735[56]: GenGotoWord(jump=787)
 738[56]: ClearText(var[28])
 741[56]: ConstText(_value="Test failed ") -> text(false)
 755[72]: AppendText(var[28], v1: text(false))
 758[56]: VarInt(var[52]) -> integer
 761[60]: ConstInt(val=0) -> integer
 766[64]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 773[56]: ConstText(_value=" != 4") -> text(false)
 780[72]: AppendText(var[28], v1: text(false))
 783[56]: VarText(var[28]) -> text(false)
 786[72]: GenPanic(message: text(false))
 787[56]: GenReturn(ret=0, value=0, discard=56)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] Text()
  675:[56] ConstText(_value="") -> ""[56]
  677:[72] AppendText(var[32], v1=""[56])
  680:[56] Text()
  681:[80] ConstText(_value="something") -> "something"[80]
  692:[96] AppendText(var[56], v1="something"[80])
  695:[80] VarText(var[56]) -> "something"[80]
  698:[96] ClearText(var[8])
  701:[96] ConstText(_value="t") -> "t"[96]
  704:[112] AppendText(var[8], v1="t"[96])
  707:[96] ConstText(_value="h") -> "h"[96]
  710:[112] AppendText(var[8], v1="h"[96])
  713:[96] VarText(var[8]) -> "th"[96]
  716:[112] StaticCall(call=7)
  719:[84] GenFreeStack(value=4, discard=24)
  723:[60] VarInt(var[56]) -> 4[60]
  726:[64] ConstInt(val=4) -> 4[64]
  731:[68] EqInt(v1=4[60], v2=4[64]) -> true[60]
  732:[61] GenGotoFalseWord(jump=738, if_false=true[60])
  735:[60] GenGotoWord(jump=787)
  787:[60] GenReturn(ret=4294967295[4], value=0, discard=56)
Finished
