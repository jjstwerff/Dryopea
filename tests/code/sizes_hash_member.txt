struct S {a: integer, b: long, c: integer}
struct Main { s:hash<S[b]> }

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main)};
    assert(
        test_value == 820,
        "Test failed {test_value} != 820"
    );
}
Type 17:S[20]:
    a:integer[4]
    b:long[8]
    c:integer[16]

Type 18:Main[8]:
    s:hash<S[b]>[4]

Type 19:hash<S[b]>[4]:Hash(17, [1]) keys [tp:2 desc:false field:8, tp:2 desc:false field:8, ]

fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    OpAddInt(20i32, OpMulInt(100i32, 8i32));
  }#block_2:integer;
  if OpEqInt(test_value, 820i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 820");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for hash_member:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=20) -> integer var=test_value[32]:integer
   6[36]: ConstInt(val=100) -> integer
  11[40]: ConstInt(val=8) -> integer
  16[44]: MulInt(v1: integer, v2: integer) -> integer
  17[40]: AddInt(v1: integer, v2: integer) -> integer
  18[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  21[40]: ConstInt(val=820) -> integer
  26[44]: EqInt(v1: integer, v2: integer) -> boolean
  27[37]: GotoFalseWord(jump=33, if_false: boolean)
  30[36]: GotoWord(jump=84)
  33[36]: ClearText(var[8]) var=__work_1[8]:text
  36[36]: ConstText(_value="Test failed ") -> text
  50[52]: AppendText(var[8], v1: text)
  53[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  56[40]: ConstInt(val=0) -> integer
  61[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  68[36]: ConstText(_value=" != 820") -> text
  77[52]: AppendText(var[8], v1: text)
  80[36]: VarText(var[8]) -> text var=__work_1[8]:text
  83[52]: Panic(message: text)
  84[36]: FreeText(var[8])
  87[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=20) -> 20[32]
    6:[36] ConstInt(val=100) -> 100[36]
   11:[40] ConstInt(val=8) -> 8[40]
   16:[44] MulInt(v1=100[36], v2=8[40]) -> 800[36]
   17:[40] AddInt(v1=20[32], v2=800[36]) -> 820[32]
   18:[36] VarInt(var[32]) -> 820[36]
   21:[40] ConstInt(val=820) -> 820[40]
   26:[44] EqInt(v1=820[36], v2=820[40]) -> true[36]
   27:[37] GotoFalseWord(jump=1201, if_false=true[36])
   30:[36] GotoWord(jump=1252)
   84:[36] FreeText(var[8])
   87:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
