Test code:
struct S {a: integer, b: long, c: integer}
struct Main { s:hash<S[b]> }

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main)};
    assert(
        test_value == 820,
        "Test failed {test_value} != 820"
    );
}

Type 13:S[20]:
    a:integer[4]
    b:long[8]
    c:integer[16]

Type 14:Main[8]:
    s:hash<S[b]>[4]

Type 15:hash<S[b]>[4]:Hash(13, [1]) keys [tp:2 desc:false field:8, ]

fn test {
  let __work_1 = "";
  let test_value = {
    OpAddInt(20i32, OpMulInt(100i32, 8i32));
  };
  if OpEqInt(test_value, 820i32) {null} else {OpGenPanic({
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 820");
    __work_1;
  })};
}

byte-code for hash_member:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: ConstInt(val=20) -> integer
 679[32]: ConstInt(val=100) -> integer
 684[36]: ConstInt(val=8) -> integer
 689[40]: MulInt(v1: integer, v2: integer) -> integer
 690[36]: AddInt(v1: integer, v2: integer) -> integer
 691[32]: VarInt(var[28]) -> integer
 694[36]: ConstInt(val=820) -> integer
 699[40]: EqInt(v1: integer, v2: integer) -> boolean
 700[33]: GenGotoFalseWord(jump=706, if_false: boolean)
 703[32]: GenGotoWord(jump=757)
 706[32]: ClearText(var[4])
 709[32]: ConstText(_value="Test failed ") -> text(false)
 723[48]: AppendText(var[4], v1: text(false))
 726[32]: VarInt(var[28]) -> integer
 729[36]: ConstInt(val=0) -> integer
 734[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 741[32]: ConstText(_value=" != 820") -> text(false)
 750[48]: AppendText(var[4], v1: text(false))
 753[32]: VarText(var[4]) -> text(false)
 756[48]: GenPanic(message: text(false))
 757[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] ConstInt(val=20) -> 20[32]
  679:[36] ConstInt(val=100) -> 100[36]
  684:[40] ConstInt(val=8) -> 8[40]
  689:[44] MulInt(v1=100[36], v2=8[40]) -> 800[36]
  690:[40] AddInt(v1=20[32], v2=800[36]) -> 820[32]
  691:[36] VarInt(var[32]) -> 820[36]
  694:[40] ConstInt(val=820) -> 820[40]
  699:[44] EqInt(v1=820[36], v2=820[40]) -> true[36]
  700:[37] GenGotoFalseWord(jump=706, if_false=true[36])
  703:[36] GenGotoWord(jump=757)
  757:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
