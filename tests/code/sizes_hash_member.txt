struct S {a: integer, b: long, c: integer}
struct Main { s:hash<S[b]> }

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main)};
    assert(
        test_value == 820,
        "Test failed {test_value} != 820"
    );
}
Type 11:S[20]:
    a:integer[4]
    b:long[8]
    c:integer[16]

Type 12:Main[8]:
    s:hash<S[b]>[4]

Type 13:hash<S[b]>[4]:Hash(11, [1]) keys [tp:2 desc:false field:8, ]

fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    OpAddInt(20i32, OpMulInt(100i32, 8i32));
  }#2;
  if OpEqInt(test_value, 820i32) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 820");
    __work_1;
  }#3);
}#1

byte-code for hash_member:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstInt(val=20) -> integer
 674[32]: ConstInt(val=100) -> integer
 679[36]: ConstInt(val=8) -> integer
 684[40]: MulInt(v1: integer, v2: integer) -> integer
 685[36]: AddInt(v1: integer, v2: integer) -> integer
 686[32]: VarInt(var[28]) -> integer
 689[36]: ConstInt(val=820) -> integer
 694[40]: EqInt(v1: integer, v2: integer) -> boolean
 695[33]: GenGotoFalseWord(jump=701, if_false: boolean)
 698[32]: GenGotoWord(jump=752)
 701[32]: ClearText(var[4])
 704[32]: ConstText(_value="Test failed ") -> text(false, [])
 718[48]: AppendText(var[4], v1: text(false, []))
 721[32]: VarInt(var[28]) -> integer
 724[36]: ConstInt(val=0) -> integer
 729[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 736[32]: ConstText(_value=" != 820") -> text(false, [])
 745[48]: AppendText(var[4], v1: text(false, []))
 748[32]: VarText(var[4]) -> text(false, [])
 751[48]: GenPanic(message: text(false, []))
 752[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstInt(val=20) -> 20[32]
  674:[36] ConstInt(val=100) -> 100[36]
  679:[40] ConstInt(val=8) -> 8[40]
  684:[44] MulInt(v1=100[36], v2=8[40]) -> 800[36]
  685:[40] AddInt(v1=20[32], v2=800[36]) -> 820[32]
  686:[36] VarInt(var[32]) -> 820[36]
  689:[40] ConstInt(val=820) -> 820[40]
  694:[44] EqInt(v1=820[36], v2=820[40]) -> true[36]
  695:[37] GenGotoFalseWord(jump=701, if_false=true[36])
  698:[36] GenGotoWord(jump=752)
  752:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
