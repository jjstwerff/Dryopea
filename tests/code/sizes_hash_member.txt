struct S {a: integer, b: long, c: integer}
struct Main { s:hash<S[b]> }

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main)};
    assert(
        test_value == 820,
        "Test failed {test_value} != 820"
    );
}
Type 12:S[20]:
    a:integer[4]
    b:long[8]
    c:integer[16]

Type 13:Main[8]:
    s:hash<S[b]>[4]

Type 14:hash<S[b]>[4]:Hash(12, [1]) keys [tp:2 desc:false field:8, ]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(20i32, OpMulInt(100i32, 8i32));
  }#2:integer;
  if OpEqInt(test_value, 820i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 820");
    __work_1;
  }#3:text);
}#1

byte-code for hash_member:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstInt(val=20) -> integer
 698[32]: ConstInt(val=100) -> integer
 703[36]: ConstInt(val=8) -> integer
 708[40]: MulInt(v1: integer, v2: integer) -> integer
 709[36]: AddInt(v1: integer, v2: integer) -> integer
 710[32]: VarInt(var[28]) -> integer
 713[36]: ConstInt(val=820) -> integer
 718[40]: EqInt(v1: integer, v2: integer) -> boolean
 719[33]: GotoFalseWord(jump=725, if_false: boolean)
 722[32]: GotoWord(jump=776)
 725[32]: ClearText(var[4])
 728[32]: ConstText(_value="Test failed ") -> text
 742[48]: AppendText(var[4], v1: text)
 745[32]: VarInt(var[28]) -> integer
 748[36]: ConstInt(val=0) -> integer
 753[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 760[32]: ConstText(_value=" != 820") -> text
 769[48]: AppendText(var[4], v1: text)
 772[32]: VarText(var[4]) -> text
 775[48]: Panic(message: text)
 776[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] ConstInt(val=20) -> 20[32]
  698:[36] ConstInt(val=100) -> 100[36]
  703:[40] ConstInt(val=8) -> 8[40]
  708:[44] MulInt(v1=100[36], v2=8[40]) -> 800[36]
  709:[40] AddInt(v1=20[32], v2=800[36]) -> 820[32]
  710:[36] VarInt(var[32]) -> 820[36]
  713:[40] ConstInt(val=820) -> 820[40]
  718:[44] EqInt(v1=820[36], v2=820[40]) -> true[36]
  719:[37] GotoFalseWord(jump=725, if_false=true[36])
  722:[36] GotoWord(jump=776)
  776:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
