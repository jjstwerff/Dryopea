Test code:
struct S {a: integer, b: long, c: integer}
struct Main { s:hash<S[b]> }

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main)};
    assert(
        test_value == 820,
        "Test failed {test_value} != 820"
    );
}

Type 13:S[20]:
    a:integer[4]
    b:long[8]
    c:integer[16]

Type 14:Main[8]:
    s:hash<S[b]>[4]

Type 15:hash<S[b]>[4]:Hash(13, [1])

fn test {
  let test_value = {
    OpAddInt(20i32, OpMulInt(100i32, 8i32));
  };
  if OpEqInt(test_value, 820i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 820");
    append_7;
  })};
}

byte-code for hash_member:test()
 664[0]: return-address
 664[4]: ConstInt(val=20) -> integer
 669[8]: ConstInt(val=100) -> integer
 674[12]: ConstInt(val=8) -> integer
 679[16]: MulInt(v1: integer, v2: integer) -> integer
 680[12]: AddInt(v1: integer, v2: integer) -> integer
 681[8]: VarInt(var[4]) -> integer
 684[12]: ConstInt(val=820) -> integer
 689[16]: EqInt(v1: integer, v2: integer) -> boolean
 690[9]: GenGotoFalseWord(jump=696, if_false: boolean)
 693[8]: GenGotoWord(jump=749)
 696[8]: Text()
 697[32]: ConstText(_value="Test failed ") -> text
 711[48]: AppendText(var[8], v1: text)
 714[32]: VarInt(var[4]) -> integer
 717[36]: ConstInt(val=0) -> integer
 722[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 729[32]: ConstText(_value=" != 820") -> text
 738[48]: AppendText(var[8], v1: text)
 741[32]: VarText(var[8]) -> text
 744[48]: GenFreeStack(value=16, discard=24)
 748[24]: GenPanic(message: text)
 749[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] ConstInt(val=20) -> 20[4]
  669:[8] ConstInt(val=100) -> 100[8]
  674:[12] ConstInt(val=8) -> 8[12]
  679:[16] MulInt(v1=100[8], v2=8[12]) -> 800[8]
  680:[12] AddInt(v1=20[4], v2=800[8]) -> 820[4]
  681:[8] VarInt(var[4]) -> 820[8]
  684:[12] ConstInt(val=820) -> 820[12]
  689:[16] EqInt(v1=820[8], v2=820[12]) -> true[8]
  690:[9] GenGotoFalseWord(jump=696, if_false=true[8])
  693:[8] GenGotoWord(jump=749)
  749:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
