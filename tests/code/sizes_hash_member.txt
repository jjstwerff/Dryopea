struct S {a: integer, b: long, c: integer}
struct Main { s:hash<S[b]> }

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main)};
    assert(
        test_value == 820,
        "Test failed {test_value} != 820"
    );
}
Type 15:S[20]:
    a:integer[4]
    b:long[8]
    c:integer[16]

Type 16:Main[8]:
    s:hash<S[b]>[4]

Type 17:hash<S[b]>[4]:Hash(15, [1]) keys [tp:2 desc:false field:8, ]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(20i32, OpMulInt(100i32, 8i32));
  }#2:integer;
  if OpEqInt(test_value, 820i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 820");
    __work_1;
  }#3:text);
}#1

byte-code for hash_member:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=20) -> integer var=test_value[28]:integer in 1
   6[32]: ConstInt(val=100) -> integer
  11[36]: ConstInt(val=8) -> integer
  16[40]: MulInt(v1: integer, v2: integer) -> integer
  17[36]: AddInt(v1: integer, v2: integer) -> integer
  18[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  21[36]: ConstInt(val=820) -> integer
  26[40]: EqInt(v1: integer, v2: integer) -> boolean
  27[33]: GotoFalseWord(jump=33, if_false: boolean)
  30[32]: GotoWord(jump=84)
  33[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  36[32]: ConstText(_value="Test failed ") -> text
  50[48]: AppendText(var[4], v1: text)
  53[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  56[36]: ConstInt(val=0) -> integer
  61[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  68[32]: ConstText(_value=" != 820") -> text
  77[48]: AppendText(var[4], v1: text)
  80[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  83[48]: Panic(message: text)
  84[32]: FreeText(var[4])
  87[32]: Return(ret=0, value=0, discard=32)

