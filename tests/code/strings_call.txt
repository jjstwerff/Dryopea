fn choice(a: text, b: text) -> text { if len(a) > len(b) { a } else { b } }

pub fn test() {
    test_value = {choice("{1:03}", "{2}1") + choice("2", "")};
    assert(
        test_value == "0012",
        "Test failed {test_value} != \"0012\""
    );
}
fn choice(a:text, b:text) -> text["a", "b"] {#block_1:text["a", "b"]
  if OpGtInt(_tp_text_len(a), _tp_text_len(b)) {#block_2:text["a"]
    a;
  }#block_2:text["a"] else {#block_3:text["b"]
    b;
  }#block_3:text["b"];
}#block_1:text["a", "b"]

byte-code for call:choice(a: text[4], b: text[20]) [1168] -> text["a", "b"]
   0[36]: return-address
   0[40]: ArgText(var[4]) -> text var=a[4]:text
   3[56]: Call(size=0, to=318)
  10[44]: ArgText(var[20]) -> text var=b[20]:text
  13[60]: Call(size=0, to=318)
  20[48]: GtInt(v1: integer, v2: integer) -> boolean
  21[41]: GotoFalseWord(jump=30, if_false: boolean)
  24[40]: ArgText(var[4]) -> text var=a[4]:text
  27[56]: GotoWord(jump=33)
  30[40]: ArgText(var[20]) -> text var=b[20]:text
  33[56]: Return(ret=32, value=16, discard=52) type=text[4]:Base[5]

fn test() {#block_1:void
  __work_4:text(1) = "";
  __work_3:text(1) = "";
  __work_2:text(1) = "";
  __work_1:text(1) = "";
  test_value:text["__work_3"](1) = {#block_2:text["__work_3"]
    {#Add text_3:text["__work_3"]
      OpClearText(__work_3);
      OpAppendText(__work_3, choice({#Formatted string_4:text
        __work_1:text(1) = "";
        OpFormatInt(__work_1, 1i32, 10i32, 3i32, 48i32, false, false);
        __work_1;
      }#Formatted string_4:text, {#Formatted string_5:text
        __work_2:text(1) = "";
        OpFormatInt(__work_2, 2i32, 10i32, 0i32, 32i32, false, false);
        OpAppendText(__work_2, "1");
        __work_2;
      }#Formatted string_5:text));
      OpAppendText(__work_3, choice("2", ""));
      __work_3;
    }#Add text_3:text["__work_3"];
  }#block_2:text["__work_3"];
  if OpEqText(test_value, "0012") null else OpPanic({#Formatted string_6:text
    __work_4:text(1) = "Test failed ";
    OpFormatText(__work_4, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_4, " != "0012"");
    __work_4;
  }#Formatted string_6:text);
  OpFreeText(test_value);
  OpFreeText(__work_1);
  OpFreeText(__work_2);
  OpFreeText(__work_3);
  OpFreeText(__work_4);
}#block_1:void

byte-code for call:test() [1207]
   0[4]: return-address
   0[8]: Text() var=__work_4[8]:text
   1[32]: Text() var=__work_3[32]:text
   2[56]: Text() var=__work_2[56]:text
   3[80]: Text() var=__work_1[80]:text
   4[104]: Text() var=test_value[104]:text["__work_3"]
   5[128]: ClearText(var[32])
   8[128]: ClearText(var[80]) var=__work_1[80]:text
  11[128]: ConstText(_value="") -> text
  13[144]: AppendText(var[80], v1: text)
  16[128]: ConstInt(val=1) -> integer
  21[132]: ConstInt(val=3) -> integer
  26[136]: FormatInt(var[80], val: integer, radix=10, width: integer, token=48, plus=false, note=false)
  33[128]: VarText(var[80]) -> text var=__work_1[80]:text
  36[144]: ClearText(var[56]) var=__work_2[56]:text
  39[144]: ConstText(_value="") -> text
  41[160]: AppendText(var[56], v1: text)
  44[144]: ConstInt(val=2) -> integer
  49[148]: ConstInt(val=0) -> integer
  54[152]: FormatInt(var[56], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  61[144]: ConstText(_value="1") -> text
  64[160]: AppendText(var[56], v1: text)
  67[144]: VarText(var[56]) -> text var=__work_2[56]:text
  70[160]: Call(size=0, to=1168)
  77[144]: AppendText(var[32], v1: text)
  80[128]: ConstText(_value="2") -> text
  83[144]: ConstText(_value="") -> text
  85[160]: Call(size=0, to=1168)
  92[144]: AppendText(var[32], v1: text)
  95[128]: VarText(var[32]) -> text var=__work_3[32]:text
  98[144]: AppendText(var[104], v1: text)
 101[128]: VarText(var[104]) -> text var=test_value[104]:text["__work_3"]
 104[144]: ConstText(_value="0012") -> text
 110[160]: EqText(v1: text, v2: text) -> boolean
 111[129]: GotoFalseWord(jump=117, if_false: boolean)
 114[128]: GotoWord(jump=169)
 117[128]: ClearText(var[8]) var=__work_4[8]:text
 120[128]: ConstText(_value="Test failed ") -> text
 134[144]: AppendText(var[8], v1: text)
 137[128]: VarText(var[104]) -> text var=test_value[104]:text["__work_3"]
 140[144]: ConstInt(val=0) -> integer
 145[148]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
 150[128]: ConstText(_value=" != "0012"") -> text
 162[144]: AppendText(var[8], v1: text)
 165[128]: VarText(var[8]) -> text var=__work_4[8]:text
 168[144]: Panic(message: text)
 169[128]: FreeText(var[104])
 172[128]: FreeText(var[80])
 175[128]: FreeText(var[56])
 178[128]: FreeText(var[32])
 181[128]: FreeText(var[8])
 184[128]: Return(ret=0, value=0, discard=124)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] Text()
    4:[104] Text()
    5:[128] ClearText(var[32])
    8:[128] ClearText(var[80])
   11:[128] ConstText(_value="") -> ""[128]
   13:[144] AppendText(var[80], v1=""[128])
   16:[128] ConstInt(val=1) -> 1[128]
   21:[132] ConstInt(val=3) -> 3[132]
   26:[136] FormatInt(var[80], val=1[128], radix=10, width=3[132], token=48, plus=false, note=false)
   33:[128] VarText(var[80]) -> "001"[128]
   36:[144] ClearText(var[56])
   39:[144] ConstText(_value="") -> ""[144]
   41:[160] AppendText(var[56], v1=""[144])
   44:[144] ConstInt(val=2) -> 2[144]
   49:[148] ConstInt(val=0) -> 0[148]
   54:[152] FormatInt(var[56], val=2[144], radix=10, width=0[148], token=32, plus=false, note=false)
   61:[144] ConstText(_value="1") -> "1"[144]
   64:[160] AppendText(var[56], v1="1"[144])
   67:[144] VarText(var[56]) -> "21"[144]
   70:[160] Call(size=0, to=1168)
 1168:[164] ArgText(var[128]) -> "001"[164]
 1171:[180] Call(size=0, to=318)
  318:[184] ArgText(var[164]) -> "001"[184]
  321:[200] LengthText(v1="001"[184]) -> 3[184]
  322:[188] Return(ret=1178[180], value=4, discard=24) -> 3[164]
 1178:[168] ArgText(var[144]) -> "21"[168]
 1181:[184] Call(size=0, to=318)
  318:[188] ArgText(var[168]) -> "21"[188]
  321:[204] LengthText(v1="21"[188]) -> 2[188]
  322:[192] Return(ret=1188[184], value=4, discard=24) -> 2[168]
 1188:[172] GtInt(v1=3[164], v2=2[168]) -> true[164]
 1189:[165] GotoFalseWord(jump=1198, if_false=true[164])
 1192:[164] ArgText(var[128]) -> "001"[164]
 1195:[180] GotoWord(jump=1201)
 1201:[180] Return(ret=1284[160], value=16, discard=52) -> "001"[128]
   77:[144] AppendText(var[32], v1="001"[128])
   80:[128] ConstText(_value="2") -> "2"[128]
   83:[144] ConstText(_value="") -> ""[144]
   85:[160] Call(size=0, to=1168)
 1168:[164] ArgText(var[128]) -> "2"[164]
 1171:[180] Call(size=0, to=318)
  318:[184] ArgText(var[164]) -> "2"[184]
  321:[200] LengthText(v1="2"[184]) -> 1[184]
  322:[188] Return(ret=1178[180], value=4, discard=24) -> 1[164]
 1178:[168] ArgText(var[144]) -> ""[168]
 1181:[184] Call(size=0, to=318)
  318:[188] ArgText(var[168]) -> ""[188]
  321:[204] LengthText(v1=""[188]) -> 0[188]
  322:[192] Return(ret=1188[184], value=4, discard=24) -> 0[168]
 1188:[172] GtInt(v1=1[164], v2=0[168]) -> true[164]
 1189:[165] GotoFalseWord(jump=1198, if_false=true[164])
 1192:[164] ArgText(var[128]) -> "2"[164]
 1195:[180] GotoWord(jump=1201)
 1201:[180] Return(ret=1299[160], value=16, discard=52) -> "2"[128]
   92:[144] AppendText(var[32], v1="2"[128])
   95:[128] VarText(var[32]) -> "0012"[128]
   98:[144] AppendText(var[104], v1="0012"[128])
  101:[128] VarText(var[104]) -> "0012"[128]
  104:[144] ConstText(_value="0012") -> "0012"[144]
  110:[160] EqText(v1="0012"[128], v2="0012"[144]) -> true[128]
  111:[129] GotoFalseWord(jump=1324, if_false=true[128])
  114:[128] GotoWord(jump=1376)
  169:[128] FreeText(var[104])
  172:[128] FreeText(var[80])
  175:[128] FreeText(var[56])
  178:[128] FreeText(var[32])
  181:[128] FreeText(var[8])
  184:[128] Return(ret=4294967295[4], value=0, discard=124)
Finished
