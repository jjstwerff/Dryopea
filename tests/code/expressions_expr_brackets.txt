pub fn test() {
    test_value = {(1 + 2)};
    assert(
        test_value == 3,
        "Test failed {test_value} != 3"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(1i32, 2i32);
  }#2:integer;
  if OpEqInt(test_value, 3i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 3");
    __work_1;
  }#3:text);
}#1

byte-code for expr_brackets:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=1) -> integer var=test_value[28]:integer in 1
   6[32]: ConstInt(val=2) -> integer
  11[36]: AddInt(v1: integer, v2: integer) -> integer
  12[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  15[36]: ConstInt(val=3) -> integer
  20[40]: EqInt(v1: integer, v2: integer) -> boolean
  21[33]: GotoFalseWord(jump=27, if_false: boolean)
  24[32]: GotoWord(jump=76)
  27[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  30[32]: ConstText(_value="Test failed ") -> text
  44[48]: AppendText(var[4], v1: text)
  47[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  50[36]: ConstInt(val=0) -> integer
  55[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  62[32]: ConstText(_value=" != 3") -> text
  69[48]: AppendText(var[4], v1: text)
  72[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  75[48]: Panic(message: text)
  76[32]: FreeText(var[4])
  79[32]: Return(ret=0, value=0, discard=32)

