Test code:
pub fn test() {
    test_value = {(1 + 2)};
    assert(
        test_value == 3,
        "Test failed {test_value} != 3"
    );
}

fn test {
  let test_value = {
    OpAddInt(1i32, 2i32);
  };
  if OpEqInt(test_value, 3i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 3");
    append_7;
  })};
}

byte-code for expr_brackets:test()
 668[0]: return-address
 668[4]: ConstInt(val=1) -> integer
 673[8]: ConstInt(val=2) -> integer
 678[12]: AddInt(v1: integer, v2: integer) -> integer
 679[8]: VarInt(var[4]) -> integer
 682[12]: ConstInt(val=3) -> integer
 687[16]: EqInt(v1: integer, v2: integer) -> boolean
 688[9]: GenGotoFalseWord(jump=694, if_false: boolean)
 691[8]: GenGotoWord(jump=745)
 694[8]: Text()
 695[32]: ConstText(_value="Test failed ") -> text
 709[48]: AppendText(var[8], v1: text)
 712[32]: VarInt(var[4]) -> integer
 715[36]: ConstInt(val=0) -> integer
 720[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 727[32]: ConstText(_value=" != 3") -> text
 734[48]: AppendText(var[8], v1: text)
 737[32]: VarText(var[8]) -> text
 740[48]: GenFreeStack(value=16, discard=24)
 744[24]: GenPanic(message: text)
 745[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] ConstInt(val=1) -> 1[4]
  673:[8] ConstInt(val=2) -> 2[8]
  678:[12] AddInt(v1=1[4], v2=2[8]) -> 3[4]
  679:[8] VarInt(var[4]) -> 3[8]
  682:[12] ConstInt(val=3) -> 3[12]
  687:[16] EqInt(v1=3[8], v2=3[12]) -> true[8]
  688:[9] GenGotoFalseWord(jump=694, if_false=true[8])
  691:[8] GenGotoWord(jump=745)
  745:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
