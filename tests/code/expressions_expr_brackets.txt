Test code:
pub fn test() {
    test_value = {(1 + 2)};
    assert(
        test_value == 3,
        "Test failed {test_value} != 3"
    );
}

fn test {
  let test_value = {
    OpAddInt(1i32, 2i32);
  };
  if OpEqInt(test_value, 3i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 3");
    append_7;
  })};
}

byte-code for expr_brackets:test()
 664[0]: return-address
 664[4]: ConstInt(val=1) -> integer
 669[8]: ConstInt(val=2) -> integer
 674[12]: AddInt(v1: integer, v2: integer) -> integer
 675[8]: VarInt(var[4]) -> integer
 678[12]: ConstInt(val=3) -> integer
 683[16]: EqInt(v1: integer, v2: integer) -> boolean
 684[9]: GenGotoFalseWord(jump=690, if_false: boolean)
 687[8]: GenGotoWord(jump=741)
 690[8]: Text()
 691[32]: ConstText(_value="Test failed ") -> text
 705[48]: AppendText(var[8], v1: text)
 708[32]: VarInt(var[4]) -> integer
 711[36]: ConstInt(val=0) -> integer
 716[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 723[32]: ConstText(_value=" != 3") -> text
 730[48]: AppendText(var[8], v1: text)
 733[32]: VarText(var[8]) -> text
 736[48]: GenFreeStack(value=16, discard=24)
 740[24]: GenPanic(message: text)
 741[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] ConstInt(val=1) -> 1[4]
  669:[8] ConstInt(val=2) -> 2[8]
  674:[12] AddInt(v1=1[4], v2=2[8]) -> 3[4]
  675:[8] VarInt(var[4]) -> 3[8]
  678:[12] ConstInt(val=3) -> 3[12]
  683:[16] EqInt(v1=3[8], v2=3[12]) -> true[8]
  684:[9] GenGotoFalseWord(jump=690, if_false=true[8])
  687:[8] GenGotoWord(jump=741)
  741:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
