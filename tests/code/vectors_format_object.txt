Test code:
struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[
    Elm{a:1, b:2},
    Elm{a:12, b:13},
    Elm{a:4, b:5}
];
v[2].b=6;
"{v} sizeof {sizeof(Elm)}"};
    assert(
        test_value == "[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8",
        "Test failed {test_value} != \"[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8\""
    );
}

Type 13:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 14:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 15:vector<Elm>[4]:Vector(13)

fn test {
  let test_value = {
    let v = {
      let db_14 = OpDatabase(8i32, 14i32);
      let vec_13 = OpGetField(db_14, 4i32, 15i32);
      OpSetInt(db_14, 4i32, 0i32);
      let elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 1i32);
      OpSetInt(elm_12, 4i32, 2i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 12i32);
      OpSetInt(elm_12, 4i32, 13i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 4i32);
      OpSetInt(elm_12, 4i32, 5i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      vec_13;
    };
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    {
      let append_15 = "";
      OpFormatDatabase(append_15, v, 15i32, false);
      OpAppendText(append_15, " sizeof ");
      OpFormatInt(append_15, 8i32, 10i32, 0i32, 32i32, false, false);
      append_15;
    };
  };
  if OpEqText(test_value, "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") {null} else {OpGenPanic({
    let append_16 = "Test failed ";
    OpFormatText(append_16, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_16, " != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"");
    append_16;
  })};
}

byte-code for format_object:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: Database(size=8, db_tp=14) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 670[40]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 673[52]: GetField(v1: reference, fld=4) -> reference type=vector<Elm>[4]:Vector(13)[15]
 676[52]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 679[64]: ConstInt(val=0) -> integer
 684[68]: SetInt(v1: reference, fld=4, val: integer)
 687[52]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 690[64]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 695[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 698[76]: ConstInt(val=1) -> integer
 703[80]: SetInt(v1: reference, fld=0, val: integer)
 706[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 709[76]: ConstInt(val=2) -> integer
 714[80]: SetInt(v1: reference, fld=4, val: integer)
 717[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 720[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 723[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 728[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 731[76]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 736[76]: PutRef(var[52], value: reference)
 739[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 742[76]: ConstInt(val=12) -> integer
 747[80]: SetInt(v1: reference, fld=0, val: integer)
 750[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 753[76]: ConstInt(val=13) -> integer
 758[80]: SetInt(v1: reference, fld=4, val: integer)
 761[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 764[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 767[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 772[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 775[76]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 780[76]: PutRef(var[52], value: reference)
 783[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 786[76]: ConstInt(val=4) -> integer
 791[80]: SetInt(v1: reference, fld=0, val: integer)
 794[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 797[76]: ConstInt(val=5) -> integer
 802[80]: SetInt(v1: reference, fld=4, val: integer)
 805[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 808[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 811[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 816[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 819[76]: GenFreeStack(value=12, discard=36)
 823[40]: VarVector(var[28]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 826[52]: ConstInt(val=2) -> integer
 831[56]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 834[52]: ConstInt(val=6) -> integer
 839[56]: SetInt(v1: reference, fld=4, val: integer)
 842[40]: Text()
 843[64]: ConstText(_value="") -> text
 845[80]: AppendText(var[40], v1: text)
 848[64]: VarVector(var[28]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 851[76]: FormatDatabase(var[40], val: reference, db_tp=15, pretty=false)
 857[64]: ConstText(_value=" sizeof ") -> text
 867[80]: AppendText(var[40], v1: text)
 870[64]: ConstInt(val=8) -> integer
 875[68]: ConstInt(val=0) -> integer
 880[72]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 887[64]: VarText(var[40]) -> text
 890[80]: GenFreeStack(value=16, discard=24)
 894[56]: GenFreeStack(value=16, discard=12)
 898[44]: AppendText(var[4], v1: text)
 901[28]: VarText(var[4]) -> text
 904[44]: ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> text
 948[60]: EqText(v1: text, v2: text) -> boolean
 949[29]: GenGotoFalseWord(jump=955, if_false: boolean)
 952[28]: GenGotoWord(jump=1047)
 955[28]: Text()
 956[52]: ConstText(_value="Test failed ") -> text
 970[68]: AppendText(var[28], v1: text)
 973[52]: VarText(var[4]) -> text
 976[68]: ConstInt(val=0) -> integer
 981[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 986[52]: ConstText(_value=" != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"") -> text
1036[68]: AppendText(var[28], v1: text)
1039[52]: VarText(var[28]) -> text
1042[68]: GenFreeStack(value=16, discard=24)
1046[44]: GenPanic(message: text)
1047[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] Database(size=8, db_tp=14) -> ref(1,1,0)={}[28]
  670:[40] VarRef(var[28]) -> ref(1,1,0)={}[40]
  673:[52] GetField(v1=ref(1,1,0)[40], fld=4) -> ref(1,1,4)=[][40]
  676:[52] VarRef(var[28]) -> ref(1,1,0)={}[52]
  679:[64] ConstInt(val=0) -> 0[64]
  684:[68] SetInt(v1=ref(1,1,0)[52], fld=4, val=0[64])
  687:[52] VarVector(var[40]) -> ref(1,1,4)=[][52]
  690:[64] NewRecord(data=ref(1,1,4)[52], parent_tp=15, fld=65535) -> ref(1,9,8)[52]
  695:[64] VarRef(var[52]) -> ref(1,9,8)={}[64]
  698:[76] ConstInt(val=1) -> 1[76]
  703:[80] SetInt(v1=ref(1,9,8)[64], fld=0, val=1[76])
  706:[64] VarRef(var[52]) -> ref(1,9,8)={a:1}[64]
  709:[76] ConstInt(val=2) -> 2[76]
  714:[80] SetInt(v1=ref(1,9,8)[64], fld=4, val=2[76])
  717:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2}][64]
  720:[76] VarRef(var[52]) -> ref(1,9,8)={a:1,b:2}[76]
  723:[88] FinishRecord(data=ref(1,1,4)[64], rec=ref(1,9,8)[76], parent_tp=15, fld=65535)
  728:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2}][64]
  731:[76] NewRecord(data=ref(1,1,4)[64], parent_tp=15, fld=65535) -> ref(1,9,16)[64]
  736:[76] PutRef(var[52], value=ref(1,9,16)[64])
  739:[64] VarRef(var[52]) -> ref(1,9,16)={}[64]
  742:[76] ConstInt(val=12) -> 12[76]
  747:[80] SetInt(v1=ref(1,9,16)[64], fld=0, val=12[76])
  750:[64] VarRef(var[52]) -> ref(1,9,16)={a:12}[64]
  753:[76] ConstInt(val=13) -> 13[76]
  758:[80] SetInt(v1=ref(1,9,16)[64], fld=4, val=13[76])
  761:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][64]
  764:[76] VarRef(var[52]) -> ref(1,9,16)={a:12,b:13}[76]
  767:[88] FinishRecord(data=ref(1,1,4)[64], rec=ref(1,9,16)[76], parent_tp=15, fld=65535)
  772:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][64]
  775:[76] NewRecord(data=ref(1,1,4)[64], parent_tp=15, fld=65535) -> ref(1,9,24)[64]
  780:[76] PutRef(var[52], value=ref(1,9,24)[64])
  783:[64] VarRef(var[52]) -> ref(1,9,24)={}[64]
  786:[76] ConstInt(val=4) -> 4[76]
  791:[80] SetInt(v1=ref(1,9,24)[64], fld=0, val=4[76])
  794:[64] VarRef(var[52]) -> ref(1,9,24)={a:4}[64]
  797:[76] ConstInt(val=5) -> 5[76]
  802:[80] SetInt(v1=ref(1,9,24)[64], fld=4, val=5[76])
  805:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][64]
  808:[76] VarRef(var[52]) -> ref(1,9,24)={a:4,b:5}[76]
  811:[88] FinishRecord(data=ref(1,1,4)[64], rec=ref(1,9,24)[76], parent_tp=15, fld=65535)
  816:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][64]
  819:[76] GenFreeStack(value=12, discard=36)
  823:[40] VarVector(var[28]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][40]
  826:[52] ConstInt(val=2) -> 2[52]
  831:[56] GetVector(r=ref(1,1,4)=true[40], size=8, index=2[52]) -> ref(1,9,24)={a:4,b:5}[40]
  834:[52] ConstInt(val=6) -> 6[52]
  839:[56] SetInt(v1=ref(1,9,24)[40], fld=4, val=6[52])
  842:[40] Text()
  843:[64] ConstText(_value="") -> ""[64]
  845:[80] AppendText(var[40], v1=""[64])
  848:[64] VarVector(var[28]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][64]
  851:[76] FormatDatabase(var[40], val=ref(1,1,4)[64], db_tp=15, pretty=false)
  857:[64] ConstText(_value=" sizeof ") -> " sizeof "[64]
  867:[80] AppendText(var[40], v1=" sizeof "[64])
  870:[64] ConstInt(val=8) -> 8[64]
  875:[68] ConstInt(val=0) -> 0[68]
  880:[72] FormatInt(var[40], val=8[64], radix=10, width=0[68], token=32, plus=false, note=false)
  887:[64] VarText(var[40]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[64]
  890:[80] GenFreeStack(value=16, discard=24)
  894:[56] GenFreeStack(value=16, discard=12)
  898:[44] AppendText(var[4], v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[28])
  901:[28] VarText(var[4]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[28]
  904:[44] ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[44]
  948:[60] EqText(v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[28], v2="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[44]) -> true[28]
  949:[29] GenGotoFalseWord(jump=955, if_false=true[28])
  952:[28] GenGotoWord(jump=1047)
 1047:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
