struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[
    Elm{a:1, b:2},
    Elm{a:12, b:13},
    Elm{a:4, b:5}
];
v[2].b=6;
"{v} sizeof {sizeof(Elm)}"};
    assert(
        test_value == "[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8",
        "Test failed {test_value} != \"[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8\""
    );
}
Type 11:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 12:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 13:vector<Elm>[4]:Vector(11)

fn test {#1 block
  let __work_2 = "";
  let __work_1 = "";
  let test_value = {#2 block
    let v = {#3 vector
      let _db_3 = OpDatabase(8i32, 12i32);
      let _vec_2 = OpGetField(_db_3, 4i32, 65535i32);
      OpSetInt(_db_3, 4i32, 0i32);
      let _elm_1 = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#4 object
        OpSetInt(_elm_1, 0i32, 1i32);
        OpSetInt(_elm_1, 4i32, 2i32);
      }#4;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1 = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#5 object
        OpSetInt(_elm_1, 0i32, 12i32);
        OpSetInt(_elm_1, 4i32, 13i32);
      }#5;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1 = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#6 object
        OpSetInt(_elm_1, 0i32, 4i32);
        OpSetInt(_elm_1, 4i32, 5i32);
      }#6;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _vec_2;
    }#3;
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    {#7 formatting string
      OpClearText(__work_1);
      OpAppendText(__work_1, "");
      OpFormatDatabase(__work_1, v, 13i32, false);
      OpAppendText(__work_1, " sizeof ");
      OpFormatInt(__work_1, 8i32, 10i32, 0i32, 32i32, false, false);
      __work_1;
    }#7;
  }#2;
  if OpEqText(test_value, "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") null else OpGenPanic({#8 formatting string
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"");
    __work_2;
  }#8);
}#1

byte-code for format_object:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: Text()
 671[76]: Database(size=8, db_tp=12) -> reference#[] type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[12]
 676[88]: VarRef(var[76]) -> reference#[] type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[12]
 679[100]: GetField(v1: reference#[], fld=4) -> reference#[] type=Unknown type(65535)[65535]
 682[100]: VarRef(var[76]) -> reference#[] type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[12]
 685[112]: ConstInt(val=0) -> integer
 690[116]: SetInt(v1: reference#[], fld=4, val: integer)
 693[100]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 696[112]: NewRecord(data: reference#[], parent_tp=13, fld=65535) -> reference#[]
 701[112]: VarRef(var[100]) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 704[124]: ConstInt(val=1) -> integer
 709[128]: SetInt(v1: reference#[], fld=0, val: integer)
 712[112]: VarRef(var[100]) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 715[124]: ConstInt(val=2) -> integer
 720[128]: SetInt(v1: reference#[], fld=4, val: integer)
 723[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 726[124]: VarRef(var[100]) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 729[136]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=65535)
 734[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 737[124]: NewRecord(data: reference#[], parent_tp=13, fld=65535) -> reference#[]
 742[124]: PutRef(var[100], value: reference#[])
 745[112]: VarRef(var[100]) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 748[124]: ConstInt(val=12) -> integer
 753[128]: SetInt(v1: reference#[], fld=0, val: integer)
 756[112]: VarRef(var[100]) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 759[124]: ConstInt(val=13) -> integer
 764[128]: SetInt(v1: reference#[], fld=4, val: integer)
 767[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 770[124]: VarRef(var[100]) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 773[136]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=65535)
 778[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 781[124]: NewRecord(data: reference#[], parent_tp=13, fld=65535) -> reference#[]
 786[124]: PutRef(var[100], value: reference#[])
 789[112]: VarRef(var[100]) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 792[124]: ConstInt(val=4) -> integer
 797[128]: SetInt(v1: reference#[], fld=0, val: integer)
 800[112]: VarRef(var[100]) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 803[124]: ConstInt(val=5) -> integer
 808[128]: SetInt(v1: reference#[], fld=4, val: integer)
 811[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 814[124]: VarRef(var[100]) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 817[136]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=65535)
 822[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 825[124]: GenFreeStack(value=12, discard=36)
 829[88]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 832[100]: ConstInt(val=2) -> integer
 837[104]: GetVector(r: vector#[], size=8, index: integer) -> reference#[] type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 840[100]: ConstInt(val=6) -> integer
 845[104]: SetInt(v1: reference#[], fld=4, val: integer)
 848[88]: ClearText(var[28])
 851[88]: ConstText(_value="") -> text(false, [])
 853[104]: AppendText(var[28], v1: text(false, []))
 856[88]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 859[100]: FormatDatabase(var[28], val: reference#[], db_tp=13, pretty=false)
 865[88]: ConstText(_value=" sizeof ") -> text(false, [])
 875[104]: AppendText(var[28], v1: text(false, []))
 878[88]: ConstInt(val=8) -> integer
 883[92]: ConstInt(val=0) -> integer
 888[96]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 895[88]: VarText(var[28]) -> text(false, [])
 898[104]: GenFreeStack(value=16, discard=12)
 902[92]: AppendText(var[52], v1: text(false, []))
 905[76]: VarText(var[52]) -> text(false, [])
 908[92]: ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> text(false, [])
 952[108]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 953[77]: GenGotoFalseWord(jump=959, if_false: boolean)
 956[76]: GenGotoWord(jump=1049)
 959[76]: ClearText(var[4])
 962[76]: ConstText(_value="Test failed ") -> text(false, [])
 976[92]: AppendText(var[4], v1: text(false, []))
 979[76]: VarText(var[52]) -> text(false, [])
 982[92]: ConstInt(val=0) -> integer
 987[96]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 992[76]: ConstText(_value=" != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"") -> text(false, [])
1042[92]: AppendText(var[4], v1: text(false, []))
1045[76]: VarText(var[4]) -> text(false, [])
1048[92]: GenPanic(message: text(false, []))
1049[76]: GenReturn(ret=0, value=0, discard=76)

Execute test:
  668:[8] Text()
  669:[32] Text()
  670:[56] Text()
  671:[80] Database(size=8, db_tp=12) -> ref(1,1,0)={}[80]
  676:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  679:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)[92]
  682:[104] VarRef(var[80]) -> ref(1,1,0)={}[104]
  685:[116] ConstInt(val=0) -> 0[116]
  690:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  693:[104] VarVector(var[92]) -> ref(1,1,4)[104]
  696:[116] NewRecord(data=ref(1,1,4)[104], parent_tp=13, fld=65535) -> ref(1,9,8)[104]
  701:[116] VarRef(var[104]) -> ref(1,9,8)={}[116]
  704:[128] ConstInt(val=1) -> 1[128]
  709:[132] SetInt(v1=ref(1,9,8)[116], fld=0, val=1[128])
  712:[116] VarRef(var[104]) -> ref(1,9,8)={a:1}[116]
  715:[128] ConstInt(val=2) -> 2[128]
  720:[132] SetInt(v1=ref(1,9,8)[116], fld=4, val=2[128])
  723:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  726:[128] VarRef(var[104]) -> ref(1,9,8)={a:1,b:2}[128]
  729:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,8)[128], parent_tp=13, fld=65535)
  734:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  737:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=13, fld=65535) -> ref(1,9,16)[116]
  742:[128] PutRef(var[104], value=ref(1,9,16)[116])
  745:[116] VarRef(var[104]) -> ref(1,9,16)={}[116]
  748:[128] ConstInt(val=12) -> 12[128]
  753:[132] SetInt(v1=ref(1,9,16)[116], fld=0, val=12[128])
  756:[116] VarRef(var[104]) -> ref(1,9,16)={a:12}[116]
  759:[128] ConstInt(val=13) -> 13[128]
  764:[132] SetInt(v1=ref(1,9,16)[116], fld=4, val=13[128])
  767:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  770:[128] VarRef(var[104]) -> ref(1,9,16)={a:12,b:13}[128]
  773:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,16)[128], parent_tp=13, fld=65535)
  778:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  781:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=13, fld=65535) -> ref(1,9,24)[116]
  786:[128] PutRef(var[104], value=ref(1,9,24)[116])
  789:[116] VarRef(var[104]) -> ref(1,9,24)={}[116]
  792:[128] ConstInt(val=4) -> 4[128]
  797:[132] SetInt(v1=ref(1,9,24)[116], fld=0, val=4[128])
  800:[116] VarRef(var[104]) -> ref(1,9,24)={a:4}[116]
  803:[128] ConstInt(val=5) -> 5[128]
  808:[132] SetInt(v1=ref(1,9,24)[116], fld=4, val=5[128])
  811:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  814:[128] VarRef(var[104]) -> ref(1,9,24)={a:4,b:5}[128]
  817:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,24)[128], parent_tp=13, fld=65535)
  822:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  825:[128] GenFreeStack(value=12, discard=36)
  829:[92] VarVector(var[80]) -> ref(1,1,4)[92]
  832:[104] ConstInt(val=2) -> 2[104]
  837:[108] GetVector(r=ref(1,1,4)=true[92], size=8, index=2[104]) -> ref(1,9,24)={a:4,b:5}[92]
  840:[104] ConstInt(val=6) -> 6[104]
  845:[108] SetInt(v1=ref(1,9,24)[92], fld=4, val=6[104])
  848:[92] ClearText(var[32])
  851:[92] ConstText(_value="") -> ""[92]
  853:[108] AppendText(var[32], v1=""[92])
  856:[92] VarVector(var[80]) -> ref(1,1,4)[92]
  859:[104] FormatDatabase(var[32], val=ref(1,1,4)[92], db_tp=13, pretty=false)
  865:[92] ConstText(_value=" sizeof ") -> " sizeof "[92]
  875:[108] AppendText(var[32], v1=" sizeof "[92])
  878:[92] ConstInt(val=8) -> 8[92]
  883:[96] ConstInt(val=0) -> 0[96]
  888:[100] FormatInt(var[32], val=8[92], radix=10, width=0[96], token=32, plus=false, note=false)
  895:[92] VarText(var[32]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[92]
  898:[108] GenFreeStack(value=16, discard=12)
  902:[96] AppendText(var[56], v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[80])
  905:[80] VarText(var[56]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[80]
  908:[96] ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[96]
  952:[112] EqText(v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[80], v2="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[96]) -> true[80]
  953:[81] GenGotoFalseWord(jump=959, if_false=true[80])
  956:[80] GenGotoWord(jump=1049)
 1049:[80] GenReturn(ret=4294967295[4], value=0, discard=76)
Finished
