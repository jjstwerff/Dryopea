struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[
    Elm{a:1, b:2},
    Elm{a:12, b:13},
    Elm{a:4, b:5}
];
v[2].b=6;
"{v} sizeof {sizeof(Elm)}"};
    assert(
        test_value == "[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8",
        "Test failed {test_value} != \"[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8\""
    );
}
Type 11:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 12:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 13:vector<Elm>[4]:Vector(11)

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    v:vector<Elm>#[] = {#3 vector
      _db_3:main_vector<Elm> = OpDatabase(8i32, 12i32);
      _vec_2:vector<Elm>#[] = OpGetField(_db_3, 4i32, 65535i32);
      OpSetInt(_db_3, 4i32, 0i32);
      _elm_1:Elm = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#4 object
        OpSetInt(_elm_1, 0i32, 1i32);
        OpSetInt(_elm_1, 4i32, 2i32);
      }#4;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1:Elm = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#5 object
        OpSetInt(_elm_1, 0i32, 12i32);
        OpSetInt(_elm_1, 4i32, 13i32);
      }#5;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1:Elm = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#6 object
        OpSetInt(_elm_1, 0i32, 4i32);
        OpSetInt(_elm_1, 4i32, 5i32);
      }#6;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _vec_2;
    }#3:vector<Elm>#[];
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    {#7 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 13i32, false);
      OpAppendText(__work_1, " sizeof ");
      OpFormatInt(__work_1, 8i32, 10i32, 0i32, 32i32, false, false);
      __work_1;
    }#7:text;
  }#2:text;
  if OpEqText(test_value, "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") null else OpPanic({#8 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"");
    __work_2;
  }#8:text);
}#1

byte-code for format_object:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Text()
 677[52]: Text()
 678[76]: Database(size=8, db_tp=12) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[12]
 683[88]: VarRef(var[76]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[12]
 686[100]: GetField(v1: reference, fld=4) -> reference type=Unknown type(65535)[65535]
 689[100]: VarRef(var[76]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[12]
 692[112]: ConstInt(val=0) -> integer
 697[116]: SetInt(v1: reference, fld=4, val: integer)
 700[100]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 703[112]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 708[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 711[124]: ConstInt(val=1) -> integer
 716[128]: SetInt(v1: reference, fld=0, val: integer)
 719[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 722[124]: ConstInt(val=2) -> integer
 727[128]: SetInt(v1: reference, fld=4, val: integer)
 730[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 733[124]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 736[136]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 741[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 744[124]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 749[124]: PutRef(var[100], value: reference)
 752[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 755[124]: ConstInt(val=12) -> integer
 760[128]: SetInt(v1: reference, fld=0, val: integer)
 763[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 766[124]: ConstInt(val=13) -> integer
 771[128]: SetInt(v1: reference, fld=4, val: integer)
 774[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 777[124]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 780[136]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 785[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 788[124]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 793[124]: PutRef(var[100], value: reference)
 796[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 799[124]: ConstInt(val=4) -> integer
 804[128]: SetInt(v1: reference, fld=0, val: integer)
 807[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 810[124]: ConstInt(val=5) -> integer
 815[128]: SetInt(v1: reference, fld=4, val: integer)
 818[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 821[124]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 824[136]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 829[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 832[124]: FreeStack(value=12, discard=36) type=Pixel[3]:{r:byte[0], g:byte[1], b:byte[2]}[6]
 836[88]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 839[100]: ConstInt(val=2) -> integer
 844[104]: GetVector(r: vector#[], size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 847[100]: ConstInt(val=6) -> integer
 852[104]: SetInt(v1: reference, fld=4, val: integer)
 855[88]: ClearText(var[28])
 858[88]: ConstText(_value="") -> text
 860[104]: AppendText(var[28], v1: text)
 863[88]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 866[100]: FormatDatabase(var[28], val: reference, db_tp=13, pretty=false)
 872[88]: ConstText(_value=" sizeof ") -> text
 882[104]: AppendText(var[28], v1: text)
 885[88]: ConstInt(val=8) -> integer
 890[92]: ConstInt(val=0) -> integer
 895[96]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 902[88]: VarText(var[28]) -> text
 905[104]: FreeStack(value=16, discard=12) type=text[4]:Base[5]
 909[92]: AppendText(var[52], v1: text)
 912[76]: VarText(var[52]) -> text
 915[92]: ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> text
 959[108]: EqText(v1: text, v2: text) -> boolean
 960[77]: GotoFalseWord(jump=966, if_false: boolean)
 963[76]: GotoWord(jump=1056)
 966[76]: ClearText(var[4])
 969[76]: ConstText(_value="Test failed ") -> text
 983[92]: AppendText(var[4], v1: text)
 986[76]: VarText(var[52]) -> text
 989[92]: ConstInt(val=0) -> integer
 994[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 999[76]: ConstText(_value=" != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"") -> text
1049[92]: AppendText(var[4], v1: text)
1052[76]: VarText(var[4]) -> text
1055[92]: Panic(message: text)
1056[76]: Return(ret=0, value=0, discard=76)

Execute test:
  675:[8] Text()
  676:[32] Text()
  677:[56] Text()
  678:[80] Database(size=8, db_tp=12) -> ref(1,1,0)={}[80]
  683:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  686:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)[92]
  689:[104] VarRef(var[80]) -> ref(1,1,0)={}[104]
  692:[116] ConstInt(val=0) -> 0[116]
  697:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  700:[104] VarVector(var[92]) -> ref(1,1,4)[104]
  703:[116] NewRecord(data=ref(1,1,4)[104], parent_tp=13, fld=65535) -> ref(1,9,8)[104]
  708:[116] VarRef(var[104]) -> ref(1,9,8)={}[116]
  711:[128] ConstInt(val=1) -> 1[128]
  716:[132] SetInt(v1=ref(1,9,8)[116], fld=0, val=1[128])
  719:[116] VarRef(var[104]) -> ref(1,9,8)={a:1}[116]
  722:[128] ConstInt(val=2) -> 2[128]
  727:[132] SetInt(v1=ref(1,9,8)[116], fld=4, val=2[128])
  730:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  733:[128] VarRef(var[104]) -> ref(1,9,8)={a:1,b:2}[128]
  736:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,8)[128], parent_tp=13, fld=65535)
  741:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  744:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=13, fld=65535) -> ref(1,9,16)[116]
  749:[128] PutRef(var[104], value=ref(1,9,16)[116])
  752:[116] VarRef(var[104]) -> ref(1,9,16)={}[116]
  755:[128] ConstInt(val=12) -> 12[128]
  760:[132] SetInt(v1=ref(1,9,16)[116], fld=0, val=12[128])
  763:[116] VarRef(var[104]) -> ref(1,9,16)={a:12}[116]
  766:[128] ConstInt(val=13) -> 13[128]
  771:[132] SetInt(v1=ref(1,9,16)[116], fld=4, val=13[128])
  774:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  777:[128] VarRef(var[104]) -> ref(1,9,16)={a:12,b:13}[128]
  780:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,16)[128], parent_tp=13, fld=65535)
  785:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  788:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=13, fld=65535) -> ref(1,9,24)[116]
  793:[128] PutRef(var[104], value=ref(1,9,24)[116])
  796:[116] VarRef(var[104]) -> ref(1,9,24)={}[116]
  799:[128] ConstInt(val=4) -> 4[128]
  804:[132] SetInt(v1=ref(1,9,24)[116], fld=0, val=4[128])
  807:[116] VarRef(var[104]) -> ref(1,9,24)={a:4}[116]
  810:[128] ConstInt(val=5) -> 5[128]
  815:[132] SetInt(v1=ref(1,9,24)[116], fld=4, val=5[128])
  818:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  821:[128] VarRef(var[104]) -> ref(1,9,24)={a:4,b:5}[128]
  824:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,24)[128], parent_tp=13, fld=65535)
  829:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  832:[128] FreeStack(value=12, discard=36)
  836:[92] VarVector(var[80]) -> ref(1,1,4)[92]
  839:[104] ConstInt(val=2) -> 2[104]
  844:[108] GetVector(r=ref(1,1,4)=true[92], size=8, index=2[104]) -> ref(1,9,24)={a:4,b:5}[92]
  847:[104] ConstInt(val=6) -> 6[104]
  852:[108] SetInt(v1=ref(1,9,24)[92], fld=4, val=6[104])
  855:[92] ClearText(var[32])
  858:[92] ConstText(_value="") -> ""[92]
  860:[108] AppendText(var[32], v1=""[92])
  863:[92] VarVector(var[80]) -> ref(1,1,4)[92]
  866:[104] FormatDatabase(var[32], val=ref(1,1,4)[92], db_tp=13, pretty=false)
  872:[92] ConstText(_value=" sizeof ") -> " sizeof "[92]
  882:[108] AppendText(var[32], v1=" sizeof "[92])
  885:[92] ConstInt(val=8) -> 8[92]
  890:[96] ConstInt(val=0) -> 0[96]
  895:[100] FormatInt(var[32], val=8[92], radix=10, width=0[96], token=32, plus=false, note=false)
  902:[92] VarText(var[32]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[92]
  905:[108] FreeStack(value=16, discard=12)
  909:[96] AppendText(var[56], v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[80])
  912:[80] VarText(var[56]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[80]
  915:[96] ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[96]
  959:[112] EqText(v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[80], v2="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[96]) -> true[80]
  960:[81] GotoFalseWord(jump=966, if_false=true[80])
  963:[80] GotoWord(jump=1056)
 1056:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
