Test code:
struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[
    Elm{a:1, b:2},
    Elm{a:12, b:13},
    Elm{a:4, b:5}
];
v[2].b=6;
"{v} sizeof {sizeof(Elm)}"};
    assert(
        test_value == "[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8",
        "Test failed {test_value} != \"[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8\""
    );
}

Type 13:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 14:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 15:vector<Elm>[4]:Vector(13)

fn test {
  let __work_5 = "";
  let __work_6 = "";
  let test_value = {
    let v = {
      let db_12 = OpDatabase(8i32, 14i32);
      let vec_11 = OpGetField(db_12, 4i32, 15i32);
      OpSetInt(db_12, 4i32, 0i32);
      let elm_10 = OpNewRecord(vec_11, 15i32, 65535i32);
      OpSetInt(elm_10, 0i32, 1i32);
      OpSetInt(elm_10, 4i32, 2i32);
      OpFinishRecord(vec_11, elm_10, 15i32, 65535i32);
      elm_10 = OpNewRecord(vec_11, 15i32, 65535i32);
      OpSetInt(elm_10, 0i32, 12i32);
      OpSetInt(elm_10, 4i32, 13i32);
      OpFinishRecord(vec_11, elm_10, 15i32, 65535i32);
      elm_10 = OpNewRecord(vec_11, 15i32, 65535i32);
      OpSetInt(elm_10, 0i32, 4i32);
      OpSetInt(elm_10, 4i32, 5i32);
      OpFinishRecord(vec_11, elm_10, 15i32, 65535i32);
      vec_11;
    };
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    {
      OpClearText(__work_5);
      OpAppendText(__work_5, "");
      OpFormatDatabase(__work_5, v, 15i32, false);
      OpAppendText(__work_5, " sizeof ");
      OpFormatInt(__work_5, 8i32, 10i32, 0i32, 32i32, false, false);
      __work_5;
    };
  };
  if OpEqText(test_value, "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") {null} else {OpGenPanic({
    OpClearText(__work_6);
    OpAppendText(__work_6, "Test failed ");
    OpFormatText(__work_6, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_6, " != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"");
    __work_6;
  })};
}

byte-code for format_object:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: Text()
 675[52]: ConstText(_value="") -> text(false)
 677[68]: AppendText(var[28], v1: text(false))
 680[52]: Text()
 681[76]: Database(size=8, db_tp=14) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 686[88]: VarRef(var[76]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 689[100]: GetField(v1: reference, fld=4) -> reference type=vector<Elm>[4]:Vector(13)[15]
 692[100]: VarRef(var[76]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 695[112]: ConstInt(val=0) -> integer
 700[116]: SetInt(v1: reference, fld=4, val: integer)
 703[100]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 706[112]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 711[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 714[124]: ConstInt(val=1) -> integer
 719[128]: SetInt(v1: reference, fld=0, val: integer)
 722[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 725[124]: ConstInt(val=2) -> integer
 730[128]: SetInt(v1: reference, fld=4, val: integer)
 733[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 736[124]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 739[136]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 744[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 747[124]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 752[124]: PutRef(var[100], value: reference)
 755[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 758[124]: ConstInt(val=12) -> integer
 763[128]: SetInt(v1: reference, fld=0, val: integer)
 766[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 769[124]: ConstInt(val=13) -> integer
 774[128]: SetInt(v1: reference, fld=4, val: integer)
 777[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 780[124]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 783[136]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 788[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 791[124]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 796[124]: PutRef(var[100], value: reference)
 799[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 802[124]: ConstInt(val=4) -> integer
 807[128]: SetInt(v1: reference, fld=0, val: integer)
 810[112]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 813[124]: ConstInt(val=5) -> integer
 818[128]: SetInt(v1: reference, fld=4, val: integer)
 821[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 824[124]: VarRef(var[100]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 827[136]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 832[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 835[124]: GenFreeStack(value=12, discard=36)
 839[88]: VarVector(var[76]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 842[100]: ConstInt(val=2) -> integer
 847[104]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 850[100]: ConstInt(val=6) -> integer
 855[104]: SetInt(v1: reference, fld=4, val: integer)
 858[88]: ClearText(var[4])
 861[88]: ConstText(_value="") -> text(false)
 863[104]: AppendText(var[4], v1: text(false))
 866[88]: VarVector(var[76]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 869[100]: FormatDatabase(var[4], val: reference, db_tp=15, pretty=false)
 875[88]: ConstText(_value=" sizeof ") -> text(false)
 885[104]: AppendText(var[4], v1: text(false))
 888[88]: ConstInt(val=8) -> integer
 893[92]: ConstInt(val=0) -> integer
 898[96]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 905[88]: VarText(var[4]) -> text(false)
 908[104]: GenFreeStack(value=16, discard=12)
 912[92]: AppendText(var[52], v1: text(false))
 915[76]: VarText(var[52]) -> text(false)
 918[92]: ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> text(false)
 962[108]: EqText(v1: text(false), v2: text(false)) -> boolean
 963[77]: GenGotoFalseWord(jump=969, if_false: boolean)
 966[76]: GenGotoWord(jump=1059)
 969[76]: ClearText(var[28])
 972[76]: ConstText(_value="Test failed ") -> text(false)
 986[92]: AppendText(var[28], v1: text(false))
 989[76]: VarText(var[52]) -> text(false)
 992[92]: ConstInt(val=0) -> integer
 997[96]: FormatText(var[28], val: text(false), width: integer, dir=-1, token=32)
1002[76]: ConstText(_value=" != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"") -> text(false)
1052[92]: AppendText(var[28], v1: text(false))
1055[76]: VarText(var[28]) -> text(false)
1058[92]: GenPanic(message: text(false))
1059[76]: GenReturn(ret=0, value=0, discard=76)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] Text()
  675:[56] ConstText(_value="") -> ""[56]
  677:[72] AppendText(var[32], v1=""[56])
  680:[56] Text()
  681:[80] Database(size=8, db_tp=14) -> ref(1,1,0)={}[80]
  686:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  689:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[][92]
  692:[104] VarRef(var[80]) -> ref(1,1,0)={}[104]
  695:[116] ConstInt(val=0) -> 0[116]
  700:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  703:[104] VarVector(var[92]) -> ref(1,1,4)=[][104]
  706:[116] NewRecord(data=ref(1,1,4)[104], parent_tp=15, fld=65535) -> ref(1,9,8)[104]
  711:[116] VarRef(var[104]) -> ref(1,9,8)={}[116]
  714:[128] ConstInt(val=1) -> 1[128]
  719:[132] SetInt(v1=ref(1,9,8)[116], fld=0, val=1[128])
  722:[116] VarRef(var[104]) -> ref(1,9,8)={a:1}[116]
  725:[128] ConstInt(val=2) -> 2[128]
  730:[132] SetInt(v1=ref(1,9,8)[116], fld=4, val=2[128])
  733:[116] VarVector(var[92]) -> ref(1,1,4)=[{a:1,b:2}][116]
  736:[128] VarRef(var[104]) -> ref(1,9,8)={a:1,b:2}[128]
  739:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,8)[128], parent_tp=15, fld=65535)
  744:[116] VarVector(var[92]) -> ref(1,1,4)=[{a:1,b:2}][116]
  747:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=15, fld=65535) -> ref(1,9,16)[116]
  752:[128] PutRef(var[104], value=ref(1,9,16)[116])
  755:[116] VarRef(var[104]) -> ref(1,9,16)={}[116]
  758:[128] ConstInt(val=12) -> 12[128]
  763:[132] SetInt(v1=ref(1,9,16)[116], fld=0, val=12[128])
  766:[116] VarRef(var[104]) -> ref(1,9,16)={a:12}[116]
  769:[128] ConstInt(val=13) -> 13[128]
  774:[132] SetInt(v1=ref(1,9,16)[116], fld=4, val=13[128])
  777:[116] VarVector(var[92]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][116]
  780:[128] VarRef(var[104]) -> ref(1,9,16)={a:12,b:13}[128]
  783:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,16)[128], parent_tp=15, fld=65535)
  788:[116] VarVector(var[92]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][116]
  791:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=15, fld=65535) -> ref(1,9,24)[116]
  796:[128] PutRef(var[104], value=ref(1,9,24)[116])
  799:[116] VarRef(var[104]) -> ref(1,9,24)={}[116]
  802:[128] ConstInt(val=4) -> 4[128]
  807:[132] SetInt(v1=ref(1,9,24)[116], fld=0, val=4[128])
  810:[116] VarRef(var[104]) -> ref(1,9,24)={a:4}[116]
  813:[128] ConstInt(val=5) -> 5[128]
  818:[132] SetInt(v1=ref(1,9,24)[116], fld=4, val=5[128])
  821:[116] VarVector(var[92]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][116]
  824:[128] VarRef(var[104]) -> ref(1,9,24)={a:4,b:5}[128]
  827:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,24)[128], parent_tp=15, fld=65535)
  832:[116] VarVector(var[92]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][116]
  835:[128] GenFreeStack(value=12, discard=36)
  839:[92] VarVector(var[80]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][92]
  842:[104] ConstInt(val=2) -> 2[104]
  847:[108] GetVector(r=ref(1,1,4)=true[92], size=8, index=2[104]) -> ref(1,9,24)={a:4,b:5}[92]
  850:[104] ConstInt(val=6) -> 6[104]
  855:[108] SetInt(v1=ref(1,9,24)[92], fld=4, val=6[104])
  858:[92] ClearText(var[8])
  861:[92] ConstText(_value="") -> ""[92]
  863:[108] AppendText(var[8], v1=""[92])
  866:[92] VarVector(var[80]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][92]
  869:[104] FormatDatabase(var[8], val=ref(1,1,4)[92], db_tp=15, pretty=false)
  875:[92] ConstText(_value=" sizeof ") -> " sizeof "[92]
  885:[108] AppendText(var[8], v1=" sizeof "[92])
  888:[92] ConstInt(val=8) -> 8[92]
  893:[96] ConstInt(val=0) -> 0[96]
  898:[100] FormatInt(var[8], val=8[92], radix=10, width=0[96], token=32, plus=false, note=false)
  905:[92] VarText(var[8]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[92]
  908:[108] GenFreeStack(value=16, discard=12)
  912:[96] AppendText(var[56], v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[80])
  915:[80] VarText(var[56]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[80]
  918:[96] ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[96]
  962:[112] EqText(v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[80], v2="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[96]) -> true[80]
  963:[81] GenGotoFalseWord(jump=969, if_false=true[80])
  966:[80] GenGotoWord(jump=1059)
 1059:[80] GenReturn(ret=4294967295[4], value=0, discard=76)
Finished
