Test code:
struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[
    Elm{a:1, b:2},
    Elm{a:12, b:13},
    Elm{a:4, b:5}
];
v[2].b=6;
"{v} sizeof {sizeof(Elm)}"};
    assert(
        test_value == "[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8",
        "Test failed {test_value} != \"[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8\""
    );
}

Type 13:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 14:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 15:vector<Elm>[4]:Vector(13)

fn test {
  let test_value = {
    let v = {
      let db_14 = OpDatabase(8i32, 14i32);
      let vec_13 = OpGetField(db_14, 4i32, 15i32);
      OpSetInt(db_14, 4i32, 0i32);
      let elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 1i32);
      OpSetInt(elm_12, 4i32, 2i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 12i32);
      OpSetInt(elm_12, 4i32, 13i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 4i32);
      OpSetInt(elm_12, 4i32, 5i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      vec_13;
    };
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    {
      let append_15 = "";
      OpFormatDatabase(append_15, v, 15i32, false);
      OpAppendText(append_15, " sizeof ");
      OpFormatInt(append_15, 8i32, 10i32, 0i32, 32i32, false, false);
      append_15;
    };
  };
  if OpEqText(test_value, "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") {null} else {OpGenPanic({
    let append_16 = "Test failed ";
    OpFormatText(append_16, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_16, " != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"");
    append_16;
  })};
}

byte-code for format_object:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Database(size=8, db_tp=14) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 674[40]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 677[52]: GetField(v1: reference, fld=4) -> reference type=vector<Elm>[4]:Vector(13)[15]
 680[52]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 683[64]: ConstInt(val=0) -> integer
 688[68]: SetInt(v1: reference, fld=4, val: integer)
 691[52]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 694[64]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 699[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 702[76]: ConstInt(val=1) -> integer
 707[80]: SetInt(v1: reference, fld=0, val: integer)
 710[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 713[76]: ConstInt(val=2) -> integer
 718[80]: SetInt(v1: reference, fld=4, val: integer)
 721[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 724[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 727[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 732[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 735[76]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 740[76]: PutRef(var[52], value: reference)
 743[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 746[76]: ConstInt(val=12) -> integer
 751[80]: SetInt(v1: reference, fld=0, val: integer)
 754[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 757[76]: ConstInt(val=13) -> integer
 762[80]: SetInt(v1: reference, fld=4, val: integer)
 765[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 768[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 771[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 776[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 779[76]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 784[76]: PutRef(var[52], value: reference)
 787[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 790[76]: ConstInt(val=4) -> integer
 795[80]: SetInt(v1: reference, fld=0, val: integer)
 798[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 801[76]: ConstInt(val=5) -> integer
 806[80]: SetInt(v1: reference, fld=4, val: integer)
 809[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 812[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 815[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 820[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 823[76]: GenFreeStack(value=12, discard=36)
 827[40]: VarVector(var[28]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 830[52]: ConstInt(val=2) -> integer
 835[56]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 838[52]: ConstInt(val=6) -> integer
 843[56]: SetInt(v1: reference, fld=4, val: integer)
 846[40]: Text()
 847[64]: ConstText(_value="") -> text
 849[80]: AppendText(var[40], v1: text)
 852[64]: VarVector(var[28]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 855[76]: FormatDatabase(var[40], val: reference, db_tp=15, pretty=false)
 861[64]: ConstText(_value=" sizeof ") -> text
 871[80]: AppendText(var[40], v1: text)
 874[64]: ConstInt(val=8) -> integer
 879[68]: ConstInt(val=0) -> integer
 884[72]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 891[64]: VarText(var[40]) -> text
 894[80]: GenFreeStack(value=16, discard=24)
 898[56]: GenFreeStack(value=16, discard=12)
 902[44]: AppendText(var[4], v1: text)
 905[28]: VarText(var[4]) -> text
 908[44]: ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> text
 952[60]: EqText(v1: text, v2: text) -> boolean
 953[29]: GenGotoFalseWord(jump=959, if_false: boolean)
 956[28]: GenGotoWord(jump=1051)
 959[28]: Text()
 960[52]: ConstText(_value="Test failed ") -> text
 974[68]: AppendText(var[28], v1: text)
 977[52]: VarText(var[4]) -> text
 980[68]: ConstInt(val=0) -> integer
 985[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 990[52]: ConstText(_value=" != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"") -> text
1040[68]: AppendText(var[28], v1: text)
1043[52]: VarText(var[28]) -> text
1046[68]: GenFreeStack(value=16, discard=24)
1050[44]: GenPanic(message: text)
1051[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Database(size=8, db_tp=14) -> ref(1,1,0)={}[28]
  674:[40] VarRef(var[28]) -> ref(1,1,0)={}[40]
  677:[52] GetField(v1=ref(1,1,0)[40], fld=4) -> ref(1,1,4)=[][40]
  680:[52] VarRef(var[28]) -> ref(1,1,0)={}[52]
  683:[64] ConstInt(val=0) -> 0[64]
  688:[68] SetInt(v1=ref(1,1,0)[52], fld=4, val=0[64])
  691:[52] VarVector(var[40]) -> ref(1,1,4)=[][52]
  694:[64] NewRecord(data=ref(1,1,4)[52], parent_tp=15, fld=65535) -> ref(1,9,8)[52]
  699:[64] VarRef(var[52]) -> ref(1,9,8)={}[64]
  702:[76] ConstInt(val=1) -> 1[76]
  707:[80] SetInt(v1=ref(1,9,8)[64], fld=0, val=1[76])
  710:[64] VarRef(var[52]) -> ref(1,9,8)={a:1}[64]
  713:[76] ConstInt(val=2) -> 2[76]
  718:[80] SetInt(v1=ref(1,9,8)[64], fld=4, val=2[76])
  721:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2}][64]
  724:[76] VarRef(var[52]) -> ref(1,9,8)={a:1,b:2}[76]
  727:[88] FinishRecord(data=ref(1,1,4)[64], rec=ref(1,9,8)[76], parent_tp=15, fld=65535)
  732:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2}][64]
  735:[76] NewRecord(data=ref(1,1,4)[64], parent_tp=15, fld=65535) -> ref(1,9,16)[64]
  740:[76] PutRef(var[52], value=ref(1,9,16)[64])
  743:[64] VarRef(var[52]) -> ref(1,9,16)={}[64]
  746:[76] ConstInt(val=12) -> 12[76]
  751:[80] SetInt(v1=ref(1,9,16)[64], fld=0, val=12[76])
  754:[64] VarRef(var[52]) -> ref(1,9,16)={a:12}[64]
  757:[76] ConstInt(val=13) -> 13[76]
  762:[80] SetInt(v1=ref(1,9,16)[64], fld=4, val=13[76])
  765:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][64]
  768:[76] VarRef(var[52]) -> ref(1,9,16)={a:12,b:13}[76]
  771:[88] FinishRecord(data=ref(1,1,4)[64], rec=ref(1,9,16)[76], parent_tp=15, fld=65535)
  776:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][64]
  779:[76] NewRecord(data=ref(1,1,4)[64], parent_tp=15, fld=65535) -> ref(1,9,24)[64]
  784:[76] PutRef(var[52], value=ref(1,9,24)[64])
  787:[64] VarRef(var[52]) -> ref(1,9,24)={}[64]
  790:[76] ConstInt(val=4) -> 4[76]
  795:[80] SetInt(v1=ref(1,9,24)[64], fld=0, val=4[76])
  798:[64] VarRef(var[52]) -> ref(1,9,24)={a:4}[64]
  801:[76] ConstInt(val=5) -> 5[76]
  806:[80] SetInt(v1=ref(1,9,24)[64], fld=4, val=5[76])
  809:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][64]
  812:[76] VarRef(var[52]) -> ref(1,9,24)={a:4,b:5}[76]
  815:[88] FinishRecord(data=ref(1,1,4)[64], rec=ref(1,9,24)[76], parent_tp=15, fld=65535)
  820:[64] VarVector(var[40]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][64]
  823:[76] GenFreeStack(value=12, discard=36)
  827:[40] VarVector(var[28]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][40]
  830:[52] ConstInt(val=2) -> 2[52]
  835:[56] GetVector(r=ref(1,1,4)=true[40], size=8, index=2[52]) -> ref(1,9,24)={a:4,b:5}[40]
  838:[52] ConstInt(val=6) -> 6[52]
  843:[56] SetInt(v1=ref(1,9,24)[40], fld=4, val=6[52])
  846:[40] Text()
  847:[64] ConstText(_value="") -> ""[64]
  849:[80] AppendText(var[40], v1=""[64])
  852:[64] VarVector(var[28]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][64]
  855:[76] FormatDatabase(var[40], val=ref(1,1,4)[64], db_tp=15, pretty=false)
  861:[64] ConstText(_value=" sizeof ") -> " sizeof "[64]
  871:[80] AppendText(var[40], v1=" sizeof "[64])
  874:[64] ConstInt(val=8) -> 8[64]
  879:[68] ConstInt(val=0) -> 0[68]
  884:[72] FormatInt(var[40], val=8[64], radix=10, width=0[68], token=32, plus=false, note=false)
  891:[64] VarText(var[40]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[64]
  894:[80] GenFreeStack(value=16, discard=24)
  898:[56] GenFreeStack(value=16, discard=12)
  902:[44] AppendText(var[4], v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[28])
  905:[28] VarText(var[4]) -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[28]
  908:[44] ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[44]
  952:[60] EqText(v1="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[28], v2="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"[44]) -> true[28]
  953:[29] GenGotoFalseWord(jump=959, if_false=true[28])
  956:[28] GenGotoWord(jump=1051)
 1051:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
