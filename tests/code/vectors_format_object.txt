struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[
    Elm{a:1, b:2},
    Elm{a:12, b:13},
    Elm{a:4, b:5}
];
v[2].b=6;
"{v} sizeof {sizeof(Elm)}"};
    assert(
        test_value == "[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8",
        "Test failed {test_value} != \"[{{a:1,b:2}},{{a:12,b:13}},{{a:4,b:6}}] sizeof 8\""
    );
}
Type 14:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 15:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 16:vector<Elm>[4]:Vector(14)

fn test() {#1 block
  __ref_1:ref(main_vector<Elm>) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    v:vector<ref(Elm)["_elm_2"]>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 15i32);
      _vec_1:vector<ref(Elm)["_elm_2"]>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(Elm)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      {#4 object
        OpSetInt(_elm_2, 0i32, 1i32);
        OpSetInt(_elm_2, 4i32, 2i32);
      }#4;
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _elm_2:ref(Elm)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      {#5 object
        OpSetInt(_elm_2, 0i32, 12i32);
        OpSetInt(_elm_2, 4i32, 13i32);
      }#5;
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _elm_2:ref(Elm)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      {#6 object
        OpSetInt(_elm_2, 0i32, 4i32);
        OpSetInt(_elm_2, 4i32, 5i32);
      }#6;
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _vec_1;
    }#3:vector<ref(Elm)["_elm_2"]>["__ref_1"];
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    {#7 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 16i32, false);
      OpAppendText(__work_1, " sizeof ");
      OpFormatInt(__work_1, 8i32, 10i32, 0i32, 32i32, false, false);
      __work_1;
    }#7:text;
  }#2:text;
  if OpEqText(test_value, "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") null else OpPanic({#8 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"");
    __work_2;
  }#8:text);
}#1

byte-code for format_object:test() [1073]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<Elm>) in 1
   1[16]: Text() var=__work_2[16]:text in 1
   2[40]: Text() var=__work_1[40]:text in 1
   3[64]: Text() var=test_value[64]:text in 1
   4[88]: Database(var[4], db_tp=15) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[15] var=v[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
   9[88]: VarRef(var[4]) -> ref(reference) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[15] var=__ref_1[4]:ref(main_vector<Elm>) in 1
  12[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  15[100]: VarRef(var[4]) -> ref(reference) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[15] var=__ref_1[4]:ref(main_vector<Elm>) in 1
  18[112]: ConstInt(val=0) -> integer
  23[116]: SetInt(v1: ref(reference), fld=4, val: integer)
  26[100]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
  29[112]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
  34[112]: VarRef(var[100]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[100]:ref(Elm)["__ref_1"] in 3
  37[124]: ConstInt(val=1) -> integer
  42[128]: SetInt(v1: ref(reference), fld=0, val: integer)
  45[112]: VarRef(var[100]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[100]:ref(Elm)["__ref_1"] in 3
  48[124]: ConstInt(val=2) -> integer
  53[128]: SetInt(v1: ref(reference), fld=4, val: integer)
  56[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
  59[124]: VarRef(var[100]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[100]:ref(Elm)["__ref_1"] in 3
  62[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
  67[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
  70[124]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
  75[124]: PutRef(var[100], value: ref(reference))
  78[112]: VarRef(var[100]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[100]:ref(Elm)["__ref_1"] in 3
  81[124]: ConstInt(val=12) -> integer
  86[128]: SetInt(v1: ref(reference), fld=0, val: integer)
  89[112]: VarRef(var[100]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[100]:ref(Elm)["__ref_1"] in 3
  92[124]: ConstInt(val=13) -> integer
  97[128]: SetInt(v1: ref(reference), fld=4, val: integer)
 100[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 103[124]: VarRef(var[100]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[100]:ref(Elm)["__ref_1"] in 3
 106[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
 111[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 114[124]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
 119[124]: PutRef(var[100], value: ref(reference))
 122[112]: VarRef(var[100]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[100]:ref(Elm)["__ref_1"] in 3
 125[124]: ConstInt(val=4) -> integer
 130[128]: SetInt(v1: ref(reference), fld=0, val: integer)
 133[112]: VarRef(var[100]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[100]:ref(Elm)["__ref_1"] in 3
 136[124]: ConstInt(val=5) -> integer
 141[128]: SetInt(v1: ref(reference), fld=4, val: integer)
 144[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 147[124]: VarRef(var[100]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[100]:ref(Elm)["__ref_1"] in 3
 150[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
 155[112]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 158[124]: FreeStack(value=12, discard=36) type=vector<text>[4]:Vector(5)[6]
 162[100]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=v[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 165[112]: ConstInt(val=2) -> integer
 170[116]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14]
 173[112]: ConstInt(val=6) -> integer
 178[116]: SetInt(v1: ref(reference), fld=4, val: integer)
 181[100]: ClearText(var[40]) var=__work_1[40]:text in 1
 184[100]: ConstText(_value="") -> text
 186[116]: AppendText(var[40], v1: text)
 189[100]: VarVector(var[88]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=v[88]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 192[112]: FormatDatabase(var[40], val: ref(reference), db_tp=16, pretty=false)
 198[100]: ConstText(_value=" sizeof ") -> text
 208[116]: AppendText(var[40], v1: text)
 211[100]: ConstInt(val=8) -> integer
 216[104]: ConstInt(val=0) -> integer
 221[108]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 228[100]: VarText(var[40]) -> text var=__work_1[40]:text in 1
 231[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 235[104]: AppendText(var[64], v1: text)
 238[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 241[104]: ConstText(_value="[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8") -> text
 285[120]: EqText(v1: text, v2: text) -> boolean
 286[89]: GotoFalseWord(jump=292, if_false: boolean)
 289[88]: GotoWord(jump=382)
 292[88]: ClearText(var[16]) var=__work_2[16]:text in 1
 295[88]: ConstText(_value="Test failed ") -> text
 309[104]: AppendText(var[16], v1: text)
 312[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 315[104]: ConstInt(val=0) -> integer
 320[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 325[88]: ConstText(_value=" != "[{a:1,b:2},{a:12,b:13},{a:4,b:6}] sizeof 8"") -> text
 375[104]: AppendText(var[16], v1: text)
 378[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
 381[104]: Panic(message: text)
 382[88]: FreeText(var[64])
 385[88]: VarRef(var[4]) -> ref(reference) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[15] var=__ref_1[4]:ref(main_vector<Elm>) in 1
 388[100]: FreeRef(v1: ref(reference))
 389[88]: FreeText(var[40])
 392[88]: FreeText(var[16])
 395[88]: Return(ret=0, value=0, discard=88)

