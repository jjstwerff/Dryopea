enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}
Type 12:Cat[1]:Enum(["A", "B", "C"])

Type 13:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 14:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 15:ordered<Count[t,v]>[4]:Ordered(13, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ]

Type 16:hash<Count[c,t]>[4]:Hash(13, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ]

Type 17:vector<Count>[4]:Vector(13)

fn fill(c:Counting) {#1 block
  {#2 vector
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#3 object
      OpSetEnum(_elm_1, 12i32, 1u8(12));
      OpSetText(_elm_1, 4i32, "One");
      OpSetInt(_elm_1, 8i32, 1i32);
    }#3;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#4 object
      OpSetEnum(_elm_1, 12i32, 2u8(12));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 2i32);
    }#4;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#5 object
      OpSetEnum(_elm_1, 12i32, 3u8(12));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 20i32);
    }#5;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#6 object
      OpSetEnum(_elm_1, 12i32, 1u8(12));
      OpSetText(_elm_1, 4i32, "Three");
      OpSetInt(_elm_1, 8i32, 3i32);
    }#6;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#7 object
      OpSetEnum(_elm_1, 12i32, 3u8(12));
      OpSetText(_elm_1, 4i32, "Four");
      OpSetInt(_elm_1, 8i32, 4i32);
    }#7;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
  }#2;
}#1

byte-code for multi_hash:fill(c: Counting[0])
 692[12]: return-address
 692[16]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 695[28]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 700[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 703[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 705[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 708[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 711[40]: ConstText(_value="One") -> text
 716[56]: SetText(v1: reference, fld=4, val: text)
 719[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 722[40]: ConstInt(val=1) -> integer
 727[44]: SetInt(v1: reference, fld=8, val: integer)
 730[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 733[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 736[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 741[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 744[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 749[40]: PutRef(var[16], value: reference)
 752[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 755[40]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 757[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 760[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 763[40]: ConstText(_value="Two") -> text
 768[56]: SetText(v1: reference, fld=4, val: text)
 771[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 774[40]: ConstInt(val=2) -> integer
 779[44]: SetInt(v1: reference, fld=8, val: integer)
 782[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 785[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 788[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 793[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 796[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 801[40]: PutRef(var[16], value: reference)
 804[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 807[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 809[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 812[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 815[40]: ConstText(_value="Two") -> text
 820[56]: SetText(v1: reference, fld=4, val: text)
 823[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 826[40]: ConstInt(val=20) -> integer
 831[44]: SetInt(v1: reference, fld=8, val: integer)
 834[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 837[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 840[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 845[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 848[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 853[40]: PutRef(var[16], value: reference)
 856[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 859[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 861[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 864[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 867[40]: ConstText(_value="Three") -> text
 874[56]: SetText(v1: reference, fld=4, val: text)
 877[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 880[40]: ConstInt(val=3) -> integer
 885[44]: SetInt(v1: reference, fld=8, val: integer)
 888[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 891[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 894[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 899[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 902[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 907[40]: PutRef(var[16], value: reference)
 910[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 913[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 915[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 918[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 921[40]: ConstText(_value="Four") -> text
 927[56]: SetText(v1: reference, fld=4, val: text)
 930[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 933[40]: ConstInt(val=4) -> integer
 938[44]: SetInt(v1: reference, fld=8, val: integer)
 941[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 944[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 947[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 952[28]: FreeStack(value=0, discard=12)
 956[16]: Return(ret=12, value=0, discard=16)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    c:Counting = {#3 object
      _val_1:Counting = OpDatabase(12i32, 14i32);
      OpSetInt(_val_1, 4i32, 0i32);
      OpSetInt(_val_1, 8i32, 0i32);
      _val_1;
    }#3:Counting;
    fill(c);
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 16i32), 16i32, 2i32, 1u8(12), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 16i32), 16i32, 2i32, 3u8(12), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c, 4i32, 15i32), 15i32, 2i32, "Four", 4i32), 8i32));
  }#2:integer;
  if OpEqInt(test_value, 27i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 27");
    __work_1;
  }#4:text);
}#1

byte-code for multi_hash:test()
 962[0]: return-address
 962[4]: Text()
 963[28]: Database(size=12, db_tp=14) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 968[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 971[52]: ConstInt(val=0) -> integer
 976[56]: SetInt(v1: reference, fld=4, val: integer)
 979[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 982[52]: ConstInt(val=0) -> integer
 987[56]: SetInt(v1: reference, fld=8, val: integer)
 990[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 993[52]: FreeStack(value=12, discard=24) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 997[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
1000[52]: Call(size=0, to=692)
1007[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
1010[52]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(13, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][16]
1013[52]: ConstText(_value="Three") -> text
1020[68]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
1022[69]: GetRecord(data: reference, db_tp=16, no_keys=2) -> reference
1026[52]: GetInt(v1: reference, fld=8) -> integer
1029[44]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
1032[56]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(13, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][16]
1035[56]: ConstText(_value="Two") -> text
1040[72]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
1042[73]: GetRecord(data: reference, db_tp=16, no_keys=2) -> reference
1046[56]: GetInt(v1: reference, fld=8) -> integer
1049[48]: AddInt(v1: integer, v2: integer) -> integer
1050[44]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
1053[56]: GetField(v1: reference, fld=4) -> reference type=ordered<Count[t,v]>[4]:Ordered(13, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][15]
1056[56]: ConstInt(val=4) -> integer
1061[60]: ConstText(_value="Four") -> text
1067[76]: GetRecord(data: reference, db_tp=15, no_keys=2) -> reference
1071[56]: GetInt(v1: reference, fld=8) -> integer
1074[48]: AddInt(v1: integer, v2: integer) -> integer
1075[44]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
1079[32]: VarInt(var[28]) -> integer
1082[36]: ConstInt(val=27) -> integer
1087[40]: EqInt(v1: integer, v2: integer) -> boolean
1088[33]: GotoFalseWord(jump=1094, if_false: boolean)
1091[32]: GotoWord(jump=1144)
1094[32]: ClearText(var[4])
1097[32]: ConstText(_value="Test failed ") -> text
1111[48]: AppendText(var[4], v1: text)
1114[32]: VarInt(var[28]) -> integer
1117[36]: ConstInt(val=0) -> integer
1122[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1129[32]: ConstText(_value=" != 27") -> text
1137[48]: AppendText(var[4], v1: text)
1140[32]: VarText(var[4]) -> text
1143[48]: Panic(message: text)
1144[32]: Return(ret=0, value=0, discard=32)

Execute test:
  962:[8] Text()
  963:[32] Database(size=12, db_tp=14) -> ref(1,1,0)={v:[]}[32]
  968:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  971:[56] ConstInt(val=0) -> 0[56]
  976:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  979:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  982:[56] ConstInt(val=0) -> 0[56]
  987:[60] SetInt(v1=ref(1,1,0)[44], fld=8, val=0[56])
  990:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  993:[56] FreeStack(value=12, discard=24)
  997:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
 1000:[56] Call(size=0, to=692)
  692:[60] VarRef(var[44]) -> ref(1,1,0)={v:[]}[60]
  695:[72] NewRecord(data=ref(1,1,0)[60], parent_tp=14, fld=0) -> ref(1,13,0)[60]
  700:[72] VarRef(var[60]) -> ref(1,13,0)={}[72]
  703:[84] ConstEnum(val=1) -> A(1)[84]
  705:[85] SetEnum(v1=ref(1,13,0)[72], fld=12, val=1[84])
  708:[72] VarRef(var[60]) -> ref(1,13,0)={c:A}[72]
  711:[84] ConstText(_value="One") -> "One"[84]
  716:[100] SetText(v1=ref(1,13,0)[72], fld=4, val="One"[84])
  719:[72] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One"}[72]
  722:[84] ConstInt(val=1) -> 1[84]
  727:[88] SetInt(v1=ref(1,13,0)[72], fld=8, val=1[84])
  730:[72] VarRef(var[44]) -> ref(1,1,0)={v:[]}[72]
  733:[84] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One",v:1}[84]
  736:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,13,0)[84], parent_tp=14, fld=0)
  741:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  744:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=14, fld=0) -> ref(1,33,0)[72]
  749:[84] PutRef(var[60], value=ref(1,33,0)[72])
  752:[72] VarRef(var[60]) -> ref(1,33,0)={}[72]
  755:[84] ConstEnum(val=2) -> B(2)[84]
  757:[85] SetEnum(v1=ref(1,33,0)[72], fld=12, val=2[84])
  760:[72] VarRef(var[60]) -> ref(1,33,0)={c:B}[72]
  763:[84] ConstText(_value="Two") -> "Two"[84]
  768:[100] SetText(v1=ref(1,33,0)[72], fld=4, val="Two"[84])
  771:[72] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two"}[72]
  774:[84] ConstInt(val=2) -> 2[84]
  779:[88] SetInt(v1=ref(1,33,0)[72], fld=8, val=2[84])
  782:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  785:[84] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two",v:2}[84]
  788:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,33,0)[84], parent_tp=14, fld=0)
  793:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  796:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=14, fld=0) -> ref(1,37,0)[72]
  801:[84] PutRef(var[60], value=ref(1,37,0)[72])
  804:[72] VarRef(var[60]) -> ref(1,37,0)={}[72]
  807:[84] ConstEnum(val=3) -> C(3)[84]
  809:[85] SetEnum(v1=ref(1,37,0)[72], fld=12, val=3[84])
  812:[72] VarRef(var[60]) -> ref(1,37,0)={c:C}[72]
  815:[84] ConstText(_value="Two") -> "Two"[84]
  820:[100] SetText(v1=ref(1,37,0)[72], fld=4, val="Two"[84])
  823:[72] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two"}[72]
  826:[84] ConstInt(val=20) -> 20[84]
  831:[88] SetInt(v1=ref(1,37,0)[72], fld=8, val=20[84])
  834:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  837:[84] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two",v:20}[84]
  840:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,37,0)[84], parent_tp=14, fld=0)
  845:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  848:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=14, fld=0) -> ref(1,41,0)[72]
  853:[84] PutRef(var[60], value=ref(1,41,0)[72])
  856:[72] VarRef(var[60]) -> ref(1,41,0)={}[72]
  859:[84] ConstEnum(val=1) -> A(1)[84]
  861:[85] SetEnum(v1=ref(1,41,0)[72], fld=12, val=1[84])
  864:[72] VarRef(var[60]) -> ref(1,41,0)={c:A}[72]
  867:[84] ConstText(_value="Three") -> "Three"[84]
  874:[100] SetText(v1=ref(1,41,0)[72], fld=4, val="Three"[84])
  877:[72] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three"}[72]
  880:[84] ConstInt(val=3) -> 3[84]
  885:[88] SetInt(v1=ref(1,41,0)[72], fld=8, val=3[84])
  888:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  891:[84] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three",v:3}[84]
  894:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,41,0)[84], parent_tp=14, fld=0)
  899:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  902:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=14, fld=0) -> ref(1,45,0)[72]
  907:[84] PutRef(var[60], value=ref(1,45,0)[72])
  910:[72] VarRef(var[60]) -> ref(1,45,0)={}[72]
  913:[84] ConstEnum(val=3) -> C(3)[84]
  915:[85] SetEnum(v1=ref(1,45,0)[72], fld=12, val=3[84])
  918:[72] VarRef(var[60]) -> ref(1,45,0)={c:C}[72]
  921:[84] ConstText(_value="Four") -> "Four"[84]
  927:[100] SetText(v1=ref(1,45,0)[72], fld=4, val="Four"[84])
  930:[72] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four"}[72]
  933:[84] ConstInt(val=4) -> 4[84]
  938:[88] SetInt(v1=ref(1,45,0)[72], fld=8, val=4[84])
  941:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  944:[84] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four",v:4}[84]
  947:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,45,0)[84], parent_tp=14, fld=0)
  952:[72] FreeStack(value=0, discard=12)
  956:[60] Return(ret=1007[56], value=0, discard=16)
 1007:[44] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
 1010:[56] GetField(v1=ref(1,1,0)[44], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][44]
 1013:[56] ConstText(_value="Three") -> "Three"[56]
 1020:[72] ConstEnum(val=1) -> A(1)[72]
 1022:[73] GetRecord(data=ref(1,1,8)[44], db_tp=16, no_keys=2, key1=A(1)[72], key2="Three"[56]) -> ref(1,41,0)[44]
 1026:[56] GetInt(v1=ref(1,41,0)[44], fld=8) -> 3[44]
 1029:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1032:[60] GetField(v1=ref(1,1,0)[48], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][48]
 1035:[60] ConstText(_value="Two") -> "Two"[60]
 1040:[76] ConstEnum(val=3) -> C(3)[76]
 1042:[77] GetRecord(data=ref(1,1,8)[48], db_tp=16, no_keys=2, key1=C(3)[76], key2="Two"[60]) -> ref(1,37,0)[48]
 1046:[60] GetInt(v1=ref(1,37,0)[48], fld=8) -> 20[48]
 1049:[52] AddInt(v1=3[44], v2=20[48]) -> 23[44]
 1050:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1053:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}][48]
 1056:[60] ConstInt(val=4) -> 4[60]
 1061:[64] ConstText(_value="Four") -> "Four"[64]
 1067:[80] GetRecord(data=ref(1,1,4)[48], db_tp=15, no_keys=2, key1="Four"[64], key2=4[60]) -> ref(1,45,0)[48]
 1071:[60] GetInt(v1=ref(1,45,0)[48], fld=8) -> 4[48]
 1074:[52] AddInt(v1=23[44], v2=4[48]) -> 27[44]
 1075:[48] FreeStack(value=4, discard=16)
 1079:[36] VarInt(var[32]) -> 27[36]
 1082:[40] ConstInt(val=27) -> 27[40]
 1087:[44] EqInt(v1=27[36], v2=27[40]) -> true[36]
 1088:[37] GotoFalseWord(jump=1094, if_false=true[36])
 1091:[36] GotoWord(jump=1144)
 1144:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
