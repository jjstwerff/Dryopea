enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}
Type 11:Cat[1]:Enum(["A", "B", "C"])

Type 12:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 13:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 14:ordered<Count[t,v]>[4]:Ordered(12, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ]

Type 15:hash<Count[c,t]>[4]:Hash(12, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ]

Type 16:vector<Count>[4]:Vector(12)

fn fill(c:Counting) {#1 block
  {#2 vector
    _elm_1:Count = OpNewRecord(c, 13i32, 0i32);
    {#3 object
      OpSetEnum(_elm_1, 12i32, 1u8(11));
      OpSetText(_elm_1, 4i32, "One");
      OpSetInt(_elm_1, 8i32, 1i32);
    }#3;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 13i32, 0i32);
    {#4 object
      OpSetEnum(_elm_1, 12i32, 2u8(11));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 2i32);
    }#4;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 13i32, 0i32);
    {#5 object
      OpSetEnum(_elm_1, 12i32, 3u8(11));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 20i32);
    }#5;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 13i32, 0i32);
    {#6 object
      OpSetEnum(_elm_1, 12i32, 1u8(11));
      OpSetText(_elm_1, 4i32, "Three");
      OpSetInt(_elm_1, 8i32, 3i32);
    }#6;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 13i32, 0i32);
    {#7 object
      OpSetEnum(_elm_1, 12i32, 3u8(11));
      OpSetText(_elm_1, 4i32, "Four");
      OpSetInt(_elm_1, 8i32, 4i32);
    }#7;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
  }#2;
}#1

byte-code for multi_hash:fill(c: Counting[0])
 682[12]: return-address
 682[16]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 685[28]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 690[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 693[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 695[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 698[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 701[40]: ConstText(_value="One") -> text
 706[56]: SetText(v1: reference, fld=4, val: text)
 709[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 712[40]: ConstInt(val=1) -> integer
 717[44]: SetInt(v1: reference, fld=8, val: integer)
 720[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 723[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 726[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 731[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 734[40]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 739[40]: PutRef(var[16], value: reference)
 742[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 745[40]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 747[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 750[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 753[40]: ConstText(_value="Two") -> text
 758[56]: SetText(v1: reference, fld=4, val: text)
 761[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 764[40]: ConstInt(val=2) -> integer
 769[44]: SetInt(v1: reference, fld=8, val: integer)
 772[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 775[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 778[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 783[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 786[40]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 791[40]: PutRef(var[16], value: reference)
 794[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 797[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 799[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 802[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 805[40]: ConstText(_value="Two") -> text
 810[56]: SetText(v1: reference, fld=4, val: text)
 813[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 816[40]: ConstInt(val=20) -> integer
 821[44]: SetInt(v1: reference, fld=8, val: integer)
 824[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 827[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 830[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 835[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 838[40]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 843[40]: PutRef(var[16], value: reference)
 846[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 849[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 851[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 854[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 857[40]: ConstText(_value="Three") -> text
 864[56]: SetText(v1: reference, fld=4, val: text)
 867[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 870[40]: ConstInt(val=3) -> integer
 875[44]: SetInt(v1: reference, fld=8, val: integer)
 878[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 881[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 884[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 889[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 892[40]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 897[40]: PutRef(var[16], value: reference)
 900[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 903[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 905[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 908[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 911[40]: ConstText(_value="Four") -> text
 917[56]: SetText(v1: reference, fld=4, val: text)
 920[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 923[40]: ConstInt(val=4) -> integer
 928[44]: SetInt(v1: reference, fld=8, val: integer)
 931[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 934[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 937[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 942[28]: FreeStack(value=0, discard=12)
 946[16]: Return(ret=12, value=0, discard=16)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    c:Counting = {#3 object
      _val_1:Counting = OpDatabase(12i32, 13i32);
      OpSetInt(_val_1, 4i32, 0i32);
      OpSetInt(_val_1, 8i32, 0i32);
      _val_1;
    }#3:Counting;
    fill(c);
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 15i32), 15i32, 2i32, 1u8(11), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 15i32), 15i32, 2i32, 3u8(11), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c, 4i32, 14i32), 14i32, 2i32, "Four", 4i32), 8i32));
  }#2:integer;
  if OpEqInt(test_value, 27i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 27");
    __work_1;
  }#4:text);
}#1

byte-code for multi_hash:test()
 952[0]: return-address
 952[4]: Text()
 953[28]: Database(size=12, db_tp=13) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 958[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 961[52]: ConstInt(val=0) -> integer
 966[56]: SetInt(v1: reference, fld=4, val: integer)
 969[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 972[52]: ConstInt(val=0) -> integer
 977[56]: SetInt(v1: reference, fld=8, val: integer)
 980[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 983[52]: FreeStack(value=12, discard=12) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 987[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 990[52]: Call(size=0, to=682)
 997[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
1000[52]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(12, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][15]
1003[52]: ConstText(_value="Three") -> text
1010[68]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
1012[69]: GetRecord(data: reference, db_tp=15, no_keys=2) -> reference
1016[52]: GetInt(v1: reference, fld=8) -> integer
1019[44]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
1022[56]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(12, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][15]
1025[56]: ConstText(_value="Two") -> text
1030[72]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
1032[73]: GetRecord(data: reference, db_tp=15, no_keys=2) -> reference
1036[56]: GetInt(v1: reference, fld=8) -> integer
1039[48]: AddInt(v1: integer, v2: integer) -> integer
1040[44]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
1043[56]: GetField(v1: reference, fld=4) -> reference type=ordered<Count[t,v]>[4]:Ordered(12, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][14]
1046[56]: ConstInt(val=4) -> integer
1051[60]: ConstText(_value="Four") -> text
1057[76]: GetRecord(data: reference, db_tp=14, no_keys=2) -> reference
1061[56]: GetInt(v1: reference, fld=8) -> integer
1064[48]: AddInt(v1: integer, v2: integer) -> integer
1065[44]: FreeStack(value=4, discard=12) type=integer[4]:Base[0]
1069[32]: VarInt(var[28]) -> integer
1072[36]: ConstInt(val=27) -> integer
1077[40]: EqInt(v1: integer, v2: integer) -> boolean
1078[33]: GotoFalseWord(jump=1084, if_false: boolean)
1081[32]: GotoWord(jump=1134)
1084[32]: ClearText(var[4])
1087[32]: ConstText(_value="Test failed ") -> text
1101[48]: AppendText(var[4], v1: text)
1104[32]: VarInt(var[28]) -> integer
1107[36]: ConstInt(val=0) -> integer
1112[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1119[32]: ConstText(_value=" != 27") -> text
1127[48]: AppendText(var[4], v1: text)
1130[32]: VarText(var[4]) -> text
1133[48]: Panic(message: text)
1134[32]: Return(ret=0, value=0, discard=32)

Execute test:
  952:[8] Text()
  953:[32] Database(size=12, db_tp=13) -> ref(1,1,0)={v:[]}[32]
  958:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  961:[56] ConstInt(val=0) -> 0[56]
  966:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  969:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  972:[56] ConstInt(val=0) -> 0[56]
  977:[60] SetInt(v1=ref(1,1,0)[44], fld=8, val=0[56])
  980:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  983:[56] FreeStack(value=12, discard=12)
  987:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  990:[56] Call(size=0, to=682)
  682:[60] VarRef(var[44]) -> ref(1,1,0)={v:[]}[60]
  685:[72] NewRecord(data=ref(1,1,0)[60], parent_tp=13, fld=0) -> ref(1,13,0)[60]
  690:[72] VarRef(var[60]) -> ref(1,13,0)={}[72]
  693:[84] ConstEnum(val=1) -> A(1)[84]
  695:[85] SetEnum(v1=ref(1,13,0)[72], fld=12, val=1[84])
  698:[72] VarRef(var[60]) -> ref(1,13,0)={c:A}[72]
  701:[84] ConstText(_value="One") -> "One"[84]
  706:[100] SetText(v1=ref(1,13,0)[72], fld=4, val="One"[84])
  709:[72] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One"}[72]
  712:[84] ConstInt(val=1) -> 1[84]
  717:[88] SetInt(v1=ref(1,13,0)[72], fld=8, val=1[84])
  720:[72] VarRef(var[44]) -> ref(1,1,0)={v:[]}[72]
  723:[84] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One",v:1}[84]
  726:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,13,0)[84], parent_tp=13, fld=0)
  731:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  734:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,33,0)[72]
  739:[84] PutRef(var[60], value=ref(1,33,0)[72])
  742:[72] VarRef(var[60]) -> ref(1,33,0)={}[72]
  745:[84] ConstEnum(val=2) -> B(2)[84]
  747:[85] SetEnum(v1=ref(1,33,0)[72], fld=12, val=2[84])
  750:[72] VarRef(var[60]) -> ref(1,33,0)={c:B}[72]
  753:[84] ConstText(_value="Two") -> "Two"[84]
  758:[100] SetText(v1=ref(1,33,0)[72], fld=4, val="Two"[84])
  761:[72] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two"}[72]
  764:[84] ConstInt(val=2) -> 2[84]
  769:[88] SetInt(v1=ref(1,33,0)[72], fld=8, val=2[84])
  772:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  775:[84] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two",v:2}[84]
  778:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,33,0)[84], parent_tp=13, fld=0)
  783:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  786:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,37,0)[72]
  791:[84] PutRef(var[60], value=ref(1,37,0)[72])
  794:[72] VarRef(var[60]) -> ref(1,37,0)={}[72]
  797:[84] ConstEnum(val=3) -> C(3)[84]
  799:[85] SetEnum(v1=ref(1,37,0)[72], fld=12, val=3[84])
  802:[72] VarRef(var[60]) -> ref(1,37,0)={c:C}[72]
  805:[84] ConstText(_value="Two") -> "Two"[84]
  810:[100] SetText(v1=ref(1,37,0)[72], fld=4, val="Two"[84])
  813:[72] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two"}[72]
  816:[84] ConstInt(val=20) -> 20[84]
  821:[88] SetInt(v1=ref(1,37,0)[72], fld=8, val=20[84])
  824:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  827:[84] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two",v:20}[84]
  830:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,37,0)[84], parent_tp=13, fld=0)
  835:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  838:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,41,0)[72]
  843:[84] PutRef(var[60], value=ref(1,41,0)[72])
  846:[72] VarRef(var[60]) -> ref(1,41,0)={}[72]
  849:[84] ConstEnum(val=1) -> A(1)[84]
  851:[85] SetEnum(v1=ref(1,41,0)[72], fld=12, val=1[84])
  854:[72] VarRef(var[60]) -> ref(1,41,0)={c:A}[72]
  857:[84] ConstText(_value="Three") -> "Three"[84]
  864:[100] SetText(v1=ref(1,41,0)[72], fld=4, val="Three"[84])
  867:[72] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three"}[72]
  870:[84] ConstInt(val=3) -> 3[84]
  875:[88] SetInt(v1=ref(1,41,0)[72], fld=8, val=3[84])
  878:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  881:[84] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three",v:3}[84]
  884:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,41,0)[84], parent_tp=13, fld=0)
  889:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  892:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,45,0)[72]
  897:[84] PutRef(var[60], value=ref(1,45,0)[72])
  900:[72] VarRef(var[60]) -> ref(1,45,0)={}[72]
  903:[84] ConstEnum(val=3) -> C(3)[84]
  905:[85] SetEnum(v1=ref(1,45,0)[72], fld=12, val=3[84])
  908:[72] VarRef(var[60]) -> ref(1,45,0)={c:C}[72]
  911:[84] ConstText(_value="Four") -> "Four"[84]
  917:[100] SetText(v1=ref(1,45,0)[72], fld=4, val="Four"[84])
  920:[72] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four"}[72]
  923:[84] ConstInt(val=4) -> 4[84]
  928:[88] SetInt(v1=ref(1,45,0)[72], fld=8, val=4[84])
  931:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  934:[84] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four",v:4}[84]
  937:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,45,0)[84], parent_tp=13, fld=0)
  942:[72] FreeStack(value=0, discard=12)
  946:[60] Return(ret=997[56], value=0, discard=16)
  997:[44] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
 1000:[56] GetField(v1=ref(1,1,0)[44], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][44]
 1003:[56] ConstText(_value="Three") -> "Three"[56]
 1010:[72] ConstEnum(val=1) -> A(1)[72]
 1012:[73] GetRecord(data=ref(1,1,8)[44], db_tp=15, no_keys=2, key1=A(1)[72], key2="Three"[56]) -> ref(1,41,0)[44]
 1016:[56] GetInt(v1=ref(1,41,0)[44], fld=8) -> 3[44]
 1019:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1022:[60] GetField(v1=ref(1,1,0)[48], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][48]
 1025:[60] ConstText(_value="Two") -> "Two"[60]
 1030:[76] ConstEnum(val=3) -> C(3)[76]
 1032:[77] GetRecord(data=ref(1,1,8)[48], db_tp=15, no_keys=2, key1=C(3)[76], key2="Two"[60]) -> ref(1,37,0)[48]
 1036:[60] GetInt(v1=ref(1,37,0)[48], fld=8) -> 20[48]
 1039:[52] AddInt(v1=3[44], v2=20[48]) -> 23[44]
 1040:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1043:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}][48]
 1046:[60] ConstInt(val=4) -> 4[60]
 1051:[64] ConstText(_value="Four") -> "Four"[64]
 1057:[80] GetRecord(data=ref(1,1,4)[48], db_tp=14, no_keys=2, key1="Four"[64], key2=4[60]) -> ref(1,45,0)[48]
 1061:[60] GetInt(v1=ref(1,45,0)[48], fld=8) -> 4[48]
 1064:[52] AddInt(v1=23[44], v2=4[48]) -> 27[44]
 1065:[48] FreeStack(value=4, discard=12)
 1069:[36] VarInt(var[32]) -> 27[36]
 1072:[40] ConstInt(val=27) -> 27[40]
 1077:[44] EqInt(v1=27[36], v2=27[40]) -> true[36]
 1078:[37] GotoFalseWord(jump=1084, if_false=true[36])
 1081:[36] GotoWord(jump=1134)
 1134:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
