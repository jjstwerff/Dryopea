enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}
Type 11:Cat[1]:Enum(["A", "B", "C"])

Type 12:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 13:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 14:ordered<Count[t,v]>[4]:Ordered(12, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ]

Type 15:hash<Count[c,t]>[4]:Hash(12, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ]

Type 16:vector<Count>[4]:Vector(12)

fn fill {#1 block
  {#2 vector
    let _elm_1 = OpNewRecord(c, 13i32, 0i32);
    {#3 object
      OpSetEnum(_elm_1, 12i32, 1u8(11));
      OpSetText(_elm_1, 4i32, "One");
      OpSetInt(_elm_1, 8i32, 1i32);
    }#3;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1 = OpNewRecord(c, 13i32, 0i32);
    {#4 object
      OpSetEnum(_elm_1, 12i32, 2u8(11));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 2i32);
    }#4;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1 = OpNewRecord(c, 13i32, 0i32);
    {#5 object
      OpSetEnum(_elm_1, 12i32, 3u8(11));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 20i32);
    }#5;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1 = OpNewRecord(c, 13i32, 0i32);
    {#6 object
      OpSetEnum(_elm_1, 12i32, 1u8(11));
      OpSetText(_elm_1, 4i32, "Three");
      OpSetInt(_elm_1, 8i32, 3i32);
    }#6;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1 = OpNewRecord(c, 13i32, 0i32);
    {#7 object
      OpSetEnum(_elm_1, 12i32, 3u8(11));
      OpSetText(_elm_1, 4i32, "Four");
      OpSetInt(_elm_1, 8i32, 4i32);
    }#7;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
  }#2;
}#1

byte-code for multi_hash:fill(c: Counting#[][0])
 668[12]: return-address
 668[16]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 671[28]: NewRecord(data: reference#[], parent_tp=13, fld=0) -> reference#[]
 676[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 679[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 681[41]: SetEnum(v1: reference#[], fld=12, val: enumerate)
 684[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 687[40]: ConstText(_value="One") -> text(false, [])
 692[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 695[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 698[40]: ConstInt(val=1) -> integer
 703[44]: SetInt(v1: reference#[], fld=8, val: integer)
 706[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 709[40]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 712[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=0)
 717[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 720[40]: NewRecord(data: reference#[], parent_tp=13, fld=0) -> reference#[]
 725[40]: PutRef(var[16], value: reference#[])
 728[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 731[40]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 733[41]: SetEnum(v1: reference#[], fld=12, val: enumerate)
 736[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 739[40]: ConstText(_value="Two") -> text(false, [])
 744[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 747[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 750[40]: ConstInt(val=2) -> integer
 755[44]: SetInt(v1: reference#[], fld=8, val: integer)
 758[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 761[40]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 764[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=0)
 769[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 772[40]: NewRecord(data: reference#[], parent_tp=13, fld=0) -> reference#[]
 777[40]: PutRef(var[16], value: reference#[])
 780[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 783[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 785[41]: SetEnum(v1: reference#[], fld=12, val: enumerate)
 788[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 791[40]: ConstText(_value="Two") -> text(false, [])
 796[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 799[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 802[40]: ConstInt(val=20) -> integer
 807[44]: SetInt(v1: reference#[], fld=8, val: integer)
 810[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 813[40]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 816[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=0)
 821[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 824[40]: NewRecord(data: reference#[], parent_tp=13, fld=0) -> reference#[]
 829[40]: PutRef(var[16], value: reference#[])
 832[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 835[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 837[41]: SetEnum(v1: reference#[], fld=12, val: enumerate)
 840[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 843[40]: ConstText(_value="Three") -> text(false, [])
 850[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 853[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 856[40]: ConstInt(val=3) -> integer
 861[44]: SetInt(v1: reference#[], fld=8, val: integer)
 864[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 867[40]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 870[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=0)
 875[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 878[40]: NewRecord(data: reference#[], parent_tp=13, fld=0) -> reference#[]
 883[40]: PutRef(var[16], value: reference#[])
 886[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 889[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 891[41]: SetEnum(v1: reference#[], fld=12, val: enumerate)
 894[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 897[40]: ConstText(_value="Four") -> text(false, [])
 903[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 906[28]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 909[40]: ConstInt(val=4) -> integer
 914[44]: SetInt(v1: reference#[], fld=8, val: integer)
 917[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 920[40]: VarRef(var[16]) -> reference#[] type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 923[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=0)
 928[28]: GenFreeStack(value=0, discard=12)
 932[16]: GenReturn(ret=12, value=0, discard=16)

fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    let c = {#3 object
      let _val_1 = OpDatabase(12i32, 13i32);
      OpSetInt(_val_1, 4i32, 0i32);
      OpSetInt(_val_1, 8i32, 0i32);
      _val_1;
    }#3;
    fill(c);
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 15i32), 15i32, 2i32, 1u8(11), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 15i32), 15i32, 2i32, 3u8(11), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c, 4i32, 14i32), 14i32, 2i32, "Four", 4i32), 8i32));
  }#2;
  if OpEqInt(test_value, 27i32) null else OpGenPanic({#4 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 27");
    __work_1;
  }#4);
}#1

byte-code for multi_hash:test()
 938[0]: return-address
 938[4]: Text()
 939[28]: Database(size=12, db_tp=13) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 944[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 947[52]: ConstInt(val=0) -> integer
 952[56]: SetInt(v1: reference#[], fld=4, val: integer)
 955[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 958[52]: ConstInt(val=0) -> integer
 963[56]: SetInt(v1: reference#[], fld=8, val: integer)
 966[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 969[52]: GenFreeStack(value=12, discard=12)
 973[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 976[52]: GenCall(size=0, to=668)
 983[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 986[52]: GetField(v1: reference#[], fld=8) -> reference#[] type=hash<Count[c,t]>[4]:Hash(12, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][15]
 989[52]: ConstText(_value="Three") -> text(false, [])
 996[68]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 998[69]: GetRecord(data: reference#[], db_tp=15, no_keys=2) -> reference#[]
1002[52]: GetInt(v1: reference#[], fld=8) -> integer
1005[44]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
1008[56]: GetField(v1: reference#[], fld=8) -> reference#[] type=hash<Count[c,t]>[4]:Hash(12, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][15]
1011[56]: ConstText(_value="Two") -> text(false, [])
1016[72]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
1018[73]: GetRecord(data: reference#[], db_tp=15, no_keys=2) -> reference#[]
1022[56]: GetInt(v1: reference#[], fld=8) -> integer
1025[48]: AddInt(v1: integer, v2: integer) -> integer
1026[44]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
1029[56]: GetField(v1: reference#[], fld=4) -> reference#[] type=ordered<Count[t,v]>[4]:Ordered(12, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][14]
1032[56]: ConstInt(val=4) -> integer
1037[60]: ConstText(_value="Four") -> text(false, [])
1043[76]: GetRecord(data: reference#[], db_tp=14, no_keys=2) -> reference#[]
1047[56]: GetInt(v1: reference#[], fld=8) -> integer
1050[48]: AddInt(v1: integer, v2: integer) -> integer
1051[44]: GenFreeStack(value=4, discard=12)
1055[32]: VarInt(var[28]) -> integer
1058[36]: ConstInt(val=27) -> integer
1063[40]: EqInt(v1: integer, v2: integer) -> boolean
1064[33]: GenGotoFalseWord(jump=1070, if_false: boolean)
1067[32]: GenGotoWord(jump=1120)
1070[32]: ClearText(var[4])
1073[32]: ConstText(_value="Test failed ") -> text(false, [])
1087[48]: AppendText(var[4], v1: text(false, []))
1090[32]: VarInt(var[28]) -> integer
1093[36]: ConstInt(val=0) -> integer
1098[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1105[32]: ConstText(_value=" != 27") -> text(false, [])
1113[48]: AppendText(var[4], v1: text(false, []))
1116[32]: VarText(var[4]) -> text(false, [])
1119[48]: GenPanic(message: text(false, []))
1120[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  938:[8] Text()
  939:[32] Database(size=12, db_tp=13) -> ref(1,1,0)={v:[]}[32]
  944:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  947:[56] ConstInt(val=0) -> 0[56]
  952:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  955:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  958:[56] ConstInt(val=0) -> 0[56]
  963:[60] SetInt(v1=ref(1,1,0)[44], fld=8, val=0[56])
  966:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  969:[56] GenFreeStack(value=12, discard=12)
  973:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  976:[56] GenCall(size=0, to=668)
  668:[60] VarRef(var[44]) -> ref(1,1,0)={v:[]}[60]
  671:[72] NewRecord(data=ref(1,1,0)[60], parent_tp=13, fld=0) -> ref(1,13,0)[60]
  676:[72] VarRef(var[60]) -> ref(1,13,0)={}[72]
  679:[84] ConstEnum(val=1) -> A(1)[84]
  681:[85] SetEnum(v1=ref(1,13,0)[72], fld=12, val=1[84])
  684:[72] VarRef(var[60]) -> ref(1,13,0)={c:A}[72]
  687:[84] ConstText(_value="One") -> "One"[84]
  692:[100] SetText(v1=ref(1,13,0)[72], fld=4, val="One"[84])
  695:[72] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One"}[72]
  698:[84] ConstInt(val=1) -> 1[84]
  703:[88] SetInt(v1=ref(1,13,0)[72], fld=8, val=1[84])
  706:[72] VarRef(var[44]) -> ref(1,1,0)={v:[]}[72]
  709:[84] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One",v:1}[84]
  712:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,13,0)[84], parent_tp=13, fld=0)
  717:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  720:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,33,0)[72]
  725:[84] PutRef(var[60], value=ref(1,33,0)[72])
  728:[72] VarRef(var[60]) -> ref(1,33,0)={}[72]
  731:[84] ConstEnum(val=2) -> B(2)[84]
  733:[85] SetEnum(v1=ref(1,33,0)[72], fld=12, val=2[84])
  736:[72] VarRef(var[60]) -> ref(1,33,0)={c:B}[72]
  739:[84] ConstText(_value="Two") -> "Two"[84]
  744:[100] SetText(v1=ref(1,33,0)[72], fld=4, val="Two"[84])
  747:[72] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two"}[72]
  750:[84] ConstInt(val=2) -> 2[84]
  755:[88] SetInt(v1=ref(1,33,0)[72], fld=8, val=2[84])
  758:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  761:[84] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two",v:2}[84]
  764:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,33,0)[84], parent_tp=13, fld=0)
  769:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  772:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,37,0)[72]
  777:[84] PutRef(var[60], value=ref(1,37,0)[72])
  780:[72] VarRef(var[60]) -> ref(1,37,0)={}[72]
  783:[84] ConstEnum(val=3) -> C(3)[84]
  785:[85] SetEnum(v1=ref(1,37,0)[72], fld=12, val=3[84])
  788:[72] VarRef(var[60]) -> ref(1,37,0)={c:C}[72]
  791:[84] ConstText(_value="Two") -> "Two"[84]
  796:[100] SetText(v1=ref(1,37,0)[72], fld=4, val="Two"[84])
  799:[72] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two"}[72]
  802:[84] ConstInt(val=20) -> 20[84]
  807:[88] SetInt(v1=ref(1,37,0)[72], fld=8, val=20[84])
  810:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  813:[84] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two",v:20}[84]
  816:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,37,0)[84], parent_tp=13, fld=0)
  821:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  824:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,41,0)[72]
  829:[84] PutRef(var[60], value=ref(1,41,0)[72])
  832:[72] VarRef(var[60]) -> ref(1,41,0)={}[72]
  835:[84] ConstEnum(val=1) -> A(1)[84]
  837:[85] SetEnum(v1=ref(1,41,0)[72], fld=12, val=1[84])
  840:[72] VarRef(var[60]) -> ref(1,41,0)={c:A}[72]
  843:[84] ConstText(_value="Three") -> "Three"[84]
  850:[100] SetText(v1=ref(1,41,0)[72], fld=4, val="Three"[84])
  853:[72] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three"}[72]
  856:[84] ConstInt(val=3) -> 3[84]
  861:[88] SetInt(v1=ref(1,41,0)[72], fld=8, val=3[84])
  864:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  867:[84] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three",v:3}[84]
  870:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,41,0)[84], parent_tp=13, fld=0)
  875:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  878:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,45,0)[72]
  883:[84] PutRef(var[60], value=ref(1,45,0)[72])
  886:[72] VarRef(var[60]) -> ref(1,45,0)={}[72]
  889:[84] ConstEnum(val=3) -> C(3)[84]
  891:[85] SetEnum(v1=ref(1,45,0)[72], fld=12, val=3[84])
  894:[72] VarRef(var[60]) -> ref(1,45,0)={c:C}[72]
  897:[84] ConstText(_value="Four") -> "Four"[84]
  903:[100] SetText(v1=ref(1,45,0)[72], fld=4, val="Four"[84])
  906:[72] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four"}[72]
  909:[84] ConstInt(val=4) -> 4[84]
  914:[88] SetInt(v1=ref(1,45,0)[72], fld=8, val=4[84])
  917:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  920:[84] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four",v:4}[84]
  923:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,45,0)[84], parent_tp=13, fld=0)
  928:[72] GenFreeStack(value=0, discard=12)
  932:[60] GenReturn(ret=983[56], value=0, discard=16)
  983:[44] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
  986:[56] GetField(v1=ref(1,1,0)[44], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][44]
  989:[56] ConstText(_value="Three") -> "Three"[56]
  996:[72] ConstEnum(val=1) -> A(1)[72]
  998:[73] GetRecord(data=ref(1,1,8)[44], db_tp=15, no_keys=2, key1=A(1)[72], key2="Three"[56]) -> ref(1,41,0)[44]
 1002:[56] GetInt(v1=ref(1,41,0)[44], fld=8) -> 3[44]
 1005:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1008:[60] GetField(v1=ref(1,1,0)[48], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][48]
 1011:[60] ConstText(_value="Two") -> "Two"[60]
 1016:[76] ConstEnum(val=3) -> C(3)[76]
 1018:[77] GetRecord(data=ref(1,1,8)[48], db_tp=15, no_keys=2, key1=C(3)[76], key2="Two"[60]) -> ref(1,37,0)[48]
 1022:[60] GetInt(v1=ref(1,37,0)[48], fld=8) -> 20[48]
 1025:[52] AddInt(v1=3[44], v2=20[48]) -> 23[44]
 1026:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1029:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}][48]
 1032:[60] ConstInt(val=4) -> 4[60]
 1037:[64] ConstText(_value="Four") -> "Four"[64]
 1043:[80] GetRecord(data=ref(1,1,4)[48], db_tp=14, no_keys=2, key1="Four"[64], key2=4[60]) -> ref(1,45,0)[48]
 1047:[60] GetInt(v1=ref(1,45,0)[48], fld=8) -> 4[48]
 1050:[52] AddInt(v1=23[44], v2=4[48]) -> 27[44]
 1051:[48] GenFreeStack(value=4, discard=12)
 1055:[36] VarInt(var[32]) -> 27[36]
 1058:[40] ConstInt(val=27) -> 27[40]
 1063:[44] EqInt(v1=27[36], v2=27[40]) -> true[36]
 1064:[37] GenGotoFalseWord(jump=1070, if_false=true[36])
 1067:[36] GenGotoWord(jump=1120)
 1120:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
