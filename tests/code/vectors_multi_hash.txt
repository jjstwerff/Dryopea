enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}
Type 12:Cat[1]:Enum(["A", "B", "C"])

Type 13:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 14:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 15:ordered<Count[t,v]>[4]:Ordered(13, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ]

Type 16:hash<Count[c,t]>[4]:Hash(13, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ]

Type 17:vector<Count>[4]:Vector(13)

fn fill(c:Counting) {#1 block
  {#2 vector
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#3 object
      OpSetEnum(_elm_1, 12i32, 1u8(12));
      OpSetText(_elm_1, 4i32, "One");
      OpSetInt(_elm_1, 8i32, 1i32);
    }#3;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#4 object
      OpSetEnum(_elm_1, 12i32, 2u8(12));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 2i32);
    }#4;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#5 object
      OpSetEnum(_elm_1, 12i32, 3u8(12));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 20i32);
    }#5;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#6 object
      OpSetEnum(_elm_1, 12i32, 1u8(12));
      OpSetText(_elm_1, 4i32, "Three");
      OpSetInt(_elm_1, 8i32, 3i32);
    }#6;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:Count = OpNewRecord(c, 14i32, 0i32);
    {#7 object
      OpSetEnum(_elm_1, 12i32, 3u8(12));
      OpSetText(_elm_1, 4i32, "Four");
      OpSetInt(_elm_1, 8i32, 4i32);
    }#7;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
  }#2;
}#1

byte-code for multi_hash:fill(c: Counting[0])
 691[12]: return-address
 691[16]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 694[28]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 699[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 702[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 704[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 707[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 710[40]: ConstText(_value="One") -> text
 715[56]: SetText(v1: reference, fld=4, val: text)
 718[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 721[40]: ConstInt(val=1) -> integer
 726[44]: SetInt(v1: reference, fld=8, val: integer)
 729[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 732[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 735[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 740[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 743[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 748[40]: PutRef(var[16], value: reference)
 751[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 754[40]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 756[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 759[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 762[40]: ConstText(_value="Two") -> text
 767[56]: SetText(v1: reference, fld=4, val: text)
 770[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 773[40]: ConstInt(val=2) -> integer
 778[44]: SetInt(v1: reference, fld=8, val: integer)
 781[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 784[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 787[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 792[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 795[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 800[40]: PutRef(var[16], value: reference)
 803[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 806[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 808[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 811[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 814[40]: ConstText(_value="Two") -> text
 819[56]: SetText(v1: reference, fld=4, val: text)
 822[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 825[40]: ConstInt(val=20) -> integer
 830[44]: SetInt(v1: reference, fld=8, val: integer)
 833[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 836[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 839[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 844[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 847[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 852[40]: PutRef(var[16], value: reference)
 855[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 858[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 860[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 863[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 866[40]: ConstText(_value="Three") -> text
 873[56]: SetText(v1: reference, fld=4, val: text)
 876[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 879[40]: ConstInt(val=3) -> integer
 884[44]: SetInt(v1: reference, fld=8, val: integer)
 887[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 890[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 893[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 898[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 901[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 906[40]: PutRef(var[16], value: reference)
 909[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 912[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 914[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 917[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 920[40]: ConstText(_value="Four") -> text
 926[56]: SetText(v1: reference, fld=4, val: text)
 929[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 932[40]: ConstInt(val=4) -> integer
 937[44]: SetInt(v1: reference, fld=8, val: integer)
 940[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 943[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13]
 946[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 951[28]: FreeStack(value=0, discard=12)
 955[16]: Return(ret=12, value=0, discard=16)

fn test() {#1 block
  __ref_1:Counting = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    c:Counting["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 14i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      OpSetInt(__ref_1, 8i32, 0i32);
      __ref_1;
    }#3:Counting["__ref_1"];
    fill(c);
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 16i32), 16i32, 2i32, 1u8(12), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 16i32), 16i32, 2i32, 3u8(12), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c, 4i32, 15i32), 15i32, 2i32, "Four", 4i32), 8i32));
  }#2:integer;
  if OpEqInt(test_value, 27i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 27");
    __work_1;
  }#4:text);
}#1

byte-code for multi_hash:test()
 961[0]: return-address
 961[4]: ConvRefFromNull() -> reference
 962[16]: Text()
 963[40]: Database(var[4], db_tp=14) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 968[40]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 971[52]: ConstInt(val=0) -> integer
 976[56]: SetInt(v1: reference, fld=4, val: integer)
 979[40]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 982[52]: ConstInt(val=0) -> integer
 987[56]: SetInt(v1: reference, fld=8, val: integer)
 990[40]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 993[52]: VarRef(var[40]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
 996[64]: Call(size=0, to=691)
1003[52]: VarRef(var[40]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
1006[64]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(13, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][16]
1009[64]: ConstText(_value="Three") -> text
1016[80]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
1018[81]: GetRecord(data: reference, db_tp=16, no_keys=2) -> reference
1022[64]: GetInt(v1: reference, fld=8) -> integer
1025[56]: VarRef(var[40]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
1028[68]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(13, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][16]
1031[68]: ConstText(_value="Two") -> text
1036[84]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
1038[85]: GetRecord(data: reference, db_tp=16, no_keys=2) -> reference
1042[68]: GetInt(v1: reference, fld=8) -> integer
1045[60]: AddInt(v1: integer, v2: integer) -> integer
1046[56]: VarRef(var[40]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14]
1049[68]: GetField(v1: reference, fld=4) -> reference type=ordered<Count[t,v]>[4]:Ordered(13, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][15]
1052[68]: ConstInt(val=4) -> integer
1057[72]: ConstText(_value="Four") -> text
1063[88]: GetRecord(data: reference, db_tp=15, no_keys=2) -> reference
1067[68]: GetInt(v1: reference, fld=8) -> integer
1070[60]: AddInt(v1: integer, v2: integer) -> integer
1071[56]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
1075[44]: VarInt(var[40]) -> integer
1078[48]: ConstInt(val=27) -> integer
1083[52]: EqInt(v1: integer, v2: integer) -> boolean
1084[45]: GotoFalseWord(jump=1090, if_false: boolean)
1087[44]: GotoWord(jump=1140)
1090[44]: ClearText(var[16])
1093[44]: ConstText(_value="Test failed ") -> text
1107[60]: AppendText(var[16], v1: text)
1110[44]: VarInt(var[40]) -> integer
1113[48]: ConstInt(val=0) -> integer
1118[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1125[44]: ConstText(_value=" != 27") -> text
1133[60]: AppendText(var[16], v1: text)
1136[44]: VarText(var[16]) -> text
1139[60]: Panic(message: text)
1140[44]: FreeText(var[16])
1143[44]: Return(ret=0, value=0, discard=44)

Execute test:
  961:[8] ConvRefFromNull() -> ref(65535,0,0)[8]
  962:[20] Text()
  963:[44] Database(var[8], db_tp=14)
  968:[44] VarRef(var[8]) -> ref(1,1,0)={v:[]}[44]
  971:[56] ConstInt(val=0) -> 0[56]
  976:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  979:[44] VarRef(var[8]) -> ref(1,1,0)={v:[]}[44]
  982:[56] ConstInt(val=0) -> 0[56]
  987:[60] SetInt(v1=ref(1,1,0)[44], fld=8, val=0[56])
  990:[44] VarRef(var[8]) -> ref(1,1,0)={v:[]}[44]
  993:[56] VarRef(var[44]) -> ref(1,1,0)={v:[]}[56]
  996:[68] Call(size=0, to=691)
  691:[72] VarRef(var[56]) -> ref(1,1,0)={v:[]}[72]
  694:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=14, fld=0) -> ref(1,13,0)[72]
  699:[84] VarRef(var[72]) -> ref(1,13,0)={}[84]
  702:[96] ConstEnum(val=1) -> A(1)[96]
  704:[97] SetEnum(v1=ref(1,13,0)[84], fld=12, val=1[96])
  707:[84] VarRef(var[72]) -> ref(1,13,0)={c:A}[84]
  710:[96] ConstText(_value="One") -> "One"[96]
  715:[112] SetText(v1=ref(1,13,0)[84], fld=4, val="One"[96])
  718:[84] VarRef(var[72]) -> ref(1,13,0)={c:A,t:"One"}[84]
  721:[96] ConstInt(val=1) -> 1[96]
  726:[100] SetInt(v1=ref(1,13,0)[84], fld=8, val=1[96])
  729:[84] VarRef(var[56]) -> ref(1,1,0)={v:[]}[84]
  732:[96] VarRef(var[72]) -> ref(1,13,0)={c:A,t:"One",v:1}[96]
  735:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,13,0)[96], parent_tp=14, fld=0)
  740:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[84]
  743:[96] NewRecord(data=ref(1,1,0)[84], parent_tp=14, fld=0) -> ref(1,33,0)[84]
  748:[96] PutRef(var[72], value=ref(1,33,0)[84])
  751:[84] VarRef(var[72]) -> ref(1,33,0)={}[84]
  754:[96] ConstEnum(val=2) -> B(2)[96]
  756:[97] SetEnum(v1=ref(1,33,0)[84], fld=12, val=2[96])
  759:[84] VarRef(var[72]) -> ref(1,33,0)={c:B}[84]
  762:[96] ConstText(_value="Two") -> "Two"[96]
  767:[112] SetText(v1=ref(1,33,0)[84], fld=4, val="Two"[96])
  770:[84] VarRef(var[72]) -> ref(1,33,0)={c:B,t:"Two"}[84]
  773:[96] ConstInt(val=2) -> 2[96]
  778:[100] SetInt(v1=ref(1,33,0)[84], fld=8, val=2[96])
  781:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[84]
  784:[96] VarRef(var[72]) -> ref(1,33,0)={c:B,t:"Two",v:2}[96]
  787:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,33,0)[96], parent_tp=14, fld=0)
  792:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[84]
  795:[96] NewRecord(data=ref(1,1,0)[84], parent_tp=14, fld=0) -> ref(1,37,0)[84]
  800:[96] PutRef(var[72], value=ref(1,37,0)[84])
  803:[84] VarRef(var[72]) -> ref(1,37,0)={}[84]
  806:[96] ConstEnum(val=3) -> C(3)[96]
  808:[97] SetEnum(v1=ref(1,37,0)[84], fld=12, val=3[96])
  811:[84] VarRef(var[72]) -> ref(1,37,0)={c:C}[84]
  814:[96] ConstText(_value="Two") -> "Two"[96]
  819:[112] SetText(v1=ref(1,37,0)[84], fld=4, val="Two"[96])
  822:[84] VarRef(var[72]) -> ref(1,37,0)={c:C,t:"Two"}[84]
  825:[96] ConstInt(val=20) -> 20[96]
  830:[100] SetInt(v1=ref(1,37,0)[84], fld=8, val=20[96])
  833:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[84]
  836:[96] VarRef(var[72]) -> ref(1,37,0)={c:C,t:"Two",v:20}[96]
  839:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,37,0)[96], parent_tp=14, fld=0)
  844:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[84]
  847:[96] NewRecord(data=ref(1,1,0)[84], parent_tp=14, fld=0) -> ref(1,41,0)[84]
  852:[96] PutRef(var[72], value=ref(1,41,0)[84])
  855:[84] VarRef(var[72]) -> ref(1,41,0)={}[84]
  858:[96] ConstEnum(val=1) -> A(1)[96]
  860:[97] SetEnum(v1=ref(1,41,0)[84], fld=12, val=1[96])
  863:[84] VarRef(var[72]) -> ref(1,41,0)={c:A}[84]
  866:[96] ConstText(_value="Three") -> "Three"[96]
  873:[112] SetText(v1=ref(1,41,0)[84], fld=4, val="Three"[96])
  876:[84] VarRef(var[72]) -> ref(1,41,0)={c:A,t:"Three"}[84]
  879:[96] ConstInt(val=3) -> 3[96]
  884:[100] SetInt(v1=ref(1,41,0)[84], fld=8, val=3[96])
  887:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[84]
  890:[96] VarRef(var[72]) -> ref(1,41,0)={c:A,t:"Three",v:3}[96]
  893:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,41,0)[96], parent_tp=14, fld=0)
  898:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[84]
  901:[96] NewRecord(data=ref(1,1,0)[84], parent_tp=14, fld=0) -> ref(1,45,0)[84]
  906:[96] PutRef(var[72], value=ref(1,45,0)[84])
  909:[84] VarRef(var[72]) -> ref(1,45,0)={}[84]
  912:[96] ConstEnum(val=3) -> C(3)[96]
  914:[97] SetEnum(v1=ref(1,45,0)[84], fld=12, val=3[96])
  917:[84] VarRef(var[72]) -> ref(1,45,0)={c:C}[84]
  920:[96] ConstText(_value="Four") -> "Four"[96]
  926:[112] SetText(v1=ref(1,45,0)[84], fld=4, val="Four"[96])
  929:[84] VarRef(var[72]) -> ref(1,45,0)={c:C,t:"Four"}[84]
  932:[96] ConstInt(val=4) -> 4[96]
  937:[100] SetInt(v1=ref(1,45,0)[84], fld=8, val=4[96])
  940:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[84]
  943:[96] VarRef(var[72]) -> ref(1,45,0)={c:C,t:"Four",v:4}[96]
  946:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,45,0)[96], parent_tp=14, fld=0)
  951:[84] FreeStack(value=0, discard=12)
  955:[72] Return(ret=1003[68], value=0, discard=16)
 1003:[56] VarRef(var[44]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[56]
 1006:[68] GetField(v1=ref(1,1,0)[56], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][56]
 1009:[68] ConstText(_value="Three") -> "Three"[68]
 1016:[84] ConstEnum(val=1) -> A(1)[84]
 1018:[85] GetRecord(data=ref(1,1,8)[56], db_tp=16, no_keys=2, key1=A(1)[84], key2="Three"[68]) -> ref(1,41,0)[56]
 1022:[68] GetInt(v1=ref(1,41,0)[56], fld=8) -> 3[56]
 1025:[60] VarRef(var[44]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[60]
 1028:[72] GetField(v1=ref(1,1,0)[60], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][60]
 1031:[72] ConstText(_value="Two") -> "Two"[72]
 1036:[88] ConstEnum(val=3) -> C(3)[88]
 1038:[89] GetRecord(data=ref(1,1,8)[60], db_tp=16, no_keys=2, key1=C(3)[88], key2="Two"[72]) -> ref(1,37,0)[60]
 1042:[72] GetInt(v1=ref(1,37,0)[60], fld=8) -> 20[60]
 1045:[64] AddInt(v1=3[56], v2=20[60]) -> 23[56]
 1046:[60] VarRef(var[44]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[60]
 1049:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}][60]
 1052:[72] ConstInt(val=4) -> 4[72]
 1057:[76] ConstText(_value="Four") -> "Four"[76]
 1063:[92] GetRecord(data=ref(1,1,4)[60], db_tp=15, no_keys=2, key1="Four"[76], key2=4[72]) -> ref(1,45,0)[60]
 1067:[72] GetInt(v1=ref(1,45,0)[60], fld=8) -> 4[60]
 1070:[64] AddInt(v1=23[56], v2=4[60]) -> 27[56]
 1071:[60] FreeStack(value=4, discard=16)
 1075:[48] VarInt(var[44]) -> 27[48]
 1078:[52] ConstInt(val=27) -> 27[52]
 1083:[56] EqInt(v1=27[48], v2=27[52]) -> true[48]
 1084:[49] GotoFalseWord(jump=1090, if_false=true[48])
 1087:[48] GotoWord(jump=1140)
 1140:[48] FreeText(var[20])
 1143:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
