enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}
Type 17:Cat[1]:Enum(["A", "B", "C"])

Type 18:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 19:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 20:ordered<Count[t,v]>[4]:Ordered(18, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ]

Type 21:hash<Count[c,t]>[4]:Hash(18, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ]

Type 22:vector<Count>[4]:Vector(18)

fn fill(c:Counting) {#block(1):void
  _elm_1(1):ref(Count)["c"] = OpNewRecord(c(0), 19i32, 0i32);
  OpSetEnum(_elm_1(1), 12i32, 1u8(17));
  OpSetText(_elm_1(1), 4i32, "One");
  OpSetInt(_elm_1(1), 8i32, 1i32);
  OpFinishRecord(c(0), _elm_1(1), 19i32, 0i32);
  _elm_1(1):ref(Count)["c"] = OpNewRecord(c(0), 19i32, 0i32);
  OpSetEnum(_elm_1(1), 12i32, 2u8(17));
  OpSetText(_elm_1(1), 4i32, "Two");
  OpSetInt(_elm_1(1), 8i32, 2i32);
  OpFinishRecord(c(0), _elm_1(1), 19i32, 0i32);
  _elm_1(1):ref(Count)["c"] = OpNewRecord(c(0), 19i32, 0i32);
  OpSetEnum(_elm_1(1), 12i32, 3u8(17));
  OpSetText(_elm_1(1), 4i32, "Two");
  OpSetInt(_elm_1(1), 8i32, 20i32);
  OpFinishRecord(c(0), _elm_1(1), 19i32, 0i32);
  _elm_1(1):ref(Count)["c"] = OpNewRecord(c(0), 19i32, 0i32);
  OpSetEnum(_elm_1(1), 12i32, 1u8(17));
  OpSetText(_elm_1(1), 4i32, "Three");
  OpSetInt(_elm_1(1), 8i32, 3i32);
  OpFinishRecord(c(0), _elm_1(1), 19i32, 0i32);
  _elm_1(1):ref(Count)["c"] = OpNewRecord(c(0), 19i32, 0i32);
  OpSetEnum(_elm_1(1), 12i32, 3u8(17));
  OpSetText(_elm_1(1), 4i32, "Four");
  OpSetInt(_elm_1(1), 8i32, 4i32);
  OpFinishRecord(c(0), _elm_1(1), 19i32, 0i32);
}#block(1):void

byte-code for multi_hash:fill(c: ref(Counting)[4]) [1119]
   0[16]: return-address
   0[20]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
   3[32]: NewRecord(data: ref(reference), parent_tp=19, fld=0) -> ref(reference)
   8[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
  11[44]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[17]
  13[45]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
  16[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
  19[44]: ConstText(_value="One") -> text
  24[60]: SetText(v1: ref(reference), fld=4, val: text)
  27[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
  30[44]: ConstInt(val=1) -> integer
  35[48]: SetInt(v1: ref(reference), fld=8, val: integer)
  38[32]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
  41[44]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
  44[56]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=0)
  49[32]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
  52[44]: NewRecord(data: ref(reference), parent_tp=19, fld=0) -> ref(reference)
  57[44]: PutRef(var[20], value: ref(reference))
  60[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
  63[44]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[17]
  65[45]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
  68[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
  71[44]: ConstText(_value="Two") -> text
  76[60]: SetText(v1: ref(reference), fld=4, val: text)
  79[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
  82[44]: ConstInt(val=2) -> integer
  87[48]: SetInt(v1: ref(reference), fld=8, val: integer)
  90[32]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
  93[44]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
  96[56]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=0)
 101[32]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
 104[44]: NewRecord(data: ref(reference), parent_tp=19, fld=0) -> ref(reference)
 109[44]: PutRef(var[20], value: ref(reference))
 112[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 115[44]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[17]
 117[45]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 120[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 123[44]: ConstText(_value="Two") -> text
 128[60]: SetText(v1: ref(reference), fld=4, val: text)
 131[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 134[44]: ConstInt(val=20) -> integer
 139[48]: SetInt(v1: ref(reference), fld=8, val: integer)
 142[32]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
 145[44]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 148[56]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=0)
 153[32]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
 156[44]: NewRecord(data: ref(reference), parent_tp=19, fld=0) -> ref(reference)
 161[44]: PutRef(var[20], value: ref(reference))
 164[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 167[44]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[17]
 169[45]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 172[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 175[44]: ConstText(_value="Three") -> text
 182[60]: SetText(v1: ref(reference), fld=4, val: text)
 185[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 188[44]: ConstInt(val=3) -> integer
 193[48]: SetInt(v1: ref(reference), fld=8, val: integer)
 196[32]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
 199[44]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 202[56]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=0)
 207[32]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
 210[44]: NewRecord(data: ref(reference), parent_tp=19, fld=0) -> ref(reference)
 215[44]: PutRef(var[20], value: ref(reference))
 218[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 221[44]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[17]
 223[45]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 226[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 229[44]: ConstText(_value="Four") -> text
 235[60]: SetText(v1: ref(reference), fld=4, val: text)
 238[32]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 241[44]: ConstInt(val=4) -> integer
 246[48]: SetInt(v1: ref(reference), fld=8, val: integer)
 249[32]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[4]:ref(Counting)
 252[44]: VarRef(var[20]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[18] var=_elm_1[20]:ref(Count)["c"]
 255[56]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=0)
 260[32]: Return(ret=12, value=0, discard=28)

fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    c(2):ref(Counting) = null;
    OpDatabase(c(2), 19i32);
    OpSetInt(c(2), 4i32, 0i32);
    OpSetInt(c(2), 8i32, 0i32);
    fill(c(2));
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c(2), 8i32, 21i32), 21i32, 2i32, 1u8(17), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c(2), 8i32, 21i32), 21i32, 2i32, 3u8(17), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c(2), 4i32, 20i32), 20i32, 2i32, "Four", 4i32), 8i32));
    OpFreeRef(c(2));
  }#block(2):integer;
  if OpEqInt(test_value(1), 27i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 27");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for multi_hash:test() [1385]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConvRefFromNull() -> ref(reference) var=c[32]:ref(Counting)
   2[44]: Database(var[32], db_tp=19) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19]
   7[44]: VarRef(var[32]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[32]:ref(Counting)
  10[56]: ConstInt(val=0) -> integer
  15[60]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[44]: VarRef(var[32]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[32]:ref(Counting)
  21[56]: ConstInt(val=0) -> integer
  26[60]: SetInt(v1: ref(reference), fld=8, val: integer)
  29[44]: VarRef(var[32]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[32]:ref(Counting)
  32[56]: Call(size=0, to=1119)
  39[44]: VarRef(var[32]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[32]:ref(Counting)
  42[56]: GetField(v1: ref(reference), fld=8) -> ref(reference) type=hash<Count[c,t]>[4]:Hash(18, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][21]
  45[56]: ConstText(_value="Three") -> text
  52[72]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[17]
  54[73]: GetRecord(data: ref(reference), db_tp=21, no_keys=2) -> ref(reference)
  58[56]: GetInt(v1: ref(reference), fld=8) -> integer
  61[48]: VarRef(var[32]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[32]:ref(Counting)
  64[60]: GetField(v1: ref(reference), fld=8) -> ref(reference) type=hash<Count[c,t]>[4]:Hash(18, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][21]
  67[60]: ConstText(_value="Two") -> text
  72[76]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[17]
  74[77]: GetRecord(data: ref(reference), db_tp=21, no_keys=2) -> ref(reference)
  78[60]: GetInt(v1: ref(reference), fld=8) -> integer
  81[52]: AddInt(v1: integer, v2: integer) -> integer
  82[48]: VarRef(var[32]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[32]:ref(Counting)
  85[60]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=ordered<Count[t,v]>[4]:Ordered(18, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][20]
  88[60]: ConstInt(val=4) -> integer
  93[64]: ConstText(_value="Four") -> text
  99[80]: GetRecord(data: ref(reference), db_tp=20, no_keys=2) -> ref(reference)
 103[60]: GetInt(v1: ref(reference), fld=8) -> integer
 106[52]: AddInt(v1: integer, v2: integer) -> integer
 107[48]: VarRef(var[32]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[19] var=c[32]:ref(Counting)
 110[60]: FreeRef(v1: ref(reference))
 111[48]: FreeStack(value=4, discard=16)
 115[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
 118[40]: ConstInt(val=27) -> integer
 123[44]: EqInt(v1: integer, v2: integer) -> boolean
 124[37]: GotoFalseWord(jump=130, if_false: boolean)
 127[36]: GotoWord(jump=180)
 130[36]: ClearText(var[8]) var=__work_1[8]:text
 133[36]: ConstText(_value="Test failed ") -> text
 147[52]: AppendText(var[8], v1: text)
 150[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
 153[40]: ConstInt(val=0) -> integer
 158[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 165[36]: ConstText(_value=" != 27") -> text
 173[52]: AppendText(var[8], v1: text)
 176[36]: VarText(var[8]) -> text var=__work_1[8]:text
 179[52]: Panic(message: text)
 180[36]: FreeText(var[8])
 183[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConvRefFromNull() -> ref(1,0,0)[32]
    2:[44] Database(var[32], db_tp=19)
    7:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
   10:[56] ConstInt(val=0) -> 0[56]
   15:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
   18:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
   21:[56] ConstInt(val=0) -> 0[56]
   26:[60] SetInt(v1=ref(1,1,0)[44], fld=8, val=0[56])
   29:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
   32:[56] Call(size=0, to=1119)
 1119:[60] VarRef(var[44]) -> ref(1,1,0)={v:[]}[60]
 1122:[72] NewRecord(data=ref(1,1,0)[60], parent_tp=19, fld=0) -> ref(1,13,0)[60]
 1127:[72] VarRef(var[60]) -> ref(1,13,0)={}[72]
 1130:[84] ConstEnum(val=1) -> A(1)[84]
 1132:[85] SetEnum(v1=ref(1,13,0)[72], fld=12, val=1[84])
 1135:[72] VarRef(var[60]) -> ref(1,13,0)={c:A}[72]
 1138:[84] ConstText(_value="One") -> "One"[84]
 1143:[100] SetText(v1=ref(1,13,0)[72], fld=4, val="One"[84])
 1146:[72] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One"}[72]
 1149:[84] ConstInt(val=1) -> 1[84]
 1154:[88] SetInt(v1=ref(1,13,0)[72], fld=8, val=1[84])
 1157:[72] VarRef(var[44]) -> ref(1,1,0)={v:[]}[72]
 1160:[84] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One",v:1}[84]
 1163:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,13,0)[84], parent_tp=19, fld=0)
 1168:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
 1171:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=19, fld=0) -> ref(1,33,0)[72]
 1176:[84] PutRef(var[60], value=ref(1,33,0)[72])
 1179:[72] VarRef(var[60]) -> ref(1,33,0)={}[72]
 1182:[84] ConstEnum(val=2) -> B(2)[84]
 1184:[85] SetEnum(v1=ref(1,33,0)[72], fld=12, val=2[84])
 1187:[72] VarRef(var[60]) -> ref(1,33,0)={c:B}[72]
 1190:[84] ConstText(_value="Two") -> "Two"[84]
 1195:[100] SetText(v1=ref(1,33,0)[72], fld=4, val="Two"[84])
 1198:[72] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two"}[72]
 1201:[84] ConstInt(val=2) -> 2[84]
 1206:[88] SetInt(v1=ref(1,33,0)[72], fld=8, val=2[84])
 1209:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
 1212:[84] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two",v:2}[84]
 1215:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,33,0)[84], parent_tp=19, fld=0)
 1220:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
 1223:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=19, fld=0) -> ref(1,37,0)[72]
 1228:[84] PutRef(var[60], value=ref(1,37,0)[72])
 1231:[72] VarRef(var[60]) -> ref(1,37,0)={}[72]
 1234:[84] ConstEnum(val=3) -> C(3)[84]
 1236:[85] SetEnum(v1=ref(1,37,0)[72], fld=12, val=3[84])
 1239:[72] VarRef(var[60]) -> ref(1,37,0)={c:C}[72]
 1242:[84] ConstText(_value="Two") -> "Two"[84]
 1247:[100] SetText(v1=ref(1,37,0)[72], fld=4, val="Two"[84])
 1250:[72] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two"}[72]
 1253:[84] ConstInt(val=20) -> 20[84]
 1258:[88] SetInt(v1=ref(1,37,0)[72], fld=8, val=20[84])
 1261:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
 1264:[84] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two",v:20}[84]
 1267:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,37,0)[84], parent_tp=19, fld=0)
 1272:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
 1275:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=19, fld=0) -> ref(1,41,0)[72]
 1280:[84] PutRef(var[60], value=ref(1,41,0)[72])
 1283:[72] VarRef(var[60]) -> ref(1,41,0)={}[72]
 1286:[84] ConstEnum(val=1) -> A(1)[84]
 1288:[85] SetEnum(v1=ref(1,41,0)[72], fld=12, val=1[84])
 1291:[72] VarRef(var[60]) -> ref(1,41,0)={c:A}[72]
 1294:[84] ConstText(_value="Three") -> "Three"[84]
 1301:[100] SetText(v1=ref(1,41,0)[72], fld=4, val="Three"[84])
 1304:[72] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three"}[72]
 1307:[84] ConstInt(val=3) -> 3[84]
 1312:[88] SetInt(v1=ref(1,41,0)[72], fld=8, val=3[84])
 1315:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
 1318:[84] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three",v:3}[84]
 1321:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,41,0)[84], parent_tp=19, fld=0)
 1326:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
 1329:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=19, fld=0) -> ref(1,45,0)[72]
 1334:[84] PutRef(var[60], value=ref(1,45,0)[72])
 1337:[72] VarRef(var[60]) -> ref(1,45,0)={}[72]
 1340:[84] ConstEnum(val=3) -> C(3)[84]
 1342:[85] SetEnum(v1=ref(1,45,0)[72], fld=12, val=3[84])
 1345:[72] VarRef(var[60]) -> ref(1,45,0)={c:C}[72]
 1348:[84] ConstText(_value="Four") -> "Four"[84]
 1354:[100] SetText(v1=ref(1,45,0)[72], fld=4, val="Four"[84])
 1357:[72] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four"}[72]
 1360:[84] ConstInt(val=4) -> 4[84]
 1365:[88] SetInt(v1=ref(1,45,0)[72], fld=8, val=4[84])
 1368:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
 1371:[84] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four",v:4}[84]
 1374:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,45,0)[84], parent_tp=19, fld=0)
 1379:[72] Return(ret=1424[56], value=0, discard=28)
   39:[44] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
   42:[56] GetField(v1=ref(1,1,0)[44], fld=8) -> ref(1,1,8)=[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Four",v:4},{c:C,t:"Two",v:20}][44]
   45:[56] ConstText(_value="Three") -> "Three"[56]
   52:[72] ConstEnum(val=1) -> A(1)[72]
   54:[73] GetRecord(data=ref(1,1,8)[44], db_tp=21, no_keys=2, key1=A(1)[72], key2="Three"[56]) -> ref(1,41,0)[44]
   58:[56] GetInt(v1=ref(1,41,0)[44], fld=8) -> 3[44]
   61:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
   64:[60] GetField(v1=ref(1,1,0)[48], fld=8) -> ref(1,1,8)=[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Four",v:4},{c:C,t:"Two",v:20}][48]
   67:[60] ConstText(_value="Two") -> "Two"[60]
   72:[76] ConstEnum(val=3) -> C(3)[76]
   74:[77] GetRecord(data=ref(1,1,8)[48], db_tp=21, no_keys=2, key1=C(3)[76], key2="Two"[60]) -> ref(1,37,0)[48]
   78:[60] GetInt(v1=ref(1,37,0)[48], fld=8) -> 20[48]
   81:[52] AddInt(v1=3[44], v2=20[48]) -> 23[44]
   82:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
   85:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}][48]
   88:[60] ConstInt(val=4) -> 4[60]
   93:[64] ConstText(_value="Four") -> "Four"[64]
   99:[80] GetRecord(data=ref(1,1,4)[48], db_tp=20, no_keys=2, key1="Four"[64], key2=4[60]) -> ref(1,45,0)[48]
  103:[60] GetInt(v1=ref(1,45,0)[48], fld=8) -> 4[48]
  106:[52] AddInt(v1=23[44], v2=4[48]) -> 27[44]
  107:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
  110:[60] FreeRef(v1=ref(1,1,0)[48])
  111:[48] FreeStack(value=4, discard=16)
  115:[36] VarInt(var[32]) -> 27[36]
  118:[40] ConstInt(val=27) -> 27[40]
  123:[44] EqInt(v1=27[36], v2=27[40]) -> true[36]
  124:[37] GotoFalseWord(jump=130, if_false=true[36])
  127:[36] GotoWord(jump=180)
  180:[36] FreeText(var[8])
  183:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
