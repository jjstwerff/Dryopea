Test code:
enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}

Type 13:Cat[1]:Enum(["A", "B", "C"])

Type 14:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 15:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 16:ordered<Count[t,v]>[4]:Ordered(14, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ]

Type 17:hash<Count[c,t]>[4]:Hash(14, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ]

Type 18:vector<Count>[4]:Vector(14)

fn fill {
  {
    let elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 1u8(13));
    OpSetText(elm_8, 4i32, "One");
    OpSetInt(elm_8, 8i32, 1i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
    elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 2u8(13));
    OpSetText(elm_8, 4i32, "Two");
    OpSetInt(elm_8, 8i32, 2i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
    elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 3u8(13));
    OpSetText(elm_8, 4i32, "Two");
    OpSetInt(elm_8, 8i32, 20i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
    elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 1u8(13));
    OpSetText(elm_8, 4i32, "Three");
    OpSetInt(elm_8, 8i32, 3i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
    elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 3u8(13));
    OpSetText(elm_8, 4i32, "Four");
    OpSetInt(elm_8, 8i32, 4i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
  };
}

byte-code for multi_hash:fill(c: Counting[0])
 668[12]: return-address
 668[16]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 671[28]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 676[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 679[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 681[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 684[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 687[40]: ConstText(_value="One") -> text(false)
 692[56]: SetText(v1: reference, fld=4, val: text(false))
 695[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 698[40]: ConstInt(val=1) -> integer
 703[44]: SetInt(v1: reference, fld=8, val: integer)
 706[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 709[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 712[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 717[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 720[40]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 725[40]: PutRef(var[16], value: reference)
 728[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 731[40]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 733[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 736[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 739[40]: ConstText(_value="Two") -> text(false)
 744[56]: SetText(v1: reference, fld=4, val: text(false))
 747[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 750[40]: ConstInt(val=2) -> integer
 755[44]: SetInt(v1: reference, fld=8, val: integer)
 758[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 761[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 764[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 769[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 772[40]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 777[40]: PutRef(var[16], value: reference)
 780[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 783[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 785[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 788[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 791[40]: ConstText(_value="Two") -> text(false)
 796[56]: SetText(v1: reference, fld=4, val: text(false))
 799[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 802[40]: ConstInt(val=20) -> integer
 807[44]: SetInt(v1: reference, fld=8, val: integer)
 810[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 813[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 816[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 821[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 824[40]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 829[40]: PutRef(var[16], value: reference)
 832[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 835[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 837[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 840[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 843[40]: ConstText(_value="Three") -> text(false)
 850[56]: SetText(v1: reference, fld=4, val: text(false))
 853[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 856[40]: ConstInt(val=3) -> integer
 861[44]: SetInt(v1: reference, fld=8, val: integer)
 864[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 867[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 870[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 875[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 878[40]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 883[40]: PutRef(var[16], value: reference)
 886[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 889[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 891[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 894[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 897[40]: ConstText(_value="Four") -> text(false)
 903[56]: SetText(v1: reference, fld=4, val: text(false))
 906[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 909[40]: ConstInt(val=4) -> integer
 914[44]: SetInt(v1: reference, fld=8, val: integer)
 917[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 920[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 923[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 928[28]: GenFreeStack(value=0, discard=12)
 932[16]: GenReturn(ret=12, value=0, discard=16)

fn test {
  let __work_4 = "";
  let test_value = {
    let c = {
      let val = OpDatabase(12i32, 15i32);
      OpSetInt(val, 4i32, 0i32);
      OpSetInt(val, 8i32, 0i32);
      val;
    };
    fill(c);
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 17i32), 17i32, 2i32, 1u8(13), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 17i32), 17i32, 2i32, 3u8(13), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c, 4i32, 16i32), 16i32, 2i32, "Four", 4i32), 8i32));
  };
  if OpEqInt(test_value, 27i32) {null} else {OpGenPanic({
    OpClearText(__work_4);
    OpAppendText(__work_4, "Test failed ");
    OpFormatInt(__work_4, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_4, " != 27");
    __work_4;
  })};
}

byte-code for multi_hash:test()
 938[0]: return-address
 938[4]: Text()
 939[28]: ConstText(_value="") -> text(false)
 941[44]: AppendText(var[4], v1: text(false))
 944[28]: Database(size=12, db_tp=15) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 949[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 952[52]: ConstInt(val=0) -> integer
 957[56]: SetInt(v1: reference, fld=4, val: integer)
 960[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 963[52]: ConstInt(val=0) -> integer
 968[56]: SetInt(v1: reference, fld=8, val: integer)
 971[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 974[52]: GenFreeStack(value=12, discard=12)
 978[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 981[52]: GenCall(size=0, to=668)
 988[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 991[52]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(14, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][17]
 994[52]: ConstText(_value="Three") -> text(false)
1001[68]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
1003[69]: GetRecord(data: reference, db_tp=17, no_keys=2) -> reference
1007[52]: GetInt(v1: reference, fld=8) -> integer
1010[44]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
1013[56]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(14, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][17]
1016[56]: ConstText(_value="Two") -> text(false)
1021[72]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
1023[73]: GetRecord(data: reference, db_tp=17, no_keys=2) -> reference
1027[56]: GetInt(v1: reference, fld=8) -> integer
1030[48]: AddInt(v1: integer, v2: integer) -> integer
1031[44]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
1034[56]: GetField(v1: reference, fld=4) -> reference type=ordered<Count[t,v]>[4]:Ordered(14, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][16]
1037[56]: ConstInt(val=4) -> integer
1042[60]: ConstText(_value="Four") -> text(false)
1048[76]: GetRecord(data: reference, db_tp=16, no_keys=2) -> reference
1052[56]: GetInt(v1: reference, fld=8) -> integer
1055[48]: AddInt(v1: integer, v2: integer) -> integer
1056[44]: GenFreeStack(value=4, discard=12)
1060[32]: VarInt(var[28]) -> integer
1063[36]: ConstInt(val=27) -> integer
1068[40]: EqInt(v1: integer, v2: integer) -> boolean
1069[33]: GenGotoFalseWord(jump=1075, if_false: boolean)
1072[32]: GenGotoWord(jump=1125)
1075[32]: ClearText(var[4])
1078[32]: ConstText(_value="Test failed ") -> text(false)
1092[48]: AppendText(var[4], v1: text(false))
1095[32]: VarInt(var[28]) -> integer
1098[36]: ConstInt(val=0) -> integer
1103[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1110[32]: ConstText(_value=" != 27") -> text(false)
1118[48]: AppendText(var[4], v1: text(false))
1121[32]: VarText(var[4]) -> text(false)
1124[48]: GenPanic(message: text(false))
1125[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  938:[8] Text()
  939:[32] ConstText(_value="") -> ""[32]
  941:[48] AppendText(var[8], v1=""[32])
  944:[32] Database(size=12, db_tp=15) -> ref(1,1,0)={v:[]}[32]
  949:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  952:[56] ConstInt(val=0) -> 0[56]
  957:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  960:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  963:[56] ConstInt(val=0) -> 0[56]
  968:[60] SetInt(v1=ref(1,1,0)[44], fld=8, val=0[56])
  971:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  974:[56] GenFreeStack(value=12, discard=12)
  978:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  981:[56] GenCall(size=0, to=668)
  668:[60] VarRef(var[44]) -> ref(1,1,0)={v:[]}[60]
  671:[72] NewRecord(data=ref(1,1,0)[60], parent_tp=15, fld=0) -> ref(1,13,0)[60]
  676:[72] VarRef(var[60]) -> ref(1,13,0)={}[72]
  679:[84] ConstEnum(val=1) -> A(1)[84]
  681:[85] SetEnum(v1=ref(1,13,0)[72], fld=12, val=1[84])
  684:[72] VarRef(var[60]) -> ref(1,13,0)={c:A}[72]
  687:[84] ConstText(_value="One") -> "One"[84]
  692:[100] SetText(v1=ref(1,13,0)[72], fld=4, val="One"[84])
  695:[72] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One"}[72]
  698:[84] ConstInt(val=1) -> 1[84]
  703:[88] SetInt(v1=ref(1,13,0)[72], fld=8, val=1[84])
  706:[72] VarRef(var[44]) -> ref(1,1,0)={v:[]}[72]
  709:[84] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One",v:1}[84]
  712:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,13,0)[84], parent_tp=15, fld=0)
  717:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  720:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=15, fld=0) -> ref(1,33,0)[72]
  725:[84] PutRef(var[60], value=ref(1,33,0)[72])
  728:[72] VarRef(var[60]) -> ref(1,33,0)={}[72]
  731:[84] ConstEnum(val=2) -> B(2)[84]
  733:[85] SetEnum(v1=ref(1,33,0)[72], fld=12, val=2[84])
  736:[72] VarRef(var[60]) -> ref(1,33,0)={c:B}[72]
  739:[84] ConstText(_value="Two") -> "Two"[84]
  744:[100] SetText(v1=ref(1,33,0)[72], fld=4, val="Two"[84])
  747:[72] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two"}[72]
  750:[84] ConstInt(val=2) -> 2[84]
  755:[88] SetInt(v1=ref(1,33,0)[72], fld=8, val=2[84])
  758:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  761:[84] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two",v:2}[84]
  764:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,33,0)[84], parent_tp=15, fld=0)
  769:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  772:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=15, fld=0) -> ref(1,37,0)[72]
  777:[84] PutRef(var[60], value=ref(1,37,0)[72])
  780:[72] VarRef(var[60]) -> ref(1,37,0)={}[72]
  783:[84] ConstEnum(val=3) -> C(3)[84]
  785:[85] SetEnum(v1=ref(1,37,0)[72], fld=12, val=3[84])
  788:[72] VarRef(var[60]) -> ref(1,37,0)={c:C}[72]
  791:[84] ConstText(_value="Two") -> "Two"[84]
  796:[100] SetText(v1=ref(1,37,0)[72], fld=4, val="Two"[84])
  799:[72] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two"}[72]
  802:[84] ConstInt(val=20) -> 20[84]
  807:[88] SetInt(v1=ref(1,37,0)[72], fld=8, val=20[84])
  810:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  813:[84] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two",v:20}[84]
  816:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,37,0)[84], parent_tp=15, fld=0)
  821:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  824:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=15, fld=0) -> ref(1,41,0)[72]
  829:[84] PutRef(var[60], value=ref(1,41,0)[72])
  832:[72] VarRef(var[60]) -> ref(1,41,0)={}[72]
  835:[84] ConstEnum(val=1) -> A(1)[84]
  837:[85] SetEnum(v1=ref(1,41,0)[72], fld=12, val=1[84])
  840:[72] VarRef(var[60]) -> ref(1,41,0)={c:A}[72]
  843:[84] ConstText(_value="Three") -> "Three"[84]
  850:[100] SetText(v1=ref(1,41,0)[72], fld=4, val="Three"[84])
  853:[72] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three"}[72]
  856:[84] ConstInt(val=3) -> 3[84]
  861:[88] SetInt(v1=ref(1,41,0)[72], fld=8, val=3[84])
  864:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  867:[84] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three",v:3}[84]
  870:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,41,0)[84], parent_tp=15, fld=0)
  875:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  878:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=15, fld=0) -> ref(1,45,0)[72]
  883:[84] PutRef(var[60], value=ref(1,45,0)[72])
  886:[72] VarRef(var[60]) -> ref(1,45,0)={}[72]
  889:[84] ConstEnum(val=3) -> C(3)[84]
  891:[85] SetEnum(v1=ref(1,45,0)[72], fld=12, val=3[84])
  894:[72] VarRef(var[60]) -> ref(1,45,0)={c:C}[72]
  897:[84] ConstText(_value="Four") -> "Four"[84]
  903:[100] SetText(v1=ref(1,45,0)[72], fld=4, val="Four"[84])
  906:[72] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four"}[72]
  909:[84] ConstInt(val=4) -> 4[84]
  914:[88] SetInt(v1=ref(1,45,0)[72], fld=8, val=4[84])
  917:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  920:[84] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four",v:4}[84]
  923:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,45,0)[84], parent_tp=15, fld=0)
  928:[72] GenFreeStack(value=0, discard=12)
  932:[60] GenReturn(ret=988[56], value=0, discard=16)
  988:[44] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
  991:[56] GetField(v1=ref(1,1,0)[44], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][44]
  994:[56] ConstText(_value="Three") -> "Three"[56]
 1001:[72] ConstEnum(val=1) -> A(1)[72]
 1003:[73] GetRecord(data=ref(1,1,8)[44], db_tp=17, no_keys=2, key1=A(1)[72], key2="Three"[56]) -> ref(1,41,0)[44]
 1007:[56] GetInt(v1=ref(1,41,0)[44], fld=8) -> 3[44]
 1010:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1013:[60] GetField(v1=ref(1,1,0)[48], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][48]
 1016:[60] ConstText(_value="Two") -> "Two"[60]
 1021:[76] ConstEnum(val=3) -> C(3)[76]
 1023:[77] GetRecord(data=ref(1,1,8)[48], db_tp=17, no_keys=2, key1=C(3)[76], key2="Two"[60]) -> ref(1,37,0)[48]
 1027:[60] GetInt(v1=ref(1,37,0)[48], fld=8) -> 20[48]
 1030:[52] AddInt(v1=3[44], v2=20[48]) -> 23[44]
 1031:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1034:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}][48]
 1037:[60] ConstInt(val=4) -> 4[60]
 1042:[64] ConstText(_value="Four") -> "Four"[64]
 1048:[80] GetRecord(data=ref(1,1,4)[48], db_tp=16, no_keys=2, key1="Four"[64], key2=4[60]) -> ref(1,45,0)[48]
 1052:[60] GetInt(v1=ref(1,45,0)[48], fld=8) -> 4[48]
 1055:[52] AddInt(v1=23[44], v2=4[48]) -> 27[44]
 1056:[48] GenFreeStack(value=4, discard=12)
 1060:[36] VarInt(var[32]) -> 27[36]
 1063:[40] ConstInt(val=27) -> 27[40]
 1068:[44] EqInt(v1=27[36], v2=27[40]) -> true[36]
 1069:[37] GenGotoFalseWord(jump=1075, if_false=true[36])
 1072:[36] GenGotoWord(jump=1125)
 1125:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
