Test code:
enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}

Type 13:Cat[1]:Enum(["A", "B", "C"])

Type 14:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 15:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 16:ordered<Count[t,v]>[4]:Ordered(14, [(1, true), (2, true)])

Type 17:hash<Count[c,t]>[4]:Hash(14, [0, 1]) keys [tp:13 desc:false field:12, tp:5 desc:false field:4, ]

Type 18:vector<Count>[4]:Vector(14)

fn fill {
  {
    let elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 1u8(13));
    OpSetText(elm_8, 4i32, "One");
    OpSetInt(elm_8, 8i32, 1i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
    elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 2u8(13));
    OpSetText(elm_8, 4i32, "Two");
    OpSetInt(elm_8, 8i32, 2i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
    elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 3u8(13));
    OpSetText(elm_8, 4i32, "Two");
    OpSetInt(elm_8, 8i32, 20i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
    elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 1u8(13));
    OpSetText(elm_8, 4i32, "Three");
    OpSetInt(elm_8, 8i32, 3i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
    elm_8 = OpNewRecord(c, 15i32, 0i32);
    OpSetEnum(elm_8, 12i32, 3u8(13));
    OpSetText(elm_8, 4i32, "Four");
    OpSetInt(elm_8, 8i32, 4i32);
    OpFinishRecord(c, elm_8, 15i32, 0i32);
  };
}

byte-code for multi_hash:fill(c: Counting[0])
 668[12]: return-address
 668[16]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 671[28]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 676[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 679[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 681[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 684[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 687[40]: ConstText(_value="One") -> text
 692[56]: SetText(v1: reference, fld=4, val: text)
 695[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 698[40]: ConstInt(val=1) -> integer
 703[44]: SetInt(v1: reference, fld=8, val: integer)
 706[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 709[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 712[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 717[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 720[40]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 725[40]: PutRef(var[16], value: reference)
 728[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 731[40]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 733[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 736[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 739[40]: ConstText(_value="Two") -> text
 744[56]: SetText(v1: reference, fld=4, val: text)
 747[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 750[40]: ConstInt(val=2) -> integer
 755[44]: SetInt(v1: reference, fld=8, val: integer)
 758[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 761[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 764[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 769[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 772[40]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 777[40]: PutRef(var[16], value: reference)
 780[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 783[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 785[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 788[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 791[40]: ConstText(_value="Two") -> text
 796[56]: SetText(v1: reference, fld=4, val: text)
 799[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 802[40]: ConstInt(val=20) -> integer
 807[44]: SetInt(v1: reference, fld=8, val: integer)
 810[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 813[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 816[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 821[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 824[40]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 829[40]: PutRef(var[16], value: reference)
 832[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 835[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 837[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 840[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 843[40]: ConstText(_value="Three") -> text
 850[56]: SetText(v1: reference, fld=4, val: text)
 853[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 856[40]: ConstInt(val=3) -> integer
 861[44]: SetInt(v1: reference, fld=8, val: integer)
 864[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 867[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 870[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 875[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 878[40]: NewRecord(data: reference, parent_tp=15, fld=0) -> reference
 883[40]: PutRef(var[16], value: reference)
 886[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 889[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 891[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 894[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 897[40]: ConstText(_value="Four") -> text
 903[56]: SetText(v1: reference, fld=4, val: text)
 906[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 909[40]: ConstInt(val=4) -> integer
 914[44]: SetInt(v1: reference, fld=8, val: integer)
 917[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 920[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[14]
 923[52]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=0)
 928[28]: GenFreeStack(value=0, discard=12)
 932[16]: GenReturn(ret=12, value=0, discard=16)

fn test {
  let test_value = {
    let c = {
      let val = OpDatabase(12i32, 15i32);
      OpSetInt(val, 4i32, 0i32);
      OpSetInt(val, 8i32, 0i32);
      val;
    };
    fill(c);
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 17i32), 17i32, 2i32, 1u8(13), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 17i32), 17i32, 2i32, 3u8(13), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c, 4i32, 16i32), 16i32, 2i32, "Four", 4i32), 8i32));
  };
  if OpEqInt(test_value, 27i32) {null} else {OpGenPanic({
    let append_10 = "Test failed ";
    OpFormatInt(append_10, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_10, " != 27");
    append_10;
  })};
}

byte-code for multi_hash:test()
 938[0]: return-address
 938[4]: Database(size=12, db_tp=15) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 943[16]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 946[28]: ConstInt(val=0) -> integer
 951[32]: SetInt(v1: reference, fld=4, val: integer)
 954[16]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 957[28]: ConstInt(val=0) -> integer
 962[32]: SetInt(v1: reference, fld=8, val: integer)
 965[16]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 968[28]: GenFreeStack(value=12, discard=12)
 972[16]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 975[28]: GenCall(size=0, to=668)
 982[16]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
 985[28]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(14, [0, 1]) keys [tp:13 desc:false field:12, tp:5 desc:false field:4, ][17]
 988[28]: ConstText(_value="Three") -> text
 995[44]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
 997[45]: GetRecord(data: reference, db_tp=17, no_keys=2) -> reference
1001[28]: GetInt(v1: reference, fld=8) -> integer
1004[20]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
1007[32]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(14, [0, 1]) keys [tp:13 desc:false field:12, tp:5 desc:false field:4, ][17]
1010[32]: ConstText(_value="Two") -> text
1015[48]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[13]
1017[49]: GetRecord(data: reference, db_tp=17, no_keys=2) -> reference
1021[32]: GetInt(v1: reference, fld=8) -> integer
1024[24]: AddInt(v1: integer, v2: integer) -> integer
1025[20]: VarRef(var[4]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[15]
1028[32]: GetField(v1: reference, fld=4) -> reference type=ordered<Count[t,v]>[4]:Ordered(14, [(1, true), (2, true)])[16]
1031[32]: ConstInt(val=4) -> integer
1036[36]: ConstText(_value="Four") -> text
1042[52]: GetRecord(data: reference, db_tp=16, no_keys=2) -> reference
1046[32]: GetInt(v1: reference, fld=8) -> integer
1049[24]: AddInt(v1: integer, v2: integer) -> integer
1050[20]: GenFreeStack(value=4, discard=12)
1054[8]: VarInt(var[4]) -> integer
1057[12]: ConstInt(val=27) -> integer
1062[16]: EqInt(v1: integer, v2: integer) -> boolean
1063[9]: GenGotoFalseWord(jump=1069, if_false: boolean)
1066[8]: GenGotoWord(jump=1121)
1069[8]: Text()
1070[32]: ConstText(_value="Test failed ") -> text
1084[48]: AppendText(var[8], v1: text)
1087[32]: VarInt(var[4]) -> integer
1090[36]: ConstInt(val=0) -> integer
1095[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1102[32]: ConstText(_value=" != 27") -> text
1110[48]: AppendText(var[8], v1: text)
1113[32]: VarText(var[8]) -> text
1116[48]: GenFreeStack(value=16, discard=24)
1120[24]: GenPanic(message: text)
1121[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  938:[4] Database(size=12, db_tp=15) -> ref(1,1,0)={v:[]}[4]
  943:[16] VarRef(var[4]) -> ref(1,1,0)={v:[]}[16]
  946:[28] ConstInt(val=0) -> 0[28]
  951:[32] SetInt(v1=ref(1,1,0)[16], fld=4, val=0[28])
  954:[16] VarRef(var[4]) -> ref(1,1,0)={v:[]}[16]
  957:[28] ConstInt(val=0) -> 0[28]
  962:[32] SetInt(v1=ref(1,1,0)[16], fld=8, val=0[28])
  965:[16] VarRef(var[4]) -> ref(1,1,0)={v:[]}[16]
  968:[28] GenFreeStack(value=12, discard=12)
  972:[16] VarRef(var[4]) -> ref(1,1,0)={v:[]}[16]
  975:[28] GenCall(size=0, to=668)
  668:[32] VarRef(var[16]) -> ref(1,1,0)={v:[]}[32]
  671:[44] NewRecord(data=ref(1,1,0)[32], parent_tp=15, fld=0) -> ref(1,13,0)[32]
  676:[44] VarRef(var[32]) -> ref(1,13,0)={}[44]
  679:[56] ConstEnum(val=1) -> A(1)[56]
  681:[57] SetEnum(v1=ref(1,13,0)[44], fld=12, val=1[56])
  684:[44] VarRef(var[32]) -> ref(1,13,0)={c:A}[44]
  687:[56] ConstText(_value="One") -> "One"[56]
  692:[72] SetText(v1=ref(1,13,0)[44], fld=4, val="One"[56])
  695:[44] VarRef(var[32]) -> ref(1,13,0)={c:A,t:"One"}[44]
  698:[56] ConstInt(val=1) -> 1[56]
  703:[60] SetInt(v1=ref(1,13,0)[44], fld=8, val=1[56])
  706:[44] VarRef(var[16]) -> ref(1,1,0)={v:[]}[44]
  709:[56] VarRef(var[32]) -> ref(1,13,0)={c:A,t:"One",v:1}[56]
  712:[68] FinishRecord(data=ref(1,1,0)[44], rec=ref(1,13,0)[56], parent_tp=15, fld=0)
  717:[44] VarRef(var[16]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[44]
  720:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=15, fld=0) -> ref(1,33,0)[44]
  725:[56] PutRef(var[32], value=ref(1,33,0)[44])
  728:[44] VarRef(var[32]) -> ref(1,33,0)={}[44]
  731:[56] ConstEnum(val=2) -> B(2)[56]
  733:[57] SetEnum(v1=ref(1,33,0)[44], fld=12, val=2[56])
  736:[44] VarRef(var[32]) -> ref(1,33,0)={c:B}[44]
  739:[56] ConstText(_value="Two") -> "Two"[56]
  744:[72] SetText(v1=ref(1,33,0)[44], fld=4, val="Two"[56])
  747:[44] VarRef(var[32]) -> ref(1,33,0)={c:B,t:"Two"}[44]
  750:[56] ConstInt(val=2) -> 2[56]
  755:[60] SetInt(v1=ref(1,33,0)[44], fld=8, val=2[56])
  758:[44] VarRef(var[16]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[44]
  761:[56] VarRef(var[32]) -> ref(1,33,0)={c:B,t:"Two",v:2}[56]
  764:[68] FinishRecord(data=ref(1,1,0)[44], rec=ref(1,33,0)[56], parent_tp=15, fld=0)
  769:[44] VarRef(var[16]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[44]
  772:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=15, fld=0) -> ref(1,37,0)[44]
  777:[56] PutRef(var[32], value=ref(1,37,0)[44])
  780:[44] VarRef(var[32]) -> ref(1,37,0)={}[44]
  783:[56] ConstEnum(val=3) -> C(3)[56]
  785:[57] SetEnum(v1=ref(1,37,0)[44], fld=12, val=3[56])
  788:[44] VarRef(var[32]) -> ref(1,37,0)={c:C}[44]
  791:[56] ConstText(_value="Two") -> "Two"[56]
  796:[72] SetText(v1=ref(1,37,0)[44], fld=4, val="Two"[56])
  799:[44] VarRef(var[32]) -> ref(1,37,0)={c:C,t:"Two"}[44]
  802:[56] ConstInt(val=20) -> 20[56]
  807:[60] SetInt(v1=ref(1,37,0)[44], fld=8, val=20[56])
  810:[44] VarRef(var[16]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[44]
  813:[56] VarRef(var[32]) -> ref(1,37,0)={c:C,t:"Two",v:20}[56]
  816:[68] FinishRecord(data=ref(1,1,0)[44], rec=ref(1,37,0)[56], parent_tp=15, fld=0)
  821:[44] VarRef(var[16]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
  824:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=15, fld=0) -> ref(1,41,0)[44]
  829:[56] PutRef(var[32], value=ref(1,41,0)[44])
  832:[44] VarRef(var[32]) -> ref(1,41,0)={}[44]
  835:[56] ConstEnum(val=1) -> A(1)[56]
  837:[57] SetEnum(v1=ref(1,41,0)[44], fld=12, val=1[56])
  840:[44] VarRef(var[32]) -> ref(1,41,0)={c:A}[44]
  843:[56] ConstText(_value="Three") -> "Three"[56]
  850:[72] SetText(v1=ref(1,41,0)[44], fld=4, val="Three"[56])
  853:[44] VarRef(var[32]) -> ref(1,41,0)={c:A,t:"Three"}[44]
  856:[56] ConstInt(val=3) -> 3[56]
  861:[60] SetInt(v1=ref(1,41,0)[44], fld=8, val=3[56])
  864:[44] VarRef(var[16]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
  867:[56] VarRef(var[32]) -> ref(1,41,0)={c:A,t:"Three",v:3}[56]
  870:[68] FinishRecord(data=ref(1,1,0)[44], rec=ref(1,41,0)[56], parent_tp=15, fld=0)
  875:[44] VarRef(var[16]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
  878:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=15, fld=0) -> ref(1,45,0)[44]
  883:[56] PutRef(var[32], value=ref(1,45,0)[44])
  886:[44] VarRef(var[32]) -> ref(1,45,0)={}[44]
  889:[56] ConstEnum(val=3) -> C(3)[56]
  891:[57] SetEnum(v1=ref(1,45,0)[44], fld=12, val=3[56])
  894:[44] VarRef(var[32]) -> ref(1,45,0)={c:C}[44]
  897:[56] ConstText(_value="Four") -> "Four"[56]
  903:[72] SetText(v1=ref(1,45,0)[44], fld=4, val="Four"[56])
  906:[44] VarRef(var[32]) -> ref(1,45,0)={c:C,t:"Four"}[44]
  909:[56] ConstInt(val=4) -> 4[56]
  914:[60] SetInt(v1=ref(1,45,0)[44], fld=8, val=4[56])
  917:[44] VarRef(var[16]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
  920:[56] VarRef(var[32]) -> ref(1,45,0)={c:C,t:"Four",v:4}[56]
  923:[68] FinishRecord(data=ref(1,1,0)[44], rec=ref(1,45,0)[56], parent_tp=15, fld=0)
  928:[44] GenFreeStack(value=0, discard=12)
  932:[32] GenReturn(ret=982[28], value=0, discard=16)
  982:[16] VarRef(var[4]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[16]
  985:[28] GetField(v1=ref(1,1,0)[16], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][16]
  988:[28] ConstText(_value="Three") -> "Three"[28]
  995:[44] ConstEnum(val=1) -> A(1)[44]
  997:[45] GetRecord(data=ref(1,1,8)[16], db_tp=17, no_keys=2, key1=A(1)[44], key2="Three"[28]) -> ref(1,41,0)[16]
 1001:[28] GetInt(v1=ref(1,41,0)[16], fld=8) -> 3[16]
 1004:[20] VarRef(var[4]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[20]
 1007:[32] GetField(v1=ref(1,1,0)[20], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][20]
 1010:[32] ConstText(_value="Two") -> "Two"[32]
 1015:[48] ConstEnum(val=3) -> C(3)[48]
 1017:[49] GetRecord(data=ref(1,1,8)[20], db_tp=17, no_keys=2, key1=C(3)[48], key2="Two"[32]) -> ref(1,37,0)[20]
 1021:[32] GetInt(v1=ref(1,37,0)[20], fld=8) -> 20[20]
 1024:[24] AddInt(v1=3[16], v2=20[20]) -> 23[16]
 1025:[20] VarRef(var[4]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[20]
 1028:[32] GetField(v1=ref(1,1,0)[20], fld=4) -> ref(1,1,4)=[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}][20]
 1031:[32] ConstInt(val=4) -> 4[32]
 1036:[36] ConstText(_value="Four") -> "Four"[36]
 1042:[52] GetRecord(data=ref(1,1,4)[20], db_tp=16, no_keys=2, key1="Four"[36], key2=4[32]) -> ref(1,45,0)[20]
 1046:[32] GetInt(v1=ref(1,45,0)[20], fld=8) -> 4[20]
 1049:[24] AddInt(v1=23[16], v2=4[20]) -> 27[16]
 1050:[20] GenFreeStack(value=4, discard=12)
 1054:[8] VarInt(var[4]) -> 27[8]
 1057:[12] ConstInt(val=27) -> 27[12]
 1062:[16] EqInt(v1=27[8], v2=27[12]) -> true[8]
 1063:[9] GenGotoFalseWord(jump=1069, if_false=true[8])
 1066:[8] GenGotoWord(jump=1121)
 1121:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
