enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}
Type 11:Cat[1]:Enum(["A", "B", "C"])

Type 12:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 13:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 14:ordered<Count[t,v]>[4]:Ordered(12, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ]

Type 15:hash<Count[c,t]>[4]:Hash(12, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ]

Type 16:vector<Count>[4]:Vector(12)

fn fill(c:Counting) {#1 block
  {#2 vector
    let _elm_1:Count = OpNewRecord(c, 13i32, 0i32);
    {#3 object
      OpSetEnum(_elm_1, 12i32, 1u8(11));
      OpSetText(_elm_1, 4i32, "One");
      OpSetInt(_elm_1, 8i32, 1i32);
    }#3;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1 = OpNewRecord(c, 13i32, 0i32);
    {#4 object
      OpSetEnum(_elm_1, 12i32, 2u8(11));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 2i32);
    }#4;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1 = OpNewRecord(c, 13i32, 0i32);
    {#5 object
      OpSetEnum(_elm_1, 12i32, 3u8(11));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 20i32);
    }#5;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1 = OpNewRecord(c, 13i32, 0i32);
    {#6 object
      OpSetEnum(_elm_1, 12i32, 1u8(11));
      OpSetText(_elm_1, 4i32, "Three");
      OpSetInt(_elm_1, 8i32, 3i32);
    }#6;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
    _elm_1 = OpNewRecord(c, 13i32, 0i32);
    {#7 object
      OpSetEnum(_elm_1, 12i32, 3u8(11));
      OpSetText(_elm_1, 4i32, "Four");
      OpSetInt(_elm_1, 8i32, 4i32);
    }#7;
    OpFinishRecord(c, _elm_1, 13i32, 0i32);
  }#2;
}#1

byte-code for multi_hash:fill(c: Counting[0])
 675[12]: return-address
 675[16]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 678[28]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 683[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 686[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 688[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 691[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 694[40]: ConstText(_value="One") -> text
 699[56]: SetText(v1: reference, fld=4, val: text)
 702[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 705[40]: ConstInt(val=1) -> integer
 710[44]: SetInt(v1: reference, fld=8, val: integer)
 713[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 716[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 719[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 724[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 727[40]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 732[40]: PutRef(var[16], value: reference)
 735[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 738[40]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 740[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 743[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 746[40]: ConstText(_value="Two") -> text
 751[56]: SetText(v1: reference, fld=4, val: text)
 754[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 757[40]: ConstInt(val=2) -> integer
 762[44]: SetInt(v1: reference, fld=8, val: integer)
 765[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 768[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 771[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 776[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 779[40]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 784[40]: PutRef(var[16], value: reference)
 787[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 790[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 792[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 795[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 798[40]: ConstText(_value="Two") -> text
 803[56]: SetText(v1: reference, fld=4, val: text)
 806[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 809[40]: ConstInt(val=20) -> integer
 814[44]: SetInt(v1: reference, fld=8, val: integer)
 817[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 820[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 823[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 828[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 831[40]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 836[40]: PutRef(var[16], value: reference)
 839[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 842[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 844[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 847[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 850[40]: ConstText(_value="Three") -> text
 857[56]: SetText(v1: reference, fld=4, val: text)
 860[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 863[40]: ConstInt(val=3) -> integer
 868[44]: SetInt(v1: reference, fld=8, val: integer)
 871[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 874[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 877[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 882[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 885[40]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 890[40]: PutRef(var[16], value: reference)
 893[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 896[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
 898[41]: SetEnum(v1: reference, fld=12, val: enumerate)
 901[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 904[40]: ConstText(_value="Four") -> text
 910[56]: SetText(v1: reference, fld=4, val: text)
 913[28]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 916[40]: ConstInt(val=4) -> integer
 921[44]: SetInt(v1: reference, fld=8, val: integer)
 924[28]: VarRef(var[0]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 927[40]: VarRef(var[16]) -> reference type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[12]
 930[52]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 935[28]: FreeStack(value=0, discard=12)
 939[16]: Return(ret=12, value=0, discard=16)

fn test() {#1 block
  let __work_1:text = "";
  let test_value:integer = {#2 block
    let c:Counting = {#3 object
      let _val_1:Counting = OpDatabase(12i32, 13i32);
      OpSetInt(_val_1, 4i32, 0i32);
      OpSetInt(_val_1, 8i32, 0i32);
      _val_1;
    }#3:Counting;
    fill(c);
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 15i32), 15i32, 2i32, 1u8(11), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 15i32), 15i32, 2i32, 3u8(11), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c, 4i32, 14i32), 14i32, 2i32, "Four", 4i32), 8i32));
  }#2:integer;
  if OpEqInt(test_value, 27i32) null else OpPanic({#4 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 27");
    __work_1;
  }#4:text);
}#1

byte-code for multi_hash:test()
 945[0]: return-address
 945[4]: Text()
 946[28]: Database(size=12, db_tp=13) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 951[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 954[52]: ConstInt(val=0) -> integer
 959[56]: SetInt(v1: reference, fld=4, val: integer)
 962[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 965[52]: ConstInt(val=0) -> integer
 970[56]: SetInt(v1: reference, fld=8, val: integer)
 973[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 976[52]: FreeStack(value=12, discard=12) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 980[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 983[52]: Call(size=0, to=675)
 990[40]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
 993[52]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(12, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][15]
 996[52]: ConstText(_value="Three") -> text
1003[68]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
1005[69]: GetRecord(data: reference, db_tp=15, no_keys=2) -> reference
1009[52]: GetInt(v1: reference, fld=8) -> integer
1012[44]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
1015[56]: GetField(v1: reference, fld=8) -> reference type=hash<Count[c,t]>[4]:Hash(12, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][15]
1018[56]: ConstText(_value="Two") -> text
1023[72]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[11]
1025[73]: GetRecord(data: reference, db_tp=15, no_keys=2) -> reference
1029[56]: GetInt(v1: reference, fld=8) -> integer
1032[48]: AddInt(v1: integer, v2: integer) -> integer
1033[44]: VarRef(var[28]) -> reference type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[13]
1036[56]: GetField(v1: reference, fld=4) -> reference type=ordered<Count[t,v]>[4]:Ordered(12, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][14]
1039[56]: ConstInt(val=4) -> integer
1044[60]: ConstText(_value="Four") -> text
1050[76]: GetRecord(data: reference, db_tp=14, no_keys=2) -> reference
1054[56]: GetInt(v1: reference, fld=8) -> integer
1057[48]: AddInt(v1: integer, v2: integer) -> integer
1058[44]: FreeStack(value=4, discard=12) type=integer[4]:Base[0]
1062[32]: VarInt(var[28]) -> integer
1065[36]: ConstInt(val=27) -> integer
1070[40]: EqInt(v1: integer, v2: integer) -> boolean
1071[33]: GotoFalseWord(jump=1077, if_false: boolean)
1074[32]: GotoWord(jump=1127)
1077[32]: ClearText(var[4])
1080[32]: ConstText(_value="Test failed ") -> text
1094[48]: AppendText(var[4], v1: text)
1097[32]: VarInt(var[28]) -> integer
1100[36]: ConstInt(val=0) -> integer
1105[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1112[32]: ConstText(_value=" != 27") -> text
1120[48]: AppendText(var[4], v1: text)
1123[32]: VarText(var[4]) -> text
1126[48]: Panic(message: text)
1127[32]: Return(ret=0, value=0, discard=32)

Execute test:
  945:[8] Text()
  946:[32] Database(size=12, db_tp=13) -> ref(1,1,0)={v:[]}[32]
  951:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  954:[56] ConstInt(val=0) -> 0[56]
  959:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  962:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  965:[56] ConstInt(val=0) -> 0[56]
  970:[60] SetInt(v1=ref(1,1,0)[44], fld=8, val=0[56])
  973:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  976:[56] FreeStack(value=12, discard=12)
  980:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
  983:[56] Call(size=0, to=675)
  675:[60] VarRef(var[44]) -> ref(1,1,0)={v:[]}[60]
  678:[72] NewRecord(data=ref(1,1,0)[60], parent_tp=13, fld=0) -> ref(1,13,0)[60]
  683:[72] VarRef(var[60]) -> ref(1,13,0)={}[72]
  686:[84] ConstEnum(val=1) -> A(1)[84]
  688:[85] SetEnum(v1=ref(1,13,0)[72], fld=12, val=1[84])
  691:[72] VarRef(var[60]) -> ref(1,13,0)={c:A}[72]
  694:[84] ConstText(_value="One") -> "One"[84]
  699:[100] SetText(v1=ref(1,13,0)[72], fld=4, val="One"[84])
  702:[72] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One"}[72]
  705:[84] ConstInt(val=1) -> 1[84]
  710:[88] SetInt(v1=ref(1,13,0)[72], fld=8, val=1[84])
  713:[72] VarRef(var[44]) -> ref(1,1,0)={v:[]}[72]
  716:[84] VarRef(var[60]) -> ref(1,13,0)={c:A,t:"One",v:1}[84]
  719:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,13,0)[84], parent_tp=13, fld=0)
  724:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  727:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,33,0)[72]
  732:[84] PutRef(var[60], value=ref(1,33,0)[72])
  735:[72] VarRef(var[60]) -> ref(1,33,0)={}[72]
  738:[84] ConstEnum(val=2) -> B(2)[84]
  740:[85] SetEnum(v1=ref(1,33,0)[72], fld=12, val=2[84])
  743:[72] VarRef(var[60]) -> ref(1,33,0)={c:B}[72]
  746:[84] ConstText(_value="Two") -> "Two"[84]
  751:[100] SetText(v1=ref(1,33,0)[72], fld=4, val="Two"[84])
  754:[72] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two"}[72]
  757:[84] ConstInt(val=2) -> 2[84]
  762:[88] SetInt(v1=ref(1,33,0)[72], fld=8, val=2[84])
  765:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[72]
  768:[84] VarRef(var[60]) -> ref(1,33,0)={c:B,t:"Two",v:2}[84]
  771:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,33,0)[84], parent_tp=13, fld=0)
  776:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  779:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,37,0)[72]
  784:[84] PutRef(var[60], value=ref(1,37,0)[72])
  787:[72] VarRef(var[60]) -> ref(1,37,0)={}[72]
  790:[84] ConstEnum(val=3) -> C(3)[84]
  792:[85] SetEnum(v1=ref(1,37,0)[72], fld=12, val=3[84])
  795:[72] VarRef(var[60]) -> ref(1,37,0)={c:C}[72]
  798:[84] ConstText(_value="Two") -> "Two"[84]
  803:[100] SetText(v1=ref(1,37,0)[72], fld=4, val="Two"[84])
  806:[72] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two"}[72]
  809:[84] ConstInt(val=20) -> 20[84]
  814:[88] SetInt(v1=ref(1,37,0)[72], fld=8, val=20[84])
  817:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[72]
  820:[84] VarRef(var[60]) -> ref(1,37,0)={c:C,t:"Two",v:20}[84]
  823:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,37,0)[84], parent_tp=13, fld=0)
  828:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  831:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,41,0)[72]
  836:[84] PutRef(var[60], value=ref(1,41,0)[72])
  839:[72] VarRef(var[60]) -> ref(1,41,0)={}[72]
  842:[84] ConstEnum(val=1) -> A(1)[84]
  844:[85] SetEnum(v1=ref(1,41,0)[72], fld=12, val=1[84])
  847:[72] VarRef(var[60]) -> ref(1,41,0)={c:A}[72]
  850:[84] ConstText(_value="Three") -> "Three"[84]
  857:[100] SetText(v1=ref(1,41,0)[72], fld=4, val="Three"[84])
  860:[72] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three"}[72]
  863:[84] ConstInt(val=3) -> 3[84]
  868:[88] SetInt(v1=ref(1,41,0)[72], fld=8, val=3[84])
  871:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  874:[84] VarRef(var[60]) -> ref(1,41,0)={c:A,t:"Three",v:3}[84]
  877:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,41,0)[84], parent_tp=13, fld=0)
  882:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  885:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=13, fld=0) -> ref(1,45,0)[72]
  890:[84] PutRef(var[60], value=ref(1,45,0)[72])
  893:[72] VarRef(var[60]) -> ref(1,45,0)={}[72]
  896:[84] ConstEnum(val=3) -> C(3)[84]
  898:[85] SetEnum(v1=ref(1,45,0)[72], fld=12, val=3[84])
  901:[72] VarRef(var[60]) -> ref(1,45,0)={c:C}[72]
  904:[84] ConstText(_value="Four") -> "Four"[84]
  910:[100] SetText(v1=ref(1,45,0)[72], fld=4, val="Four"[84])
  913:[72] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four"}[72]
  916:[84] ConstInt(val=4) -> 4[84]
  921:[88] SetInt(v1=ref(1,45,0)[72], fld=8, val=4[84])
  924:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[72]
  927:[84] VarRef(var[60]) -> ref(1,45,0)={c:C,t:"Four",v:4}[84]
  930:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,45,0)[84], parent_tp=13, fld=0)
  935:[72] FreeStack(value=0, discard=12)
  939:[60] Return(ret=990[56], value=0, discard=16)
  990:[44] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[44]
  993:[56] GetField(v1=ref(1,1,0)[44], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][44]
  996:[56] ConstText(_value="Three") -> "Three"[56]
 1003:[72] ConstEnum(val=1) -> A(1)[72]
 1005:[73] GetRecord(data=ref(1,1,8)[44], db_tp=15, no_keys=2, key1=A(1)[72], key2="Three"[56]) -> ref(1,41,0)[44]
 1009:[56] GetInt(v1=ref(1,41,0)[44], fld=8) -> 3[44]
 1012:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1015:[60] GetField(v1=ref(1,1,0)[48], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][48]
 1018:[60] ConstText(_value="Two") -> "Two"[60]
 1023:[76] ConstEnum(val=3) -> C(3)[76]
 1025:[77] GetRecord(data=ref(1,1,8)[48], db_tp=15, no_keys=2, key1=C(3)[76], key2="Two"[60]) -> ref(1,37,0)[48]
 1029:[60] GetInt(v1=ref(1,37,0)[48], fld=8) -> 20[48]
 1032:[52] AddInt(v1=3[44], v2=20[48]) -> 23[44]
 1033:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1036:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}][48]
 1039:[60] ConstInt(val=4) -> 4[60]
 1044:[64] ConstText(_value="Four") -> "Four"[64]
 1050:[80] GetRecord(data=ref(1,1,4)[48], db_tp=14, no_keys=2, key1="Four"[64], key2=4[60]) -> ref(1,45,0)[48]
 1054:[60] GetInt(v1=ref(1,45,0)[48], fld=8) -> 4[48]
 1057:[52] AddInt(v1=23[44], v2=4[48]) -> 27[44]
 1058:[48] FreeStack(value=4, discard=12)
 1062:[36] VarInt(var[32]) -> 27[36]
 1065:[40] ConstInt(val=27) -> 27[40]
 1070:[44] EqInt(v1=27[36], v2=27[40]) -> true[36]
 1071:[37] GotoFalseWord(jump=1077, if_false=true[36])
 1074:[36] GotoWord(jump=1127)
 1127:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
