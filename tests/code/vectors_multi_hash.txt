enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}
Type 12:Cat[1]:Enum(["A", "B", "C"])

Type 13:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 14:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 15:ordered<Count[t,v]>[4]:Ordered(13, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ]

Type 16:hash<Count[c,t]>[4]:Hash(13, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ]

Type 17:vector<Count>[4]:Vector(13)

fn fill(c:Counting) {#1 block
  {#2 vector
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 14i32, 0i32);
    {#3 object
      OpSetEnum(_elm_1, 12i32, 1u8(12));
      OpSetText(_elm_1, 4i32, "One");
      OpSetInt(_elm_1, 8i32, 1i32);
    }#3;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 14i32, 0i32);
    {#4 object
      OpSetEnum(_elm_1, 12i32, 2u8(12));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 2i32);
    }#4;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 14i32, 0i32);
    {#5 object
      OpSetEnum(_elm_1, 12i32, 3u8(12));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 20i32);
    }#5;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 14i32, 0i32);
    {#6 object
      OpSetEnum(_elm_1, 12i32, 1u8(12));
      OpSetText(_elm_1, 4i32, "Three");
      OpSetInt(_elm_1, 8i32, 3i32);
    }#6;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 14i32, 0i32);
    {#7 object
      OpSetEnum(_elm_1, 12i32, 3u8(12));
      OpSetText(_elm_1, 4i32, "Four");
      OpSetInt(_elm_1, 8i32, 4i32);
    }#7;
    OpFinishRecord(c, _elm_1, 14i32, 0i32);
  }#2;
}#1

byte-code for multi_hash:fill(c: ref(Counting)[0])
 655[12]: return-address
 655[16]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 658[28]: NewRecord(data: ref(reference), parent_tp=14, fld=0) -> ref(reference)
 663[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 666[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 668[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 671[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 674[40]: ConstText(_value="One") -> text
 679[56]: SetText(v1: ref(reference), fld=4, val: text)
 682[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 685[40]: ConstInt(val=1) -> integer
 690[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 693[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 696[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 699[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=0)
 704[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 707[40]: NewRecord(data: ref(reference), parent_tp=14, fld=0) -> ref(reference)
 712[40]: PutRef(var[16], value: ref(reference))
 715[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 718[40]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 720[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 723[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 726[40]: ConstText(_value="Two") -> text
 731[56]: SetText(v1: ref(reference), fld=4, val: text)
 734[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 737[40]: ConstInt(val=2) -> integer
 742[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 745[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 748[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 751[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=0)
 756[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 759[40]: NewRecord(data: ref(reference), parent_tp=14, fld=0) -> ref(reference)
 764[40]: PutRef(var[16], value: ref(reference))
 767[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 770[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 772[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 775[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 778[40]: ConstText(_value="Two") -> text
 783[56]: SetText(v1: ref(reference), fld=4, val: text)
 786[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 789[40]: ConstInt(val=20) -> integer
 794[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 797[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 800[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 803[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=0)
 808[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 811[40]: NewRecord(data: ref(reference), parent_tp=14, fld=0) -> ref(reference)
 816[40]: PutRef(var[16], value: ref(reference))
 819[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 822[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 824[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 827[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 830[40]: ConstText(_value="Three") -> text
 837[56]: SetText(v1: ref(reference), fld=4, val: text)
 840[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 843[40]: ConstInt(val=3) -> integer
 848[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 851[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 854[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 857[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=0)
 862[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 865[40]: NewRecord(data: ref(reference), parent_tp=14, fld=0) -> ref(reference)
 870[40]: PutRef(var[16], value: ref(reference))
 873[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 876[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 878[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 881[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 884[40]: ConstText(_value="Four") -> text
 890[56]: SetText(v1: ref(reference), fld=4, val: text)
 893[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 896[40]: ConstInt(val=4) -> integer
 901[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 904[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[0]:ref(Counting) in 0
 907[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[13] var=_elm_1[16]:ref(Count)["c"] in 2
 910[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=0)
 915[28]: FreeStack(value=0, discard=12)
 919[16]: Return(ret=12, value=0, discard=16)

fn test() {#1 block
  __ref_1:ref(Counting) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    c:ref(Counting)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 14i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      OpSetInt(__ref_1, 8i32, 0i32);
      __ref_1;
    }#3:ref(Counting)["__ref_1"];
    fill(c);
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 16i32), 16i32, 2i32, 1u8(12), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 16i32), 16i32, 2i32, 3u8(12), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c, 4i32, 15i32), 15i32, 2i32, "Four", 4i32), 8i32));
  }#2:integer;
  if OpEqInt(test_value, 27i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 27");
    __work_1;
  }#4:text);
}#1

byte-code for multi_hash:test()
 925[0]: return-address
 925[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Counting) in 1
 926[16]: Text() var=__work_1[16]:text in 1
 927[40]: Database(var[4], db_tp=14) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[40]:ref(Counting)["__ref_1"] in 2
 932[40]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=__ref_1[4]:ref(Counting) in 1
 935[52]: ConstInt(val=0) -> integer
 940[56]: SetInt(v1: ref(reference), fld=4, val: integer)
 943[40]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=__ref_1[4]:ref(Counting) in 1
 946[52]: ConstInt(val=0) -> integer
 951[56]: SetInt(v1: ref(reference), fld=8, val: integer)
 954[40]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=__ref_1[4]:ref(Counting) in 1
 957[52]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[40]:ref(Counting)["__ref_1"] in 2
 960[64]: Call(size=0, to=655)
 967[52]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[40]:ref(Counting)["__ref_1"] in 2
 970[64]: GetField(v1: ref(reference), fld=8) -> ref(reference) type=hash<Count[c,t]>[4]:Hash(13, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][16]
 973[64]: ConstText(_value="Three") -> text
 980[80]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
 982[81]: GetRecord(data: ref(reference), db_tp=16, no_keys=2) -> ref(reference)
 986[64]: GetInt(v1: ref(reference), fld=8) -> integer
 989[56]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[40]:ref(Counting)["__ref_1"] in 2
 992[68]: GetField(v1: ref(reference), fld=8) -> ref(reference) type=hash<Count[c,t]>[4]:Hash(13, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][16]
 995[68]: ConstText(_value="Two") -> text
1000[84]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[12]
1002[85]: GetRecord(data: ref(reference), db_tp=16, no_keys=2) -> ref(reference)
1006[68]: GetInt(v1: ref(reference), fld=8) -> integer
1009[60]: AddInt(v1: integer, v2: integer) -> integer
1010[56]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=c[40]:ref(Counting)["__ref_1"] in 2
1013[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=ordered<Count[t,v]>[4]:Ordered(13, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][15]
1016[68]: ConstInt(val=4) -> integer
1021[72]: ConstText(_value="Four") -> text
1027[88]: GetRecord(data: ref(reference), db_tp=15, no_keys=2) -> ref(reference)
1031[68]: GetInt(v1: ref(reference), fld=8) -> integer
1034[60]: AddInt(v1: integer, v2: integer) -> integer
1035[56]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
1039[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
1042[48]: ConstInt(val=27) -> integer
1047[52]: EqInt(v1: integer, v2: integer) -> boolean
1048[45]: GotoFalseWord(jump=1054, if_false: boolean)
1051[44]: GotoWord(jump=1104)
1054[44]: ClearText(var[16]) var=__work_1[16]:text in 1
1057[44]: ConstText(_value="Test failed ") -> text
1071[60]: AppendText(var[16], v1: text)
1074[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
1077[48]: ConstInt(val=0) -> integer
1082[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1089[44]: ConstText(_value=" != 27") -> text
1097[60]: AppendText(var[16], v1: text)
1100[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
1103[60]: Panic(message: text)
1104[44]: FreeText(var[16])
1107[44]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[14] var=__ref_1[4]:ref(Counting) in 1
1110[56]: FreeRef(v1: ref(reference))
1111[44]: Return(ret=0, value=0, discard=44)

Execute test:
  925:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  926:[20] Text()
  927:[44] Database(var[8], db_tp=14)
  932:[44] VarRef(var[8]) -> ref(1,1,0)={v:[]}[44]
  935:[56] ConstInt(val=0) -> 0[56]
  940:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  943:[44] VarRef(var[8]) -> ref(1,1,0)={v:[]}[44]
  946:[56] ConstInt(val=0) -> 0[56]
  951:[60] SetInt(v1=ref(1,1,0)[44], fld=8, val=0[56])
  954:[44] VarRef(var[8]) -> ref(1,1,0)={v:[]}[44]
  957:[56] VarRef(var[44]) -> ref(1,1,0)={v:[]}[56]
  960:[68] Call(size=0, to=655)
  655:[72] VarRef(var[56]) -> ref(1,1,0)={v:[]}[72]
  658:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=14, fld=0) -> ref(1,13,0)[72]
  663:[84] VarRef(var[72]) -> ref(1,13,0)={}[84]
  666:[96] ConstEnum(val=1) -> A(1)[96]
  668:[97] SetEnum(v1=ref(1,13,0)[84], fld=12, val=1[96])
  671:[84] VarRef(var[72]) -> ref(1,13,0)={c:A}[84]
  674:[96] ConstText(_value="One") -> "One"[96]
  679:[112] SetText(v1=ref(1,13,0)[84], fld=4, val="One"[96])
  682:[84] VarRef(var[72]) -> ref(1,13,0)={c:A,t:"One"}[84]
  685:[96] ConstInt(val=1) -> 1[96]
  690:[100] SetInt(v1=ref(1,13,0)[84], fld=8, val=1[96])
  693:[84] VarRef(var[56]) -> ref(1,1,0)={v:[]}[84]
  696:[96] VarRef(var[72]) -> ref(1,13,0)={c:A,t:"One",v:1}[96]
  699:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,13,0)[96], parent_tp=14, fld=0)
  704:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[84]
  707:[96] NewRecord(data=ref(1,1,0)[84], parent_tp=14, fld=0) -> ref(1,33,0)[84]
  712:[96] PutRef(var[72], value=ref(1,33,0)[84])
  715:[84] VarRef(var[72]) -> ref(1,33,0)={}[84]
  718:[96] ConstEnum(val=2) -> B(2)[96]
  720:[97] SetEnum(v1=ref(1,33,0)[84], fld=12, val=2[96])
  723:[84] VarRef(var[72]) -> ref(1,33,0)={c:B}[84]
  726:[96] ConstText(_value="Two") -> "Two"[96]
  731:[112] SetText(v1=ref(1,33,0)[84], fld=4, val="Two"[96])
  734:[84] VarRef(var[72]) -> ref(1,33,0)={c:B,t:"Two"}[84]
  737:[96] ConstInt(val=2) -> 2[96]
  742:[100] SetInt(v1=ref(1,33,0)[84], fld=8, val=2[96])
  745:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1}]}[84]
  748:[96] VarRef(var[72]) -> ref(1,33,0)={c:B,t:"Two",v:2}[96]
  751:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,33,0)[96], parent_tp=14, fld=0)
  756:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[84]
  759:[96] NewRecord(data=ref(1,1,0)[84], parent_tp=14, fld=0) -> ref(1,37,0)[84]
  764:[96] PutRef(var[72], value=ref(1,37,0)[84])
  767:[84] VarRef(var[72]) -> ref(1,37,0)={}[84]
  770:[96] ConstEnum(val=3) -> C(3)[96]
  772:[97] SetEnum(v1=ref(1,37,0)[84], fld=12, val=3[96])
  775:[84] VarRef(var[72]) -> ref(1,37,0)={c:C}[84]
  778:[96] ConstText(_value="Two") -> "Two"[96]
  783:[112] SetText(v1=ref(1,37,0)[84], fld=4, val="Two"[96])
  786:[84] VarRef(var[72]) -> ref(1,37,0)={c:C,t:"Two"}[84]
  789:[96] ConstInt(val=20) -> 20[96]
  794:[100] SetInt(v1=ref(1,37,0)[84], fld=8, val=20[96])
  797:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2}]}[84]
  800:[96] VarRef(var[72]) -> ref(1,37,0)={c:C,t:"Two",v:20}[96]
  803:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,37,0)[96], parent_tp=14, fld=0)
  808:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[84]
  811:[96] NewRecord(data=ref(1,1,0)[84], parent_tp=14, fld=0) -> ref(1,41,0)[84]
  816:[96] PutRef(var[72], value=ref(1,41,0)[84])
  819:[84] VarRef(var[72]) -> ref(1,41,0)={}[84]
  822:[96] ConstEnum(val=1) -> A(1)[96]
  824:[97] SetEnum(v1=ref(1,41,0)[84], fld=12, val=1[96])
  827:[84] VarRef(var[72]) -> ref(1,41,0)={c:A}[84]
  830:[96] ConstText(_value="Three") -> "Three"[96]
  837:[112] SetText(v1=ref(1,41,0)[84], fld=4, val="Three"[96])
  840:[84] VarRef(var[72]) -> ref(1,41,0)={c:A,t:"Three"}[84]
  843:[96] ConstInt(val=3) -> 3[96]
  848:[100] SetInt(v1=ref(1,41,0)[84], fld=8, val=3[96])
  851:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[84]
  854:[96] VarRef(var[72]) -> ref(1,41,0)={c:A,t:"Three",v:3}[96]
  857:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,41,0)[96], parent_tp=14, fld=0)
  862:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[84]
  865:[96] NewRecord(data=ref(1,1,0)[84], parent_tp=14, fld=0) -> ref(1,45,0)[84]
  870:[96] PutRef(var[72], value=ref(1,45,0)[84])
  873:[84] VarRef(var[72]) -> ref(1,45,0)={}[84]
  876:[96] ConstEnum(val=3) -> C(3)[96]
  878:[97] SetEnum(v1=ref(1,45,0)[84], fld=12, val=3[96])
  881:[84] VarRef(var[72]) -> ref(1,45,0)={c:C}[84]
  884:[96] ConstText(_value="Four") -> "Four"[96]
  890:[112] SetText(v1=ref(1,45,0)[84], fld=4, val="Four"[96])
  893:[84] VarRef(var[72]) -> ref(1,45,0)={c:C,t:"Four"}[84]
  896:[96] ConstInt(val=4) -> 4[96]
  901:[100] SetInt(v1=ref(1,45,0)[84], fld=8, val=4[96])
  904:[84] VarRef(var[56]) -> ref(1,1,0)={v:[{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[84]
  907:[96] VarRef(var[72]) -> ref(1,45,0)={c:C,t:"Four",v:4}[96]
  910:[108] FinishRecord(data=ref(1,1,0)[84], rec=ref(1,45,0)[96], parent_tp=14, fld=0)
  915:[84] FreeStack(value=0, discard=12)
  919:[72] Return(ret=967[68], value=0, discard=16)
  967:[56] VarRef(var[44]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[56]
  970:[68] GetField(v1=ref(1,1,0)[56], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][56]
  973:[68] ConstText(_value="Three") -> "Three"[68]
  980:[84] ConstEnum(val=1) -> A(1)[84]
  982:[85] GetRecord(data=ref(1,1,8)[56], db_tp=16, no_keys=2, key1=A(1)[84], key2="Three"[68]) -> ref(1,41,0)[56]
  986:[68] GetInt(v1=ref(1,41,0)[56], fld=8) -> 3[56]
  989:[60] VarRef(var[44]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[60]
  992:[72] GetField(v1=ref(1,1,0)[60], fld=8) -> ref(1,1,8)=[{c:B,t:"Two",v:2},{c:A,t:"One",v:1},{c:C,t:"Two",v:20},{c:A,t:"Three",v:3},{c:C,t:"Four",v:4}][60]
  995:[72] ConstText(_value="Two") -> "Two"[72]
 1000:[88] ConstEnum(val=3) -> C(3)[88]
 1002:[89] GetRecord(data=ref(1,1,8)[60], db_tp=16, no_keys=2, key1=C(3)[88], key2="Two"[72]) -> ref(1,37,0)[60]
 1006:[72] GetInt(v1=ref(1,37,0)[60], fld=8) -> 20[60]
 1009:[64] AddInt(v1=3[56], v2=20[60]) -> 23[56]
 1010:[60] VarRef(var[44]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[60]
 1013:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}][60]
 1016:[72] ConstInt(val=4) -> 4[72]
 1021:[76] ConstText(_value="Four") -> "Four"[76]
 1027:[92] GetRecord(data=ref(1,1,4)[60], db_tp=15, no_keys=2, key1="Four"[76], key2=4[72]) -> ref(1,45,0)[60]
 1031:[72] GetInt(v1=ref(1,45,0)[60], fld=8) -> 4[60]
 1034:[64] AddInt(v1=23[56], v2=4[60]) -> 27[56]
 1035:[60] FreeStack(value=4, discard=16)
 1039:[48] VarInt(var[44]) -> 27[48]
 1042:[52] ConstInt(val=27) -> 27[52]
 1047:[56] EqInt(v1=27[48], v2=27[52]) -> true[48]
 1048:[49] GotoFalseWord(jump=1054, if_false=true[48])
 1051:[48] GotoWord(jump=1104)
 1104:[48] FreeText(var[20])
 1107:[48] VarRef(var[8]) -> ref(1,1,0)={v:[{c:C,t:"Four",v:4},{c:A,t:"One",v:1},{c:A,t:"Three",v:3},{c:B,t:"Two",v:2},{c:C,t:"Two",v:20}]}[48]
 1110:[60] FreeRef(v1=ref(1,1,0)[48])
 1111:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
