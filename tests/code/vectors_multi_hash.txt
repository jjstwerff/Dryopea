enum Cat { A, B, C };
struct Count { c: Cat, t: text, v: integer};
struct Counting { v: sorted<Count[t,v]>, h: hash<Count[c,t]> };
fn fill(c: Counting) {
  c.v = [
    {c:A, t:"One", v:1},
    {c:B, t:"Two", v:2},
    {c:C, t:"Two", v:20},
    {c:A, t:"Three", v:3},
    {c:C, t:"Four", v:4}
  ]
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h[A,"Three"].v + c.h[C,"Two"].v + c.v["Four",4].v};
    assert(
        test_value == 27,
        "Test failed {test_value} != 27"
    );
}
Type 15:Cat[1]:Enum(["A", "B", "C"])

Type 16:Count[13]:
    c:Cat[12]
    t:text[4]
    v:integer[8]

Type 17:Counting[12]:
    v:ordered<Count[t,v]>[4] other [1]
    h:hash<Count[c,t]>[8] other [65535]

Type 18:ordered<Count[t,v]>[4]:Ordered(16, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ]

Type 19:hash<Count[c,t]>[4]:Hash(16, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ]

Type 20:vector<Count>[4]:Vector(16)

fn fill(c:Counting) {#1 block
  {#2 vector
    OpClear(OpGetField(c, 4i32, 18i32), 18i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 17i32, 0i32);
    {#3 object
      OpSetEnum(_elm_1, 12i32, 1u8(15));
      OpSetText(_elm_1, 4i32, "One");
      OpSetInt(_elm_1, 8i32, 1i32);
    }#3;
    OpFinishRecord(c, _elm_1, 17i32, 0i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 17i32, 0i32);
    {#4 object
      OpSetEnum(_elm_1, 12i32, 2u8(15));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 2i32);
    }#4;
    OpFinishRecord(c, _elm_1, 17i32, 0i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 17i32, 0i32);
    {#5 object
      OpSetEnum(_elm_1, 12i32, 3u8(15));
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 20i32);
    }#5;
    OpFinishRecord(c, _elm_1, 17i32, 0i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 17i32, 0i32);
    {#6 object
      OpSetEnum(_elm_1, 12i32, 1u8(15));
      OpSetText(_elm_1, 4i32, "Three");
      OpSetInt(_elm_1, 8i32, 3i32);
    }#6;
    OpFinishRecord(c, _elm_1, 17i32, 0i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 17i32, 0i32);
    {#7 object
      OpSetEnum(_elm_1, 12i32, 3u8(15));
      OpSetText(_elm_1, 4i32, "Four");
      OpSetInt(_elm_1, 8i32, 4i32);
    }#7;
    OpFinishRecord(c, _elm_1, 17i32, 0i32);
  }#2;
}#1

byte-code for multi_hash:fill(c: ref(Counting)[0]) [1073]
   0[12]: return-address
   0[16]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
   3[28]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=ordered<Count[t,v]>[4]:Ordered(16, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][18]
   6[28]: Clear(data: ref(reference), tp=18)
   9[16]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
  12[28]: NewRecord(data: ref(reference), parent_tp=17, fld=0) -> ref(reference)
  17[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
  20[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[15]
  22[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
  25[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
  28[40]: ConstText(_value="One") -> text
  33[56]: SetText(v1: ref(reference), fld=4, val: text)
  36[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
  39[40]: ConstInt(val=1) -> integer
  44[44]: SetInt(v1: ref(reference), fld=8, val: integer)
  47[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
  50[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
  53[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=0)
  58[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
  61[40]: NewRecord(data: ref(reference), parent_tp=17, fld=0) -> ref(reference)
  66[40]: PutRef(var[16], value: ref(reference))
  69[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
  72[40]: ConstEnum(val=2) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[15]
  74[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
  77[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
  80[40]: ConstText(_value="Two") -> text
  85[56]: SetText(v1: ref(reference), fld=4, val: text)
  88[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
  91[40]: ConstInt(val=2) -> integer
  96[44]: SetInt(v1: ref(reference), fld=8, val: integer)
  99[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
 102[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 105[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=0)
 110[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
 113[40]: NewRecord(data: ref(reference), parent_tp=17, fld=0) -> ref(reference)
 118[40]: PutRef(var[16], value: ref(reference))
 121[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 124[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[15]
 126[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 129[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 132[40]: ConstText(_value="Two") -> text
 137[56]: SetText(v1: ref(reference), fld=4, val: text)
 140[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 143[40]: ConstInt(val=20) -> integer
 148[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 151[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
 154[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 157[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=0)
 162[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
 165[40]: NewRecord(data: ref(reference), parent_tp=17, fld=0) -> ref(reference)
 170[40]: PutRef(var[16], value: ref(reference))
 173[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 176[40]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[15]
 178[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 181[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 184[40]: ConstText(_value="Three") -> text
 191[56]: SetText(v1: ref(reference), fld=4, val: text)
 194[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 197[40]: ConstInt(val=3) -> integer
 202[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 205[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
 208[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 211[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=0)
 216[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
 219[40]: NewRecord(data: ref(reference), parent_tp=17, fld=0) -> ref(reference)
 224[40]: PutRef(var[16], value: ref(reference))
 227[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 230[40]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[15]
 232[41]: SetEnum(v1: ref(reference), fld=12, val: enumerate)
 235[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 238[40]: ConstText(_value="Four") -> text
 244[56]: SetText(v1: ref(reference), fld=4, val: text)
 247[28]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 250[40]: ConstInt(val=4) -> integer
 255[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 258[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[0]:ref(Counting) in 0
 261[40]: VarRef(var[16]) -> ref(reference) type=Count[13]:{c:Cat[12], t:text[4], v:integer[8]}[16] var=_elm_1[16]:ref(Count)["c"] in 2
 264[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=0)
 269[28]: FreeStack(value=0, discard=12)
 273[16]: Return(ret=12, value=0, discard=16)

fn test() {#1 block
  __ref_1:ref(Counting) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    c:ref(Counting)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 17i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      OpSetInt(__ref_1, 8i32, 0i32);
      __ref_1;
    }#3:ref(Counting)["__ref_1"];
    fill(c);
    OpAddInt(OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 19i32), 19i32, 2i32, 1u8(15), "Three"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 19i32), 19i32, 2i32, 3u8(15), "Two"), 8i32)), OpGetInt(OpGetRecord(OpGetField(c, 4i32, 18i32), 18i32, 2i32, "Four", 4i32), 8i32));
  }#2:integer;
  if OpEqInt(test_value, 27i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 27");
    __work_1;
  }#4:text);
}#1

byte-code for multi_hash:test() [1352]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Counting) in 1
   1[16]: Text() var=__work_1[16]:text in 1
   2[40]: Database(var[4], db_tp=17) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[40]:ref(Counting)["__ref_1"] in 2
   7[40]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=__ref_1[4]:ref(Counting) in 1
  10[52]: ConstInt(val=0) -> integer
  15[56]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[40]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=__ref_1[4]:ref(Counting) in 1
  21[52]: ConstInt(val=0) -> integer
  26[56]: SetInt(v1: ref(reference), fld=8, val: integer)
  29[40]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=__ref_1[4]:ref(Counting) in 1
  32[52]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[40]:ref(Counting)["__ref_1"] in 2
  35[64]: Call(size=0, to=1073)
  42[52]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[40]:ref(Counting)["__ref_1"] in 2
  45[64]: GetField(v1: ref(reference), fld=8) -> ref(reference) type=hash<Count[c,t]>[4]:Hash(16, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][19]
  48[64]: ConstText(_value="Three") -> text
  55[80]: ConstEnum(val=1) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[15]
  57[81]: GetRecord(data: ref(reference), db_tp=19, no_keys=2) -> ref(reference)
  61[64]: GetInt(v1: ref(reference), fld=8) -> integer
  64[56]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[40]:ref(Counting)["__ref_1"] in 2
  67[68]: GetField(v1: ref(reference), fld=8) -> ref(reference) type=hash<Count[c,t]>[4]:Hash(16, [0, 1]) keys [tp:7 desc:false field:12, tp:6 desc:false field:4, ][19]
  70[68]: ConstText(_value="Two") -> text
  75[84]: ConstEnum(val=3) -> enumerate type=Cat[1]:Enum(["A", "B", "C"])[15]
  77[85]: GetRecord(data: ref(reference), db_tp=19, no_keys=2) -> ref(reference)
  81[68]: GetInt(v1: ref(reference), fld=8) -> integer
  84[60]: AddInt(v1: integer, v2: integer) -> integer
  85[56]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=c[40]:ref(Counting)["__ref_1"] in 2
  88[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=ordered<Count[t,v]>[4]:Ordered(16, [(1, true), (2, true)]) keys [tp:6 desc:false field:4, tp:1 desc:false field:8, ][18]
  91[68]: ConstInt(val=4) -> integer
  96[72]: ConstText(_value="Four") -> text
 102[88]: GetRecord(data: ref(reference), db_tp=18, no_keys=2) -> ref(reference)
 106[68]: GetInt(v1: ref(reference), fld=8) -> integer
 109[60]: AddInt(v1: integer, v2: integer) -> integer
 110[56]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
 114[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 117[48]: ConstInt(val=27) -> integer
 122[52]: EqInt(v1: integer, v2: integer) -> boolean
 123[45]: GotoFalseWord(jump=129, if_false: boolean)
 126[44]: GotoWord(jump=179)
 129[44]: ClearText(var[16]) var=__work_1[16]:text in 1
 132[44]: ConstText(_value="Test failed ") -> text
 146[60]: AppendText(var[16], v1: text)
 149[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 152[48]: ConstInt(val=0) -> integer
 157[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 164[44]: ConstText(_value=" != 27") -> text
 172[60]: AppendText(var[16], v1: text)
 175[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 178[60]: Panic(message: text)
 179[44]: FreeText(var[16])
 182[44]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:ordered<Count[t,v]>[4] other [1], h:hash<Count[c,t]>[8] other [65535]}[17] var=__ref_1[4]:ref(Counting) in 1
 185[56]: FreeRef(v1: ref(reference))
 186[44]: Return(ret=0, value=0, discard=44)

