pub fn test() {
    test_value = {"{for x in 0..10 if x != 0 && x % 3 == 0 {if x#first { x } else {x * 2}}}"};
    assert(
        test_value == "[3,12,18]",
        "Test failed {test_value} != \"[3,12,18]\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "";
      OpAppendText(__work_1, "[");
      x#index:integer = OpConvIntFromNull();
      x#count:integer = 0i32;
      loop {#4 iter for
        _val_1:integer = {#5 iter for loop
          x:integer = {#6 for next
            x#index:integer = if OpNot(OpConvBoolFromInt(x#index)) 0i32 else OpAddInt(x#index, 1i32);
            if OpGeInt(x#index, 10i32) break(0) else null;
            x#index;
          }#6:integer;
          if if OpNeInt(x, 0i32) OpEqInt(OpRemInt(x, 3i32), 0i32) else false null else continue(0);
          {#7 block
            if OpEqInt(x#count, 0i32) {#8 block
              x;
            }#8:integer else {#9 block
              OpMulInt(x, 2i32);
            }#9:integer;
          }#7:integer;
        }#5:integer;
        if OpGtInt(x#count, 0i32) OpAppendText(__work_1, ",") else null;
        x#count:integer = OpAddInt(x#count, 1i32);
        OpFormatInt(__work_1, _val_1, 10i32, 0i32, 32i32, false, false);
      }#4;
      OpAppendText(__work_1, "]");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "[3,12,18]") null else OpPanic({#10 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[3,12,18]"");
    __work_2;
  }#10:text);
}#1

byte-code for loop_variables:test()
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: ClearText(var[28]) var=__work_1[28]:text in 1
   6[76]: ConstText(_value="") -> text
   8[92]: AppendText(var[28], v1: text)
  11[76]: ConstText(_value="[") -> text
  14[92]: AppendText(var[28], v1: text)
  17[76]: ConvIntFromNull() -> integer var=x#index[76]:integer in 3
  18[80]: ConstInt(val=0) -> integer var=x#count[80]:integer in 3
  23[84]: VarInt(var[76]) -> integer var=x#index[76]:integer in 3
  26[88]: ConvBoolFromInt(v1: integer) -> boolean
  27[85]: Not(v1: boolean) -> boolean
  28[85]: GotoFalseWord(jump=39, if_false: boolean)
  31[84]: ConstInt(val=0) -> integer
  36[88]: GotoWord(jump=48)
  39[84]: VarInt(var[76]) -> integer var=x#index[76]:integer in 3
  42[88]: ConstInt(val=1) -> integer
  47[92]: AddInt(v1: integer, v2: integer) -> integer
  48[88]: PutInt(var[76], value: integer)
  51[84]: VarInt(var[76]) -> integer var=x#index[76]:integer in 3
  54[88]: ConstInt(val=10) -> integer
  59[92]: GeInt(v1: integer, v2: integer) -> boolean
  60[85]: GotoFalseWord(jump=66, if_false: boolean)
  63[84]: GotoWord(jump=196)
  66[84]: VarInt(var[76]) -> integer var=x#index[76]:integer in 3
  69[88]: VarInt(var[84]) -> integer var=x[84]:integer in 5
  72[92]: ConstInt(val=0) -> integer
  77[96]: NeInt(v1: integer, v2: integer) -> boolean
  78[89]: GotoFalseWord(jump=99, if_false: boolean)
  81[88]: VarInt(var[84]) -> integer var=x[84]:integer in 5
  84[92]: ConstInt(val=3) -> integer
  89[96]: RemInt(v1: integer, v2: integer) -> integer
  90[92]: ConstInt(val=0) -> integer
  95[96]: EqInt(v1: integer, v2: integer) -> boolean
  96[89]: GotoWord(jump=100)
  99[88]: ConstFalse() -> boolean
 100[89]: GotoFalseWord(jump=106, if_false: boolean)
 103[88]: GotoWord(jump=113)
 106[88]: FreeStack(value=0, discard=4)
 110[84]: GotoWord(jump=23)
 113[88]: VarInt(var[80]) -> integer var=x#count[80]:integer in 3
 116[92]: ConstInt(val=0) -> integer
 121[96]: EqInt(v1: integer, v2: integer) -> boolean
 122[89]: GotoFalseWord(jump=131, if_false: boolean)
 125[88]: VarInt(var[84]) -> integer var=x[84]:integer in 5
 128[92]: GotoWord(jump=140)
 131[88]: VarInt(var[84]) -> integer var=x[84]:integer in 5
 134[92]: ConstInt(val=2) -> integer
 139[96]: MulInt(v1: integer, v2: integer) -> integer
 140[92]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 144[88]: VarInt(var[80]) -> integer var=x#count[80]:integer in 3
 147[92]: ConstInt(val=0) -> integer
 152[96]: GtInt(v1: integer, v2: integer) -> boolean
 153[89]: GotoFalseWord(jump=162, if_false: boolean)
 156[88]: ConstText(_value=",") -> text
 159[104]: AppendText(var[28], v1: text)
 162[88]: VarInt(var[80]) -> integer var=x#count[80]:integer in 3
 165[92]: ConstInt(val=1) -> integer
 170[96]: AddInt(v1: integer, v2: integer) -> integer
 171[92]: PutInt(var[80], value: integer)
 174[88]: VarInt(var[84]) -> integer var=_val_1[84]:integer in 4
 177[92]: ConstInt(val=0) -> integer
 182[96]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 189[88]: FreeStack(value=0, discard=4)
 193[84]: GotoWord(jump=23)
 196[84]: ConstText(_value="]") -> text
 199[100]: AppendText(var[28], v1: text)
 202[84]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 205[100]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 209[92]: AppendText(var[52], v1: text)
 212[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 215[92]: ConstText(_value="[3,12,18]") -> text
 226[108]: EqText(v1: text, v2: text) -> boolean
 227[77]: GotoFalseWord(jump=233, if_false: boolean)
 230[76]: GotoWord(jump=290)
 233[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 236[76]: ConstText(_value="Test failed ") -> text
 250[92]: AppendText(var[4], v1: text)
 253[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 256[92]: ConstInt(val=0) -> integer
 261[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 266[76]: ConstText(_value=" != "[3,12,18]"") -> text
 283[92]: AppendText(var[4], v1: text)
 286[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 289[92]: Panic(message: text)
 290[76]: FreeText(var[52])
 293[76]: FreeText(var[28])
 296[76]: FreeText(var[4])
 299[76]: Return(ret=0, value=0, discard=76)

