fn routine() -> integer {b = 0; for a in 0..10 { if a == 2 {continue} if a > 5 {return b} b += a }; b}

pub fn test() {
    test_value = {routine()};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}
fn routine() -> integer {#1 block
  b:integer = 0i32;
  {#2 for
    a#index:integer = OpConvIntFromNull();
    loop {#3 for loop
      a:integer = {#4 for next
        a#index:integer = if OpNot(OpConvBoolFromInt(a#index)) 0i32 else OpAddInt(a#index, 1i32);
        if OpGeInt(a#index, 10i32) break(0) else null;
        a#index;
      }#4:integer;
      {#5 block
        if OpEqInt(a, 2i32) {#6 block
          continue(0);
        }#6 else null;
        if OpGtInt(a, 5i32) {#7 block
          return b;
        }#7 else null;
        b:integer = OpAddInt(b, a);
      }#5;
    }#3;
  }#2;
  b;
}#1:integer

byte-code for continue_loop:routine() -> integer
 655[0]: return-address
 655[4]: ConstInt(val=0) -> integer var=b[4]:integer in 1
 660[8]: ConvIntFromNull() -> integer var=a#index[8]:integer in 2
 661[12]: VarInt(var[8]) -> integer var=a#index[8]:integer in 2
 664[16]: ConvBoolFromInt(v1: integer) -> boolean
 665[13]: Not(v1: boolean) -> boolean
 666[13]: GotoFalseWord(jump=677, if_false: boolean)
 669[12]: ConstInt(val=0) -> integer
 674[16]: GotoWord(jump=686)
 677[12]: VarInt(var[8]) -> integer var=a#index[8]:integer in 2
 680[16]: ConstInt(val=1) -> integer
 685[20]: AddInt(v1: integer, v2: integer) -> integer
 686[16]: PutInt(var[8], value: integer)
 689[12]: VarInt(var[8]) -> integer var=a#index[8]:integer in 2
 692[16]: ConstInt(val=10) -> integer
 697[20]: GeInt(v1: integer, v2: integer) -> boolean
 698[13]: GotoFalseWord(jump=704, if_false: boolean)
 701[12]: GotoWord(jump=768)
 704[12]: VarInt(var[8]) -> integer var=a#index[8]:integer in 2
 707[16]: VarInt(var[12]) -> integer var=a[12]:integer in 3
 710[20]: ConstInt(val=2) -> integer
 715[24]: EqInt(v1: integer, v2: integer) -> boolean
 716[17]: GotoFalseWord(jump=726, if_false: boolean)
 719[16]: FreeStack(value=0, discard=4)
 723[12]: GotoWord(jump=661)
 726[16]: VarInt(var[12]) -> integer var=a[12]:integer in 3
 729[20]: ConstInt(val=5) -> integer
 734[24]: GtInt(v1: integer, v2: integer) -> boolean
 735[17]: GotoFalseWord(jump=751, if_false: boolean)
 738[16]: VarInt(var[4]) -> integer var=b[4]:integer in 1
 741[20]: Return(ret=0, value=4, discard=20) type=integer[4]:Base[0]
 747[20]: FreeStack(value=0, discard=4)
 751[16]: VarInt(var[4]) -> integer var=b[4]:integer in 1
 754[20]: VarInt(var[12]) -> integer var=a[12]:integer in 3
 757[24]: AddInt(v1: integer, v2: integer) -> integer
 758[20]: PutInt(var[4], value: integer)
 761[16]: FreeStack(value=0, discard=4)
 765[12]: GotoWord(jump=661)
 768[12]: FreeStack(value=0, discard=4)
 772[8]: VarInt(var[4]) -> integer var=b[4]:integer in 1
 775[12]: Return(ret=0, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    routine();
  }#2:integer;
  if OpEqInt(test_value, 13i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 13");
    __work_1;
  }#3:text);
}#1

byte-code for continue_loop:test()
 781[0]: return-address
 781[4]: Text() var=__work_1[4]:text in 1
 782[28]: Call(size=0, to=655) var=test_value[28]:integer in 1
 789[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 792[36]: ConstInt(val=13) -> integer
 797[40]: EqInt(v1: integer, v2: integer) -> boolean
 798[33]: GotoFalseWord(jump=804, if_false: boolean)
 801[32]: GotoWord(jump=854)
 804[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 807[32]: ConstText(_value="Test failed ") -> text
 821[48]: AppendText(var[4], v1: text)
 824[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 827[36]: ConstInt(val=0) -> integer
 832[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 839[32]: ConstText(_value=" != 13") -> text
 847[48]: AppendText(var[4], v1: text)
 850[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 853[48]: Panic(message: text)
 854[32]: FreeText(var[4])
 857[32]: Return(ret=0, value=0, discard=32)

Execute test:
  781:[8] Text()
  782:[32] Call(size=0, to=655)
  655:[36] ConstInt(val=0) -> 0[36]
  660:[40] ConvIntFromNull() -> -2147483648[40]
  661:[44] VarInt(var[40]) -> -2147483648[44]
  664:[48] ConvBoolFromInt(v1=-2147483648[44]) -> false[44]
  665:[45] Not(v1=false[44]) -> true[44]
  666:[45] GotoFalseWord(jump=677, if_false=true[44])
  669:[44] ConstInt(val=0) -> 0[44]
  674:[48] GotoWord(jump=686)
  686:[48] PutInt(var[40], value=0[44])
  689:[44] VarInt(var[40]) -> 0[44]
  692:[48] ConstInt(val=10) -> 10[48]
  697:[52] GeInt(v1=0[44], v2=10[48]) -> false[44]
  698:[45] GotoFalseWord(jump=704, if_false=false[44])
  704:[44] VarInt(var[40]) -> 0[44]
  707:[48] VarInt(var[44]) -> 0[48]
  710:[52] ConstInt(val=2) -> 2[52]
  715:[56] EqInt(v1=0[48], v2=2[52]) -> false[48]
  716:[49] GotoFalseWord(jump=726, if_false=false[48])
  726:[48] VarInt(var[44]) -> 0[48]
  729:[52] ConstInt(val=5) -> 5[52]
  734:[56] GtInt(v1=0[48], v2=5[52]) -> false[48]
  735:[49] GotoFalseWord(jump=751, if_false=false[48])
  751:[48] VarInt(var[36]) -> 0[48]
  754:[52] VarInt(var[44]) -> 0[52]
  757:[56] AddInt(v1=0[48], v2=0[52]) -> 0[48]
  758:[52] PutInt(var[36], value=0[48])
  761:[48] FreeStack(value=0, discard=4)
  765:[44] GotoWord(jump=661)
  661:[44] VarInt(var[40]) -> 0[44]
  664:[48] ConvBoolFromInt(v1=0[44]) -> true[44]
  665:[45] Not(v1=true[44]) -> false[44]
  666:[45] GotoFalseWord(jump=677, if_false=false[44])
  677:[44] VarInt(var[40]) -> 0[44]
  680:[48] ConstInt(val=1) -> 1[48]
  685:[52] AddInt(v1=0[44], v2=1[48]) -> 1[44]
  686:[48] PutInt(var[40], value=1[44])
  689:[44] VarInt(var[40]) -> 1[44]
  692:[48] ConstInt(val=10) -> 10[48]
  697:[52] GeInt(v1=1[44], v2=10[48]) -> false[44]
  698:[45] GotoFalseWord(jump=704, if_false=false[44])
  704:[44] VarInt(var[40]) -> 1[44]
  707:[48] VarInt(var[44]) -> 1[48]
  710:[52] ConstInt(val=2) -> 2[52]
  715:[56] EqInt(v1=1[48], v2=2[52]) -> false[48]
  716:[49] GotoFalseWord(jump=726, if_false=false[48])
  726:[48] VarInt(var[44]) -> 1[48]
  729:[52] ConstInt(val=5) -> 5[52]
  734:[56] GtInt(v1=1[48], v2=5[52]) -> false[48]
  735:[49] GotoFalseWord(jump=751, if_false=false[48])
  751:[48] VarInt(var[36]) -> 0[48]
  754:[52] VarInt(var[44]) -> 1[52]
  757:[56] AddInt(v1=0[48], v2=1[52]) -> 1[48]
  758:[52] PutInt(var[36], value=1[48])
  761:[48] FreeStack(value=0, discard=4)
  765:[44] GotoWord(jump=661)
  661:[44] VarInt(var[40]) -> 1[44]
  664:[48] ConvBoolFromInt(v1=1[44]) -> true[44]
  665:[45] Not(v1=true[44]) -> false[44]
  666:[45] GotoFalseWord(jump=677, if_false=false[44])
  677:[44] VarInt(var[40]) -> 1[44]
  680:[48] ConstInt(val=1) -> 1[48]
  685:[52] AddInt(v1=1[44], v2=1[48]) -> 2[44]
  686:[48] PutInt(var[40], value=2[44])
  689:[44] VarInt(var[40]) -> 2[44]
  692:[48] ConstInt(val=10) -> 10[48]
  697:[52] GeInt(v1=2[44], v2=10[48]) -> false[44]
  698:[45] GotoFalseWord(jump=704, if_false=false[44])
  704:[44] VarInt(var[40]) -> 2[44]
  707:[48] VarInt(var[44]) -> 2[48]
  710:[52] ConstInt(val=2) -> 2[52]
  715:[56] EqInt(v1=2[48], v2=2[52]) -> true[48]
  716:[49] GotoFalseWord(jump=726, if_false=true[48])
  719:[48] FreeStack(value=0, discard=4)
  723:[44] GotoWord(jump=661)
  661:[44] VarInt(var[40]) -> 2[44]
  664:[48] ConvBoolFromInt(v1=2[44]) -> true[44]
  665:[45] Not(v1=true[44]) -> false[44]
  666:[45] GotoFalseWord(jump=677, if_false=false[44])
  677:[44] VarInt(var[40]) -> 2[44]
  680:[48] ConstInt(val=1) -> 1[48]
  685:[52] AddInt(v1=2[44], v2=1[48]) -> 3[44]
  686:[48] PutInt(var[40], value=3[44])
  689:[44] VarInt(var[40]) -> 3[44]
  692:[48] ConstInt(val=10) -> 10[48]
  697:[52] GeInt(v1=3[44], v2=10[48]) -> false[44]
  698:[45] GotoFalseWord(jump=704, if_false=false[44])
  704:[44] VarInt(var[40]) -> 3[44]
  707:[48] VarInt(var[44]) -> 3[48]
  710:[52] ConstInt(val=2) -> 2[52]
  715:[56] EqInt(v1=3[48], v2=2[52]) -> false[48]
  716:[49] GotoFalseWord(jump=726, if_false=false[48])
  726:[48] VarInt(var[44]) -> 3[48]
  729:[52] ConstInt(val=5) -> 5[52]
  734:[56] GtInt(v1=3[48], v2=5[52]) -> false[48]
  735:[49] GotoFalseWord(jump=751, if_false=false[48])
  751:[48] VarInt(var[36]) -> 1[48]
  754:[52] VarInt(var[44]) -> 3[52]
  757:[56] AddInt(v1=1[48], v2=3[52]) -> 4[48]
  758:[52] PutInt(var[36], value=4[48])
  761:[48] FreeStack(value=0, discard=4)
  765:[44] GotoWord(jump=661)
  661:[44] VarInt(var[40]) -> 3[44]
  664:[48] ConvBoolFromInt(v1=3[44]) -> true[44]
  665:[45] Not(v1=true[44]) -> false[44]
  666:[45] GotoFalseWord(jump=677, if_false=false[44])
  677:[44] VarInt(var[40]) -> 3[44]
  680:[48] ConstInt(val=1) -> 1[48]
  685:[52] AddInt(v1=3[44], v2=1[48]) -> 4[44]
  686:[48] PutInt(var[40], value=4[44])
  689:[44] VarInt(var[40]) -> 4[44]
  692:[48] ConstInt(val=10) -> 10[48]
  697:[52] GeInt(v1=4[44], v2=10[48]) -> false[44]
  698:[45] GotoFalseWord(jump=704, if_false=false[44])
  704:[44] VarInt(var[40]) -> 4[44]
  707:[48] VarInt(var[44]) -> 4[48]
  710:[52] ConstInt(val=2) -> 2[52]
  715:[56] EqInt(v1=4[48], v2=2[52]) -> false[48]
  716:[49] GotoFalseWord(jump=726, if_false=false[48])
  726:[48] VarInt(var[44]) -> 4[48]
  729:[52] ConstInt(val=5) -> 5[52]
  734:[56] GtInt(v1=4[48], v2=5[52]) -> false[48]
  735:[49] GotoFalseWord(jump=751, if_false=false[48])
  751:[48] VarInt(var[36]) -> 4[48]
  754:[52] VarInt(var[44]) -> 4[52]
  757:[56] AddInt(v1=4[48], v2=4[52]) -> 8[48]
  758:[52] PutInt(var[36], value=8[48])
  761:[48] FreeStack(value=0, discard=4)
  765:[44] GotoWord(jump=661)
  661:[44] VarInt(var[40]) -> 4[44]
  664:[48] ConvBoolFromInt(v1=4[44]) -> true[44]
  665:[45] Not(v1=true[44]) -> false[44]
  666:[45] GotoFalseWord(jump=677, if_false=false[44])
  677:[44] VarInt(var[40]) -> 4[44]
  680:[48] ConstInt(val=1) -> 1[48]
  685:[52] AddInt(v1=4[44], v2=1[48]) -> 5[44]
  686:[48] PutInt(var[40], value=5[44])
  689:[44] VarInt(var[40]) -> 5[44]
  692:[48] ConstInt(val=10) -> 10[48]
  697:[52] GeInt(v1=5[44], v2=10[48]) -> false[44]
  698:[45] GotoFalseWord(jump=704, if_false=false[44])
  704:[44] VarInt(var[40]) -> 5[44]
  707:[48] VarInt(var[44]) -> 5[48]
  710:[52] ConstInt(val=2) -> 2[52]
  715:[56] EqInt(v1=5[48], v2=2[52]) -> false[48]
  716:[49] GotoFalseWord(jump=726, if_false=false[48])
  726:[48] VarInt(var[44]) -> 5[48]
  729:[52] ConstInt(val=5) -> 5[52]
  734:[56] GtInt(v1=5[48], v2=5[52]) -> false[48]
  735:[49] GotoFalseWord(jump=751, if_false=false[48])
  751:[48] VarInt(var[36]) -> 8[48]
  754:[52] VarInt(var[44]) -> 5[52]
  757:[56] AddInt(v1=8[48], v2=5[52]) -> 13[48]
  758:[52] PutInt(var[36], value=13[48])
  761:[48] FreeStack(value=0, discard=4)
  765:[44] GotoWord(jump=661)
  661:[44] VarInt(var[40]) -> 5[44]
  664:[48] ConvBoolFromInt(v1=5[44]) -> true[44]
  665:[45] Not(v1=true[44]) -> false[44]
  666:[45] GotoFalseWord(jump=677, if_false=false[44])
  677:[44] VarInt(var[40]) -> 5[44]
  680:[48] ConstInt(val=1) -> 1[48]
  685:[52] AddInt(v1=5[44], v2=1[48]) -> 6[44]
  686:[48] PutInt(var[40], value=6[44])
  689:[44] VarInt(var[40]) -> 6[44]
  692:[48] ConstInt(val=10) -> 10[48]
  697:[52] GeInt(v1=6[44], v2=10[48]) -> false[44]
  698:[45] GotoFalseWord(jump=704, if_false=false[44])
  704:[44] VarInt(var[40]) -> 6[44]
  707:[48] VarInt(var[44]) -> 6[48]
  710:[52] ConstInt(val=2) -> 2[52]
  715:[56] EqInt(v1=6[48], v2=2[52]) -> false[48]
  716:[49] GotoFalseWord(jump=726, if_false=false[48])
  726:[48] VarInt(var[44]) -> 6[48]
  729:[52] ConstInt(val=5) -> 5[52]
  734:[56] GtInt(v1=6[48], v2=5[52]) -> true[48]
  735:[49] GotoFalseWord(jump=751, if_false=true[48])
  738:[48] VarInt(var[36]) -> 13[48]
  741:[52] Return(ret=789[32], value=4, discard=20) -> 13[32]
  789:[36] VarInt(var[32]) -> 13[36]
  792:[40] ConstInt(val=13) -> 13[40]
  797:[44] EqInt(v1=13[36], v2=13[40]) -> true[36]
  798:[37] GotoFalseWord(jump=804, if_false=true[36])
  801:[36] GotoWord(jump=854)
  854:[36] FreeText(var[8])
  857:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
