Test code:
fn routine() -> integer {b = 0; for a in 0..10 { if a == 2 {continue} if a > 5 {return b} b += a }; b}

pub fn test() {
    test_value = {routine()};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}

fn routine {
  let b = 0i32;
  {
    let a#index = OpConvIntFromNull();
    loop {
      let a = {
        a#index = if OpNot(OpConvBoolFromInt(a#index)) {0i32} else {OpAddInt(a#index, 1i32)};
        if OpGeInt(a#index, 10i32) {break(0)} else {null};
        a#index;
      };
      {
        if OpEqInt(a, 2i32) {{
          continue(0);
        }} else {null};
        if OpGtInt(a, 5i32) {{
          return b;
        }} else {null};
        b = OpAddInt(b, a);
      };
    };
  };
  b;
}

byte-code for continue_loop:routine() -> integer
 668[0]: return-address
 668[4]: ConstInt(val=0) -> integer
 673[8]: ConvIntFromNull() -> integer
 674[12]: VarInt(var[8]) -> integer
 677[16]: ConvBoolFromInt(v1: integer) -> boolean
 678[13]: Not(v1: boolean) -> boolean
 679[13]: GenGotoFalseWord(jump=690, if_false: boolean)
 682[12]: ConstInt(val=0) -> integer
 687[16]: GenGotoWord(jump=699)
 690[12]: VarInt(var[8]) -> integer
 693[16]: ConstInt(val=1) -> integer
 698[20]: AddInt(v1: integer, v2: integer) -> integer
 699[16]: PutInt(var[8], value: integer)
 702[12]: VarInt(var[8]) -> integer
 705[16]: ConstInt(val=10) -> integer
 710[20]: GeInt(v1: integer, v2: integer) -> boolean
 711[13]: GenGotoFalseWord(jump=717, if_false: boolean)
 714[12]: GenGotoWord(jump=781)
 717[12]: VarInt(var[8]) -> integer
 720[16]: VarInt(var[12]) -> integer
 723[20]: ConstInt(val=2) -> integer
 728[24]: EqInt(v1: integer, v2: integer) -> boolean
 729[17]: GenGotoFalseWord(jump=739, if_false: boolean)
 732[16]: GenFreeStack(value=0, discard=4)
 736[12]: GenGotoWord(jump=674)
 739[16]: VarInt(var[12]) -> integer
 742[20]: ConstInt(val=5) -> integer
 747[24]: GtInt(v1: integer, v2: integer) -> boolean
 748[17]: GenGotoFalseWord(jump=764, if_false: boolean)
 751[16]: VarInt(var[4]) -> integer
 754[20]: GenReturn(ret=0, value=4, discard=20)
 760[20]: GenFreeStack(value=0, discard=4)
 764[16]: VarInt(var[4]) -> integer
 767[20]: VarInt(var[12]) -> integer
 770[24]: AddInt(v1: integer, v2: integer) -> integer
 771[20]: PutInt(var[4], value: integer)
 774[16]: GenFreeStack(value=0, discard=4)
 778[12]: GenGotoWord(jump=674)
 781[12]: GenFreeStack(value=0, discard=4)
 785[8]: VarInt(var[4]) -> integer
 788[12]: GenReturn(ret=0, value=4, discard=12)

fn test {
  let test_value = {
    routine();
  };
  if OpEqInt(test_value, 13i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 13");
    append_7;
  })};
}

byte-code for continue_loop:test()
 794[0]: return-address
 794[4]: GenCall(size=0, to=668)
 801[8]: VarInt(var[4]) -> integer
 804[12]: ConstInt(val=13) -> integer
 809[16]: EqInt(v1: integer, v2: integer) -> boolean
 810[9]: GenGotoFalseWord(jump=816, if_false: boolean)
 813[8]: GenGotoWord(jump=868)
 816[8]: Text()
 817[32]: ConstText(_value="Test failed ") -> text
 831[48]: AppendText(var[8], v1: text)
 834[32]: VarInt(var[4]) -> integer
 837[36]: ConstInt(val=0) -> integer
 842[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 849[32]: ConstText(_value=" != 13") -> text
 857[48]: AppendText(var[8], v1: text)
 860[32]: VarText(var[8]) -> text
 863[48]: GenFreeStack(value=16, discard=24)
 867[24]: GenPanic(message: text)
 868[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  794:[4] GenCall(size=0, to=668)
  668:[8] ConstInt(val=0) -> 0[8]
  673:[12] ConvIntFromNull() -> -2147483648[12]
  674:[16] VarInt(var[12]) -> -2147483648[16]
  677:[20] ConvBoolFromInt(v1=-2147483648[16]) -> false[16]
  678:[17] Not(v1=false[16]) -> true[16]
  679:[17] GenGotoFalseWord(jump=690, if_false=true[16])
  682:[16] ConstInt(val=0) -> 0[16]
  687:[20] GenGotoWord(jump=699)
  699:[20] PutInt(var[12], value=0[16])
  702:[16] VarInt(var[12]) -> 0[16]
  705:[20] ConstInt(val=10) -> 10[20]
  710:[24] GeInt(v1=0[16], v2=10[20]) -> false[16]
  711:[17] GenGotoFalseWord(jump=717, if_false=false[16])
  717:[16] VarInt(var[12]) -> 0[16]
  720:[20] VarInt(var[16]) -> 0[20]
  723:[24] ConstInt(val=2) -> 2[24]
  728:[28] EqInt(v1=0[20], v2=2[24]) -> false[20]
  729:[21] GenGotoFalseWord(jump=739, if_false=false[20])
  739:[20] VarInt(var[16]) -> 0[20]
  742:[24] ConstInt(val=5) -> 5[24]
  747:[28] GtInt(v1=0[20], v2=5[24]) -> false[20]
  748:[21] GenGotoFalseWord(jump=764, if_false=false[20])
  764:[20] VarInt(var[8]) -> 0[20]
  767:[24] VarInt(var[16]) -> 0[24]
  770:[28] AddInt(v1=0[20], v2=0[24]) -> 0[20]
  771:[24] PutInt(var[8], value=0[20])
  774:[20] GenFreeStack(value=0, discard=4)
  778:[16] GenGotoWord(jump=674)
  674:[16] VarInt(var[12]) -> 0[16]
  677:[20] ConvBoolFromInt(v1=0[16]) -> true[16]
  678:[17] Not(v1=true[16]) -> false[16]
  679:[17] GenGotoFalseWord(jump=690, if_false=false[16])
  690:[16] VarInt(var[12]) -> 0[16]
  693:[20] ConstInt(val=1) -> 1[20]
  698:[24] AddInt(v1=0[16], v2=1[20]) -> 1[16]
  699:[20] PutInt(var[12], value=1[16])
  702:[16] VarInt(var[12]) -> 1[16]
  705:[20] ConstInt(val=10) -> 10[20]
  710:[24] GeInt(v1=1[16], v2=10[20]) -> false[16]
  711:[17] GenGotoFalseWord(jump=717, if_false=false[16])
  717:[16] VarInt(var[12]) -> 1[16]
  720:[20] VarInt(var[16]) -> 1[20]
  723:[24] ConstInt(val=2) -> 2[24]
  728:[28] EqInt(v1=1[20], v2=2[24]) -> false[20]
  729:[21] GenGotoFalseWord(jump=739, if_false=false[20])
  739:[20] VarInt(var[16]) -> 1[20]
  742:[24] ConstInt(val=5) -> 5[24]
  747:[28] GtInt(v1=1[20], v2=5[24]) -> false[20]
  748:[21] GenGotoFalseWord(jump=764, if_false=false[20])
  764:[20] VarInt(var[8]) -> 0[20]
  767:[24] VarInt(var[16]) -> 1[24]
  770:[28] AddInt(v1=0[20], v2=1[24]) -> 1[20]
  771:[24] PutInt(var[8], value=1[20])
  774:[20] GenFreeStack(value=0, discard=4)
  778:[16] GenGotoWord(jump=674)
  674:[16] VarInt(var[12]) -> 1[16]
  677:[20] ConvBoolFromInt(v1=1[16]) -> true[16]
  678:[17] Not(v1=true[16]) -> false[16]
  679:[17] GenGotoFalseWord(jump=690, if_false=false[16])
  690:[16] VarInt(var[12]) -> 1[16]
  693:[20] ConstInt(val=1) -> 1[20]
  698:[24] AddInt(v1=1[16], v2=1[20]) -> 2[16]
  699:[20] PutInt(var[12], value=2[16])
  702:[16] VarInt(var[12]) -> 2[16]
  705:[20] ConstInt(val=10) -> 10[20]
  710:[24] GeInt(v1=2[16], v2=10[20]) -> false[16]
  711:[17] GenGotoFalseWord(jump=717, if_false=false[16])
  717:[16] VarInt(var[12]) -> 2[16]
  720:[20] VarInt(var[16]) -> 2[20]
  723:[24] ConstInt(val=2) -> 2[24]
  728:[28] EqInt(v1=2[20], v2=2[24]) -> true[20]
  729:[21] GenGotoFalseWord(jump=739, if_false=true[20])
  732:[20] GenFreeStack(value=0, discard=4)
  736:[16] GenGotoWord(jump=674)
  674:[16] VarInt(var[12]) -> 2[16]
  677:[20] ConvBoolFromInt(v1=2[16]) -> true[16]
  678:[17] Not(v1=true[16]) -> false[16]
  679:[17] GenGotoFalseWord(jump=690, if_false=false[16])
  690:[16] VarInt(var[12]) -> 2[16]
  693:[20] ConstInt(val=1) -> 1[20]
  698:[24] AddInt(v1=2[16], v2=1[20]) -> 3[16]
  699:[20] PutInt(var[12], value=3[16])
  702:[16] VarInt(var[12]) -> 3[16]
  705:[20] ConstInt(val=10) -> 10[20]
  710:[24] GeInt(v1=3[16], v2=10[20]) -> false[16]
  711:[17] GenGotoFalseWord(jump=717, if_false=false[16])
  717:[16] VarInt(var[12]) -> 3[16]
  720:[20] VarInt(var[16]) -> 3[20]
  723:[24] ConstInt(val=2) -> 2[24]
  728:[28] EqInt(v1=3[20], v2=2[24]) -> false[20]
  729:[21] GenGotoFalseWord(jump=739, if_false=false[20])
  739:[20] VarInt(var[16]) -> 3[20]
  742:[24] ConstInt(val=5) -> 5[24]
  747:[28] GtInt(v1=3[20], v2=5[24]) -> false[20]
  748:[21] GenGotoFalseWord(jump=764, if_false=false[20])
  764:[20] VarInt(var[8]) -> 1[20]
  767:[24] VarInt(var[16]) -> 3[24]
  770:[28] AddInt(v1=1[20], v2=3[24]) -> 4[20]
  771:[24] PutInt(var[8], value=4[20])
  774:[20] GenFreeStack(value=0, discard=4)
  778:[16] GenGotoWord(jump=674)
  674:[16] VarInt(var[12]) -> 3[16]
  677:[20] ConvBoolFromInt(v1=3[16]) -> true[16]
  678:[17] Not(v1=true[16]) -> false[16]
  679:[17] GenGotoFalseWord(jump=690, if_false=false[16])
  690:[16] VarInt(var[12]) -> 3[16]
  693:[20] ConstInt(val=1) -> 1[20]
  698:[24] AddInt(v1=3[16], v2=1[20]) -> 4[16]
  699:[20] PutInt(var[12], value=4[16])
  702:[16] VarInt(var[12]) -> 4[16]
  705:[20] ConstInt(val=10) -> 10[20]
  710:[24] GeInt(v1=4[16], v2=10[20]) -> false[16]
  711:[17] GenGotoFalseWord(jump=717, if_false=false[16])
  717:[16] VarInt(var[12]) -> 4[16]
  720:[20] VarInt(var[16]) -> 4[20]
  723:[24] ConstInt(val=2) -> 2[24]
  728:[28] EqInt(v1=4[20], v2=2[24]) -> false[20]
  729:[21] GenGotoFalseWord(jump=739, if_false=false[20])
  739:[20] VarInt(var[16]) -> 4[20]
  742:[24] ConstInt(val=5) -> 5[24]
  747:[28] GtInt(v1=4[20], v2=5[24]) -> false[20]
  748:[21] GenGotoFalseWord(jump=764, if_false=false[20])
  764:[20] VarInt(var[8]) -> 4[20]
  767:[24] VarInt(var[16]) -> 4[24]
  770:[28] AddInt(v1=4[20], v2=4[24]) -> 8[20]
  771:[24] PutInt(var[8], value=8[20])
  774:[20] GenFreeStack(value=0, discard=4)
  778:[16] GenGotoWord(jump=674)
  674:[16] VarInt(var[12]) -> 4[16]
  677:[20] ConvBoolFromInt(v1=4[16]) -> true[16]
  678:[17] Not(v1=true[16]) -> false[16]
  679:[17] GenGotoFalseWord(jump=690, if_false=false[16])
  690:[16] VarInt(var[12]) -> 4[16]
  693:[20] ConstInt(val=1) -> 1[20]
  698:[24] AddInt(v1=4[16], v2=1[20]) -> 5[16]
  699:[20] PutInt(var[12], value=5[16])
  702:[16] VarInt(var[12]) -> 5[16]
  705:[20] ConstInt(val=10) -> 10[20]
  710:[24] GeInt(v1=5[16], v2=10[20]) -> false[16]
  711:[17] GenGotoFalseWord(jump=717, if_false=false[16])
  717:[16] VarInt(var[12]) -> 5[16]
  720:[20] VarInt(var[16]) -> 5[20]
  723:[24] ConstInt(val=2) -> 2[24]
  728:[28] EqInt(v1=5[20], v2=2[24]) -> false[20]
  729:[21] GenGotoFalseWord(jump=739, if_false=false[20])
  739:[20] VarInt(var[16]) -> 5[20]
  742:[24] ConstInt(val=5) -> 5[24]
  747:[28] GtInt(v1=5[20], v2=5[24]) -> false[20]
  748:[21] GenGotoFalseWord(jump=764, if_false=false[20])
  764:[20] VarInt(var[8]) -> 8[20]
  767:[24] VarInt(var[16]) -> 5[24]
  770:[28] AddInt(v1=8[20], v2=5[24]) -> 13[20]
  771:[24] PutInt(var[8], value=13[20])
  774:[20] GenFreeStack(value=0, discard=4)
  778:[16] GenGotoWord(jump=674)
  674:[16] VarInt(var[12]) -> 5[16]
  677:[20] ConvBoolFromInt(v1=5[16]) -> true[16]
  678:[17] Not(v1=true[16]) -> false[16]
  679:[17] GenGotoFalseWord(jump=690, if_false=false[16])
  690:[16] VarInt(var[12]) -> 5[16]
  693:[20] ConstInt(val=1) -> 1[20]
  698:[24] AddInt(v1=5[16], v2=1[20]) -> 6[16]
  699:[20] PutInt(var[12], value=6[16])
  702:[16] VarInt(var[12]) -> 6[16]
  705:[20] ConstInt(val=10) -> 10[20]
  710:[24] GeInt(v1=6[16], v2=10[20]) -> false[16]
  711:[17] GenGotoFalseWord(jump=717, if_false=false[16])
  717:[16] VarInt(var[12]) -> 6[16]
  720:[20] VarInt(var[16]) -> 6[20]
  723:[24] ConstInt(val=2) -> 2[24]
  728:[28] EqInt(v1=6[20], v2=2[24]) -> false[20]
  729:[21] GenGotoFalseWord(jump=739, if_false=false[20])
  739:[20] VarInt(var[16]) -> 6[20]
  742:[24] ConstInt(val=5) -> 5[24]
  747:[28] GtInt(v1=6[20], v2=5[24]) -> true[20]
  748:[21] GenGotoFalseWord(jump=764, if_false=true[20])
  751:[20] VarInt(var[8]) -> 13[20]
  754:[24] GenReturn(ret=801[4], value=4, discard=20)
  801:[8] VarInt(var[4]) -> 13[8]
  804:[12] ConstInt(val=13) -> 13[12]
  809:[16] EqInt(v1=13[8], v2=13[12]) -> true[8]
  810:[9] GenGotoFalseWord(jump=816, if_false=true[8])
  813:[8] GenGotoWord(jump=868)
  868:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
