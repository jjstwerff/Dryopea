fn routine() -> integer {b = 0; for a in 0..10 { if a == 2 {continue} if a > 5 {return b} b += a }; b}

pub fn test() {
    test_value = {routine()};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}
fn routine {#1 block
  let b = 0i32;
  {#2 for
    let a#index = OpConvIntFromNull();
    loop {#3 for loop
      let a = {#4 for next
        a#index = if OpNot(OpConvBoolFromInt(a#index)) 0i32 else OpAddInt(a#index, 1i32);
        if OpGeInt(a#index, 10i32) break(0) else null;
        a#index;
      }#4;
      {#5 block
        if OpEqInt(a, 2i32) {#6 block
          continue(0);
        }#6 else null;
        if OpGtInt(a, 5i32) {#7 block
          return b;
        }#7 else null;
        b = OpAddInt(b, a);
      }#5;
    }#3;
  }#2;
  b;
}#1

byte-code for continue_loop:routine() -> integer
 668[0]: return-address
 668[4]: ConstInt(val=0) -> integer
 673[8]: ConvIntFromNull() -> integer
 674[12]: VarInt(var[8]) -> integer
 677[16]: ConvBoolFromInt(v1: integer) -> boolean
 678[13]: Not(v1: boolean) -> boolean
 679[13]: GenGotoFalseWord(jump=690, if_false: boolean)
 682[12]: ConstInt(val=0) -> integer
 687[16]: GenGotoWord(jump=699)
 690[12]: VarInt(var[8]) -> integer
 693[16]: ConstInt(val=1) -> integer
 698[20]: AddInt(v1: integer, v2: integer) -> integer
 699[16]: PutInt(var[8], value: integer)
 702[12]: VarInt(var[8]) -> integer
 705[16]: ConstInt(val=10) -> integer
 710[20]: GeInt(v1: integer, v2: integer) -> boolean
 711[13]: GenGotoFalseWord(jump=717, if_false: boolean)
 714[12]: GenGotoWord(jump=781)
 717[12]: VarInt(var[8]) -> integer
 720[16]: VarInt(var[12]) -> integer
 723[20]: ConstInt(val=2) -> integer
 728[24]: EqInt(v1: integer, v2: integer) -> boolean
 729[17]: GenGotoFalseWord(jump=739, if_false: boolean)
 732[16]: GenFreeStack(value=0, discard=4)
 736[12]: GenGotoWord(jump=674)
 739[16]: VarInt(var[12]) -> integer
 742[20]: ConstInt(val=5) -> integer
 747[24]: GtInt(v1: integer, v2: integer) -> boolean
 748[17]: GenGotoFalseWord(jump=764, if_false: boolean)
 751[16]: VarInt(var[4]) -> integer
 754[20]: GenReturn(ret=0, value=4, discard=20)
 760[20]: GenFreeStack(value=0, discard=4)
 764[16]: VarInt(var[4]) -> integer
 767[20]: VarInt(var[12]) -> integer
 770[24]: AddInt(v1: integer, v2: integer) -> integer
 771[20]: PutInt(var[4], value: integer)
 774[16]: GenFreeStack(value=0, discard=4)
 778[12]: GenGotoWord(jump=674)
 781[12]: GenFreeStack(value=0, discard=4)
 785[8]: VarInt(var[4]) -> integer
 788[12]: GenReturn(ret=0, value=4, discard=12)

fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    routine();
  }#2;
  if OpEqInt(test_value, 13i32) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 13");
    __work_1;
  }#3);
}#1

byte-code for continue_loop:test()
 794[0]: return-address
 794[4]: Text()
 795[28]: GenCall(size=0, to=668)
 802[32]: VarInt(var[28]) -> integer
 805[36]: ConstInt(val=13) -> integer
 810[40]: EqInt(v1: integer, v2: integer) -> boolean
 811[33]: GenGotoFalseWord(jump=817, if_false: boolean)
 814[32]: GenGotoWord(jump=867)
 817[32]: ClearText(var[4])
 820[32]: ConstText(_value="Test failed ") -> text(false, [])
 834[48]: AppendText(var[4], v1: text(false, []))
 837[32]: VarInt(var[28]) -> integer
 840[36]: ConstInt(val=0) -> integer
 845[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 852[32]: ConstText(_value=" != 13") -> text(false, [])
 860[48]: AppendText(var[4], v1: text(false, []))
 863[32]: VarText(var[4]) -> text(false, [])
 866[48]: GenPanic(message: text(false, []))
 867[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  794:[8] Text()
  795:[32] GenCall(size=0, to=668)
  668:[36] ConstInt(val=0) -> 0[36]
  673:[40] ConvIntFromNull() -> -2147483648[40]
  674:[44] VarInt(var[40]) -> -2147483648[44]
  677:[48] ConvBoolFromInt(v1=-2147483648[44]) -> false[44]
  678:[45] Not(v1=false[44]) -> true[44]
  679:[45] GenGotoFalseWord(jump=690, if_false=true[44])
  682:[44] ConstInt(val=0) -> 0[44]
  687:[48] GenGotoWord(jump=699)
  699:[48] PutInt(var[40], value=0[44])
  702:[44] VarInt(var[40]) -> 0[44]
  705:[48] ConstInt(val=10) -> 10[48]
  710:[52] GeInt(v1=0[44], v2=10[48]) -> false[44]
  711:[45] GenGotoFalseWord(jump=717, if_false=false[44])
  717:[44] VarInt(var[40]) -> 0[44]
  720:[48] VarInt(var[44]) -> 0[48]
  723:[52] ConstInt(val=2) -> 2[52]
  728:[56] EqInt(v1=0[48], v2=2[52]) -> false[48]
  729:[49] GenGotoFalseWord(jump=739, if_false=false[48])
  739:[48] VarInt(var[44]) -> 0[48]
  742:[52] ConstInt(val=5) -> 5[52]
  747:[56] GtInt(v1=0[48], v2=5[52]) -> false[48]
  748:[49] GenGotoFalseWord(jump=764, if_false=false[48])
  764:[48] VarInt(var[36]) -> 0[48]
  767:[52] VarInt(var[44]) -> 0[52]
  770:[56] AddInt(v1=0[48], v2=0[52]) -> 0[48]
  771:[52] PutInt(var[36], value=0[48])
  774:[48] GenFreeStack(value=0, discard=4)
  778:[44] GenGotoWord(jump=674)
  674:[44] VarInt(var[40]) -> 0[44]
  677:[48] ConvBoolFromInt(v1=0[44]) -> true[44]
  678:[45] Not(v1=true[44]) -> false[44]
  679:[45] GenGotoFalseWord(jump=690, if_false=false[44])
  690:[44] VarInt(var[40]) -> 0[44]
  693:[48] ConstInt(val=1) -> 1[48]
  698:[52] AddInt(v1=0[44], v2=1[48]) -> 1[44]
  699:[48] PutInt(var[40], value=1[44])
  702:[44] VarInt(var[40]) -> 1[44]
  705:[48] ConstInt(val=10) -> 10[48]
  710:[52] GeInt(v1=1[44], v2=10[48]) -> false[44]
  711:[45] GenGotoFalseWord(jump=717, if_false=false[44])
  717:[44] VarInt(var[40]) -> 1[44]
  720:[48] VarInt(var[44]) -> 1[48]
  723:[52] ConstInt(val=2) -> 2[52]
  728:[56] EqInt(v1=1[48], v2=2[52]) -> false[48]
  729:[49] GenGotoFalseWord(jump=739, if_false=false[48])
  739:[48] VarInt(var[44]) -> 1[48]
  742:[52] ConstInt(val=5) -> 5[52]
  747:[56] GtInt(v1=1[48], v2=5[52]) -> false[48]
  748:[49] GenGotoFalseWord(jump=764, if_false=false[48])
  764:[48] VarInt(var[36]) -> 0[48]
  767:[52] VarInt(var[44]) -> 1[52]
  770:[56] AddInt(v1=0[48], v2=1[52]) -> 1[48]
  771:[52] PutInt(var[36], value=1[48])
  774:[48] GenFreeStack(value=0, discard=4)
  778:[44] GenGotoWord(jump=674)
  674:[44] VarInt(var[40]) -> 1[44]
  677:[48] ConvBoolFromInt(v1=1[44]) -> true[44]
  678:[45] Not(v1=true[44]) -> false[44]
  679:[45] GenGotoFalseWord(jump=690, if_false=false[44])
  690:[44] VarInt(var[40]) -> 1[44]
  693:[48] ConstInt(val=1) -> 1[48]
  698:[52] AddInt(v1=1[44], v2=1[48]) -> 2[44]
  699:[48] PutInt(var[40], value=2[44])
  702:[44] VarInt(var[40]) -> 2[44]
  705:[48] ConstInt(val=10) -> 10[48]
  710:[52] GeInt(v1=2[44], v2=10[48]) -> false[44]
  711:[45] GenGotoFalseWord(jump=717, if_false=false[44])
  717:[44] VarInt(var[40]) -> 2[44]
  720:[48] VarInt(var[44]) -> 2[48]
  723:[52] ConstInt(val=2) -> 2[52]
  728:[56] EqInt(v1=2[48], v2=2[52]) -> true[48]
  729:[49] GenGotoFalseWord(jump=739, if_false=true[48])
  732:[48] GenFreeStack(value=0, discard=4)
  736:[44] GenGotoWord(jump=674)
  674:[44] VarInt(var[40]) -> 2[44]
  677:[48] ConvBoolFromInt(v1=2[44]) -> true[44]
  678:[45] Not(v1=true[44]) -> false[44]
  679:[45] GenGotoFalseWord(jump=690, if_false=false[44])
  690:[44] VarInt(var[40]) -> 2[44]
  693:[48] ConstInt(val=1) -> 1[48]
  698:[52] AddInt(v1=2[44], v2=1[48]) -> 3[44]
  699:[48] PutInt(var[40], value=3[44])
  702:[44] VarInt(var[40]) -> 3[44]
  705:[48] ConstInt(val=10) -> 10[48]
  710:[52] GeInt(v1=3[44], v2=10[48]) -> false[44]
  711:[45] GenGotoFalseWord(jump=717, if_false=false[44])
  717:[44] VarInt(var[40]) -> 3[44]
  720:[48] VarInt(var[44]) -> 3[48]
  723:[52] ConstInt(val=2) -> 2[52]
  728:[56] EqInt(v1=3[48], v2=2[52]) -> false[48]
  729:[49] GenGotoFalseWord(jump=739, if_false=false[48])
  739:[48] VarInt(var[44]) -> 3[48]
  742:[52] ConstInt(val=5) -> 5[52]
  747:[56] GtInt(v1=3[48], v2=5[52]) -> false[48]
  748:[49] GenGotoFalseWord(jump=764, if_false=false[48])
  764:[48] VarInt(var[36]) -> 1[48]
  767:[52] VarInt(var[44]) -> 3[52]
  770:[56] AddInt(v1=1[48], v2=3[52]) -> 4[48]
  771:[52] PutInt(var[36], value=4[48])
  774:[48] GenFreeStack(value=0, discard=4)
  778:[44] GenGotoWord(jump=674)
  674:[44] VarInt(var[40]) -> 3[44]
  677:[48] ConvBoolFromInt(v1=3[44]) -> true[44]
  678:[45] Not(v1=true[44]) -> false[44]
  679:[45] GenGotoFalseWord(jump=690, if_false=false[44])
  690:[44] VarInt(var[40]) -> 3[44]
  693:[48] ConstInt(val=1) -> 1[48]
  698:[52] AddInt(v1=3[44], v2=1[48]) -> 4[44]
  699:[48] PutInt(var[40], value=4[44])
  702:[44] VarInt(var[40]) -> 4[44]
  705:[48] ConstInt(val=10) -> 10[48]
  710:[52] GeInt(v1=4[44], v2=10[48]) -> false[44]
  711:[45] GenGotoFalseWord(jump=717, if_false=false[44])
  717:[44] VarInt(var[40]) -> 4[44]
  720:[48] VarInt(var[44]) -> 4[48]
  723:[52] ConstInt(val=2) -> 2[52]
  728:[56] EqInt(v1=4[48], v2=2[52]) -> false[48]
  729:[49] GenGotoFalseWord(jump=739, if_false=false[48])
  739:[48] VarInt(var[44]) -> 4[48]
  742:[52] ConstInt(val=5) -> 5[52]
  747:[56] GtInt(v1=4[48], v2=5[52]) -> false[48]
  748:[49] GenGotoFalseWord(jump=764, if_false=false[48])
  764:[48] VarInt(var[36]) -> 4[48]
  767:[52] VarInt(var[44]) -> 4[52]
  770:[56] AddInt(v1=4[48], v2=4[52]) -> 8[48]
  771:[52] PutInt(var[36], value=8[48])
  774:[48] GenFreeStack(value=0, discard=4)
  778:[44] GenGotoWord(jump=674)
  674:[44] VarInt(var[40]) -> 4[44]
  677:[48] ConvBoolFromInt(v1=4[44]) -> true[44]
  678:[45] Not(v1=true[44]) -> false[44]
  679:[45] GenGotoFalseWord(jump=690, if_false=false[44])
  690:[44] VarInt(var[40]) -> 4[44]
  693:[48] ConstInt(val=1) -> 1[48]
  698:[52] AddInt(v1=4[44], v2=1[48]) -> 5[44]
  699:[48] PutInt(var[40], value=5[44])
  702:[44] VarInt(var[40]) -> 5[44]
  705:[48] ConstInt(val=10) -> 10[48]
  710:[52] GeInt(v1=5[44], v2=10[48]) -> false[44]
  711:[45] GenGotoFalseWord(jump=717, if_false=false[44])
  717:[44] VarInt(var[40]) -> 5[44]
  720:[48] VarInt(var[44]) -> 5[48]
  723:[52] ConstInt(val=2) -> 2[52]
  728:[56] EqInt(v1=5[48], v2=2[52]) -> false[48]
  729:[49] GenGotoFalseWord(jump=739, if_false=false[48])
  739:[48] VarInt(var[44]) -> 5[48]
  742:[52] ConstInt(val=5) -> 5[52]
  747:[56] GtInt(v1=5[48], v2=5[52]) -> false[48]
  748:[49] GenGotoFalseWord(jump=764, if_false=false[48])
  764:[48] VarInt(var[36]) -> 8[48]
  767:[52] VarInt(var[44]) -> 5[52]
  770:[56] AddInt(v1=8[48], v2=5[52]) -> 13[48]
  771:[52] PutInt(var[36], value=13[48])
  774:[48] GenFreeStack(value=0, discard=4)
  778:[44] GenGotoWord(jump=674)
  674:[44] VarInt(var[40]) -> 5[44]
  677:[48] ConvBoolFromInt(v1=5[44]) -> true[44]
  678:[45] Not(v1=true[44]) -> false[44]
  679:[45] GenGotoFalseWord(jump=690, if_false=false[44])
  690:[44] VarInt(var[40]) -> 5[44]
  693:[48] ConstInt(val=1) -> 1[48]
  698:[52] AddInt(v1=5[44], v2=1[48]) -> 6[44]
  699:[48] PutInt(var[40], value=6[44])
  702:[44] VarInt(var[40]) -> 6[44]
  705:[48] ConstInt(val=10) -> 10[48]
  710:[52] GeInt(v1=6[44], v2=10[48]) -> false[44]
  711:[45] GenGotoFalseWord(jump=717, if_false=false[44])
  717:[44] VarInt(var[40]) -> 6[44]
  720:[48] VarInt(var[44]) -> 6[48]
  723:[52] ConstInt(val=2) -> 2[52]
  728:[56] EqInt(v1=6[48], v2=2[52]) -> false[48]
  729:[49] GenGotoFalseWord(jump=739, if_false=false[48])
  739:[48] VarInt(var[44]) -> 6[48]
  742:[52] ConstInt(val=5) -> 5[52]
  747:[56] GtInt(v1=6[48], v2=5[52]) -> true[48]
  748:[49] GenGotoFalseWord(jump=764, if_false=true[48])
  751:[48] VarInt(var[36]) -> 13[48]
  754:[52] GenReturn(ret=802[32], value=4, discard=20)
  802:[36] VarInt(var[32]) -> 13[36]
  805:[40] ConstInt(val=13) -> 13[40]
  810:[44] EqInt(v1=13[36], v2=13[40]) -> true[36]
  811:[37] GenGotoFalseWord(jump=817, if_false=true[36])
  814:[36] GenGotoWord(jump=867)
  867:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
