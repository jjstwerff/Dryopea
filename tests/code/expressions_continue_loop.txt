fn routine() -> integer {b = 0; for a in 0..10 { if a == 2 {continue} if a > 5 {return b} b += a }; b}

pub fn test() {
    test_value = {routine()};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}
fn routine() -> integer {#block(1):integer
  b(1):integer = 0i32;
  {#For block(2):void
    a#index(2):integer = OpConvIntFromNull();
    loop {#For loop_3
      a(3):integer = {#Iter range(4):integer
        a#index(2):integer = if OpNot(OpConvBoolFromInt(a#index(2))) 0i32 else OpAddInt(a#index(2), 1i32);
        if OpGeInt(a#index(2), 10i32) break(0) else null;
        a#index(2);
      }#Iter range(4):integer;
      {#block(5):void
        if OpEqInt(a(3), 2i32) {#block(6):void
          continue(0);
        }#block(6):void else null;
        if OpGtInt(a(3), 5i32) {#block(7):void
          return b(1);
        }#block(7):void else null;
        b(1):integer = OpAddInt(b(1), a(3));
      }#block(5):void;
    }#For loop_3;
  }#For block(2):void;
  b(1);
}#block(1):integer

byte-code for continue_loop:routine() [1119] -> integer
   0[4]: return-address
   0[8]: ConstInt(val=0) -> integer var=b[8]:integer
   5[12]: ConvIntFromNull() -> integer var=a#index[12]:integer
   6[16]: VarInt(var[12]) -> integer var=a#index[12]:integer
   9[20]: ConvBoolFromInt(v1: integer) -> boolean
  10[17]: Not(v1: boolean) -> boolean
  11[17]: GotoFalseWord(jump=22, if_false: boolean)
  14[16]: ConstInt(val=0) -> integer
  19[20]: GotoWord(jump=31)
  22[16]: VarInt(var[12]) -> integer var=a#index[12]:integer
  25[20]: ConstInt(val=1) -> integer
  30[24]: AddInt(v1: integer, v2: integer) -> integer
  31[20]: PutInt(var[12], value: integer)
  34[16]: VarInt(var[12]) -> integer var=a#index[12]:integer
  37[20]: ConstInt(val=10) -> integer
  42[24]: GeInt(v1: integer, v2: integer) -> boolean
  43[17]: GotoFalseWord(jump=49, if_false: boolean)
  46[16]: GotoWord(jump=122)
  49[16]: VarInt(var[12]) -> integer var=a#index[12]:integer
  52[20]: VarInt(var[16]) -> integer var=a[16]:integer
  55[24]: ConstInt(val=2) -> integer
  60[28]: EqInt(v1: integer, v2: integer) -> boolean
  61[21]: GotoFalseWord(jump=71, if_false: boolean)
  64[20]: FreeStack(value=0, discard=4)
  68[16]: GotoWord(jump=6)
  71[20]: VarInt(var[16]) -> integer var=a[16]:integer
  74[24]: ConstInt(val=5) -> integer
  79[28]: GtInt(v1: integer, v2: integer) -> boolean
  80[21]: GotoFalseWord(jump=105, if_false: boolean)
  83[20]: VarInt(var[8]) -> integer var=b[8]:integer
  86[24]: Return(ret=0, value=4, discard=20)
  92[24]: VarInt(var[8]) -> integer var=b[8]:integer
  95[28]: Return(ret=0, value=4, discard=24) type=integer[4]:Base[0]
 101[28]: FreeStack(value=0, discard=8)
 105[20]: VarInt(var[8]) -> integer var=b[8]:integer
 108[24]: VarInt(var[16]) -> integer var=a[16]:integer
 111[28]: AddInt(v1: integer, v2: integer) -> integer
 112[24]: PutInt(var[8], value: integer)
 115[20]: FreeStack(value=0, discard=4)
 119[16]: GotoWord(jump=6)
 122[16]: FreeStack(value=0, discard=4)
 126[12]: VarInt(var[8]) -> integer var=b[8]:integer
 129[16]: Return(ret=0, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    routine();
  }#block(2):integer;
  if OpEqInt(test_value(1), 13i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 13");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for continue_loop:test() [1254]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Call(size=0, to=1119) var=test_value[32]:integer
   8[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  11[40]: ConstInt(val=13) -> integer
  16[44]: EqInt(v1: integer, v2: integer) -> boolean
  17[37]: GotoFalseWord(jump=23, if_false: boolean)
  20[36]: GotoWord(jump=73)
  23[36]: ClearText(var[8]) var=__work_1[8]:text
  26[36]: ConstText(_value="Test failed ") -> text
  40[52]: AppendText(var[8], v1: text)
  43[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  46[40]: ConstInt(val=0) -> integer
  51[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  58[36]: ConstText(_value=" != 13") -> text
  66[52]: AppendText(var[8], v1: text)
  69[36]: VarText(var[8]) -> text var=__work_1[8]:text
  72[52]: Panic(message: text)
  73[36]: FreeText(var[8])
  76[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] Call(size=0, to=1119)
 1119:[36] ConstInt(val=0) -> 0[36]
 1124:[40] ConvIntFromNull() -> -2147483648[40]
 1125:[44] VarInt(var[40]) -> -2147483648[44]
 1128:[48] ConvBoolFromInt(v1=-2147483648[44]) -> false[44]
 1129:[45] Not(v1=false[44]) -> true[44]
 1130:[45] GotoFalseWord(jump=1141, if_false=true[44])
 1133:[44] ConstInt(val=0) -> 0[44]
 1138:[48] GotoWord(jump=1150)
 1150:[48] PutInt(var[40], value=0[44])
 1153:[44] VarInt(var[40]) -> 0[44]
 1156:[48] ConstInt(val=10) -> 10[48]
 1161:[52] GeInt(v1=0[44], v2=10[48]) -> false[44]
 1162:[45] GotoFalseWord(jump=1168, if_false=false[44])
 1168:[44] VarInt(var[40]) -> 0[44]
 1171:[48] VarInt(var[44]) -> 0[48]
 1174:[52] ConstInt(val=2) -> 2[52]
 1179:[56] EqInt(v1=0[48], v2=2[52]) -> false[48]
 1180:[49] GotoFalseWord(jump=1190, if_false=false[48])
 1190:[48] VarInt(var[44]) -> 0[48]
 1193:[52] ConstInt(val=5) -> 5[52]
 1198:[56] GtInt(v1=0[48], v2=5[52]) -> false[48]
 1199:[49] GotoFalseWord(jump=1224, if_false=false[48])
 1224:[48] VarInt(var[36]) -> 0[48]
 1227:[52] VarInt(var[44]) -> 0[52]
 1230:[56] AddInt(v1=0[48], v2=0[52]) -> 0[48]
 1231:[52] PutInt(var[36], value=0[48])
 1234:[48] FreeStack(value=0, discard=4)
 1238:[44] GotoWord(jump=1125)
 1125:[44] VarInt(var[40]) -> 0[44]
 1128:[48] ConvBoolFromInt(v1=0[44]) -> true[44]
 1129:[45] Not(v1=true[44]) -> false[44]
 1130:[45] GotoFalseWord(jump=1141, if_false=false[44])
 1141:[44] VarInt(var[40]) -> 0[44]
 1144:[48] ConstInt(val=1) -> 1[48]
 1149:[52] AddInt(v1=0[44], v2=1[48]) -> 1[44]
 1150:[48] PutInt(var[40], value=1[44])
 1153:[44] VarInt(var[40]) -> 1[44]
 1156:[48] ConstInt(val=10) -> 10[48]
 1161:[52] GeInt(v1=1[44], v2=10[48]) -> false[44]
 1162:[45] GotoFalseWord(jump=1168, if_false=false[44])
 1168:[44] VarInt(var[40]) -> 1[44]
 1171:[48] VarInt(var[44]) -> 1[48]
 1174:[52] ConstInt(val=2) -> 2[52]
 1179:[56] EqInt(v1=1[48], v2=2[52]) -> false[48]
 1180:[49] GotoFalseWord(jump=1190, if_false=false[48])
 1190:[48] VarInt(var[44]) -> 1[48]
 1193:[52] ConstInt(val=5) -> 5[52]
 1198:[56] GtInt(v1=1[48], v2=5[52]) -> false[48]
 1199:[49] GotoFalseWord(jump=1224, if_false=false[48])
 1224:[48] VarInt(var[36]) -> 0[48]
 1227:[52] VarInt(var[44]) -> 1[52]
 1230:[56] AddInt(v1=0[48], v2=1[52]) -> 1[48]
 1231:[52] PutInt(var[36], value=1[48])
 1234:[48] FreeStack(value=0, discard=4)
 1238:[44] GotoWord(jump=1125)
 1125:[44] VarInt(var[40]) -> 1[44]
 1128:[48] ConvBoolFromInt(v1=1[44]) -> true[44]
 1129:[45] Not(v1=true[44]) -> false[44]
 1130:[45] GotoFalseWord(jump=1141, if_false=false[44])
 1141:[44] VarInt(var[40]) -> 1[44]
 1144:[48] ConstInt(val=1) -> 1[48]
 1149:[52] AddInt(v1=1[44], v2=1[48]) -> 2[44]
 1150:[48] PutInt(var[40], value=2[44])
 1153:[44] VarInt(var[40]) -> 2[44]
 1156:[48] ConstInt(val=10) -> 10[48]
 1161:[52] GeInt(v1=2[44], v2=10[48]) -> false[44]
 1162:[45] GotoFalseWord(jump=1168, if_false=false[44])
 1168:[44] VarInt(var[40]) -> 2[44]
 1171:[48] VarInt(var[44]) -> 2[48]
 1174:[52] ConstInt(val=2) -> 2[52]
 1179:[56] EqInt(v1=2[48], v2=2[52]) -> true[48]
 1180:[49] GotoFalseWord(jump=1190, if_false=true[48])
 1183:[48] FreeStack(value=0, discard=4)
 1187:[44] GotoWord(jump=1125)
 1125:[44] VarInt(var[40]) -> 2[44]
 1128:[48] ConvBoolFromInt(v1=2[44]) -> true[44]
 1129:[45] Not(v1=true[44]) -> false[44]
 1130:[45] GotoFalseWord(jump=1141, if_false=false[44])
 1141:[44] VarInt(var[40]) -> 2[44]
 1144:[48] ConstInt(val=1) -> 1[48]
 1149:[52] AddInt(v1=2[44], v2=1[48]) -> 3[44]
 1150:[48] PutInt(var[40], value=3[44])
 1153:[44] VarInt(var[40]) -> 3[44]
 1156:[48] ConstInt(val=10) -> 10[48]
 1161:[52] GeInt(v1=3[44], v2=10[48]) -> false[44]
 1162:[45] GotoFalseWord(jump=1168, if_false=false[44])
 1168:[44] VarInt(var[40]) -> 3[44]
 1171:[48] VarInt(var[44]) -> 3[48]
 1174:[52] ConstInt(val=2) -> 2[52]
 1179:[56] EqInt(v1=3[48], v2=2[52]) -> false[48]
 1180:[49] GotoFalseWord(jump=1190, if_false=false[48])
 1190:[48] VarInt(var[44]) -> 3[48]
 1193:[52] ConstInt(val=5) -> 5[52]
 1198:[56] GtInt(v1=3[48], v2=5[52]) -> false[48]
 1199:[49] GotoFalseWord(jump=1224, if_false=false[48])
 1224:[48] VarInt(var[36]) -> 1[48]
 1227:[52] VarInt(var[44]) -> 3[52]
 1230:[56] AddInt(v1=1[48], v2=3[52]) -> 4[48]
 1231:[52] PutInt(var[36], value=4[48])
 1234:[48] FreeStack(value=0, discard=4)
 1238:[44] GotoWord(jump=1125)
 1125:[44] VarInt(var[40]) -> 3[44]
 1128:[48] ConvBoolFromInt(v1=3[44]) -> true[44]
 1129:[45] Not(v1=true[44]) -> false[44]
 1130:[45] GotoFalseWord(jump=1141, if_false=false[44])
 1141:[44] VarInt(var[40]) -> 3[44]
 1144:[48] ConstInt(val=1) -> 1[48]
 1149:[52] AddInt(v1=3[44], v2=1[48]) -> 4[44]
 1150:[48] PutInt(var[40], value=4[44])
 1153:[44] VarInt(var[40]) -> 4[44]
 1156:[48] ConstInt(val=10) -> 10[48]
 1161:[52] GeInt(v1=4[44], v2=10[48]) -> false[44]
 1162:[45] GotoFalseWord(jump=1168, if_false=false[44])
 1168:[44] VarInt(var[40]) -> 4[44]
 1171:[48] VarInt(var[44]) -> 4[48]
 1174:[52] ConstInt(val=2) -> 2[52]
 1179:[56] EqInt(v1=4[48], v2=2[52]) -> false[48]
 1180:[49] GotoFalseWord(jump=1190, if_false=false[48])
 1190:[48] VarInt(var[44]) -> 4[48]
 1193:[52] ConstInt(val=5) -> 5[52]
 1198:[56] GtInt(v1=4[48], v2=5[52]) -> false[48]
 1199:[49] GotoFalseWord(jump=1224, if_false=false[48])
 1224:[48] VarInt(var[36]) -> 4[48]
 1227:[52] VarInt(var[44]) -> 4[52]
 1230:[56] AddInt(v1=4[48], v2=4[52]) -> 8[48]
 1231:[52] PutInt(var[36], value=8[48])
 1234:[48] FreeStack(value=0, discard=4)
 1238:[44] GotoWord(jump=1125)
 1125:[44] VarInt(var[40]) -> 4[44]
 1128:[48] ConvBoolFromInt(v1=4[44]) -> true[44]
 1129:[45] Not(v1=true[44]) -> false[44]
 1130:[45] GotoFalseWord(jump=1141, if_false=false[44])
 1141:[44] VarInt(var[40]) -> 4[44]
 1144:[48] ConstInt(val=1) -> 1[48]
 1149:[52] AddInt(v1=4[44], v2=1[48]) -> 5[44]
 1150:[48] PutInt(var[40], value=5[44])
 1153:[44] VarInt(var[40]) -> 5[44]
 1156:[48] ConstInt(val=10) -> 10[48]
 1161:[52] GeInt(v1=5[44], v2=10[48]) -> false[44]
 1162:[45] GotoFalseWord(jump=1168, if_false=false[44])
 1168:[44] VarInt(var[40]) -> 5[44]
 1171:[48] VarInt(var[44]) -> 5[48]
 1174:[52] ConstInt(val=2) -> 2[52]
 1179:[56] EqInt(v1=5[48], v2=2[52]) -> false[48]
 1180:[49] GotoFalseWord(jump=1190, if_false=false[48])
 1190:[48] VarInt(var[44]) -> 5[48]
 1193:[52] ConstInt(val=5) -> 5[52]
 1198:[56] GtInt(v1=5[48], v2=5[52]) -> false[48]
 1199:[49] GotoFalseWord(jump=1224, if_false=false[48])
 1224:[48] VarInt(var[36]) -> 8[48]
 1227:[52] VarInt(var[44]) -> 5[52]
 1230:[56] AddInt(v1=8[48], v2=5[52]) -> 13[48]
 1231:[52] PutInt(var[36], value=13[48])
 1234:[48] FreeStack(value=0, discard=4)
 1238:[44] GotoWord(jump=1125)
 1125:[44] VarInt(var[40]) -> 5[44]
 1128:[48] ConvBoolFromInt(v1=5[44]) -> true[44]
 1129:[45] Not(v1=true[44]) -> false[44]
 1130:[45] GotoFalseWord(jump=1141, if_false=false[44])
 1141:[44] VarInt(var[40]) -> 5[44]
 1144:[48] ConstInt(val=1) -> 1[48]
 1149:[52] AddInt(v1=5[44], v2=1[48]) -> 6[44]
 1150:[48] PutInt(var[40], value=6[44])
 1153:[44] VarInt(var[40]) -> 6[44]
 1156:[48] ConstInt(val=10) -> 10[48]
 1161:[52] GeInt(v1=6[44], v2=10[48]) -> false[44]
 1162:[45] GotoFalseWord(jump=1168, if_false=false[44])
 1168:[44] VarInt(var[40]) -> 6[44]
 1171:[48] VarInt(var[44]) -> 6[48]
 1174:[52] ConstInt(val=2) -> 2[52]
 1179:[56] EqInt(v1=6[48], v2=2[52]) -> false[48]
 1180:[49] GotoFalseWord(jump=1190, if_false=false[48])
 1190:[48] VarInt(var[44]) -> 6[48]
 1193:[52] ConstInt(val=5) -> 5[52]
 1198:[56] GtInt(v1=6[48], v2=5[52]) -> true[48]
 1199:[49] GotoFalseWord(jump=1224, if_false=true[48])
 1202:[48] VarInt(var[36]) -> 13[48]
 1205:[52] Return(ret=1262[32], value=4, discard=20)
    8:[36] VarInt(var[32]) -> 13[36]
   11:[40] ConstInt(val=13) -> 13[40]
   16:[44] EqInt(v1=13[36], v2=13[40]) -> true[36]
   17:[37] GotoFalseWord(jump=23, if_false=true[36])
   20:[36] GotoWord(jump=73)
   73:[36] FreeText(var[8])
   76:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
