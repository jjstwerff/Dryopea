fn routine() -> integer {b = 0; for a in 0..10 { if a == 2 {continue} if a > 5 {return b} b += a }; b}

pub fn test() {
    test_value = {routine()};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}
fn routine() -> integer {#1 block
  b:integer = 0i32;
  {#2 for
    a#index:integer = OpConvIntFromNull();
    loop {#3 for loop
      a:integer = {#4 for next
        a#index:integer = if OpNot(OpConvBoolFromInt(a#index)) 0i32 else OpAddInt(a#index, 1i32);
        if OpGeInt(a#index, 10i32) break(0) else null;
        a#index;
      }#4:integer;
      {#5 block
        if OpEqInt(a, 2i32) {#6 block
          continue(0);
        }#6 else null;
        if OpGtInt(a, 5i32) {#7 block
          return b;
        }#7 else null;
        b:integer = OpAddInt(b, a);
      }#5;
    }#3;
  }#2;
  b;
}#1:integer

byte-code for continue_loop:routine() [1176] -> integer
   0[0]: return-address
   0[4]: ConstInt(val=0) -> integer var=b[4]:integer in 1
   5[8]: ConvIntFromNull() -> integer var=a#index[8]:integer in 2
   6[12]: VarInt(var[8]) -> integer var=a#index[8]:integer in 2
   9[16]: ConvBoolFromInt(v1: integer) -> boolean
  10[13]: Not(v1: boolean) -> boolean
  11[13]: GotoFalseWord(jump=22, if_false: boolean)
  14[12]: ConstInt(val=0) -> integer
  19[16]: GotoWord(jump=31)
  22[12]: VarInt(var[8]) -> integer var=a#index[8]:integer in 2
  25[16]: ConstInt(val=1) -> integer
  30[20]: AddInt(v1: integer, v2: integer) -> integer
  31[16]: PutInt(var[8], value: integer)
  34[12]: VarInt(var[8]) -> integer var=a#index[8]:integer in 2
  37[16]: ConstInt(val=10) -> integer
  42[20]: GeInt(v1: integer, v2: integer) -> boolean
  43[13]: GotoFalseWord(jump=49, if_false: boolean)
  46[12]: GotoWord(jump=113)
  49[12]: VarInt(var[8]) -> integer var=a#index[8]:integer in 2
  52[16]: VarInt(var[12]) -> integer var=a[12]:integer in 3
  55[20]: ConstInt(val=2) -> integer
  60[24]: EqInt(v1: integer, v2: integer) -> boolean
  61[17]: GotoFalseWord(jump=71, if_false: boolean)
  64[16]: FreeStack(value=0, discard=4)
  68[12]: GotoWord(jump=6)
  71[16]: VarInt(var[12]) -> integer var=a[12]:integer in 3
  74[20]: ConstInt(val=5) -> integer
  79[24]: GtInt(v1: integer, v2: integer) -> boolean
  80[17]: GotoFalseWord(jump=96, if_false: boolean)
  83[16]: VarInt(var[4]) -> integer var=b[4]:integer in 1
  86[20]: Return(ret=0, value=4, discard=20) type=integer[4]:Base[0]
  92[20]: FreeStack(value=0, discard=4)
  96[16]: VarInt(var[4]) -> integer var=b[4]:integer in 1
  99[20]: VarInt(var[12]) -> integer var=a[12]:integer in 3
 102[24]: AddInt(v1: integer, v2: integer) -> integer
 103[20]: PutInt(var[4], value: integer)
 106[16]: FreeStack(value=0, discard=4)
 110[12]: GotoWord(jump=6)
 113[12]: FreeStack(value=0, discard=4)
 117[8]: VarInt(var[4]) -> integer var=b[4]:integer in 1
 120[12]: Return(ret=0, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    routine();
  }#2:integer;
  if OpEqInt(test_value, 13i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 13");
    __work_1;
  }#3:text);
}#1

byte-code for continue_loop:test() [1302]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Call(size=0, to=1176) var=test_value[28]:integer in 1
   8[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  11[36]: ConstInt(val=13) -> integer
  16[40]: EqInt(v1: integer, v2: integer) -> boolean
  17[33]: GotoFalseWord(jump=23, if_false: boolean)
  20[32]: GotoWord(jump=73)
  23[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  26[32]: ConstText(_value="Test failed ") -> text
  40[48]: AppendText(var[4], v1: text)
  43[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  46[36]: ConstInt(val=0) -> integer
  51[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  58[32]: ConstText(_value=" != 13") -> text
  66[48]: AppendText(var[4], v1: text)
  69[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  72[48]: Panic(message: text)
  73[32]: FreeText(var[4])
  76[32]: Return(ret=0, value=0, discard=32)

