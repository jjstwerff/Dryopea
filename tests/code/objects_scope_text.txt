pub struct Data {
    name: text,
    number: integer
}


pub fn test() {
    test_value = {d = Data { name: "testing" }; d.name};
    assert(
        test_value == "testing",
        "Test failed {test_value} != \"testing\""
    );
}
Type 17:Data[12]:
    name:text[4]
    number:integer[8]

fn test() {#1 block
  d:ref(Data)["d"] = null;
  __work_1:text = "";
  test_value:text["d"] = {#2 block
    d:ref(Data)["d"] = OpConvRefFromNull();
    OpDatabase(d, 17i32);
    OpSetText(d, 4i32, "testing");
    OpSetInt(d, 8i32, 0i32);
    OpGetText(d, 4i32);
  }#2:text["d"];
  if OpEqText(test_value, "testing") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "testing"");
    __work_1;
  }#3:text);
}#1

byte-code for scope_text:test() [1176]
   0[0]: return-address
   0[4]: CreateRef(var[3]) -> ref(reference) var=d[4]:ref(Data)["d"] in 1
   3[16]: Text() var=__work_1[16]:text in 1
   4[40]: Text() var=test_value[40]:text["d"] in 1
   5[64]: ConvRefFromNull() -> ref(reference) var=d[4]:ref(Data)["d"] in 1
   6[76]: PutRef(var[4], value: ref(reference))
   9[64]: Database(var[4], db_tp=17) type=Data[12]:{name:text[4], number:integer[8]}[17]
  14[64]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[4]:ref(Data)["d"] in 1
  17[76]: ConstText(_value="testing") -> text
  26[92]: SetText(v1: ref(reference), fld=4, val: text)
  29[64]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[4]:ref(Data)["d"] in 1
  32[76]: ConstInt(val=0) -> integer
  37[80]: SetInt(v1: ref(reference), fld=8, val: integer)
  40[64]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[4]:ref(Data)["d"] in 1
  43[76]: GetText(v1: ref(reference), fld=4) -> text["test_value"]
  46[80]: AppendText(var[40], v1: text)
  49[64]: VarText(var[40]) -> text var=test_value[40]:text["d"] in 1
  52[80]: ConstText(_value="testing") -> text
  61[96]: EqText(v1: text, v2: text) -> boolean
  62[65]: GotoFalseWord(jump=68, if_false: boolean)
  65[64]: GotoWord(jump=123)
  68[64]: ClearText(var[16]) var=__work_1[16]:text in 1
  71[64]: ConstText(_value="Test failed ") -> text
  85[80]: AppendText(var[16], v1: text)
  88[64]: VarText(var[40]) -> text var=test_value[40]:text["d"] in 1
  91[80]: ConstInt(val=0) -> integer
  96[84]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 101[64]: ConstText(_value=" != "testing"") -> text
 116[80]: AppendText(var[16], v1: text)
 119[64]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 122[80]: Panic(message: text)
 123[64]: FreeText(var[40])
 126[64]: FreeText(var[16])
 129[64]: Return(ret=0, value=0, discard=64)

