pub struct Data {
    name: text,
    number: integer
}


pub fn test() {
    test_value = {d = Data { name: "testing" }; d.name};
    assert(
        test_value == "testing",
        "Test failed {test_value} != \"testing\""
    );
}
Type 14:Data[12]:
    name:text[4]
    number:integer[8]

fn test() {#1 block
  __ref_1:ref(Data) = null;
  d:ref(Data)["__ref_1"] = null;
  __work_1:text = "";
  test_value:text["d"] = {#2 block
    d:ref(Data)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 14i32);
      OpSetText(__ref_1, 4i32, "testing");
      OpSetInt(__ref_1, 8i32, 0i32);
      __ref_1;
    }#3:ref(Data)["__ref_1"];
    OpGetText(d, 4i32);
  }#2:text["d"];
  if OpEqText(test_value, "testing") null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "testing"");
    __work_1;
  }#4:text);
}#1

byte-code for scope_text:test()
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Data) in 1
   1[16]: CreateRef(var[13]) -> ref(reference) var=d[16]:ref(Data)["__ref_1"] in 1
   4[28]: Text() var=__work_1[28]:text in 1
   5[52]: Text() var=test_value[52]:text["d"] in 1
   6[76]: Database(var[4], db_tp=14) type=Data[12]:{name:text[4], number:integer[8]}[14] var=d[16]:ref(Data)["__ref_1"] in 1
  11[76]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=__ref_1[4]:ref(Data) in 1
  14[88]: ConstText(_value="testing") -> text
  23[104]: SetText(v1: ref(reference), fld=4, val: text)
  26[76]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=__ref_1[4]:ref(Data) in 1
  29[88]: ConstInt(val=0) -> integer
  34[92]: SetInt(v1: ref(reference), fld=8, val: integer)
  37[76]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=__ref_1[4]:ref(Data) in 1
  40[88]: PutRef(var[16], value: ref(reference))
  43[76]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=d[16]:ref(Data)["__ref_1"] in 1
  46[88]: GetText(v1: ref(reference), fld=4) -> text["test_value"]
  49[92]: AppendText(var[52], v1: text)
  52[76]: VarText(var[52]) -> text var=test_value[52]:text["d"] in 1
  55[92]: ConstText(_value="testing") -> text
  64[108]: EqText(v1: text, v2: text) -> boolean
  65[77]: GotoFalseWord(jump=71, if_false: boolean)
  68[76]: GotoWord(jump=126)
  71[76]: ClearText(var[28]) var=__work_1[28]:text in 1
  74[76]: ConstText(_value="Test failed ") -> text
  88[92]: AppendText(var[28], v1: text)
  91[76]: VarText(var[52]) -> text var=test_value[52]:text["d"] in 1
  94[92]: ConstInt(val=0) -> integer
  99[96]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 104[76]: ConstText(_value=" != "testing"") -> text
 119[92]: AppendText(var[28], v1: text)
 122[76]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 125[92]: Panic(message: text)
 126[76]: FreeText(var[52])
 129[76]: FreeText(var[28])
 132[76]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=__ref_1[4]:ref(Data) in 1
 135[88]: FreeRef(v1: ref(reference))
 136[76]: Return(ret=0, value=0, discard=76)

