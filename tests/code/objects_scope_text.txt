pub struct Data {
    name: text,
    number: integer
}


pub fn test() {
    test_value = {d = Data { name: "testing" }; d.name};
    assert(
        test_value == "testing",
        "Test failed {test_value} != \"testing\""
    );
}
Type 17:Data[12]:
    name:text[4]
    number:integer[8]

fn test() {#block_1:void
  __work_1:text(1) = "";
  d:ref(Data)(1) = null;
  test_value:text["d"](1) = {#block_2:text["d"]
    OpDatabase(d, 17i32);
    OpSetText(d, 4i32, "testing");
    OpSetInt(d, 8i32, 0i32);
    OpGetText(d, 4i32);
  }#block_2:text["d"];
  if OpEqText(test_value, "testing") null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "testing"");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(test_value);
  OpFreeRef(d);
  OpFreeText(__work_1);
}#block_1:void

byte-code for scope_text:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConvRefFromNull() -> ref(reference) var=d[32]:ref(Data)
   2[44]: Text() var=test_value[44]:text["d"]
   3[68]: Database(var[32], db_tp=17) type=Data[12]:{name:text[4], number:integer[8]}[17]
   8[68]: VarRef(var[32]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[32]:ref(Data)
  11[80]: ConstText(_value="testing") -> text
  20[96]: SetText(v1: ref(reference), fld=4, val: text)
  23[68]: VarRef(var[32]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[32]:ref(Data)
  26[80]: ConstInt(val=0) -> integer
  31[84]: SetInt(v1: ref(reference), fld=8, val: integer)
  34[68]: VarRef(var[32]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[32]:ref(Data)
  37[80]: GetText(v1: ref(reference), fld=4) -> text["test_value"]
  40[84]: AppendText(var[44], v1: text)
  43[68]: VarText(var[44]) -> text var=test_value[44]:text["d"]
  46[84]: ConstText(_value="testing") -> text
  55[100]: EqText(v1: text, v2: text) -> boolean
  56[69]: GotoFalseWord(jump=62, if_false: boolean)
  59[68]: GotoWord(jump=117)
  62[68]: ClearText(var[8]) var=__work_1[8]:text
  65[68]: ConstText(_value="Test failed ") -> text
  79[84]: AppendText(var[8], v1: text)
  82[68]: VarText(var[44]) -> text var=test_value[44]:text["d"]
  85[84]: ConstInt(val=0) -> integer
  90[88]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  95[68]: ConstText(_value=" != "testing"") -> text
 110[84]: AppendText(var[8], v1: text)
 113[68]: VarText(var[8]) -> text var=__work_1[8]:text
 116[84]: Panic(message: text)
 117[68]: FreeText(var[44])
 120[68]: VarRef(var[32]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[32]:ref(Data)
 123[80]: FreeRef(v1: ref(reference))
 124[68]: FreeText(var[8])
 127[68]: Return(ret=0, value=0, discard=64)

Execute test:
    0:[8] Text()
    1:[32] ConvRefFromNull() -> ref(1,0,0)[32]
    2:[44] Text()
    3:[68] Database(var[32], db_tp=17)
    8:[68] VarRef(var[32]) -> ref(1,1,0)={}[68]
   11:[80] ConstText(_value="testing") -> "testing"[80]
   20:[96] SetText(v1=ref(1,1,0)[68], fld=4, val="testing"[80])
   23:[68] VarRef(var[32]) -> ref(1,1,0)={name:"testing"}[68]
   26:[80] ConstInt(val=0) -> 0[80]
   31:[84] SetInt(v1=ref(1,1,0)[68], fld=8, val=0[80])
   34:[68] VarRef(var[32]) -> ref(1,1,0)={name:"testing",number:0}[68]
   37:[80] GetText(v1=ref(1,1,0)[68], fld=4) -> "testing"[68]
   40:[84] AppendText(var[44], v1="testing"[68])
   43:[68] VarText(var[44]) -> "testing"[68]
   46:[84] ConstText(_value="testing") -> "testing"[84]
   55:[100] EqText(v1="testing"[68], v2="testing"[84]) -> true[68]
   56:[69] GotoFalseWord(jump=1230, if_false=true[68])
   59:[68] GotoWord(jump=1285)
  117:[68] FreeText(var[44])
  120:[68] VarRef(var[32]) -> ref(1,1,0)={name:"testing",number:0}[68]
  123:[80] FreeRef(v1=ref(1,1,0)[68])
  124:[68] FreeText(var[8])
  127:[68] Return(ret=4294967295[4], value=0, discard=64)
Finished
