pub fn test() {
    test_value = {a = [];
for v in 1..400 { a += [ v * 10 ] };
sum = 0;
for elm in a { sum += elm }
"{sum}"};
    assert(
        test_value == "798000",
        "Test failed {test_value} != \"798000\""
    );
}
Type 15:vector<integer>[4]:Vector(0)

Type 16:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn test() {#1 block
  __ref_1:ref(main_vector<integer>) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    a:vector<integer>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 16i32);
      _vec_1:vector<integer>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _vec_1;
    }#3:vector<integer>["__ref_1"];
    {#4 for
      v#index:integer = OpConvIntFromNull();
      loop {#5 for loop
        v:integer = {#6 for next
          v#index:integer = if OpNot(OpConvBoolFromInt(v#index)) 1i32 else OpAddInt(v#index, 1i32);
          if OpGeInt(v#index, 400i32) break(0) else null;
          v#index;
        }#6:integer;
        {#7 block
          {#8 vector
            _elm_2:ref(boolean)["a"] = OpNewRecord(a, 15i32, 65535i32);
            OpSetInt(_elm_2, 0i32, OpMulInt(v, 10i32));
            OpFinishRecord(a, _elm_2, 15i32, 65535i32);
          }#8;
        }#7;
      }#5;
    }#4;
    sum:integer = 0i32;
    {#9 for
      _vector_3:vector<integer>["a"] = a;
      elm#index:integer = -1i32;
      loop {#10 for loop
        elm:integer = {#11 iter next
          elm#index:integer = OpAddInt(elm#index, 1i32);
          OpGetInt(OpGetVector(_vector_3, 4i32, elm#index), 0i32);
        }#11:integer;
        if OpNot(OpConvBoolFromInt(elm)) break(0) else null;
        {#12 block
          sum:integer = OpAddInt(sum, elm);
        }#12;
      }#10;
    }#9;
    {#13 formatting string
      __work_1:text = "";
      OpFormatInt(__work_1, sum, 10i32, 0i32, 32i32, false, false);
      __work_1;
    }#13:text;
  }#2:text;
  if OpEqText(test_value, "798000") null else OpPanic({#14 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "798000"");
    __work_2;
  }#14:text);
}#1

byte-code for growing_vector:test() [1073]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<integer>) in 1
   1[16]: Text() var=__work_2[16]:text in 1
   2[40]: Text() var=__work_1[40]:text in 1
   3[64]: Text() var=test_value[64]:text in 1
   4[88]: Database(var[4], db_tp=16) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[16] var=a[88]:vector<integer>["__ref_1"] in 2
   9[88]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[16] var=__ref_1[4]:ref(main_vector<integer>) in 1
  12[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  15[100]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[16] var=__ref_1[4]:ref(main_vector<integer>) in 1
  18[112]: ConstInt(val=0) -> integer
  23[116]: SetInt(v1: ref(reference), fld=4, val: integer)
  26[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[15] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
  29[112]: FreeStack(value=12, discard=24) type=vector<text>[4]:Vector(5)[7]
  33[100]: ConvIntFromNull() -> integer var=v#index[100]:integer in 4
  34[104]: VarInt(var[100]) -> integer var=v#index[100]:integer in 4
  37[108]: ConvBoolFromInt(v1: integer) -> boolean
  38[105]: Not(v1: boolean) -> boolean
  39[105]: GotoFalseWord(jump=50, if_false: boolean)
  42[104]: ConstInt(val=1) -> integer
  47[108]: GotoWord(jump=59)
  50[104]: VarInt(var[100]) -> integer var=v#index[100]:integer in 4
  53[108]: ConstInt(val=1) -> integer
  58[112]: AddInt(v1: integer, v2: integer) -> integer
  59[108]: PutInt(var[100], value: integer)
  62[104]: VarInt(var[100]) -> integer var=v#index[100]:integer in 4
  65[108]: ConstInt(val=400) -> integer
  70[112]: GeInt(v1: integer, v2: integer) -> boolean
  71[105]: GotoFalseWord(jump=77, if_false: boolean)
  74[104]: GotoWord(jump=125)
  77[104]: VarInt(var[100]) -> integer var=v#index[100]:integer in 4
  80[108]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[15] var=a[88]:vector<integer>["__ref_1"] in 2
  83[120]: NewRecord(data: ref(reference), parent_tp=15, fld=65535) -> ref(reference)
  88[120]: VarRef(var[108]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[108]:ref(boolean)["a"] in 8
  91[132]: VarInt(var[104]) -> integer var=v[104]:integer in 5
  94[136]: ConstInt(val=10) -> integer
  99[140]: MulInt(v1: integer, v2: integer) -> integer
 100[136]: SetInt(v1: ref(reference), fld=0, val: integer)
 103[120]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[15] var=a[88]:vector<integer>["__ref_1"] in 2
 106[132]: VarRef(var[108]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[108]:ref(boolean)["a"] in 8
 109[144]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=65535)
 114[120]: FreeStack(value=0, discard=12)
 118[108]: FreeStack(value=0, discard=4)
 122[104]: GotoWord(jump=34)
 125[104]: FreeStack(value=0, discard=4)
 129[100]: ConstInt(val=0) -> integer var=sum[100]:integer in 2
 134[104]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[15] var=a[88]:vector<integer>["__ref_1"] in 2
 137[116]: ConstInt(val=-1) -> integer var=elm#index[116]:integer in 9
 142[120]: VarInt(var[116]) -> integer var=elm#index[116]:integer in 9
 145[124]: ConstInt(val=1) -> integer
 150[128]: AddInt(v1: integer, v2: integer) -> integer
 151[124]: PutInt(var[116], value: integer)
 154[120]: VarVector(var[104]) -> vector type=vector<integer>[4]:Vector(0)[15] var=_vector_3[104]:vector<integer>["a"] in 9
 157[132]: VarInt(var[116]) -> integer var=elm#index[116]:integer in 9
 160[136]: GetVector(r: vector, size=4, index: integer) -> ref(reference) type=integer[4]:Base[0]
 163[132]: GetInt(v1: ref(reference), fld=0) -> integer
 166[124]: VarInt(var[120]) -> integer var=elm[120]:integer in 10
 169[128]: ConvBoolFromInt(v1: integer) -> boolean
 170[125]: Not(v1: boolean) -> boolean
 171[125]: GotoFalseWord(jump=181, if_false: boolean)
 174[124]: FreeStack(value=0, discard=4)
 178[120]: GotoWord(jump=198)
 181[124]: VarInt(var[100]) -> integer var=sum[100]:integer in 2
 184[128]: VarInt(var[120]) -> integer var=elm[120]:integer in 10
 187[132]: AddInt(v1: integer, v2: integer) -> integer
 188[128]: PutInt(var[100], value: integer)
 191[124]: FreeStack(value=0, discard=4)
 195[120]: GotoWord(jump=142)
 198[120]: FreeStack(value=0, discard=16)
 202[104]: ClearText(var[40]) var=__work_1[40]:text in 1
 205[104]: ConstText(_value="") -> text
 207[120]: AppendText(var[40], v1: text)
 210[104]: VarInt(var[100]) -> integer var=sum[100]:integer in 2
 213[108]: ConstInt(val=0) -> integer
 218[112]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 225[104]: VarText(var[40]) -> text var=__work_1[40]:text in 1
 228[120]: FreeStack(value=16, discard=32) type=text[4]:Base[5]
 232[104]: AppendText(var[64], v1: text)
 235[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 238[104]: ConstText(_value="798000") -> text
 246[120]: EqText(v1: text, v2: text) -> boolean
 247[89]: GotoFalseWord(jump=253, if_false: boolean)
 250[88]: GotoWord(jump=307)
 253[88]: ClearText(var[16]) var=__work_2[16]:text in 1
 256[88]: ConstText(_value="Test failed ") -> text
 270[104]: AppendText(var[16], v1: text)
 273[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 276[104]: ConstInt(val=0) -> integer
 281[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 286[88]: ConstText(_value=" != "798000"") -> text
 300[104]: AppendText(var[16], v1: text)
 303[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
 306[104]: Panic(message: text)
 307[88]: FreeText(var[64])
 310[88]: FreeText(var[40])
 313[88]: FreeText(var[16])
 316[88]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[16] var=__ref_1[4]:ref(main_vector<integer>) in 1
 319[100]: FreeRef(v1: ref(reference))
 320[88]: Return(ret=0, value=0, discard=88)

