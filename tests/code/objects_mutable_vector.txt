fn add(r: &vector<integer> = [], val: integer) {
    r += [val];
}

pub fn test() {
    test_value = {v = [1]; add(v, 2); add(v, 3); "{v}"};
    assert(
        test_value == "[1,2,3]",
        "Test failed {test_value} != \"[1,2,3]\""
    );
}
Type 12:vector<integer>[4]:Vector(0)

Type 13:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn add(r:&vector<integer>, val:integer) {#1 block
  {#2 vector
    _elm_1:boolean = OpNewRecord(r, 12i32, 65535i32);
    OpSetInt(_elm_1, 0i32, val);
    OpFinishRecord(r, _elm_1, 12i32, 65535i32);
  }#2;
}#1

byte-code for mutable_vector:add(r: &vector<integer>[0], val: integer[12])
 691[16]: return-address
 691[20]: VarRef(var[0]) -> reference
 694[32]: GetDbRef(r: reference, fld=0) -> reference
 697[32]: NewRecord(data: reference, parent_tp=12, fld=65535) -> reference
 702[32]: VarRef(var[20]) -> reference type=boolean[1]:Base[4]
 705[44]: VarInt(var[12]) -> integer
 708[48]: SetInt(v1: reference, fld=0, val: integer)
 711[32]: VarRef(var[0]) -> reference
 714[44]: GetDbRef(r: reference, fld=0) -> reference
 717[44]: VarRef(var[20]) -> reference type=boolean[1]:Base[4]
 720[56]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=65535)
 725[32]: FreeStack(value=0, discard=12)
 729[20]: Return(ret=16, value=0, discard=20)

fn test() {#1 block
  __ref_1:main_vector<integer> = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    v:vector<integer> = {#3 vector
      OpDatabase(__ref_1, 13i32);
      _vec_2:vector<integer> = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_1:boolean = OpNewRecord(_vec_2, 12i32, 65535i32);
      OpSetInt(_elm_1, 0i32, 1i32);
      OpFinishRecord(_vec_2, _elm_1, 12i32, 65535i32);
      _vec_2;
    }#3:vector<integer>;
    add(OpCreateRef(v), 2i32);
    add(OpCreateRef(v), 3i32);
    {#4 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 12i32, false);
      __work_1;
    }#4:text;
  }#2:text;
  if OpEqText(test_value, "[1,2,3]") null else OpPanic({#5 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[1,2,3]"");
    __work_2;
  }#5:text);
}#1

byte-code for mutable_vector:test()
 735[0]: return-address
 735[4]: ConvRefFromNull() -> reference
 736[16]: Text()
 737[40]: Text()
 738[64]: Text()
 739[88]: Database(var[4], db_tp=13) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 744[88]: VarRef(var[4]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 747[100]: GetField(v1: reference, fld=4) -> reference type=Unknown type(65535)[65535]
 750[100]: VarRef(var[4]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 753[112]: ConstInt(val=0) -> integer
 758[116]: SetInt(v1: reference, fld=4, val: integer)
 761[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[12]
 764[112]: NewRecord(data: reference, parent_tp=12, fld=65535) -> reference
 769[112]: VarRef(var[100]) -> reference type=boolean[1]:Base[4]
 772[124]: ConstInt(val=1) -> integer
 777[128]: SetInt(v1: reference, fld=0, val: integer)
 780[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[12]
 783[124]: VarRef(var[100]) -> reference type=boolean[1]:Base[4]
 786[136]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=65535)
 791[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[12]
 794[124]: FreeStack(value=12, discard=36) type=Variable[12]:{name:text[4], value:text[8]}[6]
 798[100]: CreateRef(var[88]) -> reference
 801[112]: ConstInt(val=2) -> integer
 806[116]: Call(size=0, to=691)
 813[100]: CreateRef(var[88]) -> reference
 816[112]: ConstInt(val=3) -> integer
 821[116]: Call(size=0, to=691)
 828[100]: ClearText(var[40])
 831[100]: ConstText(_value="") -> text
 833[116]: AppendText(var[40], v1: text)
 836[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[12]
 839[112]: FormatDatabase(var[40], val: reference, db_tp=12, pretty=false)
 845[100]: VarText(var[40]) -> text
 848[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 852[104]: AppendText(var[64], v1: text)
 855[88]: VarText(var[64]) -> text
 858[104]: ConstText(_value="[1,2,3]") -> text
 867[120]: EqText(v1: text, v2: text) -> boolean
 868[89]: GotoFalseWord(jump=874, if_false: boolean)
 871[88]: GotoWord(jump=929)
 874[88]: ClearText(var[16])
 877[88]: ConstText(_value="Test failed ") -> text
 891[104]: AppendText(var[16], v1: text)
 894[88]: VarText(var[64]) -> text
 897[104]: ConstInt(val=0) -> integer
 902[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 907[88]: ConstText(_value=" != "[1,2,3]"") -> text
 922[104]: AppendText(var[16], v1: text)
 925[88]: VarText(var[16]) -> text
 928[104]: Panic(message: text)
 929[88]: FreeText(var[64])
 932[88]: FreeText(var[40])
 935[88]: FreeText(var[16])
 938[88]: Return(ret=0, value=0, discard=88)

Execute test:
  735:[8] ConvRefFromNull() -> ref(65535,0,0)[8]
  736:[20] Text()
  737:[44] Text()
  738:[68] Text()
  739:[92] Database(var[8], db_tp=13)
  744:[92] VarRef(var[8]) -> ref(1,1,0)={}[92]
  747:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)[92]
  750:[104] VarRef(var[8]) -> ref(1,1,0)={}[104]
  753:[116] ConstInt(val=0) -> 0[116]
  758:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  761:[104] VarVector(var[92]) -> ref(1,1,4)=[][104]
  764:[116] NewRecord(data=ref(1,1,4)[104], parent_tp=12, fld=65535) -> ref(1,9,8)[104]
  769:[116] VarRef(var[104]) -> ref(1,9,8)=false[116]
  772:[128] ConstInt(val=1) -> 1[128]
  777:[132] SetInt(v1=ref(1,9,8)[116], fld=0, val=1[128])
  780:[116] VarVector(var[92]) -> ref(1,1,4)=[1][116]
  783:[128] VarRef(var[104]) -> ref(1,9,8)=true[128]
  786:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,8)[128], parent_tp=12, fld=65535)
  791:[116] VarVector(var[92]) -> ref(1,1,4)=[1][116]
  794:[128] FreeStack(value=12, discard=36)
  798:[104] CreateRef(var[92]) -> ref(0,1,92)[104]
  801:[116] ConstInt(val=2) -> 2[116]
  806:[120] Call(size=0, to=691)
  691:[124] VarRef(var[104]) -> ref(0,1,92)[124]
  694:[136] GetDbRef(r=ref(0,1,92)[124], fld=0) -> ref(1,1,4)[124]
  695:[136] Goto(jump=-9542)
  697:[136] NewRecord(data=ref(1,1,4)[124], parent_tp=12, fld=65535) -> ref(1,9,12)[124]
  702:[136] VarRef(var[124]) -> ref(1,9,12)=false[136]
  705:[148] VarInt(var[116]) -> 2[148]
  708:[152] SetInt(v1=ref(1,9,12)[136], fld=0, val=2[148])
  711:[136] VarRef(var[104]) -> ref(0,1,92)[136]
  714:[148] GetDbRef(r=ref(0,1,92)[136], fld=0) -> ref(1,1,4)[136]
  715:[148] Goto(jump=-17202)
  717:[148] VarRef(var[124]) -> ref(1,9,12)=true[148]
  720:[160] FinishRecord(data=ref(1,1,4)[136], rec=ref(1,9,12)[148], parent_tp=12, fld=65535)
  725:[136] FreeStack(value=0, discard=12)
  729:[124] Return(ret=813[120], value=0, discard=20)
  813:[104] CreateRef(var[92]) -> ref(0,1,92)[104]
  816:[116] ConstInt(val=3) -> 3[116]
  821:[120] Call(size=0, to=691)
  691:[124] VarRef(var[104]) -> ref(0,1,92)[124]
  694:[136] GetDbRef(r=ref(0,1,92)[124], fld=0) -> ref(1,1,4)[124]
  695:[136] Goto(jump=-9542)
  697:[136] NewRecord(data=ref(1,1,4)[124], parent_tp=12, fld=65535) -> ref(1,9,16)[124]
  702:[136] VarRef(var[124]) -> ref(1,9,16)=false[136]
  705:[148] VarInt(var[116]) -> 3[148]
  708:[152] SetInt(v1=ref(1,9,16)[136], fld=0, val=3[148])
  711:[136] VarRef(var[104]) -> ref(0,1,92)[136]
  714:[148] GetDbRef(r=ref(0,1,92)[136], fld=0) -> ref(1,1,4)[136]
  715:[148] Goto(jump=-17202)
  717:[148] VarRef(var[124]) -> ref(1,9,16)=true[148]
  720:[160] FinishRecord(data=ref(1,1,4)[136], rec=ref(1,9,16)[148], parent_tp=12, fld=65535)
  725:[136] FreeStack(value=0, discard=12)
  729:[124] Return(ret=828[120], value=0, discard=20)
  828:[104] ClearText(var[44])
  831:[104] ConstText(_value="") -> ""[104]
  833:[120] AppendText(var[44], v1=""[104])
  836:[104] VarVector(var[92]) -> ref(1,1,4)=[1,2,3][104]
  839:[116] FormatDatabase(var[44], val=ref(1,1,4)[104], db_tp=12, pretty=false)
  845:[104] VarText(var[44]) -> "[1,2,3]"[104]
  848:[120] FreeStack(value=16, discard=28)
  852:[108] AppendText(var[68], v1="[1,2,3]"[92])
  855:[92] VarText(var[68]) -> "[1,2,3]"[92]
  858:[108] ConstText(_value="[1,2,3]") -> "[1,2,3]"[108]
  867:[124] EqText(v1="[1,2,3]"[92], v2="[1,2,3]"[108]) -> true[92]
  868:[93] GotoFalseWord(jump=874, if_false=true[92])
  871:[92] GotoWord(jump=929)
  929:[92] FreeText(var[68])
  932:[92] FreeText(var[44])
  935:[92] FreeText(var[20])
  938:[92] Return(ret=4294967295[4], value=0, discard=88)
Finished
