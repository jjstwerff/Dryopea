fn add(r: &vector<integer> = [], val: integer) {
    r += [val];
}

pub fn test() {
    test_value = {v = [1]; add(v, 2); add(v, 3); "{v}"};
    assert(
        test_value == "[1,2,3]",
        "Test failed {test_value} != \"[1,2,3]\""
    );
}
Type 14:vector<integer>[4]:Vector(0)

Type 15:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn add(r:&vector<integer>, val:integer) {#1 block
  {#2 vector
    _elm_1:ref(boolean)["r"] = OpNewRecord(r, 14i32, 65535i32);
    OpSetInt(_elm_1, 0i32, val);
    OpFinishRecord(r, _elm_1, 14i32, 65535i32);
  }#2;
}#1

byte-code for mutable_vector:add(r: &vector<integer>[0], val: integer[12])
   0[16]: return-address
   0[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&vector<integer> in 0
   3[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
   6[32]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
  11[32]: VarRef(var[20]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[20]:ref(boolean)["r"] in 2
  14[44]: VarInt(var[12]) -> integer var=val[12]:integer in 0
  17[48]: SetInt(v1: ref(reference), fld=0, val: integer)
  20[32]: VarRef(var[0]) -> ref(reference) var=r[0]:&vector<integer> in 0
  23[44]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  26[44]: VarRef(var[20]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[20]:ref(boolean)["r"] in 2
  29[56]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
  34[32]: FreeStack(value=0, discard=12)
  38[20]: Return(ret=16, value=0, discard=20)

fn test() {#1 block
  __ref_1:ref(main_vector<integer>) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    v:vector<integer>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 15i32);
      _vec_1:vector<integer>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 1i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _vec_1;
    }#3:vector<integer>["__ref_1"];
    add(OpCreateRef(v), 2i32);
    add(OpCreateRef(v), 3i32);
    {#4 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 14i32, false);
      __work_1;
    }#4:text;
  }#2:text;
  if OpEqText(test_value, "[1,2,3]") null else OpPanic({#5 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[1,2,3]"");
    __work_2;
  }#5:text);
}#1

byte-code for mutable_vector:test()
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<integer>) in 1
   1[16]: Text() var=__work_2[16]:text in 1
   2[40]: Text() var=__work_1[40]:text in 1
   3[64]: Text() var=test_value[64]:text in 1
   4[88]: Database(var[4], db_tp=15) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=v[88]:vector<integer>["__ref_1"] in 2
   9[88]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=__ref_1[4]:ref(main_vector<integer>) in 1
  12[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  15[100]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=__ref_1[4]:ref(main_vector<integer>) in 1
  18[112]: ConstInt(val=0) -> integer
  23[116]: SetInt(v1: ref(reference), fld=4, val: integer)
  26[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
  29[112]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
  34[112]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
  37[124]: ConstInt(val=1) -> integer
  42[128]: SetInt(v1: ref(reference), fld=0, val: integer)
  45[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
  48[124]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
  51[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
  56[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
  59[124]: FreeStack(value=12, discard=36) type=vector<text>[4]:Vector(5)[6]
  63[100]: CreateRef(var[88]) -> ref(reference)
  66[112]: ConstInt(val=2) -> integer
  71[116]: Call(size=0, to=911)
  78[100]: CreateRef(var[88]) -> ref(reference)
  81[112]: ConstInt(val=3) -> integer
  86[116]: Call(size=0, to=911)
  93[100]: ClearText(var[40]) var=__work_1[40]:text in 1
  96[100]: ConstText(_value="") -> text
  98[116]: AppendText(var[40], v1: text)
 101[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[88]:vector<integer>["__ref_1"] in 2
 104[112]: FormatDatabase(var[40], val: ref(reference), db_tp=14, pretty=false)
 110[100]: VarText(var[40]) -> text var=__work_1[40]:text in 1
 113[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 117[104]: AppendText(var[64], v1: text)
 120[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 123[104]: ConstText(_value="[1,2,3]") -> text
 132[120]: EqText(v1: text, v2: text) -> boolean
 133[89]: GotoFalseWord(jump=139, if_false: boolean)
 136[88]: GotoWord(jump=194)
 139[88]: ClearText(var[16]) var=__work_2[16]:text in 1
 142[88]: ConstText(_value="Test failed ") -> text
 156[104]: AppendText(var[16], v1: text)
 159[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 162[104]: ConstInt(val=0) -> integer
 167[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 172[88]: ConstText(_value=" != "[1,2,3]"") -> text
 187[104]: AppendText(var[16], v1: text)
 190[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
 193[104]: Panic(message: text)
 194[88]: FreeText(var[64])
 197[88]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=__ref_1[4]:ref(main_vector<integer>) in 1
 200[100]: FreeRef(v1: ref(reference))
 201[88]: FreeText(var[40])
 204[88]: FreeText(var[16])
 207[88]: Return(ret=0, value=0, discard=88)

