fn add(r: &vector<integer> = [], val: integer) {
    r += [val];
}

pub fn test() {
    test_value = {v = [1]; add(v, 2); add(v, 3); "{v}"};
    assert(
        test_value == "[1,2,3]",
        "Test failed {test_value} != \"[1,2,3]\""
    );
}
Type 17:vector<integer>[4]:Vector(0)

Type 18:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn add(r:&vector<integer>, val:integer) {#block(1):void
  _elm_1(1):ref(boolean)["r"] = OpNewRecord(r(0), 17i32, 65535i32);
  OpSetInt(_elm_1(1), 0i32, val(0));
  OpFinishRecord(r(0), _elm_1(1), 17i32, 65535i32);
}#block(1):void

byte-code for mutable_vector:add(r: &vector<integer>[4], val: integer[16]) [1119]
   0[20]: return-address
   0[24]: VarRef(var[4]) -> ref(reference) var=r[4]:&vector<integer>
   3[36]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
   6[36]: NewRecord(data: ref(reference), parent_tp=17, fld=65535) -> ref(reference)
  11[36]: VarRef(var[24]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[24]:ref(boolean)["r"]
  14[48]: VarInt(var[16]) -> integer var=val[16]:integer
  17[52]: SetInt(v1: ref(reference), fld=0, val: integer)
  20[36]: VarRef(var[4]) -> ref(reference) var=r[4]:&vector<integer>
  23[48]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  26[48]: VarRef(var[24]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[24]:ref(boolean)["r"]
  29[60]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=65535)
  34[36]: Return(ret=16, value=0, discard=32)

fn test() {#block(1):void
  __ref_1(1):ref(main_vector<integer>) = null;
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text = {#block(2):text
    OpDatabase(__ref_1(1), 18i32);
    v(2):vector<integer>["__ref_1"] = OpGetField(__ref_1(1), 4i32, 17i32);
    OpSetInt(__ref_1(1), 4i32, 0i32);
    _elm_1(2):ref(boolean)["v"] = OpNewRecord(v(2), 17i32, 65535i32);
    OpSetInt(_elm_1(2), 0i32, 1i32);
    OpFinishRecord(v(2), _elm_1(2), 17i32, 65535i32);
    add(OpCreateRef(v(2)), 2i32);
    add(OpCreateRef(v(2)), 3i32);
    {#Formatted string(3):text
      __work_1(1):text = "";
      OpFormatDatabase(__work_1(1), v(2), 17i32, false);
      __work_1(1);
    }#Formatted string(3):text;
  }#block(2):text;
  if OpEqText(test_value(1), "[1,2,3]") null else OpPanic({#Formatted string(4):text
    __work_2(1):text = "Test failed ";
    OpFormatText(__work_2(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_2(1), " != "[1,2,3]"");
    __work_2(1);
  }#Formatted string(4):text);
  OpFreeText(test_value(1));
  OpFreeRef(__ref_1(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for mutable_vector:test() [1159]
   0[4]: return-address
   0[8]: ConvRefFromNull() -> ref(reference) var=__ref_1[8]:ref(main_vector<integer>)
   1[20]: Text() var=__work_2[20]:text
   2[44]: Text() var=__work_1[44]:text
   3[68]: Text() var=test_value[68]:text
   4[92]: Database(var[8], db_tp=18) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18]
   9[92]: VarRef(var[8]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[8]:ref(main_vector<integer>)
  12[104]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=vector<integer>[4]:Vector(0)[17]
  15[104]: VarRef(var[8]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[8]:ref(main_vector<integer>)
  18[116]: ConstInt(val=0) -> integer
  23[120]: SetInt(v1: ref(reference), fld=4, val: integer)
  26[104]: VarVector(var[92]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[92]:vector<integer>["__ref_1"]
  29[116]: NewRecord(data: ref(reference), parent_tp=17, fld=65535) -> ref(reference)
  34[116]: VarRef(var[104]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[104]:ref(boolean)["v"]
  37[128]: ConstInt(val=1) -> integer
  42[132]: SetInt(v1: ref(reference), fld=0, val: integer)
  45[116]: VarVector(var[92]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[92]:vector<integer>["__ref_1"]
  48[128]: VarRef(var[104]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[104]:ref(boolean)["v"]
  51[140]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=65535)
  56[116]: CreateRef(var[92]) -> ref(reference)
  59[128]: ConstInt(val=2) -> integer
  64[132]: Call(size=0, to=1119)
  71[116]: CreateRef(var[92]) -> ref(reference)
  74[128]: ConstInt(val=3) -> integer
  79[132]: Call(size=0, to=1119)
  86[116]: ClearText(var[44]) var=__work_1[44]:text
  89[116]: ConstText(_value="") -> text
  91[132]: AppendText(var[44], v1: text)
  94[116]: VarVector(var[92]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[92]:vector<integer>["__ref_1"]
  97[128]: FormatDatabase(var[44], val: ref(reference), db_tp=17, pretty=false)
 103[116]: VarText(var[44]) -> text var=__work_1[44]:text
 106[132]: FreeStack(value=16, discard=40)
 110[108]: AppendText(var[68], v1: text)
 113[92]: VarText(var[68]) -> text var=test_value[68]:text
 116[108]: ConstText(_value="[1,2,3]") -> text
 125[124]: EqText(v1: text, v2: text) -> boolean
 126[93]: GotoFalseWord(jump=132, if_false: boolean)
 129[92]: GotoWord(jump=187)
 132[92]: ClearText(var[20]) var=__work_2[20]:text
 135[92]: ConstText(_value="Test failed ") -> text
 149[108]: AppendText(var[20], v1: text)
 152[92]: VarText(var[68]) -> text var=test_value[68]:text
 155[108]: ConstInt(val=0) -> integer
 160[112]: FormatText(var[20], val: text, width: integer, dir=-1, token=32)
 165[92]: ConstText(_value=" != "[1,2,3]"") -> text
 180[108]: AppendText(var[20], v1: text)
 183[92]: VarText(var[20]) -> text var=__work_2[20]:text
 186[108]: Panic(message: text)
 187[92]: FreeText(var[68])
 190[92]: VarRef(var[8]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[8]:ref(main_vector<integer>)
 193[104]: FreeRef(v1: ref(reference))
 194[92]: FreeText(var[44])
 197[92]: FreeText(var[20])
 200[92]: Return(ret=0, value=0, discard=88)

Execute test:
    0:[8] ConvRefFromNull() -> ref(1,0,0)[8]
    1:[20] Text()
    2:[44] Text()
    3:[68] Text()
    4:[92] Database(var[8], db_tp=18)
    9:[92] VarRef(var[8]) -> ref(1,1,0)={}[92]
   12:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[][92]
   15:[104] VarRef(var[8]) -> ref(1,1,0)={}[104]
   18:[116] ConstInt(val=0) -> 0[116]
   23:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
   26:[104] VarVector(var[92]) -> ref(1,1,4)=[][104]
   29:[116] NewRecord(data=ref(1,1,4)[104], parent_tp=17, fld=65535) -> ref(1,9,8)[104]
   34:[116] VarRef(var[104]) -> ref(1,9,8)=false[116]
   37:[128] ConstInt(val=1) -> 1[128]
   42:[132] SetInt(v1=ref(1,9,8)[116], fld=0, val=1[128])
   45:[116] VarVector(var[92]) -> ref(1,1,4)=[1][116]
   48:[128] VarRef(var[104]) -> ref(1,9,8)=true[128]
   51:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,8)[128], parent_tp=17, fld=65535)
   56:[116] CreateRef(var[92]) -> ref(0,1,92)[116]
   59:[128] ConstInt(val=2) -> 2[128]
   64:[132] Call(size=0, to=1119)
 1119:[136] VarRef(var[116]) -> ref(0,1,92)[136]
 1122:[148] GetDbRef(r=ref(0,1,92)[136], fld=0) -> ref(1,1,4)[136]
 1123:[148] Goto(jump=-7834)
 1125:[148] NewRecord(data=ref(1,1,4)[136], parent_tp=17, fld=65535) -> ref(1,9,12)[136]
 1130:[148] VarRef(var[136]) -> ref(1,9,12)=false[148]
 1133:[160] VarInt(var[128]) -> 2[160]
 1136:[164] SetInt(v1=ref(1,9,12)[148], fld=0, val=2[160])
 1139:[148] VarRef(var[116]) -> ref(0,1,92)[148]
 1142:[160] GetDbRef(r=ref(0,1,92)[148], fld=0) -> ref(1,1,4)[148]
 1143:[160] Goto(jump=-15494)
 1145:[160] VarRef(var[136]) -> ref(1,9,12)=true[160]
 1148:[172] FinishRecord(data=ref(1,1,4)[148], rec=ref(1,9,12)[160], parent_tp=17, fld=65535)
 1153:[148] Return(ret=1230[132], value=0, discard=32)
   71:[116] CreateRef(var[92]) -> ref(0,1,92)[116]
   74:[128] ConstInt(val=3) -> 3[128]
   79:[132] Call(size=0, to=1119)
 1119:[136] VarRef(var[116]) -> ref(0,1,92)[136]
 1122:[148] GetDbRef(r=ref(0,1,92)[136], fld=0) -> ref(1,1,4)[136]
 1123:[148] Goto(jump=-7834)
 1125:[148] NewRecord(data=ref(1,1,4)[136], parent_tp=17, fld=65535) -> ref(1,9,16)[136]
 1130:[148] VarRef(var[136]) -> ref(1,9,16)=false[148]
 1133:[160] VarInt(var[128]) -> 3[160]
 1136:[164] SetInt(v1=ref(1,9,16)[148], fld=0, val=3[160])
 1139:[148] VarRef(var[116]) -> ref(0,1,92)[148]
 1142:[160] GetDbRef(r=ref(0,1,92)[148], fld=0) -> ref(1,1,4)[148]
 1143:[160] Goto(jump=-15494)
 1145:[160] VarRef(var[136]) -> ref(1,9,16)=true[160]
 1148:[172] FinishRecord(data=ref(1,1,4)[148], rec=ref(1,9,16)[160], parent_tp=17, fld=65535)
 1153:[148] Return(ret=1245[132], value=0, discard=32)
   86:[116] ClearText(var[44])
   89:[116] ConstText(_value="") -> ""[116]
   91:[132] AppendText(var[44], v1=""[116])
   94:[116] VarVector(var[92]) -> ref(1,1,4)=[1,2,3][116]
   97:[128] FormatDatabase(var[44], val=ref(1,1,4)[116], db_tp=17, pretty=false)
  103:[116] VarText(var[44]) -> "[1,2,3]"[116]
  106:[132] FreeStack(value=16, discard=40)
  110:[108] AppendText(var[68], v1="[1,2,3]"[92])
  113:[92] VarText(var[68]) -> "[1,2,3]"[92]
  116:[108] ConstText(_value="[1,2,3]") -> "[1,2,3]"[108]
  125:[124] EqText(v1="[1,2,3]"[92], v2="[1,2,3]"[108]) -> true[92]
  126:[93] GotoFalseWord(jump=132, if_false=true[92])
  129:[92] GotoWord(jump=187)
  187:[92] FreeText(var[68])
  190:[92] VarRef(var[8]) -> ref(1,1,0)={vector:[1,2,3]}[92]
  193:[104] FreeRef(v1=ref(1,1,0)[92])
  194:[92] FreeText(var[44])
  197:[92] FreeText(var[20])
  200:[92] Return(ret=4294967295[4], value=0, discard=88)
Finished
