fn add(r: &vector<integer> = [], val: integer) {
    r += [val];
}

pub fn test() {
    test_value = {v = [1]; add(v, 2); add(v, 3); "{v}"};
    assert(
        test_value == "[1,2,3]",
        "Test failed {test_value} != \"[1,2,3]\""
    );
}
Type 17:vector<integer>[4]:Vector(0)

Type 18:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn add(r:&vector<integer>, val:integer) {#1 block
  _elm_1:ref(boolean)["r"] = OpNewRecord(r, 17i32, 65535i32);
  OpSetInt(_elm_1, 0i32, val);
  OpFinishRecord(r, _elm_1, 17i32, 65535i32);
}#1

byte-code for mutable_vector:add(r: &vector<integer>[0], val: integer[12]) [1176]
   0[16]: return-address
   0[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&vector<integer> in 0
   3[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
   6[32]: NewRecord(data: ref(reference), parent_tp=17, fld=65535) -> ref(reference)
  11[32]: VarRef(var[20]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[20]:ref(boolean)["r"] in 1
  14[44]: VarInt(var[12]) -> integer var=val[12]:integer in 0
  17[48]: SetInt(v1: ref(reference), fld=0, val: integer)
  20[32]: VarRef(var[0]) -> ref(reference) var=r[0]:&vector<integer> in 0
  23[44]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  26[44]: VarRef(var[20]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[20]:ref(boolean)["r"] in 1
  29[56]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=65535)
  34[32]: Return(ret=16, value=0, discard=32)

fn test() {#1 block
  __ref_2:ref(main_vector<integer>) = null;
  __ref_1:ref(main_vector<integer>) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    OpDatabase(__ref_2, 18i32);
    v:vector<integer>["__ref_2"] = OpGetField(__ref_2, 4i32, 65535i32);
    OpSetInt(__ref_2, 4i32, 0i32);
    OpDatabase(__ref_1, 18i32);
    v:vector<integer>["__ref_2"] = OpGetField(__ref_1, 4i32, 65535i32);
    OpSetInt(__ref_1, 4i32, 0i32);
    _elm_1:ref(boolean)["__ref_1"] = OpNewRecord(v, 17i32, 65535i32);
    OpSetInt(_elm_1, 0i32, 1i32);
    OpFinishRecord(v, _elm_1, 17i32, 65535i32);
    add(OpCreateRef(v), 2i32);
    add(OpCreateRef(v), 3i32);
    {#3 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 17i32, false);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "[1,2,3]") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[1,2,3]"");
    __work_2;
  }#4:text);
}#1

byte-code for mutable_vector:test() [1216]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_2[4]:ref(main_vector<integer>) in 1
   1[16]: ConvRefFromNull() -> ref(reference) var=__ref_1[16]:ref(main_vector<integer>) in 1
   2[28]: Text() var=__work_2[28]:text in 1
   3[52]: Text() var=__work_1[52]:text in 1
   4[76]: Text() var=test_value[76]:text in 1
   5[100]: Database(var[4], db_tp=18) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18]
  10[100]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_2[4]:ref(main_vector<integer>) in 1
  13[112]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  16[112]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_2[4]:ref(main_vector<integer>) in 1
  19[124]: ConstInt(val=0) -> integer
  24[128]: SetInt(v1: ref(reference), fld=4, val: integer)
  27[112]: Database(var[16], db_tp=18) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18]
  32[112]: VarRef(var[16]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[16]:ref(main_vector<integer>) in 1
  35[124]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  38[124]: PutRef(var[100], value: ref(reference))
  41[112]: VarRef(var[16]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[16]:ref(main_vector<integer>) in 1
  44[124]: ConstInt(val=0) -> integer
  49[128]: SetInt(v1: ref(reference), fld=4, val: integer)
  52[112]: VarVector(var[100]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[100]:vector<integer>["__ref_2"] in 2
  55[124]: NewRecord(data: ref(reference), parent_tp=17, fld=65535) -> ref(reference)
  60[124]: VarRef(var[112]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[112]:ref(boolean)["__ref_1"] in 2
  63[136]: ConstInt(val=1) -> integer
  68[140]: SetInt(v1: ref(reference), fld=0, val: integer)
  71[124]: VarVector(var[100]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[100]:vector<integer>["__ref_2"] in 2
  74[136]: VarRef(var[112]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[112]:ref(boolean)["__ref_1"] in 2
  77[148]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=65535)
  82[124]: CreateRef(var[100]) -> ref(reference)
  85[136]: ConstInt(val=2) -> integer
  90[140]: Call(size=0, to=1176)
  97[124]: CreateRef(var[100]) -> ref(reference)
 100[136]: ConstInt(val=3) -> integer
 105[140]: Call(size=0, to=1176)
 112[124]: ClearText(var[52]) var=__work_1[52]:text in 1
 115[124]: ConstText(_value="") -> text
 117[140]: AppendText(var[52], v1: text)
 120[124]: VarVector(var[100]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[100]:vector<integer>["__ref_2"] in 2
 123[136]: FormatDatabase(var[52], val: ref(reference), db_tp=17, pretty=false)
 129[124]: VarText(var[52]) -> text var=__work_1[52]:text in 1
 132[140]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 136[116]: AppendText(var[76], v1: text)
 139[100]: VarText(var[76]) -> text var=test_value[76]:text in 1
 142[116]: ConstText(_value="[1,2,3]") -> text
 151[132]: EqText(v1: text, v2: text) -> boolean
 152[101]: GotoFalseWord(jump=158, if_false: boolean)
 155[100]: GotoWord(jump=213)
 158[100]: ClearText(var[28]) var=__work_2[28]:text in 1
 161[100]: ConstText(_value="Test failed ") -> text
 175[116]: AppendText(var[28], v1: text)
 178[100]: VarText(var[76]) -> text var=test_value[76]:text in 1
 181[116]: ConstInt(val=0) -> integer
 186[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 191[100]: ConstText(_value=" != "[1,2,3]"") -> text
 206[116]: AppendText(var[28], v1: text)
 209[100]: VarText(var[28]) -> text var=__work_2[28]:text in 1
 212[116]: Panic(message: text)
 213[100]: FreeText(var[76])
 216[100]: VarRef(var[16]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[16]:ref(main_vector<integer>) in 1
 219[112]: FreeRef(v1: ref(reference))
 220[100]: FreeText(var[52])
 223[100]: FreeText(var[28])
 226[100]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_2[4]:ref(main_vector<integer>) in 1
 229[112]: FreeRef(v1: ref(reference))
 230[100]: Return(ret=0, value=0, discard=100)

