fn add(a: text, b: &text="var") -> text {
    b += "_" + a;
    b
}

pub fn test() {
    test_value = {add("1234")};
    assert(
        test_value == "var_1234",
        "Test failed {test_value} != \"var_1234\""
    );
}
fn add {#1 block
  OpAppendRefText(OpVarRef(b), 0i32, "_");
  OpAppendRefText(OpVarRef(b), 0i32, a);
  b;
}#1

byte-code for default_ref:add(a: text(false, [])[0], b: refvar(text(false, []))[16]) -> text(false, [])
 668[28]: return-address
 668[32]: VarRef(var[16]) -> reference#[]
 671[44]: ConstText(_value="_") -> text(false, [])
 674[60]: AppendRefText(r: reference#[], fld=0, v1: text(false, []))
 677[32]: VarRef(var[16]) -> reference#[]
 680[44]: ArgText(var[0]) -> text(false, [])
 683[60]: AppendRefText(r: reference#[], fld=0, v1: text(false, []))
 686[32]: VarRef(var[16]) -> reference#[]
 689[44]: GetRefText(r: reference#[], fld=0) -> text(false, [])
 692[48]: GenReturn(ret=28, value=16, discard=48)

fn test {#1 block
  let __work_2 = "";
  let __work_1 = "";
  let test_value = {#2 block
    add("1234", {#3 default ref
      OpAppendText(__work_1, "var");
      OpCreateRef(__work_1);
    }#3);
  }#2;
  if OpEqText(test_value, "var_1234") null else OpGenPanic({#4 formatting string
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "var_1234"");
    __work_2;
  }#4);
}#1

byte-code for default_ref:test()
 698[0]: return-address
 698[4]: Text()
 699[28]: Text()
 700[52]: Text()
 701[76]: ConstText(_value="1234") -> text(false, [])
 707[92]: ConstText(_value="var") -> text(false, [])
 712[108]: AppendText(var[28], v1: text(false, []))
 715[92]: CreateRef(var[28]) -> reference#[]
 718[104]: GenCall(size=0, to=668)
 725[92]: AppendText(var[52], v1: text(false, []))
 728[76]: VarText(var[52]) -> text(false, [])
 731[92]: ConstText(_value="var_1234") -> text(false, [])
 741[108]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 742[77]: GenGotoFalseWord(jump=748, if_false: boolean)
 745[76]: GenGotoWord(jump=804)
 748[76]: ClearText(var[4])
 751[76]: ConstText(_value="Test failed ") -> text(false, [])
 765[92]: AppendText(var[4], v1: text(false, []))
 768[76]: VarText(var[52]) -> text(false, [])
 771[92]: ConstInt(val=0) -> integer
 776[96]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 781[76]: ConstText(_value=" != "var_1234"") -> text(false, [])
 797[92]: AppendText(var[4], v1: text(false, []))
 800[76]: VarText(var[4]) -> text(false, [])
 803[92]: GenPanic(message: text(false, []))
 804[76]: GenReturn(ret=0, value=0, discard=76)

Execute test:
  698:[8] Text()
  699:[32] Text()
  700:[56] Text()
  701:[80] ConstText(_value="1234") -> "1234"[80]
  707:[96] ConstText(_value="var") -> "var"[96]
  712:[112] AppendText(var[32], v1="var"[96])
  715:[96] CreateRef(var[32]) -> ref(0,1,32)[96]
  718:[108] GenCall(size=0, to=668)
  668:[112] VarRef(var[96]) -> ref(0,1,32)[112]
  671:[124] ConstText(_value="_") -> "_"[124]
  674:[140] AppendRefText(r=ref(0,1,32)[112], fld=0, v1="_"[124])
  675:[112] GenGoto(jump=-17242)
  677:[112] VarRef(var[96]) -> ref(0,1,32)[112]
  680:[124] ArgText(var[80]) -> "1234"[124]
  683:[140] AppendRefText(r=ref(0,1,32)[112], fld=0, v1="1234"[124])
  684:[112] GenGoto(jump=-17233)
  686:[112] VarRef(var[96]) -> ref(0,1,32)[112]
  689:[124] GetRefText(r=ref(0,1,32)[112], fld=0) -> "var_1234"[112]
  690:[128] GenGoto(jump=2229)
  692:[128] GenReturn(ret=725[108], value=16, discard=48)
  725:[96] AppendText(var[56], v1="var_1234"[80])
  728:[80] VarText(var[56]) -> "var_1234"[80]
  731:[96] ConstText(_value="var_1234") -> "var_1234"[96]
  741:[112] EqText(v1="var_1234"[80], v2="var_1234"[96]) -> true[80]
  742:[81] GenGotoFalseWord(jump=748, if_false=true[80])
  745:[80] GenGotoWord(jump=804)
  804:[80] GenReturn(ret=4294967295[4], value=0, discard=76)
Finished
