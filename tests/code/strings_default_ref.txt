fn add(a: text, b: &text="var") -> text {
    b += "_" + a;
    b
}

pub fn test() {
    test_value = {add("1234")};
    assert(
        test_value == "var_1234",
        "Test failed {test_value} != \"var_1234\""
    );
}
fn add(a:text, b:&text) -> text {#1 block
  OpAppendRefText(OpVarRef(b), 0i32, "_");
  OpAppendRefText(OpVarRef(b), 0i32, a);
  b;
}#1:&text["b"]

byte-code for default_ref:add(a: text[0], b: &text[16]) -> text
   0[28]: return-address
   0[32]: VarRef(var[16]) -> ref(reference)
   3[44]: ConstText(_value="_") -> text
   6[60]: AppendRefText(r: ref(reference), fld=0, v1: text)
   9[32]: VarRef(var[16]) -> ref(reference)
  12[44]: ArgText(var[0]) -> text var=a[0]:text in 0
  15[60]: AppendRefText(r: ref(reference), fld=0, v1: text)
  18[32]: VarRef(var[16]) -> ref(reference) var=b[16]:&text in 0
  21[44]: GetRefText(r: ref(reference), fld=0) -> text["a"]
  24[48]: Return(ret=28, value=16, discard=48) type=text[4]:Base[5]

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    add("1234", {#3 default ref
      OpAppendText(__work_1, "var");
      OpCreateRef(__work_1);
    }#3:ref(reference)["__work_1"]);
  }#2:text;
  if OpEqText(test_value, "var_1234") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "var_1234"");
    __work_2;
  }#4:text);
}#1

byte-code for default_ref:test()
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: ConstText(_value="1234") -> text
   9[92]: ConstText(_value="var") -> text
  14[108]: AppendText(var[28], v1: text)
  17[92]: CreateRef(var[28]) -> ref(reference)
  20[104]: Call(size=0, to=911)
  27[92]: AppendText(var[52], v1: text)
  30[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
  33[92]: ConstText(_value="var_1234") -> text
  43[108]: EqText(v1: text, v2: text) -> boolean
  44[77]: GotoFalseWord(jump=50, if_false: boolean)
  47[76]: GotoWord(jump=106)
  50[76]: ClearText(var[4]) var=__work_2[4]:text in 1
  53[76]: ConstText(_value="Test failed ") -> text
  67[92]: AppendText(var[4], v1: text)
  70[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
  73[92]: ConstInt(val=0) -> integer
  78[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  83[76]: ConstText(_value=" != "var_1234"") -> text
  99[92]: AppendText(var[4], v1: text)
 102[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 105[92]: Panic(message: text)
 106[76]: FreeText(var[52])
 109[76]: FreeText(var[28])
 112[76]: FreeText(var[4])
 115[76]: Return(ret=0, value=0, discard=76)

