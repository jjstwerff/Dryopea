pub fn test() {
    test_value = {b = 0l; for a in 10l..=20l { b+=a }; b};
    assert(
        test_value == 165l,
        "Test failed {test_value} != 165l"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:long = {#2 block
    b:long = 0i64;
    {#3 for
      a#index:long = OpConvLongFromNull();
      loop {#4 for loop
        a:long = {#5 for next
          a#index:long = if OpNot(OpConvBoolFromLong(a#index)) 10i64 else OpAddLong(a#index, OpConvLongFromInt(1i32));
          if OpGtLong(a#index, 20i64) break(0) else null;
          a#index;
        }#5:long;
        {#6 block
          b:long = OpAddLong(b, a);
        }#6;
      }#4;
    }#3;
    b;
  }#2:long;
  if OpEqLong(test_value, 165i64) null else OpPanic({#7 formatting string
    __work_1:text = "Test failed ";
    OpFormatLong(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 165l");
    __work_1;
  }#7:text);
}#1

byte-code for for_long:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstLong(val=0) -> long var=b[28]:long in 2
  10[36]: ConvLongFromNull() -> long var=a#index[36]:long in 3
  11[44]: VarLong(var[36]) -> long var=a#index[36]:long in 3
  14[52]: ConvBoolFromLong(v1: long) -> boolean
  15[45]: Not(v1: boolean) -> boolean
  16[45]: GotoFalseWord(jump=31, if_false: boolean)
  19[44]: ConstLong(val=10) -> long
  28[52]: GotoWord(jump=41)
  31[44]: VarLong(var[36]) -> long var=a#index[36]:long in 3
  34[52]: ConstInt(val=1) -> integer
  39[56]: ConvLongFromInt(v1: integer) -> long
  40[60]: AddLong(v1: long, v2: long) -> long
  41[52]: PutLong(var[36], value: long)
  44[44]: VarLong(var[36]) -> long var=a#index[36]:long in 3
  47[52]: ConstLong(val=20) -> long
  56[60]: GtLong(v1: long, v2: long) -> boolean
  57[45]: GotoFalseWord(jump=63, if_false: boolean)
  60[44]: GotoWord(jump=83)
  63[44]: VarLong(var[36]) -> long var=a#index[36]:long in 3
  66[52]: VarLong(var[28]) -> long var=b[28]:long in 2
  69[60]: VarLong(var[44]) -> long var=a[44]:long in 4
  72[68]: AddLong(v1: long, v2: long) -> long
  73[60]: PutLong(var[28], value: long)
  76[52]: FreeStack(value=0, discard=8)
  80[44]: GotoWord(jump=11)
  83[44]: FreeStack(value=0, discard=8)
  87[36]: VarLong(var[28]) -> long var=b[28]:long in 2
  90[44]: FreeStack(value=8, discard=16) type=long[8]:Base[1]
  94[36]: VarLong(var[28]) -> long var=test_value[28]:long in 1
  97[44]: ConstLong(val=165) -> long
 106[52]: EqLong(v1: long, v2: long) -> boolean
 107[37]: GotoFalseWord(jump=113, if_false: boolean)
 110[36]: GotoWord(jump=165)
 113[36]: ClearText(var[4]) var=__work_1[4]:text in 1
 116[36]: ConstText(_value="Test failed ") -> text
 130[52]: AppendText(var[4], v1: text)
 133[36]: VarLong(var[28]) -> long var=test_value[28]:long in 1
 136[44]: ConstInt(val=0) -> integer
 141[48]: FormatLong(var[4], val: long, radix=10, width: integer, token=32, plus=false, note=false)
 148[36]: ConstText(_value=" != 165l") -> text
 158[52]: AppendText(var[4], v1: text)
 161[36]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 164[52]: Panic(message: text)
 165[36]: FreeText(var[4])
 168[36]: Return(ret=0, value=0, discard=36)

