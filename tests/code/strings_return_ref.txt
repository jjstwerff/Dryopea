fn return_ref() -> text {
    a = "12345";
    return a[0..4];
}

pub fn test() {
    test_value = {return_ref()};
    assert(
        test_value == "1234",
        "Test failed {test_value} != \"1234\""
    );
}
fn return_ref(a:&text) -> text["a"] {#1 block
  OpClearRefText(OpVarRef(a));
  OpAppendRefText(OpVarRef(a), 0i32, "12345");
  return OpGetTextSub(OpGetRefText(OpVarRef(a), 0i32), 0i32, 4i32);
}#1

byte-code for return_ref:return_ref(a: &text[0]) -> text["a"]
 691[12]: return-address
 691[16]: VarRef(var[0]) -> reference
 694[28]: ClearRefText(r: reference)
 695[16]: VarRef(var[0]) -> reference
 698[28]: ConstText(_value="12345") -> text
 705[44]: AppendRefText(r: reference, fld=0, v1: text)
 708[16]: VarRef(var[0]) -> reference
 711[28]: GetRefText(r: reference, fld=0) -> text["a"]
 714[32]: ConstInt(val=0) -> integer
 719[36]: ConstInt(val=4) -> integer
 724[40]: GetTextSub(v1: text, from: integer, till: integer) -> text["a"]
 725[32]: Return(ret=12, value=16, discard=32) type=text[4]:Base[5]

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text["test_value"] = "";
  test_value:text["test_value"] = {#2 block
    return_ref({#3 default ref
      OpCreateRef(__work_1);
    }#3:reference["__work_1"]);
  }#2:text["test_value"];
  if OpEqText(test_value, "1234") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1234"");
    __work_2;
  }#4:text);
}#1

byte-code for return_ref:test()
 731[0]: return-address
 731[4]: Text()
 732[28]: Text()
 733[52]: Text()
 734[76]: ClearText(var[52])
 737[76]: CreateRef(var[28]) -> reference
 740[88]: Call(size=0, to=691)
 747[92]: AppendText(var[52], v1: text)
 750[76]: VarText(var[52]) -> text
 753[92]: ConstText(_value="1234") -> text
 759[108]: EqText(v1: text, v2: text) -> boolean
 760[77]: GotoFalseWord(jump=766, if_false: boolean)
 763[76]: GotoWord(jump=818)
 766[76]: ClearText(var[4])
 769[76]: ConstText(_value="Test failed ") -> text
 783[92]: AppendText(var[4], v1: text)
 786[76]: VarText(var[52]) -> text
 789[92]: ConstInt(val=0) -> integer
 794[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 799[76]: ConstText(_value=" != "1234"") -> text
 811[92]: AppendText(var[4], v1: text)
 814[76]: VarText(var[4]) -> text
 817[92]: Panic(message: text)
 818[76]: FreeText(var[52])
 821[76]: FreeText(var[28])
 824[76]: FreeText(var[4])
 827[76]: Return(ret=0, value=0, discard=76)

Execute test:
  731:[8] Text()
  732:[32] Text()
  733:[56] Text()
  734:[80] ClearText(var[56])
  737:[80] CreateRef(var[32]) -> ref(0,1,32)[80]
  740:[92] Call(size=0, to=691)
  691:[96] VarRef(var[80]) -> ref(0,1,32)[96]
  694:[108] ClearRefText(r=ref(0,1,32)[96])
  695:[96] VarRef(var[80]) -> ref(0,1,32)[96]
  698:[108] ConstText(_value="12345") -> "12345"[108]
  705:[124] AppendRefText(r=ref(0,1,32)[96], fld=0, v1="12345"[108])
  706:[96] Goto(jump=-17211)
  708:[96] VarRef(var[80]) -> ref(0,1,32)[96]
  711:[108] GetRefText(r=ref(0,1,32)[96], fld=0) -> "12345"[96]
  712:[112] Goto(jump=4299)
  714:[112] ConstInt(val=0) -> 0[112]
  719:[116] ConstInt(val=4) -> 4[116]
  724:[120] GetTextSub(v1="12345"[96], from=0[112], till=4[116]) -> "1234"[96]
  725:[112] Return(ret=747[92], value=16, discard=32) -> "1234"[80]
  747:[96] AppendText(var[56], v1="1234"[80])
  750:[80] VarText(var[56]) -> "1234"[80]
  753:[96] ConstText(_value="1234") -> "1234"[96]
  759:[112] EqText(v1="1234"[80], v2="1234"[96]) -> true[80]
  760:[81] GotoFalseWord(jump=766, if_false=true[80])
  763:[80] GotoWord(jump=818)
  818:[80] FreeText(var[56])
  821:[80] FreeText(var[32])
  824:[80] FreeText(var[8])
  827:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
