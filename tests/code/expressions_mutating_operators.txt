pub fn test() {
    test_value = {a = 12; a -= 6; a *= 3; a /= 2; a += 1; a};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}
fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    a:integer(2) = 12i32;
    a:integer(2) = OpMinInt(a, 6i32);
    a:integer(2) = OpMulInt(a, 3i32);
    a:integer(2) = OpDivInt(a, 2i32);
    a:integer(2) = OpAddInt(a, 1i32);
    a;
  }#block_2:integer;
  if OpEqInt(test_value, 10i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 10");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for mutating_operators:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=12) -> integer var=a[32]:integer
   6[36]: VarInt(var[32]) -> integer var=a[32]:integer
   9[40]: ConstInt(val=6) -> integer
  14[44]: MinInt(v1: integer, v2: integer) -> integer
  15[40]: PutInt(var[32], value: integer)
  18[36]: VarInt(var[32]) -> integer var=a[32]:integer
  21[40]: ConstInt(val=3) -> integer
  26[44]: MulInt(v1: integer, v2: integer) -> integer
  27[40]: PutInt(var[32], value: integer)
  30[36]: VarInt(var[32]) -> integer var=a[32]:integer
  33[40]: ConstInt(val=2) -> integer
  38[44]: DivInt(v1: integer, v2: integer) -> integer
  39[40]: PutInt(var[32], value: integer)
  42[36]: VarInt(var[32]) -> integer var=a[32]:integer
  45[40]: ConstInt(val=1) -> integer
  50[44]: AddInt(v1: integer, v2: integer) -> integer
  51[40]: PutInt(var[32], value: integer)
  54[36]: VarInt(var[32]) -> integer var=a[32]:integer
  57[40]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
  61[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  64[40]: ConstInt(val=10) -> integer
  69[44]: EqInt(v1: integer, v2: integer) -> boolean
  70[37]: GotoFalseWord(jump=76, if_false: boolean)
  73[36]: GotoWord(jump=126)
  76[36]: ClearText(var[8]) var=__work_1[8]:text
  79[36]: ConstText(_value="Test failed ") -> text
  93[52]: AppendText(var[8], v1: text)
  96[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  99[40]: ConstInt(val=0) -> integer
 104[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 111[36]: ConstText(_value=" != 10") -> text
 119[52]: AppendText(var[8], v1: text)
 122[36]: VarText(var[8]) -> text var=__work_1[8]:text
 125[52]: Panic(message: text)
 126[36]: FreeText(var[8])
 129[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=12) -> 12[32]
    6:[36] VarInt(var[32]) -> 12[36]
    9:[40] ConstInt(val=6) -> 6[40]
   14:[44] MinInt(v1=12[36], v2=6[40]) -> 6[36]
   15:[40] PutInt(var[32], value=6[36])
   18:[36] VarInt(var[32]) -> 6[36]
   21:[40] ConstInt(val=3) -> 3[40]
   26:[44] MulInt(v1=6[36], v2=3[40]) -> 18[36]
   27:[40] PutInt(var[32], value=18[36])
   30:[36] VarInt(var[32]) -> 18[36]
   33:[40] ConstInt(val=2) -> 2[40]
   38:[44] DivInt(v1=18[36], v2=2[40]) -> 9[36]
   39:[40] PutInt(var[32], value=9[36])
   42:[36] VarInt(var[32]) -> 9[36]
   45:[40] ConstInt(val=1) -> 1[40]
   50:[44] AddInt(v1=9[36], v2=1[40]) -> 10[36]
   51:[40] PutInt(var[32], value=10[36])
   54:[36] VarInt(var[32]) -> 10[36]
   57:[40] FreeStack(value=4, discard=8)
   61:[36] VarInt(var[32]) -> 10[36]
   64:[40] ConstInt(val=10) -> 10[40]
   69:[44] EqInt(v1=10[36], v2=10[40]) -> true[36]
   70:[37] GotoFalseWord(jump=1244, if_false=true[36])
   73:[36] GotoWord(jump=1294)
  126:[36] FreeText(var[8])
  129:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
