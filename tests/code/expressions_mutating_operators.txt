pub fn test() {
    test_value = {a = 12; a -= 6; a *= 3; a /= 2; a += 1; a};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 12i32;
    a:integer = OpMinInt(a, 6i32);
    a:integer = OpMulInt(a, 3i32);
    a:integer = OpDivInt(a, 2i32);
    a:integer = OpAddInt(a, 1i32);
    a;
  }#2:integer;
  if OpEqInt(test_value, 10i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 10");
    __work_1;
  }#3:text);
}#1

byte-code for mutating_operators:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstInt(val=12) -> integer
 698[32]: VarInt(var[28]) -> integer
 701[36]: ConstInt(val=6) -> integer
 706[40]: MinInt(v1: integer, v2: integer) -> integer
 707[36]: PutInt(var[28], value: integer)
 710[32]: VarInt(var[28]) -> integer
 713[36]: ConstInt(val=3) -> integer
 718[40]: MulInt(v1: integer, v2: integer) -> integer
 719[36]: PutInt(var[28], value: integer)
 722[32]: VarInt(var[28]) -> integer
 725[36]: ConstInt(val=2) -> integer
 730[40]: DivInt(v1: integer, v2: integer) -> integer
 731[36]: PutInt(var[28], value: integer)
 734[32]: VarInt(var[28]) -> integer
 737[36]: ConstInt(val=1) -> integer
 742[40]: AddInt(v1: integer, v2: integer) -> integer
 743[36]: PutInt(var[28], value: integer)
 746[32]: VarInt(var[28]) -> integer
 749[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 753[32]: VarInt(var[28]) -> integer
 756[36]: ConstInt(val=10) -> integer
 761[40]: EqInt(v1: integer, v2: integer) -> boolean
 762[33]: GotoFalseWord(jump=768, if_false: boolean)
 765[32]: GotoWord(jump=818)
 768[32]: ClearText(var[4])
 771[32]: ConstText(_value="Test failed ") -> text
 785[48]: AppendText(var[4], v1: text)
 788[32]: VarInt(var[28]) -> integer
 791[36]: ConstInt(val=0) -> integer
 796[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 803[32]: ConstText(_value=" != 10") -> text
 811[48]: AppendText(var[4], v1: text)
 814[32]: VarText(var[4]) -> text
 817[48]: Panic(message: text)
 818[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] ConstInt(val=12) -> 12[32]
  698:[36] VarInt(var[32]) -> 12[36]
  701:[40] ConstInt(val=6) -> 6[40]
  706:[44] MinInt(v1=12[36], v2=6[40]) -> 6[36]
  707:[40] PutInt(var[32], value=6[36])
  710:[36] VarInt(var[32]) -> 6[36]
  713:[40] ConstInt(val=3) -> 3[40]
  718:[44] MulInt(v1=6[36], v2=3[40]) -> 18[36]
  719:[40] PutInt(var[32], value=18[36])
  722:[36] VarInt(var[32]) -> 18[36]
  725:[40] ConstInt(val=2) -> 2[40]
  730:[44] DivInt(v1=18[36], v2=2[40]) -> 9[36]
  731:[40] PutInt(var[32], value=9[36])
  734:[36] VarInt(var[32]) -> 9[36]
  737:[40] ConstInt(val=1) -> 1[40]
  742:[44] AddInt(v1=9[36], v2=1[40]) -> 10[36]
  743:[40] PutInt(var[32], value=10[36])
  746:[36] VarInt(var[32]) -> 10[36]
  749:[40] FreeStack(value=4, discard=8)
  753:[36] VarInt(var[32]) -> 10[36]
  756:[40] ConstInt(val=10) -> 10[40]
  761:[44] EqInt(v1=10[36], v2=10[40]) -> true[36]
  762:[37] GotoFalseWord(jump=768, if_false=true[36])
  765:[36] GotoWord(jump=818)
  818:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
