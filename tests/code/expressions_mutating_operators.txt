pub fn test() {
    test_value = {a = 12; a -= 6; a *= 3; a /= 2; a += 1; a};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 12i32;
    a:integer = OpMinInt(a, 6i32);
    a:integer = OpMulInt(a, 3i32);
    a:integer = OpDivInt(a, 2i32);
    a:integer = OpAddInt(a, 1i32);
    a;
  }#2:integer;
  if OpEqInt(test_value, 10i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 10");
    __work_1;
  }#3:text);
}#1

byte-code for mutating_operators:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: ConstInt(val=12) -> integer
 688[32]: VarInt(var[28]) -> integer
 691[36]: ConstInt(val=6) -> integer
 696[40]: MinInt(v1: integer, v2: integer) -> integer
 697[36]: PutInt(var[28], value: integer)
 700[32]: VarInt(var[28]) -> integer
 703[36]: ConstInt(val=3) -> integer
 708[40]: MulInt(v1: integer, v2: integer) -> integer
 709[36]: PutInt(var[28], value: integer)
 712[32]: VarInt(var[28]) -> integer
 715[36]: ConstInt(val=2) -> integer
 720[40]: DivInt(v1: integer, v2: integer) -> integer
 721[36]: PutInt(var[28], value: integer)
 724[32]: VarInt(var[28]) -> integer
 727[36]: ConstInt(val=1) -> integer
 732[40]: AddInt(v1: integer, v2: integer) -> integer
 733[36]: PutInt(var[28], value: integer)
 736[32]: VarInt(var[28]) -> integer
 739[36]: FreeStack(value=4, discard=4) type=integer[4]:Base[0]
 743[32]: VarInt(var[28]) -> integer
 746[36]: ConstInt(val=10) -> integer
 751[40]: EqInt(v1: integer, v2: integer) -> boolean
 752[33]: GotoFalseWord(jump=758, if_false: boolean)
 755[32]: GotoWord(jump=808)
 758[32]: ClearText(var[4])
 761[32]: ConstText(_value="Test failed ") -> text
 775[48]: AppendText(var[4], v1: text)
 778[32]: VarInt(var[28]) -> integer
 781[36]: ConstInt(val=0) -> integer
 786[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 793[32]: ConstText(_value=" != 10") -> text
 801[48]: AppendText(var[4], v1: text)
 804[32]: VarText(var[4]) -> text
 807[48]: Panic(message: text)
 808[32]: Return(ret=0, value=0, discard=32)

Execute test:
  682:[8] Text()
  683:[32] ConstInt(val=12) -> 12[32]
  688:[36] VarInt(var[32]) -> 12[36]
  691:[40] ConstInt(val=6) -> 6[40]
  696:[44] MinInt(v1=12[36], v2=6[40]) -> 6[36]
  697:[40] PutInt(var[32], value=6[36])
  700:[36] VarInt(var[32]) -> 6[36]
  703:[40] ConstInt(val=3) -> 3[40]
  708:[44] MulInt(v1=6[36], v2=3[40]) -> 18[36]
  709:[40] PutInt(var[32], value=18[36])
  712:[36] VarInt(var[32]) -> 18[36]
  715:[40] ConstInt(val=2) -> 2[40]
  720:[44] DivInt(v1=18[36], v2=2[40]) -> 9[36]
  721:[40] PutInt(var[32], value=9[36])
  724:[36] VarInt(var[32]) -> 9[36]
  727:[40] ConstInt(val=1) -> 1[40]
  732:[44] AddInt(v1=9[36], v2=1[40]) -> 10[36]
  733:[40] PutInt(var[32], value=10[36])
  736:[36] VarInt(var[32]) -> 10[36]
  739:[40] FreeStack(value=4, discard=4)
  743:[36] VarInt(var[32]) -> 10[36]
  746:[40] ConstInt(val=10) -> 10[40]
  751:[44] EqInt(v1=10[36], v2=10[40]) -> true[36]
  752:[37] GotoFalseWord(jump=758, if_false=true[36])
  755:[36] GotoWord(jump=808)
  808:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
