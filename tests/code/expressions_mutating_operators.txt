pub fn test() {
    test_value = {a = 12; a -= 6; a *= 3; a /= 2; a += 1; a};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 12i32;
    a:integer = OpMinInt(a, 6i32);
    a:integer = OpMulInt(a, 3i32);
    a:integer = OpDivInt(a, 2i32);
    a:integer = OpAddInt(a, 1i32);
    a;
  }#2:integer;
  if OpEqInt(test_value, 10i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 10");
    __work_1;
  }#3:text);
}#1

byte-code for mutating_operators:test() [1067]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=12) -> integer var=a[28]:integer in 2
   6[32]: VarInt(var[28]) -> integer var=a[28]:integer in 2
   9[36]: ConstInt(val=6) -> integer
  14[40]: MinInt(v1: integer, v2: integer) -> integer
  15[36]: PutInt(var[28], value: integer)
  18[32]: VarInt(var[28]) -> integer var=a[28]:integer in 2
  21[36]: ConstInt(val=3) -> integer
  26[40]: MulInt(v1: integer, v2: integer) -> integer
  27[36]: PutInt(var[28], value: integer)
  30[32]: VarInt(var[28]) -> integer var=a[28]:integer in 2
  33[36]: ConstInt(val=2) -> integer
  38[40]: DivInt(v1: integer, v2: integer) -> integer
  39[36]: PutInt(var[28], value: integer)
  42[32]: VarInt(var[28]) -> integer var=a[28]:integer in 2
  45[36]: ConstInt(val=1) -> integer
  50[40]: AddInt(v1: integer, v2: integer) -> integer
  51[36]: PutInt(var[28], value: integer)
  54[32]: VarInt(var[28]) -> integer var=a[28]:integer in 2
  57[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
  61[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  64[36]: ConstInt(val=10) -> integer
  69[40]: EqInt(v1: integer, v2: integer) -> boolean
  70[33]: GotoFalseWord(jump=76, if_false: boolean)
  73[32]: GotoWord(jump=126)
  76[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  79[32]: ConstText(_value="Test failed ") -> text
  93[48]: AppendText(var[4], v1: text)
  96[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  99[36]: ConstInt(val=0) -> integer
 104[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 111[32]: ConstText(_value=" != 10") -> text
 119[48]: AppendText(var[4], v1: text)
 122[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 125[48]: Panic(message: text)
 126[32]: FreeText(var[4])
 129[32]: Return(ret=0, value=0, discard=32)

