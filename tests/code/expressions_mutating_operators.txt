Test code:
pub fn test() {
    test_value = {a = 12; a -= 6; a *= 3; a /= 2; a += 1; a};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}

fn test {
  let __work_2 = "";
  let test_value = {
    let a = 12i32;
    a = OpMinInt(a, 6i32);
    a = OpMulInt(a, 3i32);
    a = OpDivInt(a, 2i32);
    a = OpAddInt(a, 1i32);
    a;
  };
  if OpEqInt(test_value, 10i32) {null} else {OpGenPanic({
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatInt(__work_2, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " != 10");
    __work_2;
  })};
}

byte-code for mutating_operators:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: ConstInt(val=12) -> integer
 679[32]: VarInt(var[28]) -> integer
 682[36]: ConstInt(val=6) -> integer
 687[40]: MinInt(v1: integer, v2: integer) -> integer
 688[36]: PutInt(var[28], value: integer)
 691[32]: VarInt(var[28]) -> integer
 694[36]: ConstInt(val=3) -> integer
 699[40]: MulInt(v1: integer, v2: integer) -> integer
 700[36]: PutInt(var[28], value: integer)
 703[32]: VarInt(var[28]) -> integer
 706[36]: ConstInt(val=2) -> integer
 711[40]: DivInt(v1: integer, v2: integer) -> integer
 712[36]: PutInt(var[28], value: integer)
 715[32]: VarInt(var[28]) -> integer
 718[36]: ConstInt(val=1) -> integer
 723[40]: AddInt(v1: integer, v2: integer) -> integer
 724[36]: PutInt(var[28], value: integer)
 727[32]: VarInt(var[28]) -> integer
 730[36]: GenFreeStack(value=4, discard=4)
 734[32]: VarInt(var[28]) -> integer
 737[36]: ConstInt(val=10) -> integer
 742[40]: EqInt(v1: integer, v2: integer) -> boolean
 743[33]: GenGotoFalseWord(jump=749, if_false: boolean)
 746[32]: GenGotoWord(jump=799)
 749[32]: ClearText(var[4])
 752[32]: ConstText(_value="Test failed ") -> text(false)
 766[48]: AppendText(var[4], v1: text(false))
 769[32]: VarInt(var[28]) -> integer
 772[36]: ConstInt(val=0) -> integer
 777[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 784[32]: ConstText(_value=" != 10") -> text(false)
 792[48]: AppendText(var[4], v1: text(false))
 795[32]: VarText(var[4]) -> text(false)
 798[48]: GenPanic(message: text(false))
 799[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] ConstInt(val=12) -> 12[32]
  679:[36] VarInt(var[32]) -> 12[36]
  682:[40] ConstInt(val=6) -> 6[40]
  687:[44] MinInt(v1=12[36], v2=6[40]) -> 6[36]
  688:[40] PutInt(var[32], value=6[36])
  691:[36] VarInt(var[32]) -> 6[36]
  694:[40] ConstInt(val=3) -> 3[40]
  699:[44] MulInt(v1=6[36], v2=3[40]) -> 18[36]
  700:[40] PutInt(var[32], value=18[36])
  703:[36] VarInt(var[32]) -> 18[36]
  706:[40] ConstInt(val=2) -> 2[40]
  711:[44] DivInt(v1=18[36], v2=2[40]) -> 9[36]
  712:[40] PutInt(var[32], value=9[36])
  715:[36] VarInt(var[32]) -> 9[36]
  718:[40] ConstInt(val=1) -> 1[40]
  723:[44] AddInt(v1=9[36], v2=1[40]) -> 10[36]
  724:[40] PutInt(var[32], value=10[36])
  727:[36] VarInt(var[32]) -> 10[36]
  730:[40] GenFreeStack(value=4, discard=4)
  734:[36] VarInt(var[32]) -> 10[36]
  737:[40] ConstInt(val=10) -> 10[40]
  742:[44] EqInt(v1=10[36], v2=10[40]) -> true[36]
  743:[37] GenGotoFalseWord(jump=749, if_false=true[36])
  746:[36] GenGotoWord(jump=799)
  799:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
