pub fn test() {
    test_value = {10l * 2};
    assert(
        test_value == 20l,
        "Test failed {test_value} != 20l"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:long = {#2 block
    OpMulLong(10i64, OpConvLongFromInt(2i32));
  }#2:long;
  if OpEqLong(test_value, 20i64) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatLong(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 20l");
    __work_1;
  }#3:text);
}#1

byte-code for auto_convert:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: ConstLong(val=10) -> long
 701[36]: ConstInt(val=2) -> integer
 706[40]: ConvLongFromInt(v1: integer) -> long
 707[44]: MulLong(v1: long, v2: long) -> long
 708[36]: VarLong(var[28]) -> long
 711[44]: ConstLong(val=20) -> long
 720[52]: EqLong(v1: long, v2: long) -> boolean
 721[37]: GotoFalseWord(jump=727, if_false: boolean)
 724[36]: GotoWord(jump=778)
 727[36]: ClearText(var[4])
 730[36]: ConstText(_value="Test failed ") -> text
 744[52]: AppendText(var[4], v1: text)
 747[36]: VarLong(var[28]) -> long
 750[44]: ConstInt(val=0) -> integer
 755[48]: FormatLong(var[4], val: long, radix=10, width: integer, token=32, plus=false, note=false)
 762[36]: ConstText(_value=" != 20l") -> text
 771[52]: AppendText(var[4], v1: text)
 774[36]: VarText(var[4]) -> text
 777[52]: Panic(message: text)
 778[36]: FreeText(var[4])
 781[36]: Return(ret=0, value=0, discard=36)

Execute test:
  691:[8] Text()
  692:[32] ConstLong(val=10) -> 10[32]
  701:[40] ConstInt(val=2) -> 2[40]
  706:[44] ConvLongFromInt(v1=2[40]) -> 2[40]
  707:[48] MulLong(v1=10[32], v2=2[40]) -> 20[32]
  708:[40] VarLong(var[32]) -> 20[40]
  711:[48] ConstLong(val=20) -> 20[48]
  720:[56] EqLong(v1=20[40], v2=20[48]) -> true[40]
  721:[41] GotoFalseWord(jump=727, if_false=true[40])
  724:[40] GotoWord(jump=778)
  778:[40] FreeText(var[8])
  781:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
