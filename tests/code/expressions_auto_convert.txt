pub fn test() {
    test_value = {10l * 2};
    assert(
        test_value == 20l,
        "Test failed {test_value} != 20l"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):long = {#block(2):long
    OpMulLong(10i64, OpConvLongFromInt(2i32));
  }#block(2):long;
  if OpEqLong(test_value(1), 20i64) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatLong(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 20l");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for auto_convert:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstLong(val=10) -> long var=test_value[32]:long
  10[40]: ConstInt(val=2) -> integer
  15[44]: ConvLongFromInt(v1: integer) -> long
  16[48]: MulLong(v1: long, v2: long) -> long
  17[40]: VarLong(var[32]) -> long var=test_value[32]:long
  20[48]: ConstLong(val=20) -> long
  29[56]: EqLong(v1: long, v2: long) -> boolean
  30[41]: GotoFalseWord(jump=36, if_false: boolean)
  33[40]: GotoWord(jump=87)
  36[40]: ClearText(var[8]) var=__work_1[8]:text
  39[40]: ConstText(_value="Test failed ") -> text
  53[56]: AppendText(var[8], v1: text)
  56[40]: VarLong(var[32]) -> long var=test_value[32]:long
  59[48]: ConstInt(val=0) -> integer
  64[52]: FormatLong(var[8], val: long, radix=10, width: integer, token=32, plus=false, note=false)
  71[40]: ConstText(_value=" != 20l") -> text
  80[56]: AppendText(var[8], v1: text)
  83[40]: VarText(var[8]) -> text var=__work_1[8]:text
  86[56]: Panic(message: text)
  87[40]: FreeText(var[8])
  90[40]: Return(ret=0, value=0, discard=36)

Execute test:
    0:[8] Text()
    1:[32] ConstLong(val=10) -> 10[32]
   10:[40] ConstInt(val=2) -> 2[40]
   15:[44] ConvLongFromInt(v1=2[40]) -> 2[40]
   16:[48] MulLong(v1=10[32], v2=2[40]) -> 20[32]
   17:[40] VarLong(var[32]) -> 20[40]
   20:[48] ConstLong(val=20) -> 20[48]
   29:[56] EqLong(v1=20[40], v2=20[48]) -> true[40]
   30:[41] GotoFalseWord(jump=36, if_false=true[40])
   33:[40] GotoWord(jump=87)
   87:[40] FreeText(var[8])
   90:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
