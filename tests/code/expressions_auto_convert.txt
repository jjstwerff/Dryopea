pub fn test() {
    test_value = {10l * 2};
    assert(
        test_value == 20l,
        "Test failed {test_value} != 20l"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:long = {#2 block
    OpMulLong(10i64, OpConvLongFromInt(2i32));
  }#2:long;
  if OpEqLong(test_value, 20i64) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatLong(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 20l");
    __work_1;
  }#3:text);
}#1

byte-code for auto_convert:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstLong(val=10) -> long var=test_value[28]:long in 1
  10[36]: ConstInt(val=2) -> integer
  15[40]: ConvLongFromInt(v1: integer) -> long
  16[44]: MulLong(v1: long, v2: long) -> long
  17[36]: VarLong(var[28]) -> long var=test_value[28]:long in 1
  20[44]: ConstLong(val=20) -> long
  29[52]: EqLong(v1: long, v2: long) -> boolean
  30[37]: GotoFalseWord(jump=36, if_false: boolean)
  33[36]: GotoWord(jump=87)
  36[36]: ClearText(var[4]) var=__work_1[4]:text in 1
  39[36]: ConstText(_value="Test failed ") -> text
  53[52]: AppendText(var[4], v1: text)
  56[36]: VarLong(var[28]) -> long var=test_value[28]:long in 1
  59[44]: ConstInt(val=0) -> integer
  64[48]: FormatLong(var[4], val: long, radix=10, width: integer, token=32, plus=false, note=false)
  71[36]: ConstText(_value=" != 20l") -> text
  80[52]: AppendText(var[4], v1: text)
  83[36]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  86[52]: Panic(message: text)
  87[36]: FreeText(var[4])
  90[36]: Return(ret=0, value=0, discard=36)

