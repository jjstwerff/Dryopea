pub struct Data {
    name: text,
    number: integer
}

fn data(n: text) -> Data {
    res = Data { name: n };
    res
}
    

pub fn test() {
    test_value = {d = data("test"); "{d.name}:{d.number}"};
    assert(
        test_value == "test:0",
        "Test failed {test_value} != \"test:0\""
    );
}
Type 17:Data[12]:
    name:text[4]
    number:integer[8]

fn data(n:text, res:Data) -> Data["res"] {#1 block
  res:ref(Data)["res"] = OpConvRefFromNull();
  OpDatabase(res, 17i32);
  OpSetText(res, 4i32, n);
  OpSetInt(res, 8i32, 0i32);
  res;
}#1:ref(Data)["res"]

byte-code for object_fn:data(n: text[0], res: ref(Data)[16]) [1176] -> ref(Data)["res"]
   0[28]: return-address
   0[32]: ConvRefFromNull() -> ref(reference) var=res[16]:ref(Data)["res"] in 0
   1[44]: PutRef(var[16], value: ref(reference))
   4[32]: Database(var[16], db_tp=17) type=Data[12]:{name:text[4], number:integer[8]}[17]
   9[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[16]:ref(Data)["res"] in 0
  12[44]: ArgText(var[0]) -> text var=n[0]:text in 0
  15[60]: SetText(v1: ref(reference), fld=4, val: text)
  18[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[16]:ref(Data)["res"] in 0
  21[44]: ConstInt(val=0) -> integer
  26[48]: SetInt(v1: ref(reference), fld=8, val: integer)
  29[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[16]:ref(Data)["res"] in 0
  32[44]: Return(ret=28, value=12, discard=44) type=Data[12]:{name:text[4], number:integer[8]}[17]

fn test() {#1 block
  __ref_1:ref(Data) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    d:ref(Data)["__ref_1"] = data("test", __ref_1);
    {#3 formatting string
      __work_1:text = "";
      OpFormatText(__work_1, OpGetText(d, 4i32), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, ":");
      OpFormatInt(__work_1, OpGetInt(d, 8i32), 10i32, 0i32, 32i32, false, false);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "test:0") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "test:0"");
    __work_2;
  }#4:text);
}#1

byte-code for object_fn:test() [1214]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Data) in 1
   1[16]: Text() var=__work_2[16]:text in 1
   2[40]: Text() var=__work_1[40]:text in 1
   3[64]: Text() var=test_value[64]:text in 1
   4[88]: ConstText(_value="test") -> text var=d[88]:ref(Data)["__ref_1"] in 2
  10[104]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=__ref_1[4]:ref(Data) in 1
  13[116]: Call(size=0, to=1176)
  20[100]: ClearText(var[40]) var=__work_1[40]:text in 1
  23[100]: ConstText(_value="") -> text
  25[116]: AppendText(var[40], v1: text)
  28[100]: VarRef(var[88]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[88]:ref(Data)["__ref_1"] in 2
  31[112]: GetText(v1: ref(reference), fld=4) -> text["test_value"]
  34[116]: ConstInt(val=0) -> integer
  39[120]: FormatText(var[40], val: text, width: integer, dir=-1, token=32)
  44[100]: ConstText(_value=":") -> text
  47[116]: AppendText(var[40], v1: text)
  50[100]: VarRef(var[88]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[88]:ref(Data)["__ref_1"] in 2
  53[112]: GetInt(v1: ref(reference), fld=8) -> integer
  56[104]: ConstInt(val=0) -> integer
  61[108]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  68[100]: VarText(var[40]) -> text var=__work_1[40]:text in 1
  71[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
  75[104]: AppendText(var[64], v1: text)
  78[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
  81[104]: ConstText(_value="test:0") -> text
  89[120]: EqText(v1: text, v2: text) -> boolean
  90[89]: GotoFalseWord(jump=96, if_false: boolean)
  93[88]: GotoWord(jump=150)
  96[88]: ClearText(var[16]) var=__work_2[16]:text in 1
  99[88]: ConstText(_value="Test failed ") -> text
 113[104]: AppendText(var[16], v1: text)
 116[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 119[104]: ConstInt(val=0) -> integer
 124[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 129[88]: ConstText(_value=" != "test:0"") -> text
 143[104]: AppendText(var[16], v1: text)
 146[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
 149[104]: Panic(message: text)
 150[88]: FreeText(var[64])
 153[88]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=__ref_1[4]:ref(Data) in 1
 156[100]: FreeRef(v1: ref(reference))
 157[88]: FreeText(var[40])
 160[88]: FreeText(var[16])
 163[88]: Return(ret=0, value=0, discard=88)

