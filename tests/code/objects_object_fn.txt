pub struct Data {
    name: text,
    number: integer
}

fn data(n: text) -> Data {
    res = Data { name: n };
    res
}
    

pub fn test() {
    test_value = {d = data("test"); "{d.name}:{d.number}"};
    assert(
        test_value == "test:0",
        "Test failed {test_value} != \"test:0\""
    );
}
Type 17:Data[12]:
    name:text[4]
    number:integer[8]

fn data(n:text, res:Data) -> Data["res"] {#block_1:ref(Data)["res"]
  OpDatabase(res, 17i32);
  OpSetText(res, 4i32, n);
  OpSetInt(res, 8i32, 0i32);
  res;
}#block_1:ref(Data)["res"]

byte-code for object_fn:data(n: text[4], res: ref(Data)[20]) [1168] -> ref(Data)["res"]
   0[32]: return-address
   0[36]: Database(var[20], db_tp=17) type=Data[12]:{name:text[4], number:integer[8]}[17]
   5[36]: VarRef(var[20]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[20]:ref(Data)
   8[48]: ArgText(var[4]) -> text var=n[4]:text
  11[64]: SetText(v1: ref(reference), fld=4, val: text)
  14[36]: VarRef(var[20]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[20]:ref(Data)
  17[48]: ConstInt(val=0) -> integer
  22[52]: SetInt(v1: ref(reference), fld=8, val: integer)
  25[36]: VarRef(var[20]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[20]:ref(Data)
  28[48]: Return(ret=28, value=12, discard=44) type=Data[12]:{name:text[4], number:integer[8]}[17]

fn test() {#block_1:void
  __ref_1:ref(Data)(1) = null;
  __work_2:text(1) = "";
  __work_1:text(1) = "";
  test_value:text(1) = {#block_2:text
    d:ref(Data)["__ref_1"](2) = data("test", __ref_1);
    {#Formatted string_3:text
      __work_1:text(1) = "";
      OpFormatText(__work_1, OpGetText(d, 4i32), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, ":");
      OpFormatInt(__work_1, OpGetInt(d, 8i32), 10i32, 0i32, 32i32, false, false);
      __work_1;
    }#Formatted string_3:text;
  }#block_2:text;
  if OpEqText(test_value, "test:0") null else OpPanic({#Formatted string_4:text
    __work_2:text(1) = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "test:0"");
    __work_2;
  }#Formatted string_4:text);
  OpFreeText(test_value);
  OpFreeRef(__ref_1);
  OpFreeText(__work_1);
  OpFreeText(__work_2);
}#block_1:void

byte-code for object_fn:test() [1202]
   0[4]: return-address
   0[8]: ConvRefFromNull() -> ref(reference) var=__ref_1[8]:ref(Data)
   1[20]: Text() var=__work_2[20]:text
   2[44]: Text() var=__work_1[44]:text
   3[68]: Text() var=test_value[68]:text
   4[92]: ConstText(_value="test") -> text var=d[92]:ref(Data)["__ref_1"]
  10[108]: VarRef(var[8]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=__ref_1[8]:ref(Data)
  13[120]: Call(size=0, to=1168)
  20[104]: ClearText(var[44]) var=__work_1[44]:text
  23[104]: ConstText(_value="") -> text
  25[120]: AppendText(var[44], v1: text)
  28[104]: VarRef(var[92]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[92]:ref(Data)["__ref_1"]
  31[116]: GetText(v1: ref(reference), fld=4) -> text["test_value"]
  34[120]: ConstInt(val=0) -> integer
  39[124]: FormatText(var[44], val: text, width: integer, dir=-1, token=32)
  44[104]: ConstText(_value=":") -> text
  47[120]: AppendText(var[44], v1: text)
  50[104]: VarRef(var[92]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=d[92]:ref(Data)["__ref_1"]
  53[116]: GetInt(v1: ref(reference), fld=8) -> integer
  56[108]: ConstInt(val=0) -> integer
  61[112]: FormatInt(var[44], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  68[104]: VarText(var[44]) -> text var=__work_1[44]:text
  71[120]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
  75[108]: AppendText(var[68], v1: text)
  78[92]: VarText(var[68]) -> text var=test_value[68]:text
  81[108]: ConstText(_value="test:0") -> text
  89[124]: EqText(v1: text, v2: text) -> boolean
  90[93]: GotoFalseWord(jump=96, if_false: boolean)
  93[92]: GotoWord(jump=150)
  96[92]: ClearText(var[20]) var=__work_2[20]:text
  99[92]: ConstText(_value="Test failed ") -> text
 113[108]: AppendText(var[20], v1: text)
 116[92]: VarText(var[68]) -> text var=test_value[68]:text
 119[108]: ConstInt(val=0) -> integer
 124[112]: FormatText(var[20], val: text, width: integer, dir=-1, token=32)
 129[92]: ConstText(_value=" != "test:0"") -> text
 143[108]: AppendText(var[20], v1: text)
 146[92]: VarText(var[20]) -> text var=__work_2[20]:text
 149[108]: Panic(message: text)
 150[92]: FreeText(var[68])
 153[92]: VarRef(var[8]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=__ref_1[8]:ref(Data)
 156[104]: FreeRef(v1: ref(reference))
 157[92]: FreeText(var[44])
 160[92]: FreeText(var[20])
 163[92]: Return(ret=0, value=0, discard=88)

Execute test:
    0:[8] ConvRefFromNull() -> ref(1,0,0)[8]
    1:[20] Text()
    2:[44] Text()
    3:[68] Text()
    4:[92] ConstText(_value="test") -> "test"[92]
   10:[108] VarRef(var[8]) -> ref(1,0,0)=null[108]
   13:[120] Call(size=0, to=1168)
 1168:[124] Database(var[108], db_tp=17)
 1173:[124] VarRef(var[108]) -> ref(1,1,0)={}[124]
 1176:[136] ArgText(var[92]) -> "test"[136]
 1179:[152] SetText(v1=ref(1,1,0)[124], fld=4, val="test"[136])
 1182:[124] VarRef(var[108]) -> ref(1,1,0)={name:"test"}[124]
 1185:[136] ConstInt(val=0) -> 0[136]
 1190:[140] SetInt(v1=ref(1,1,0)[124], fld=8, val=0[136])
 1193:[124] VarRef(var[108]) -> ref(1,1,0)={name:"test",number:0}[124]
 1196:[136] Return(ret=1222[120], value=12, discard=44) -> ref(1,1,0)={name:"test",number:0}[92]
   20:[104] ClearText(var[44])
   23:[104] ConstText(_value="") -> ""[104]
   25:[120] AppendText(var[44], v1=""[104])
   28:[104] VarRef(var[92]) -> ref(1,1,0)={name:"test",number:0}[104]
   31:[116] GetText(v1=ref(1,1,0)[104], fld=4) -> "test"[104]
   34:[120] ConstInt(val=0) -> 0[120]
   39:[124] FormatText(var[44], val="test"[104], width=0[120], dir=-1, token=32)
   44:[104] ConstText(_value=":") -> ":"[104]
   47:[120] AppendText(var[44], v1=":"[104])
   50:[104] VarRef(var[92]) -> ref(1,1,0)={name:"test",number:0}[104]
   53:[116] GetInt(v1=ref(1,1,0)[104], fld=8) -> 0[104]
   56:[108] ConstInt(val=0) -> 0[108]
   61:[112] FormatInt(var[44], val=0[104], radix=10, width=0[108], token=32, plus=false, note=false)
   68:[104] VarText(var[44]) -> "test:0"[104]
   71:[120] FreeStack(value=16, discard=28)
   75:[108] AppendText(var[68], v1="test:0"[92])
   78:[92] VarText(var[68]) -> "test:0"[92]
   81:[108] ConstText(_value="test:0") -> "test:0"[108]
   89:[124] EqText(v1="test:0"[92], v2="test:0"[108]) -> true[92]
   90:[93] GotoFalseWord(jump=1298, if_false=true[92])
   93:[92] GotoWord(jump=1352)
  150:[92] FreeText(var[68])
  153:[92] VarRef(var[8]) -> ref(1,0,0)=null[92]
  156:[104] FreeRef(v1=ref(1,0,0)[92])
  157:[92] FreeText(var[44])
  160:[92] FreeText(var[20])
  163:[92] Return(ret=4294967295[4], value=0, discard=88)
Finished
