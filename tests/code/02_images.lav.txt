Type 7:vector<text>[4]:Vector(5)

Type 8:Variable[12]:
    name:text[4]
    value:text[8]

Type 9:Pixel[3]:
    r:byte[0]
    g:byte[1]
    b:byte[2]

Type 10:byte[1]:Byte(0, false)

Type 11:Image[20]:
    name:text[4]
    width:integer[8]
    height:integer[12]
    data:vector<Pixel>[16]

Type 12:vector<Pixel>[4]:Vector(9)

Type 13:File[17]:
    path:text[4]
    size:long[8]
    dir:boolean[16]

Type 14:main_vector<text>[8]:
    vector:vector<text>[4]

Type 15:main_vector<File>[8]:
    vector:vector<File>[4]

Type 16:vector<File>[4]:Vector(13)

fn _tp_Pixel_value(self:Pixel) -> integer {#block(1):integer
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self(0), 0i32, 0i32), 65536i32), OpMulInt(OpGetByte(self(0), 1i32, 0i32), 256i32)), OpGetByte(self(0), 2i32, 0i32));
}#block(1):integer

fn _tp_File_content(self:File, result:&text) -> text["result"] {#block(1):&text["result"]
  result(0):&text = "";
  txt(1):text = "";
  OpGetFileText(self(0), OpCreateRef(txt(1)));
  OpAppendRefText(OpVarRef(result(0)), 0i32, txt(1));
  OpFreeText(txt(1));
  result(0);
}#block(1):&text["result"]

fn _tp_File_lines(self:File, l:vector<text>) -> vector<text>["??"] {#block(1):vector<text>["l"]
  __ref_1(1):ref(main_vector<text>) = null;
  __work_2(1):text = "";
  __work_1(1):text = "";
  OpDatabase(__ref_1(1), 14i32);
  l(0):vector<text>["__ref_1"] = OpGetField(__ref_1(1), 4i32, 7i32);
  OpSetInt(__ref_1(1), 4i32, 0i32);
  c(1):text = _tp_File_content(self(0), {#default ref(2):ref(reference)["__work_1"]
    OpCreateRef(__work_1(1));
  }#default ref(2):ref(reference)["__work_1"]);
  p(1):integer = 0i32;
  {#For block(3):void
    ch#index(3):integer = 0i32;
    loop {#For loop_4
      ch(4):text["c"] = {#for text next(5):text["c"]
        __work_2(1):text = OpGetTextSub(c(1), ch#index(3), -2147483648i32);
        ch#index(3):integer = OpAddInt(ch#index(3), OpLengthText(__work_2(1)));
        __work_2(1);
      }#for text next(5):text["c"];
      if OpNot(OpConvBoolFromText(ch(4))) {#break(6):void
        OpFreeText(ch(4));
        break(0);
      }#break(6):void else null;
      {#block(7):void
        if OpEqText(ch(4), "
") {#block(8):void
          _elm_1(8):ref(boolean)["l"] = OpNewRecord(l(0), 7i32, 65535i32);
          OpSetText(_elm_1(8), 0i32, OpGetTextSub(c(1), p(1), OpMinInt(ch#index(3), 1i32)));
          OpFinishRecord(l(0), _elm_1(8), 7i32, 65535i32);
          p(1):integer = OpMinSingleInt(1i32);
        }#block(8):void else if OpLtInt(p(1), 0i32) {#block(9):void
          p(1):integer = ch#index(3);
        }#block(9):void else null;
      }#block(7):void;
      OpFreeText(ch(4));
    }#For loop_4;
  }#For block(3):void;
  if OpGtInt(p(1), 0i32) {#block(10):void
    _elm_2(10):ref(boolean)["l"] = OpNewRecord(l(0), 7i32, 65535i32);
    OpSetText(_elm_2(10), 0i32, OpGetTextSub(c(1), p(1), _tp_text_len(c(1))));
    OpFinishRecord(l(0), _elm_2(10), 7i32, 65535i32);
  }#block(10):void else null;
  OpFreeText(c(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
  OpFreeRef(__ref_1(1));
  l(0);
}#block(1):vector<text>["l"]

fn file(path:text, result:File) -> File["result"] {#block(1):ref(File)["result"]
  OpDatabase(result(0), 13i32);
  OpSetText(result(0), 4i32, path(0));
  OpSetLong(result(0), 8i32, 0i64);
  OpSetByte(result(0), 16i32, 0i32, if false 1i32 else 0i32);
  if OpGetFile(result(0)) {#block(2):ref(File)["result"]
    result(0);
  }#block(2):ref(File)["result"] else {#block(3):null
    OpConvRefFromNull();
  }#block(3):null;
}#block(1):ref(File)["result"]

fn _tp_File_files(self:File, result:vector<ref(File)>) -> vector<ref(File)>["??"] {#block(1):vector<ref(File)>["result"]
  __ref_1(1):ref(main_vector<File>) = null;
  OpDatabase(__ref_1(1), 15i32);
  result(0):vector<ref(File)>["__ref_1"] = OpGetField(__ref_1(1), 4i32, 16i32);
  OpSetInt(__ref_1(1), 4i32, 0i32);
  if OpEqInt(OpGetByte(self(0), 16i32, 0i32), 1i32) {#block(2):void
    drop OpGetDir(OpGetText(self(0), 4i32), result(0));
  }#block(2):void else null;
  OpFreeRef(__ref_1(1));
  result(0);
}#block(1):vector<ref(File)>["result"]

fn _tp_File_png(self:File, result:Image) -> Image["result"] {#block(1):ref(Image)["result"]
  if OpNot(OpEqInt(OpGetByte(self(0), 16i32, 0i32), 1i32)) {#block(2):ref(Image)["result"]
    OpDatabase(result(0), 11i32);
    OpSetText(result(0), 4i32, "");
    OpSetInt(result(0), 8i32, 0i32);
    OpSetInt(result(0), 12i32, 0i32);
    OpSetInt(result(0), 16i32, 0i32);
    drop OpGetPngImage(OpGetText(self(0), 4i32), result(0));
    result(0);
  }#block(2):ref(Image)["result"] else {#block(3):null
    OpConvRefFromNull();
  }#block(3):null;
}#block(1):ref(Image)["result"]

