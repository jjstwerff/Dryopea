Type 7:vector<text>[4]:Vector(5)

Type 8:Variable[12]:
    name:text[4]
    value:text[8]

Type 9:Pixel[3]:
    r:byte[0]
    g:byte[1]
    b:byte[2]

Type 10:byte[1]:Byte(0, false)

Type 11:Image[20]:
    name:text[4]
    width:integer[8]
    height:integer[12]
    data:vector<Pixel>[16]

Type 12:vector<Pixel>[4]:Vector(9)

Type 13:File[17]:
    path:text[4]
    size:long[8]
    dir:boolean[16]

Type 14:main_vector<text>[8]:
    vector:vector<text>[4]

Type 15:main_vector<File>[8]:
    vector:vector<File>[4]

Type 16:vector<File>[4]:Vector(13)

fn _tp_Pixel_value(self:Pixel) -> integer {#block_1:integer
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 0i32, 0i32), 65536i32), OpMulInt(OpGetByte(self, 1i32, 0i32), 256i32)), OpGetByte(self, 2i32, 0i32));
}#block_1:integer

fn _tp_File_content(self:File, result:&text) -> text["result"] {#block_1:&text["result"]
  result:&text(0) = "";
  txt:text(1) = "";
  OpGetFileText(self, OpCreateRef(txt));
  OpAppendText(result, txt);
  OpFreeText(txt);
  result;
}#block_1:&text["result"]

fn _tp_File_lines(self:File, l:vector<text>) -> vector<text>["??"] {#block_1:vector<text>["l"]
  __ref_3:ref(main_vector<text>)(1) = null;
  __ref_2:ref(main_vector<text>)(1) = null;
  __ref_1:ref(main_vector<text>)(1) = null;
  __work_2:text(1) = "";
  __work_1:text(1) = "";
  OpDatabase(__ref_1, 14i32);
  l:vector<text>["__ref_3"](0) = OpGetField(__ref_1, 4i32, 65535i32);
  OpSetInt(__ref_1, 4i32, 0i32);
  c:text(1) = _tp_File_content(self, {#default ref_2:ref(reference)["__work_1"]
    OpCreateRef(__work_1);
  }#default ref_2:ref(reference)["__work_1"]);
  p:integer(1) = 0i32;
  {#For block_3:void
    ch#index:integer(3) = 0i32;
    loop {#For loop_4
      ch:text["c"](4) = {#for text next_5:text["c"]
        __work_2:text(1) = OpGetTextSub(c, ch#index, -2147483648i32);
        ch#index:integer(3) = OpAddInt(ch#index, OpLengthText(__work_2));
        __work_2;
      }#for text next_5:text["c"];
      if OpNot(OpConvBoolFromText(ch)) {#break_6:void
        OpFreeText(ch);
        break(0);
      }#break_6:void else null;
      {#block_7:void
        if OpEqText(ch, "
") {#block_8:void
          OpDatabase(__ref_2, 14i32);
          l:vector<text>["__ref_3"](0) = OpGetField(__ref_2, 4i32, 65535i32);
          OpSetInt(__ref_2, 4i32, 0i32);
          _elm_1:ref(boolean)["__ref_2"](8) = OpNewRecord(l, 7i32, 65535i32);
          OpSetText(_elm_1, 0i32, OpGetTextSub(c, p, OpMinInt(ch#index, 1i32)));
          OpFinishRecord(l, _elm_1, 7i32, 65535i32);
          p:integer(1) = OpMinSingleInt(1i32);
        }#block_8:void else if OpLtInt(p, 0i32) {#block_9:void
          p:integer(1) = ch#index;
        }#block_9:void else null;
      }#block_7:void;
      OpFreeText(ch);
    }#For loop_4;
  }#For block_3:void;
  if OpGtInt(p, 0i32) {#block_10:void
    OpDatabase(__ref_3, 14i32);
    l:vector<text>["__ref_3"](0) = OpGetField(__ref_3, 4i32, 65535i32);
    OpSetInt(__ref_3, 4i32, 0i32);
    _elm_2:ref(boolean)["__ref_3"](10) = OpNewRecord(l, 7i32, 65535i32);
    OpSetText(_elm_2, 0i32, OpGetTextSub(c, p, _tp_text_len(c)));
    OpFinishRecord(l, _elm_2, 7i32, 65535i32);
  }#block_10:void else null;
  OpFreeText(c);
  OpFreeText(__work_1);
  OpFreeText(__work_2);
  OpFreeRef(__ref_1);
  OpFreeRef(__ref_2);
  OpFreeRef(__ref_3);
  l;
}#block_1:vector<text>["l"]

fn file(path:text, result:File) -> File["result"] {#block_1:ref(File)["result"]
  OpDatabase(result, 13i32);
  OpSetText(result, 4i32, path);
  OpSetLong(result, 8i32, 0i64);
  OpSetByte(result, 16i32, 0i32, if false 1i32 else 0i32);
  if OpGetFile(result) {#block_2:ref(File)["result"]
    result;
  }#block_2:ref(File)["result"] else {#block_3:null
    OpConvRefFromNull();
  }#block_3:null;
}#block_1:ref(File)["result"]

fn _tp_File_files(self:File, result:vector<ref(File)>) -> vector<ref(File)>["??"] {#block_1:vector<ref(File)>["result"]
  __ref_1:ref(main_vector<File>)(1) = null;
  OpDatabase(__ref_1, 15i32);
  result:vector<ref(File)>["__ref_1"](0) = OpGetField(__ref_1, 4i32, 65535i32);
  OpSetInt(__ref_1, 4i32, 0i32);
  if OpEqInt(OpGetByte(self, 16i32, 0i32), 1i32) {#block_2:void
    drop OpGetDir(OpGetText(self, 4i32), result);
  }#block_2:void else null;
  OpFreeRef(__ref_1);
  result;
}#block_1:vector<ref(File)>["result"]

fn _tp_File_png(self:File, result:Image) -> Image["result"] {#block_1:ref(Image)["result"]
  if OpNot(OpEqInt(OpGetByte(self, 16i32, 0i32), 1i32)) {#block_2:ref(Image)["result"]
    OpDatabase(result, 11i32);
    OpSetText(result, 4i32, "");
    OpSetInt(result, 8i32, 0i32);
    OpSetInt(result, 12i32, 0i32);
    OpSetInt(result, 16i32, 0i32);
    drop OpGetPngImage(OpGetText(self, 4i32), result);
    result;
  }#block_2:ref(Image)["result"] else {#block_3:null
    OpConvRefFromNull();
  }#block_3:null;
}#block_1:ref(Image)["result"]

