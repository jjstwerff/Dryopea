struct Object{first: integer, second: text, third: boolean}
fn obj() -> boolean {
  o = Object {first: 1234, second: "data", third: true};
  o.first-12 == 1222 && len(o.second) == 4 && o.third
}

pub fn test() {
    test_value = {if obj() {1} else {0}};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
Type 11:Object[13]:
    first:integer[4]
    second:text[8]
    third:boolean[12]

fn obj() -> boolean {#1 block
  o:Object = {#2 object
    _val_1:Object = OpDatabase(13i32, 11i32);
    OpSetInt(_val_1, 4i32, 1234i32);
    OpSetText(_val_1, 8i32, "data");
    OpSetByte(_val_1, 12i32, 0i32, if true 1i32 else 0i32);
    _val_1;
  }#2:Object;
  if if OpEqInt(OpMinInt(OpGetInt(o, 4i32), 12i32), 1222i32) OpEqInt(_tp_text_len(OpGetText(o, 8i32)), 4i32) else false OpEqInt(OpGetByte(o, 12i32, 0i32), 1i32) else false;
}#1:boolean

byte-code for define_object:obj() -> boolean
 682[0]: return-address
 682[4]: Database(size=13, db_tp=11) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[11]
 687[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[11]
 690[28]: ConstInt(val=1234) -> integer
 695[32]: SetInt(v1: reference, fld=4, val: integer)
 698[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[11]
 701[28]: ConstText(_value="data") -> text
 707[44]: SetText(v1: reference, fld=8, val: text)
 710[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[11]
 713[28]: ConstTrue() -> boolean
 714[29]: GotoFalseWord(jump=725, if_false: boolean)
 717[28]: ConstInt(val=1) -> integer
 722[32]: GotoWord(jump=730)
 725[28]: ConstInt(val=0) -> integer
 730[32]: SetByte(v1: reference, fld=12, min=0, val: integer)
 735[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[11]
 738[28]: FreeStack(value=12, discard=12) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[11]
 742[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[11]
 745[28]: GetInt(v1: reference, fld=4) -> integer
 748[20]: ConstInt(val=12) -> integer
 753[24]: MinInt(v1: integer, v2: integer) -> integer
 754[20]: ConstInt(val=1222) -> integer
 759[24]: EqInt(v1: integer, v2: integer) -> boolean
 760[17]: GotoFalseWord(jump=785, if_false: boolean)
 763[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[11]
 766[28]: GetText(v1: reference, fld=8) -> text["o"]
 769[32]: Call(size=0, to=318)
 776[20]: ConstInt(val=4) -> integer
 781[24]: EqInt(v1: integer, v2: integer) -> boolean
 782[17]: GotoWord(jump=786)
 785[16]: ConstFalse() -> boolean
 786[17]: GotoFalseWord(jump=806, if_false: boolean)
 789[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[11]
 792[28]: GetByte(v1: reference, fld=12, min=0) -> integer
 797[20]: ConstInt(val=1) -> integer
 802[24]: EqInt(v1: integer, v2: integer) -> boolean
 803[17]: GotoWord(jump=807)
 806[16]: ConstFalse() -> boolean
 807[17]: Return(ret=0, value=1, discard=17) type=boolean[1]:Base[4]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    if obj() {#3 block
      1i32;
    }#3:integer else {#4 block
      0i32;
    }#4:integer;
  }#2:integer;
  if OpEqInt(test_value, 1i32) null else OpPanic({#5 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1");
    __work_1;
  }#5:text);
}#1

byte-code for define_object:test()
 813[0]: return-address
 813[4]: Text()
 814[28]: Call(size=0, to=682)
 821[29]: GotoFalseWord(jump=832, if_false: boolean)
 824[28]: ConstInt(val=1) -> integer
 829[32]: GotoWord(jump=837)
 832[28]: ConstInt(val=0) -> integer
 837[32]: VarInt(var[28]) -> integer
 840[36]: ConstInt(val=1) -> integer
 845[40]: EqInt(v1: integer, v2: integer) -> boolean
 846[33]: GotoFalseWord(jump=852, if_false: boolean)
 849[32]: GotoWord(jump=901)
 852[32]: ClearText(var[4])
 855[32]: ConstText(_value="Test failed ") -> text
 869[48]: AppendText(var[4], v1: text)
 872[32]: VarInt(var[28]) -> integer
 875[36]: ConstInt(val=0) -> integer
 880[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 887[32]: ConstText(_value=" != 1") -> text
 894[48]: AppendText(var[4], v1: text)
 897[32]: VarText(var[4]) -> text
 900[48]: Panic(message: text)
 901[32]: Return(ret=0, value=0, discard=32)

Execute test:
  813:[8] Text()
  814:[32] Call(size=0, to=682)
  682:[36] Database(size=13, db_tp=11) -> ref(1,1,0)={third:false}[36]
  687:[48] VarRef(var[36]) -> ref(1,1,0)={third:false}[48]
  690:[60] ConstInt(val=1234) -> 1234[60]
  695:[64] SetInt(v1=ref(1,1,0)[48], fld=4, val=1234[60])
  698:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,third:false}[48]
  701:[60] ConstText(_value="data") -> "data"[60]
  707:[76] SetText(v1=ref(1,1,0)[48], fld=8, val="data"[60])
  710:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:false}[48]
  713:[60] ConstTrue() -> true[60]
  714:[61] GotoFalseWord(jump=725, if_false=true[60])
  717:[60] ConstInt(val=1) -> 1[60]
  722:[64] GotoWord(jump=730)
  730:[64] SetByte(v1=ref(1,1,0)[48], fld=12, min=0, val=1[60])
  735:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
  738:[60] FreeStack(value=12, discard=12)
  742:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
  745:[60] GetInt(v1=ref(1,1,0)[48], fld=4) -> 1234[48]
  748:[52] ConstInt(val=12) -> 12[52]
  753:[56] MinInt(v1=1234[48], v2=12[52]) -> 1222[48]
  754:[52] ConstInt(val=1222) -> 1222[52]
  759:[56] EqInt(v1=1222[48], v2=1222[52]) -> true[48]
  760:[49] GotoFalseWord(jump=785, if_false=true[48])
  763:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
  766:[60] GetText(v1=ref(1,1,0)[48], fld=8) -> "data"[48]
  769:[64] Call(size=0, to=318)
  318:[68] ArgText(var[48]) -> "data"[68]
  321:[84] LengthText(v1="data"[68]) -> 4[68]
  322:[72] Return(ret=776[64], value=4, discard=24) -> 4[48]
  776:[52] ConstInt(val=4) -> 4[52]
  781:[56] EqInt(v1=4[48], v2=4[52]) -> true[48]
  782:[49] GotoWord(jump=786)
  786:[49] GotoFalseWord(jump=806, if_false=true[48])
  789:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
  792:[60] GetByte(v1=ref(1,1,0)[48], fld=12, min=0) -> 1[48]
  797:[52] ConstInt(val=1) -> 1[52]
  802:[56] EqInt(v1=1[48], v2=1[52]) -> true[48]
  803:[49] GotoWord(jump=807)
  807:[49] Return(ret=821[32], value=1, discard=17) -> true[32]
  821:[33] GotoFalseWord(jump=832, if_false=true[32])
  824:[32] ConstInt(val=1) -> 1[32]
  829:[36] GotoWord(jump=837)
  837:[36] VarInt(var[32]) -> 1[36]
  840:[40] ConstInt(val=1) -> 1[40]
  845:[44] EqInt(v1=1[36], v2=1[40]) -> true[36]
  846:[37] GotoFalseWord(jump=852, if_false=true[36])
  849:[36] GotoWord(jump=901)
  901:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
