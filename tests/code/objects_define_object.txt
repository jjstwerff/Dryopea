struct Object{first: integer, second: text, third: boolean}
fn obj() -> boolean {
  o = Object {first: 1234, second: "data", third: false};
  o.third = true;
  o.first-12 == 1222 && len(o.second) == 4 && o.third
}

pub fn test() {
    test_value = {if obj() {1} else {0}};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
Type 17:Object[13]:
    first:integer[4]
    second:text[8]
    third:boolean[12]

fn obj() -> boolean {#block(1):boolean
  o(1):ref(Object) = null;
  OpDatabase(o(1), 17i32);
  OpSetInt(o(1), 4i32, 1234i32);
  OpSetText(o(1), 8i32, "data");
  OpSetByte(o(1), 12i32, 0i32, if false 1i32 else 0i32);
  OpSetByte(o(1), 12i32, 0i32, if true 1i32 else 0i32);
  if if OpEqInt(OpMinInt(OpGetInt(o(1), 4i32), 12i32), 1222i32) OpEqInt(_tp_text_len(OpGetText(o(1), 8i32)), 4i32) else false OpEqInt(OpGetByte(o(1), 12i32, 0i32), 1i32) else false;
  OpFreeRef(o(1));
}#block(1):boolean

byte-code for define_object:obj() [1119] -> boolean
   0[4]: return-address
   0[8]: ConvRefFromNull() -> ref(reference) var=o[8]:ref(Object)
   1[20]: Database(var[8], db_tp=17) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[17]
   6[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[17] var=o[8]:ref(Object)
   9[32]: ConstInt(val=1234) -> integer
  14[36]: SetInt(v1: ref(reference), fld=4, val: integer)
  17[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[17] var=o[8]:ref(Object)
  20[32]: ConstText(_value="data") -> text
  26[48]: SetText(v1: ref(reference), fld=8, val: text)
  29[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[17] var=o[8]:ref(Object)
  32[32]: ConstFalse() -> boolean
  33[33]: GotoFalseWord(jump=44, if_false: boolean)
  36[32]: ConstInt(val=1) -> integer
  41[36]: GotoWord(jump=49)
  44[32]: ConstInt(val=0) -> integer
  49[36]: SetByte(v1: ref(reference), fld=12, min=0, val: integer)
  54[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[17] var=o[8]:ref(Object)
  57[32]: ConstTrue() -> boolean
  58[33]: GotoFalseWord(jump=69, if_false: boolean)
  61[32]: ConstInt(val=1) -> integer
  66[36]: GotoWord(jump=74)
  69[32]: ConstInt(val=0) -> integer
  74[36]: SetByte(v1: ref(reference), fld=12, min=0, val: integer)
  79[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[17] var=o[8]:ref(Object)
  82[32]: GetInt(v1: ref(reference), fld=4) -> integer
  85[24]: ConstInt(val=12) -> integer
  90[28]: MinInt(v1: integer, v2: integer) -> integer
  91[24]: ConstInt(val=1222) -> integer
  96[28]: EqInt(v1: integer, v2: integer) -> boolean
  97[21]: GotoFalseWord(jump=122, if_false: boolean)
 100[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[17] var=o[8]:ref(Object)
 103[32]: GetText(v1: ref(reference), fld=8) -> text["o"]
 106[36]: Call(size=0, to=318)
 113[24]: ConstInt(val=4) -> integer
 118[28]: EqInt(v1: integer, v2: integer) -> boolean
 119[21]: GotoWord(jump=123)
 122[20]: ConstFalse() -> boolean
 123[21]: GotoFalseWord(jump=143, if_false: boolean)
 126[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[17] var=o[8]:ref(Object)
 129[32]: GetByte(v1: ref(reference), fld=12, min=0) -> integer
 134[24]: ConstInt(val=1) -> integer
 139[28]: EqInt(v1: integer, v2: integer) -> boolean
 140[21]: GotoWord(jump=144)
 143[20]: ConstFalse() -> boolean
 144[21]: VarRef(var[8]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[17] var=o[8]:ref(Object)
 147[33]: FreeRef(v1: ref(reference))
 148[21]: Return(ret=0, value=1, discard=17) type=boolean[1]:Base[4]

fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    if obj() {#block(3):integer
      1i32;
    }#block(3):integer else {#block(4):integer
      0i32;
    }#block(4):integer;
  }#block(2):integer;
  if OpEqInt(test_value(1), 1i32) null else OpPanic({#Formatted string(5):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 1");
    __work_1(1);
  }#Formatted string(5):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for define_object:test() [1273]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Call(size=0, to=1119) var=test_value[32]:integer
   8[33]: GotoFalseWord(jump=19, if_false: boolean)
  11[32]: ConstInt(val=1) -> integer
  16[36]: GotoWord(jump=24)
  19[32]: ConstInt(val=0) -> integer
  24[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  27[40]: ConstInt(val=1) -> integer
  32[44]: EqInt(v1: integer, v2: integer) -> boolean
  33[37]: GotoFalseWord(jump=39, if_false: boolean)
  36[36]: GotoWord(jump=88)
  39[36]: ClearText(var[8]) var=__work_1[8]:text
  42[36]: ConstText(_value="Test failed ") -> text
  56[52]: AppendText(var[8], v1: text)
  59[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  62[40]: ConstInt(val=0) -> integer
  67[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  74[36]: ConstText(_value=" != 1") -> text
  81[52]: AppendText(var[8], v1: text)
  84[36]: VarText(var[8]) -> text var=__work_1[8]:text
  87[52]: Panic(message: text)
  88[36]: FreeText(var[8])
  91[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] Call(size=0, to=1119)
 1119:[36] ConvRefFromNull() -> ref(1,0,0)[36]
 1120:[48] Database(var[36], db_tp=17)
 1125:[48] VarRef(var[36]) -> ref(1,1,0)={third:false}[48]
 1128:[60] ConstInt(val=1234) -> 1234[60]
 1133:[64] SetInt(v1=ref(1,1,0)[48], fld=4, val=1234[60])
 1136:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,third:false}[48]
 1139:[60] ConstText(_value="data") -> "data"[60]
 1145:[76] SetText(v1=ref(1,1,0)[48], fld=8, val="data"[60])
 1148:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:false}[48]
 1151:[60] ConstFalse() -> false[60]
 1152:[61] GotoFalseWord(jump=1163, if_false=false[60])
 1163:[60] ConstInt(val=0) -> 0[60]
 1168:[64] SetByte(v1=ref(1,1,0)[48], fld=12, min=0, val=0[60])
 1173:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:false}[48]
 1176:[60] ConstTrue() -> true[60]
 1177:[61] GotoFalseWord(jump=1188, if_false=true[60])
 1180:[60] ConstInt(val=1) -> 1[60]
 1185:[64] GotoWord(jump=1193)
 1193:[64] SetByte(v1=ref(1,1,0)[48], fld=12, min=0, val=1[60])
 1198:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
 1201:[60] GetInt(v1=ref(1,1,0)[48], fld=4) -> 1234[48]
 1204:[52] ConstInt(val=12) -> 12[52]
 1209:[56] MinInt(v1=1234[48], v2=12[52]) -> 1222[48]
 1210:[52] ConstInt(val=1222) -> 1222[52]
 1215:[56] EqInt(v1=1222[48], v2=1222[52]) -> true[48]
 1216:[49] GotoFalseWord(jump=1241, if_false=true[48])
 1219:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
 1222:[60] GetText(v1=ref(1,1,0)[48], fld=8) -> "data"[48]
 1225:[64] Call(size=0, to=318)
  318:[68] ArgText(var[48]) -> "data"[68]
  321:[84] LengthText(v1="data"[68]) -> 4[68]
  322:[72] Return(ret=1232[64], value=4, discard=24) -> 4[48]
 1232:[52] ConstInt(val=4) -> 4[52]
 1237:[56] EqInt(v1=4[48], v2=4[52]) -> true[48]
 1238:[49] GotoWord(jump=1242)
 1242:[49] GotoFalseWord(jump=1262, if_false=true[48])
 1245:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
 1248:[60] GetByte(v1=ref(1,1,0)[48], fld=12, min=0) -> 1[48]
 1253:[52] ConstInt(val=1) -> 1[52]
 1258:[56] EqInt(v1=1[48], v2=1[52]) -> true[48]
 1259:[49] GotoWord(jump=1263)
 1263:[49] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[49]
 1266:[61] FreeRef(v1=ref(1,1,0)[49])
 1267:[49] Return(ret=1281[32], value=1, discard=17) -> true[32]
    8:[33] GotoFalseWord(jump=19, if_false=true[32])
   11:[32] ConstInt(val=1) -> 1[32]
   16:[36] GotoWord(jump=24)
   24:[36] VarInt(var[32]) -> 1[36]
   27:[40] ConstInt(val=1) -> 1[40]
   32:[44] EqInt(v1=1[36], v2=1[40]) -> true[36]
   33:[37] GotoFalseWord(jump=39, if_false=true[36])
   36:[36] GotoWord(jump=88)
   88:[36] FreeText(var[8])
   91:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
