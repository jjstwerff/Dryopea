struct Object{first: integer, second: text, third: boolean}
fn obj() -> boolean {
  o = Object {first: 1234, second: "data", third: true};
  o.first-12 == 1222 && len(o.second) == 4 && o.third
}

pub fn test() {
    test_value = {if obj() {1} else {0}};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
Type 12:Object[13]:
    first:integer[4]
    second:text[8]
    third:boolean[12]

fn obj() -> boolean {#1 block
  __ref_1:ref(Object) = null;
  o:ref(Object)["__ref_1"] = {#2 object
    OpDatabase(__ref_1, 12i32);
    OpSetInt(__ref_1, 4i32, 1234i32);
    OpSetText(__ref_1, 8i32, "data");
    OpSetByte(__ref_1, 12i32, 0i32, if true 1i32 else 0i32);
    __ref_1;
  }#2:ref(Object)["__ref_1"];
  if if OpEqInt(OpMinInt(OpGetInt(o, 4i32), 12i32), 1222i32) OpEqInt(_tp_text_len(OpGetText(o, 8i32)), 4i32) else false OpEqInt(OpGetByte(o, 12i32, 0i32), 1i32) else false;
}#1:boolean

byte-code for define_object:obj() -> boolean
 655[0]: return-address
 655[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Object) in 1
 656[16]: Database(var[4], db_tp=12) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12] var=o[16]:ref(Object)["__ref_1"] in 1
 661[16]: VarRef(var[4]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12] var=__ref_1[4]:ref(Object) in 1
 664[28]: ConstInt(val=1234) -> integer
 669[32]: SetInt(v1: ref(reference), fld=4, val: integer)
 672[16]: VarRef(var[4]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12] var=__ref_1[4]:ref(Object) in 1
 675[28]: ConstText(_value="data") -> text
 681[44]: SetText(v1: ref(reference), fld=8, val: text)
 684[16]: VarRef(var[4]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12] var=__ref_1[4]:ref(Object) in 1
 687[28]: ConstTrue() -> boolean
 688[29]: GotoFalseWord(jump=699, if_false: boolean)
 691[28]: ConstInt(val=1) -> integer
 696[32]: GotoWord(jump=704)
 699[28]: ConstInt(val=0) -> integer
 704[32]: SetByte(v1: ref(reference), fld=12, min=0, val: integer)
 709[16]: VarRef(var[4]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12] var=__ref_1[4]:ref(Object) in 1
 712[28]: VarRef(var[16]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12] var=o[16]:ref(Object)["__ref_1"] in 1
 715[40]: GetInt(v1: ref(reference), fld=4) -> integer
 718[32]: ConstInt(val=12) -> integer
 723[36]: MinInt(v1: integer, v2: integer) -> integer
 724[32]: ConstInt(val=1222) -> integer
 729[36]: EqInt(v1: integer, v2: integer) -> boolean
 730[29]: GotoFalseWord(jump=755, if_false: boolean)
 733[28]: VarRef(var[16]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12] var=o[16]:ref(Object)["__ref_1"] in 1
 736[40]: GetText(v1: ref(reference), fld=8) -> text["o"]
 739[44]: Call(size=0, to=318)
 746[32]: ConstInt(val=4) -> integer
 751[36]: EqInt(v1: integer, v2: integer) -> boolean
 752[29]: GotoWord(jump=756)
 755[28]: ConstFalse() -> boolean
 756[29]: GotoFalseWord(jump=776, if_false: boolean)
 759[28]: VarRef(var[16]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12] var=o[16]:ref(Object)["__ref_1"] in 1
 762[40]: GetByte(v1: ref(reference), fld=12, min=0) -> integer
 767[32]: ConstInt(val=1) -> integer
 772[36]: EqInt(v1: integer, v2: integer) -> boolean
 773[29]: GotoWord(jump=777)
 776[28]: ConstFalse() -> boolean
 777[29]: VarRef(var[4]) -> ref(reference) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12] var=__ref_1[4]:ref(Object) in 1
 780[41]: FreeRef(v1: ref(reference))
 781[29]: Return(ret=0, value=1, discard=29) type=boolean[1]:Base[4]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    if obj() {#3 block
      1i32;
    }#3:integer else {#4 block
      0i32;
    }#4:integer;
  }#2:integer;
  if OpEqInt(test_value, 1i32) null else OpPanic({#5 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1");
    __work_1;
  }#5:text);
}#1

byte-code for define_object:test()
 787[0]: return-address
 787[4]: Text() var=__work_1[4]:text in 1
 788[28]: Call(size=0, to=655) var=test_value[28]:integer in 1
 795[29]: GotoFalseWord(jump=806, if_false: boolean)
 798[28]: ConstInt(val=1) -> integer
 803[32]: GotoWord(jump=811)
 806[28]: ConstInt(val=0) -> integer
 811[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 814[36]: ConstInt(val=1) -> integer
 819[40]: EqInt(v1: integer, v2: integer) -> boolean
 820[33]: GotoFalseWord(jump=826, if_false: boolean)
 823[32]: GotoWord(jump=875)
 826[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 829[32]: ConstText(_value="Test failed ") -> text
 843[48]: AppendText(var[4], v1: text)
 846[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 849[36]: ConstInt(val=0) -> integer
 854[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 861[32]: ConstText(_value=" != 1") -> text
 868[48]: AppendText(var[4], v1: text)
 871[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 874[48]: Panic(message: text)
 875[32]: FreeText(var[4])
 878[32]: Return(ret=0, value=0, discard=32)

Execute test:
  787:[8] Text()
  788:[32] Call(size=0, to=655)
  655:[36] ConvRefFromNull() -> ref(1,0,0)[36]
  656:[48] Database(var[36], db_tp=12)
  661:[48] VarRef(var[36]) -> ref(1,1,0)={third:false}[48]
  664:[60] ConstInt(val=1234) -> 1234[60]
  669:[64] SetInt(v1=ref(1,1,0)[48], fld=4, val=1234[60])
  672:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,third:false}[48]
  675:[60] ConstText(_value="data") -> "data"[60]
  681:[76] SetText(v1=ref(1,1,0)[48], fld=8, val="data"[60])
  684:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:false}[48]
  687:[60] ConstTrue() -> true[60]
  688:[61] GotoFalseWord(jump=699, if_false=true[60])
  691:[60] ConstInt(val=1) -> 1[60]
  696:[64] GotoWord(jump=704)
  704:[64] SetByte(v1=ref(1,1,0)[48], fld=12, min=0, val=1[60])
  709:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
  712:[60] VarRef(var[48]) -> ref(1,1,0)={first:1234,second:"data",third:true}[60]
  715:[72] GetInt(v1=ref(1,1,0)[60], fld=4) -> 1234[60]
  718:[64] ConstInt(val=12) -> 12[64]
  723:[68] MinInt(v1=1234[60], v2=12[64]) -> 1222[60]
  724:[64] ConstInt(val=1222) -> 1222[64]
  729:[68] EqInt(v1=1222[60], v2=1222[64]) -> true[60]
  730:[61] GotoFalseWord(jump=755, if_false=true[60])
  733:[60] VarRef(var[48]) -> ref(1,1,0)={first:1234,second:"data",third:true}[60]
  736:[72] GetText(v1=ref(1,1,0)[60], fld=8) -> "data"[60]
  739:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "data"[80]
  321:[96] LengthText(v1="data"[80]) -> 4[80]
  322:[84] Return(ret=746[76], value=4, discard=24) -> 4[60]
  746:[64] ConstInt(val=4) -> 4[64]
  751:[68] EqInt(v1=4[60], v2=4[64]) -> true[60]
  752:[61] GotoWord(jump=756)
  756:[61] GotoFalseWord(jump=776, if_false=true[60])
  759:[60] VarRef(var[48]) -> ref(1,1,0)={first:1234,second:"data",third:true}[60]
  762:[72] GetByte(v1=ref(1,1,0)[60], fld=12, min=0) -> 1[60]
  767:[64] ConstInt(val=1) -> 1[64]
  772:[68] EqInt(v1=1[60], v2=1[64]) -> true[60]
  773:[61] GotoWord(jump=777)
  777:[61] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[61]
  780:[73] FreeRef(v1=ref(1,1,0)[61])
  781:[61] Return(ret=795[32], value=1, discard=29) -> true[32]
  795:[33] GotoFalseWord(jump=806, if_false=true[32])
  798:[32] ConstInt(val=1) -> 1[32]
  803:[36] GotoWord(jump=811)
  811:[36] VarInt(var[32]) -> 1[36]
  814:[40] ConstInt(val=1) -> 1[40]
  819:[44] EqInt(v1=1[36], v2=1[40]) -> true[36]
  820:[37] GotoFalseWord(jump=826, if_false=true[36])
  823:[36] GotoWord(jump=875)
  875:[36] FreeText(var[8])
  878:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
