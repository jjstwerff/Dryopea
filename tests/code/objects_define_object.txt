struct Object{first: integer, second: text, third: boolean}
fn obj() -> boolean {
  o = Object {first: 1234, second: "data", third: true};
  o.first-12 == 1222 && len(o.second) == 4 && o.third
}

pub fn test() {
    test_value = {if obj() {1} else {0}};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
Type 12:Object[13]:
    first:integer[4]
    second:text[8]
    third:boolean[12]

fn obj() -> boolean {#1 block
  o:Object["_val_1"] = {#2 object
    _val_1:Object = OpDatabase(13i32, 12i32);
    OpSetInt(_val_1, 4i32, 1234i32);
    OpSetText(_val_1, 8i32, "data");
    OpSetByte(_val_1, 12i32, 0i32, if true 1i32 else 0i32);
    _val_1;
  }#2:Object["_val_1"];
  if if OpEqInt(OpMinInt(OpGetInt(o, 4i32), 12i32), 1222i32) OpEqInt(_tp_text_len(OpGetText(o, 8i32)), 4i32) else false OpEqInt(OpGetByte(o, 12i32, 0i32), 1i32) else false;
}#1:boolean

byte-code for define_object:obj() -> boolean
 692[0]: return-address
 692[4]: Database(size=13, db_tp=12) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12]
 697[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12]
 700[28]: ConstInt(val=1234) -> integer
 705[32]: SetInt(v1: reference, fld=4, val: integer)
 708[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12]
 711[28]: ConstText(_value="data") -> text
 717[44]: SetText(v1: reference, fld=8, val: text)
 720[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12]
 723[28]: ConstTrue() -> boolean
 724[29]: GotoFalseWord(jump=735, if_false: boolean)
 727[28]: ConstInt(val=1) -> integer
 732[32]: GotoWord(jump=740)
 735[28]: ConstInt(val=0) -> integer
 740[32]: SetByte(v1: reference, fld=12, min=0, val: integer)
 745[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12]
 748[28]: FreeStack(value=12, discard=24) type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12]
 752[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12]
 755[28]: GetInt(v1: reference, fld=4) -> integer
 758[20]: ConstInt(val=12) -> integer
 763[24]: MinInt(v1: integer, v2: integer) -> integer
 764[20]: ConstInt(val=1222) -> integer
 769[24]: EqInt(v1: integer, v2: integer) -> boolean
 770[17]: GotoFalseWord(jump=795, if_false: boolean)
 773[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12]
 776[28]: GetText(v1: reference, fld=8) -> text["o"]
 779[32]: Call(size=0, to=318)
 786[20]: ConstInt(val=4) -> integer
 791[24]: EqInt(v1: integer, v2: integer) -> boolean
 792[17]: GotoWord(jump=796)
 795[16]: ConstFalse() -> boolean
 796[17]: GotoFalseWord(jump=816, if_false: boolean)
 799[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[12]
 802[28]: GetByte(v1: reference, fld=12, min=0) -> integer
 807[20]: ConstInt(val=1) -> integer
 812[24]: EqInt(v1: integer, v2: integer) -> boolean
 813[17]: GotoWord(jump=817)
 816[16]: ConstFalse() -> boolean
 817[17]: Return(ret=0, value=1, discard=17) type=boolean[1]:Base[4]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    if obj() {#3 block
      1i32;
    }#3:integer else {#4 block
      0i32;
    }#4:integer;
  }#2:integer;
  if OpEqInt(test_value, 1i32) null else OpPanic({#5 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1");
    __work_1;
  }#5:text);
}#1

byte-code for define_object:test()
 823[0]: return-address
 823[4]: Text()
 824[28]: Call(size=0, to=692)
 831[29]: GotoFalseWord(jump=842, if_false: boolean)
 834[28]: ConstInt(val=1) -> integer
 839[32]: GotoWord(jump=847)
 842[28]: ConstInt(val=0) -> integer
 847[32]: VarInt(var[28]) -> integer
 850[36]: ConstInt(val=1) -> integer
 855[40]: EqInt(v1: integer, v2: integer) -> boolean
 856[33]: GotoFalseWord(jump=862, if_false: boolean)
 859[32]: GotoWord(jump=911)
 862[32]: ClearText(var[4])
 865[32]: ConstText(_value="Test failed ") -> text
 879[48]: AppendText(var[4], v1: text)
 882[32]: VarInt(var[28]) -> integer
 885[36]: ConstInt(val=0) -> integer
 890[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 897[32]: ConstText(_value=" != 1") -> text
 904[48]: AppendText(var[4], v1: text)
 907[32]: VarText(var[4]) -> text
 910[48]: Panic(message: text)
 911[32]: FreeText(var[4])
 914[32]: Return(ret=0, value=0, discard=32)

Execute test:
  823:[8] Text()
  824:[32] Call(size=0, to=692)
  692:[36] Database(size=13, db_tp=12) -> ref(1,1,0)={third:false}[36]
  697:[48] VarRef(var[36]) -> ref(1,1,0)={third:false}[48]
  700:[60] ConstInt(val=1234) -> 1234[60]
  705:[64] SetInt(v1=ref(1,1,0)[48], fld=4, val=1234[60])
  708:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,third:false}[48]
  711:[60] ConstText(_value="data") -> "data"[60]
  717:[76] SetText(v1=ref(1,1,0)[48], fld=8, val="data"[60])
  720:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:false}[48]
  723:[60] ConstTrue() -> true[60]
  724:[61] GotoFalseWord(jump=735, if_false=true[60])
  727:[60] ConstInt(val=1) -> 1[60]
  732:[64] GotoWord(jump=740)
  740:[64] SetByte(v1=ref(1,1,0)[48], fld=12, min=0, val=1[60])
  745:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
  748:[60] FreeStack(value=12, discard=24)
  752:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
  755:[60] GetInt(v1=ref(1,1,0)[48], fld=4) -> 1234[48]
  758:[52] ConstInt(val=12) -> 12[52]
  763:[56] MinInt(v1=1234[48], v2=12[52]) -> 1222[48]
  764:[52] ConstInt(val=1222) -> 1222[52]
  769:[56] EqInt(v1=1222[48], v2=1222[52]) -> true[48]
  770:[49] GotoFalseWord(jump=795, if_false=true[48])
  773:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
  776:[60] GetText(v1=ref(1,1,0)[48], fld=8) -> "data"[48]
  779:[64] Call(size=0, to=318)
  318:[68] ArgText(var[48]) -> "data"[68]
  321:[84] LengthText(v1="data"[68]) -> 4[68]
  322:[72] Return(ret=786[64], value=4, discard=24) -> 4[48]
  786:[52] ConstInt(val=4) -> 4[52]
  791:[56] EqInt(v1=4[48], v2=4[52]) -> true[48]
  792:[49] GotoWord(jump=796)
  796:[49] GotoFalseWord(jump=816, if_false=true[48])
  799:[48] VarRef(var[36]) -> ref(1,1,0)={first:1234,second:"data",third:true}[48]
  802:[60] GetByte(v1=ref(1,1,0)[48], fld=12, min=0) -> 1[48]
  807:[52] ConstInt(val=1) -> 1[52]
  812:[56] EqInt(v1=1[48], v2=1[52]) -> true[48]
  813:[49] GotoWord(jump=817)
  817:[49] Return(ret=831[32], value=1, discard=17) -> true[32]
  831:[33] GotoFalseWord(jump=842, if_false=true[32])
  834:[32] ConstInt(val=1) -> 1[32]
  839:[36] GotoWord(jump=847)
  847:[36] VarInt(var[32]) -> 1[36]
  850:[40] ConstInt(val=1) -> 1[40]
  855:[44] EqInt(v1=1[36], v2=1[40]) -> true[36]
  856:[37] GotoFalseWord(jump=862, if_false=true[36])
  859:[36] GotoWord(jump=911)
  911:[36] FreeText(var[8])
  914:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
