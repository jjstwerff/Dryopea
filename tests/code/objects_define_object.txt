Test code:
struct Object{first: integer, second: text, third: boolean}
fn obj() -> boolean {
  o = Object {first: 1234, second: "data", third: true};
  o.first-12 == 1222 && len(o.second) == 4 && o.third
}

pub fn test() {
    test_value = {if obj() {1} else {0}};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}

Type 13:Object[13]:
    first:integer[4]
    second:text[8]
    third:boolean[12]

fn obj {
  let o = {
    let val = OpDatabase(13i32, 13i32);
    OpSetInt(val, 4i32, 1234i32);
    OpSetText(val, 8i32, "data");
    OpSetByte(val, 12i32, 0i32, if true {1i32} else {0i32});
    val;
  };
  if if OpEqInt(OpMinInt(OpGetInt(o, 4i32), 12i32), 1222i32) {OpEqInt(_tp_text_len(OpGetText(o, 8i32)), 4i32)} else {false} {OpEqInt(OpGetByte(o, 12i32, 0i32), 1i32)} else {false};
}

byte-code for define_object:obj() -> boolean
 668[0]: return-address
 668[4]: Database(size=13, db_tp=13) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[13]
 673[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[13]
 676[28]: ConstInt(val=1234) -> integer
 681[32]: SetInt(v1: reference, fld=4, val: integer)
 684[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[13]
 687[28]: ConstText(_value="data") -> text
 693[44]: SetText(v1: reference, fld=8, val: text)
 696[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[13]
 699[28]: ConstTrue() -> boolean
 700[29]: GenGotoFalseWord(jump=711, if_false: boolean)
 703[28]: ConstInt(val=1) -> integer
 708[32]: GenGotoWord(jump=716)
 711[28]: ConstInt(val=0) -> integer
 716[32]: SetByte(v1: reference, fld=12, min=0, val: integer)
 721[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[13]
 724[28]: GenFreeStack(value=12, discard=12)
 728[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[13]
 731[28]: GetInt(v1: reference, fld=4) -> integer
 734[20]: ConstInt(val=12) -> integer
 739[24]: MinInt(v1: integer, v2: integer) -> integer
 740[20]: ConstInt(val=1222) -> integer
 745[24]: EqInt(v1: integer, v2: integer) -> boolean
 746[17]: GenGotoFalseWord(jump=771, if_false: boolean)
 749[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[13]
 752[28]: GetText(v1: reference, fld=8) -> text
 755[32]: GenCall(size=0, to=318)
 762[20]: ConstInt(val=4) -> integer
 767[24]: EqInt(v1: integer, v2: integer) -> boolean
 768[17]: GenGotoWord(jump=772)
 771[16]: ConstFalse() -> boolean
 772[17]: GenGotoFalseWord(jump=792, if_false: boolean)
 775[16]: VarRef(var[4]) -> reference type=Object[13]:{first:integer[4], second:text[8], third:boolean[12]}[13]
 778[28]: GetByte(v1: reference, fld=12, min=0) -> integer
 783[20]: ConstInt(val=1) -> integer
 788[24]: EqInt(v1: integer, v2: integer) -> boolean
 789[17]: GenGotoWord(jump=793)
 792[16]: ConstFalse() -> boolean
 793[17]: GenReturn(ret=0, value=1, discard=17)

fn test {
  let test_value = {
    if obj() {{
      1i32;
    }} else {{
      0i32;
    }};
  };
  if OpEqInt(test_value, 1i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 1");
    append_7;
  })};
}

byte-code for define_object:test()
 799[0]: return-address
 799[4]: GenCall(size=0, to=668)
 806[5]: GenGotoFalseWord(jump=817, if_false: boolean)
 809[4]: ConstInt(val=1) -> integer
 814[8]: GenGotoWord(jump=822)
 817[4]: ConstInt(val=0) -> integer
 822[8]: VarInt(var[4]) -> integer
 825[12]: ConstInt(val=1) -> integer
 830[16]: EqInt(v1: integer, v2: integer) -> boolean
 831[9]: GenGotoFalseWord(jump=837, if_false: boolean)
 834[8]: GenGotoWord(jump=888)
 837[8]: Text()
 838[32]: ConstText(_value="Test failed ") -> text
 852[48]: AppendText(var[8], v1: text)
 855[32]: VarInt(var[4]) -> integer
 858[36]: ConstInt(val=0) -> integer
 863[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 870[32]: ConstText(_value=" != 1") -> text
 877[48]: AppendText(var[8], v1: text)
 880[32]: VarText(var[8]) -> text
 883[48]: GenFreeStack(value=16, discard=24)
 887[24]: GenPanic(message: text)
 888[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  799:[4] GenCall(size=0, to=668)
  668:[8] Database(size=13, db_tp=13) -> ref(1,1,0)={third:false}[8]
  673:[20] VarRef(var[8]) -> ref(1,1,0)={third:false}[20]
  676:[32] ConstInt(val=1234) -> 1234[32]
  681:[36] SetInt(v1=ref(1,1,0)[20], fld=4, val=1234[32])
  684:[20] VarRef(var[8]) -> ref(1,1,0)={first:1234,third:false}[20]
  687:[32] ConstText(_value="data") -> "data"[32]
  693:[48] SetText(v1=ref(1,1,0)[20], fld=8, val="data"[32])
  696:[20] VarRef(var[8]) -> ref(1,1,0)={first:1234,second:"data",third:false}[20]
  699:[32] ConstTrue() -> true[32]
  700:[33] GenGotoFalseWord(jump=711, if_false=true[32])
  703:[32] ConstInt(val=1) -> 1[32]
  708:[36] GenGotoWord(jump=716)
  716:[36] SetByte(v1=ref(1,1,0)[20], fld=12, min=0, val=1[32])
  721:[20] VarRef(var[8]) -> ref(1,1,0)={first:1234,second:"data",third:true}[20]
  724:[32] GenFreeStack(value=12, discard=12)
  728:[20] VarRef(var[8]) -> ref(1,1,0)={first:1234,second:"data",third:true}[20]
  731:[32] GetInt(v1=ref(1,1,0)[20], fld=4) -> 1234[20]
  734:[24] ConstInt(val=12) -> 12[24]
  739:[28] MinInt(v1=1234[20], v2=12[24]) -> 1222[20]
  740:[24] ConstInt(val=1222) -> 1222[24]
  745:[28] EqInt(v1=1222[20], v2=1222[24]) -> true[20]
  746:[21] GenGotoFalseWord(jump=771, if_false=true[20])
  749:[20] VarRef(var[8]) -> ref(1,1,0)={first:1234,second:"data",third:true}[20]
  752:[32] GetText(v1=ref(1,1,0)[20], fld=8) -> "data"[20]
  755:[36] GenCall(size=0, to=318)
  318:[40] ArgText(var[20]) -> "data"[40]
  321:[56] LengthText(v1="data"[40]) -> 4[40]
  322:[44] GenReturn(ret=762[36], value=4, discard=24)
  762:[24] ConstInt(val=4) -> 4[24]
  767:[28] EqInt(v1=4[20], v2=4[24]) -> true[20]
  768:[21] GenGotoWord(jump=772)
  772:[21] GenGotoFalseWord(jump=792, if_false=true[20])
  775:[20] VarRef(var[8]) -> ref(1,1,0)={first:1234,second:"data",third:true}[20]
  778:[32] GetByte(v1=ref(1,1,0)[20], fld=12, min=0) -> 1[20]
  783:[24] ConstInt(val=1) -> 1[24]
  788:[28] EqInt(v1=1[20], v2=1[24]) -> true[20]
  789:[21] GenGotoWord(jump=793)
  793:[21] GenReturn(ret=806[4], value=1, discard=17)
  806:[5] GenGotoFalseWord(jump=817, if_false=true[4])
  809:[4] ConstInt(val=1) -> 1[4]
  814:[8] GenGotoWord(jump=822)
  822:[8] VarInt(var[4]) -> 1[8]
  825:[12] ConstInt(val=1) -> 1[12]
  830:[16] EqInt(v1=1[8], v2=1[12]) -> true[8]
  831:[9] GenGotoFalseWord(jump=837, if_false=true[8])
  834:[8] GenGotoWord(jump=888)
  888:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
