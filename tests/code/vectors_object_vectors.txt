struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[Elm{a:1, b:2}, Elm{a:12, b:13}, Elm{a:4, b:5}]; v[2].b=6; e=v[0]; e.b + v[1].a + v[2].b};
    assert(
        test_value == 20,
        "Test failed {test_value} != 20"
    );
}
Type 11:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 12:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 13:vector<Elm>[4]:Vector(11)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    v:vector<Elm>#[] = {#3 vector
      _db_3:main_vector<Elm> = OpDatabase(8i32, 12i32);
      _vec_2:vector<Elm>#[] = OpGetField(_db_3, 4i32, 65535i32);
      OpSetInt(_db_3, 4i32, 0i32);
      _elm_1:Elm = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#4 object
        OpSetInt(_elm_1, 0i32, 1i32);
        OpSetInt(_elm_1, 4i32, 2i32);
      }#4;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1:Elm = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#5 object
        OpSetInt(_elm_1, 0i32, 12i32);
        OpSetInt(_elm_1, 4i32, 13i32);
      }#5;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1:Elm = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#6 object
        OpSetInt(_elm_1, 0i32, 4i32);
        OpSetInt(_elm_1, 4i32, 5i32);
      }#6;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _vec_2;
    }#3:vector<Elm>#[];
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    e:Elm = OpGetVector(v, 8i32, 0i32);
    OpAddInt(OpAddInt(OpGetInt(e, 4i32), OpGetInt(OpGetVector(v, 8i32, 1i32), 0i32)), OpGetInt(OpGetVector(v, 8i32, 2i32), 4i32));
  }#2:integer;
  if OpEqInt(test_value, 20i32) null else OpPanic({#7 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 20");
    __work_1;
  }#7:text);
}#1

byte-code for object_vectors:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Database(size=8, db_tp=12) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[12]
 688[40]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[12]
 691[52]: GetField(v1: reference, fld=4) -> reference type=Unknown type(65535)[65535]
 694[52]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[12]
 697[64]: ConstInt(val=0) -> integer
 702[68]: SetInt(v1: reference, fld=4, val: integer)
 705[52]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 708[64]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 713[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 716[76]: ConstInt(val=1) -> integer
 721[80]: SetInt(v1: reference, fld=0, val: integer)
 724[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 727[76]: ConstInt(val=2) -> integer
 732[80]: SetInt(v1: reference, fld=4, val: integer)
 735[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 738[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 741[88]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 746[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 749[76]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 754[76]: PutRef(var[52], value: reference)
 757[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 760[76]: ConstInt(val=12) -> integer
 765[80]: SetInt(v1: reference, fld=0, val: integer)
 768[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 771[76]: ConstInt(val=13) -> integer
 776[80]: SetInt(v1: reference, fld=4, val: integer)
 779[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 782[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 785[88]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 790[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 793[76]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 798[76]: PutRef(var[52], value: reference)
 801[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 804[76]: ConstInt(val=4) -> integer
 809[80]: SetInt(v1: reference, fld=0, val: integer)
 812[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 815[76]: ConstInt(val=5) -> integer
 820[80]: SetInt(v1: reference, fld=4, val: integer)
 823[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 826[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 829[88]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 834[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 837[76]: FreeStack(value=12, discard=36) type=Pixel[3]:{r:byte[0], g:byte[1], b:byte[2]}[6]
 841[40]: VarVector(var[28]) -> vector#[] type=Unknown type(65535)[65535]
 844[52]: ConstInt(val=2) -> integer
 849[56]: GetVector(r: vector#[], size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 852[52]: ConstInt(val=6) -> integer
 857[56]: SetInt(v1: reference, fld=4, val: integer)
 860[40]: VarVector(var[28]) -> vector#[] type=Unknown type(65535)[65535]
 863[52]: ConstInt(val=0) -> integer
 868[56]: GetVector(r: vector#[], size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 871[52]: VarRef(var[40]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 874[64]: GetInt(v1: reference, fld=4) -> integer
 877[56]: VarVector(var[28]) -> vector#[] type=Unknown type(65535)[65535]
 880[68]: ConstInt(val=1) -> integer
 885[72]: GetVector(r: vector#[], size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 888[68]: GetInt(v1: reference, fld=0) -> integer
 891[60]: AddInt(v1: integer, v2: integer) -> integer
 892[56]: VarVector(var[28]) -> vector#[] type=Unknown type(65535)[65535]
 895[68]: ConstInt(val=2) -> integer
 900[72]: GetVector(r: vector#[], size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[11]
 903[68]: GetInt(v1: reference, fld=4) -> integer
 906[60]: AddInt(v1: integer, v2: integer) -> integer
 907[56]: FreeStack(value=4, discard=24) type=integer[4]:Base[0]
 911[32]: VarInt(var[28]) -> integer
 914[36]: ConstInt(val=20) -> integer
 919[40]: EqInt(v1: integer, v2: integer) -> boolean
 920[33]: GotoFalseWord(jump=926, if_false: boolean)
 923[32]: GotoWord(jump=976)
 926[32]: ClearText(var[4])
 929[32]: ConstText(_value="Test failed ") -> text
 943[48]: AppendText(var[4], v1: text)
 946[32]: VarInt(var[28]) -> integer
 949[36]: ConstInt(val=0) -> integer
 954[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 961[32]: ConstText(_value=" != 20") -> text
 969[48]: AppendText(var[4], v1: text)
 972[32]: VarText(var[4]) -> text
 975[48]: Panic(message: text)
 976[32]: Return(ret=0, value=0, discard=32)

Execute test:
  682:[8] Text()
  683:[32] Database(size=8, db_tp=12) -> ref(1,1,0)={}[32]
  688:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
  691:[56] GetField(v1=ref(1,1,0)[44], fld=4) -> ref(1,1,4)[44]
  694:[56] VarRef(var[32]) -> ref(1,1,0)={}[56]
  697:[68] ConstInt(val=0) -> 0[68]
  702:[72] SetInt(v1=ref(1,1,0)[56], fld=4, val=0[68])
  705:[56] VarVector(var[44]) -> ref(1,1,4)[56]
  708:[68] NewRecord(data=ref(1,1,4)[56], parent_tp=13, fld=65535) -> ref(1,9,8)[56]
  713:[68] VarRef(var[56]) -> ref(1,9,8)={}[68]
  716:[80] ConstInt(val=1) -> 1[80]
  721:[84] SetInt(v1=ref(1,9,8)[68], fld=0, val=1[80])
  724:[68] VarRef(var[56]) -> ref(1,9,8)={a:1}[68]
  727:[80] ConstInt(val=2) -> 2[80]
  732:[84] SetInt(v1=ref(1,9,8)[68], fld=4, val=2[80])
  735:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  738:[80] VarRef(var[56]) -> ref(1,9,8)={a:1,b:2}[80]
  741:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,8)[80], parent_tp=13, fld=65535)
  746:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  749:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=13, fld=65535) -> ref(1,9,16)[68]
  754:[80] PutRef(var[56], value=ref(1,9,16)[68])
  757:[68] VarRef(var[56]) -> ref(1,9,16)={}[68]
  760:[80] ConstInt(val=12) -> 12[80]
  765:[84] SetInt(v1=ref(1,9,16)[68], fld=0, val=12[80])
  768:[68] VarRef(var[56]) -> ref(1,9,16)={a:12}[68]
  771:[80] ConstInt(val=13) -> 13[80]
  776:[84] SetInt(v1=ref(1,9,16)[68], fld=4, val=13[80])
  779:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  782:[80] VarRef(var[56]) -> ref(1,9,16)={a:12,b:13}[80]
  785:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,16)[80], parent_tp=13, fld=65535)
  790:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  793:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=13, fld=65535) -> ref(1,9,24)[68]
  798:[80] PutRef(var[56], value=ref(1,9,24)[68])
  801:[68] VarRef(var[56]) -> ref(1,9,24)={}[68]
  804:[80] ConstInt(val=4) -> 4[80]
  809:[84] SetInt(v1=ref(1,9,24)[68], fld=0, val=4[80])
  812:[68] VarRef(var[56]) -> ref(1,9,24)={a:4}[68]
  815:[80] ConstInt(val=5) -> 5[80]
  820:[84] SetInt(v1=ref(1,9,24)[68], fld=4, val=5[80])
  823:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  826:[80] VarRef(var[56]) -> ref(1,9,24)={a:4,b:5}[80]
  829:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,24)[80], parent_tp=13, fld=65535)
  834:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  837:[80] FreeStack(value=12, discard=36)
  841:[44] VarVector(var[32]) -> ref(1,1,4)[44]
  844:[56] ConstInt(val=2) -> 2[56]
  849:[60] GetVector(r=ref(1,1,4)=true[44], size=8, index=2[56]) -> ref(1,9,24)={a:4,b:5}[44]
  852:[56] ConstInt(val=6) -> 6[56]
  857:[60] SetInt(v1=ref(1,9,24)[44], fld=4, val=6[56])
  860:[44] VarVector(var[32]) -> ref(1,1,4)[44]
  863:[56] ConstInt(val=0) -> 0[56]
  868:[60] GetVector(r=ref(1,1,4)=true[44], size=8, index=0[56]) -> ref(1,9,8)={a:1,b:2}[44]
  871:[56] VarRef(var[44]) -> ref(1,9,8)={a:1,b:2}[56]
  874:[68] GetInt(v1=ref(1,9,8)[56], fld=4) -> 2[56]
  877:[60] VarVector(var[32]) -> ref(1,1,4)[60]
  880:[72] ConstInt(val=1) -> 1[72]
  885:[76] GetVector(r=ref(1,1,4)=true[60], size=8, index=1[72]) -> ref(1,9,16)={a:12,b:13}[60]
  888:[72] GetInt(v1=ref(1,9,16)[60], fld=0) -> 12[60]
  891:[64] AddInt(v1=2[56], v2=12[60]) -> 14[56]
  892:[60] VarVector(var[32]) -> ref(1,1,4)[60]
  895:[72] ConstInt(val=2) -> 2[72]
  900:[76] GetVector(r=ref(1,1,4)=true[60], size=8, index=2[72]) -> ref(1,9,24)={a:4,b:6}[60]
  903:[72] GetInt(v1=ref(1,9,24)[60], fld=4) -> 6[60]
  906:[64] AddInt(v1=14[56], v2=6[60]) -> 20[56]
  907:[60] FreeStack(value=4, discard=24)
  911:[36] VarInt(var[32]) -> 20[36]
  914:[40] ConstInt(val=20) -> 20[40]
  919:[44] EqInt(v1=20[36], v2=20[40]) -> true[36]
  920:[37] GotoFalseWord(jump=926, if_false=true[36])
  923:[36] GotoWord(jump=976)
  976:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
