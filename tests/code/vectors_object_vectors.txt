Test code:
struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[Elm{a:1, b:2}, Elm{a:12, b:13}, Elm{a:4, b:5}]; v[2].b=6; e=v[0]; e.b + v[1].a + v[2].b};
    assert(
        test_value == 20,
        "Test failed {test_value} != 20"
    );
}

Type 13:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 14:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 15:vector<Elm>[4]:Vector(13)

fn test {
  let __work_6 = "";
  let test_value = {
    let v = {
      let db_13 = OpDatabase(8i32, 14i32);
      let vec_12 = OpGetField(db_13, 4i32, 15i32);
      OpSetInt(db_13, 4i32, 0i32);
      let elm_11 = OpNewRecord(vec_12, 15i32, 65535i32);
      OpSetInt(elm_11, 0i32, 1i32);
      OpSetInt(elm_11, 4i32, 2i32);
      OpFinishRecord(vec_12, elm_11, 15i32, 65535i32);
      elm_11 = OpNewRecord(vec_12, 15i32, 65535i32);
      OpSetInt(elm_11, 0i32, 12i32);
      OpSetInt(elm_11, 4i32, 13i32);
      OpFinishRecord(vec_12, elm_11, 15i32, 65535i32);
      elm_11 = OpNewRecord(vec_12, 15i32, 65535i32);
      OpSetInt(elm_11, 0i32, 4i32);
      OpSetInt(elm_11, 4i32, 5i32);
      OpFinishRecord(vec_12, elm_11, 15i32, 65535i32);
      vec_12;
    };
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    let e = OpGetVector(v, 8i32, 0i32);
    OpAddInt(OpAddInt(OpGetInt(e, 4i32), OpGetInt(OpGetVector(v, 8i32, 1i32), 0i32)), OpGetInt(OpGetVector(v, 8i32, 2i32), 4i32));
  };
  if OpEqInt(test_value, 20i32) {null} else {OpGenPanic({
    OpClearText(__work_6);
    OpAppendText(__work_6, "Test failed ");
    OpFormatInt(__work_6, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_6, " != 20");
    __work_6;
  })};
}

byte-code for object_vectors:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: Database(size=8, db_tp=14) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 679[40]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 682[52]: GetField(v1: reference, fld=4) -> reference type=vector<Elm>[4]:Vector(13)[15]
 685[52]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 688[64]: ConstInt(val=0) -> integer
 693[68]: SetInt(v1: reference, fld=4, val: integer)
 696[52]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 699[64]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 704[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 707[76]: ConstInt(val=1) -> integer
 712[80]: SetInt(v1: reference, fld=0, val: integer)
 715[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 718[76]: ConstInt(val=2) -> integer
 723[80]: SetInt(v1: reference, fld=4, val: integer)
 726[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 729[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 732[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 737[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 740[76]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 745[76]: PutRef(var[52], value: reference)
 748[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 751[76]: ConstInt(val=12) -> integer
 756[80]: SetInt(v1: reference, fld=0, val: integer)
 759[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 762[76]: ConstInt(val=13) -> integer
 767[80]: SetInt(v1: reference, fld=4, val: integer)
 770[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 773[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 776[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 781[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 784[76]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 789[76]: PutRef(var[52], value: reference)
 792[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 795[76]: ConstInt(val=4) -> integer
 800[80]: SetInt(v1: reference, fld=0, val: integer)
 803[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 806[76]: ConstInt(val=5) -> integer
 811[80]: SetInt(v1: reference, fld=4, val: integer)
 814[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 817[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 820[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 825[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 828[76]: GenFreeStack(value=12, discard=36)
 832[40]: VarVector(var[28]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 835[52]: ConstInt(val=2) -> integer
 840[56]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 843[52]: ConstInt(val=6) -> integer
 848[56]: SetInt(v1: reference, fld=4, val: integer)
 851[40]: VarVector(var[28]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 854[52]: ConstInt(val=0) -> integer
 859[56]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 862[52]: VarRef(var[40]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 865[64]: GetInt(v1: reference, fld=4) -> integer
 868[56]: VarVector(var[28]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 871[68]: ConstInt(val=1) -> integer
 876[72]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 879[68]: GetInt(v1: reference, fld=0) -> integer
 882[60]: AddInt(v1: integer, v2: integer) -> integer
 883[56]: VarVector(var[28]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 886[68]: ConstInt(val=2) -> integer
 891[72]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 894[68]: GetInt(v1: reference, fld=4) -> integer
 897[60]: AddInt(v1: integer, v2: integer) -> integer
 898[56]: GenFreeStack(value=4, discard=24)
 902[32]: VarInt(var[28]) -> integer
 905[36]: ConstInt(val=20) -> integer
 910[40]: EqInt(v1: integer, v2: integer) -> boolean
 911[33]: GenGotoFalseWord(jump=917, if_false: boolean)
 914[32]: GenGotoWord(jump=967)
 917[32]: ClearText(var[4])
 920[32]: ConstText(_value="Test failed ") -> text(false)
 934[48]: AppendText(var[4], v1: text(false))
 937[32]: VarInt(var[28]) -> integer
 940[36]: ConstInt(val=0) -> integer
 945[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 952[32]: ConstText(_value=" != 20") -> text(false)
 960[48]: AppendText(var[4], v1: text(false))
 963[32]: VarText(var[4]) -> text(false)
 966[48]: GenPanic(message: text(false))
 967[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] Database(size=8, db_tp=14) -> ref(1,1,0)={}[32]
  679:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
  682:[56] GetField(v1=ref(1,1,0)[44], fld=4) -> ref(1,1,4)=[][44]
  685:[56] VarRef(var[32]) -> ref(1,1,0)={}[56]
  688:[68] ConstInt(val=0) -> 0[68]
  693:[72] SetInt(v1=ref(1,1,0)[56], fld=4, val=0[68])
  696:[56] VarVector(var[44]) -> ref(1,1,4)=[][56]
  699:[68] NewRecord(data=ref(1,1,4)[56], parent_tp=15, fld=65535) -> ref(1,9,8)[56]
  704:[68] VarRef(var[56]) -> ref(1,9,8)={}[68]
  707:[80] ConstInt(val=1) -> 1[80]
  712:[84] SetInt(v1=ref(1,9,8)[68], fld=0, val=1[80])
  715:[68] VarRef(var[56]) -> ref(1,9,8)={a:1}[68]
  718:[80] ConstInt(val=2) -> 2[80]
  723:[84] SetInt(v1=ref(1,9,8)[68], fld=4, val=2[80])
  726:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2}][68]
  729:[80] VarRef(var[56]) -> ref(1,9,8)={a:1,b:2}[80]
  732:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,8)[80], parent_tp=15, fld=65535)
  737:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2}][68]
  740:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=15, fld=65535) -> ref(1,9,16)[68]
  745:[80] PutRef(var[56], value=ref(1,9,16)[68])
  748:[68] VarRef(var[56]) -> ref(1,9,16)={}[68]
  751:[80] ConstInt(val=12) -> 12[80]
  756:[84] SetInt(v1=ref(1,9,16)[68], fld=0, val=12[80])
  759:[68] VarRef(var[56]) -> ref(1,9,16)={a:12}[68]
  762:[80] ConstInt(val=13) -> 13[80]
  767:[84] SetInt(v1=ref(1,9,16)[68], fld=4, val=13[80])
  770:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][68]
  773:[80] VarRef(var[56]) -> ref(1,9,16)={a:12,b:13}[80]
  776:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,16)[80], parent_tp=15, fld=65535)
  781:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][68]
  784:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=15, fld=65535) -> ref(1,9,24)[68]
  789:[80] PutRef(var[56], value=ref(1,9,24)[68])
  792:[68] VarRef(var[56]) -> ref(1,9,24)={}[68]
  795:[80] ConstInt(val=4) -> 4[80]
  800:[84] SetInt(v1=ref(1,9,24)[68], fld=0, val=4[80])
  803:[68] VarRef(var[56]) -> ref(1,9,24)={a:4}[68]
  806:[80] ConstInt(val=5) -> 5[80]
  811:[84] SetInt(v1=ref(1,9,24)[68], fld=4, val=5[80])
  814:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][68]
  817:[80] VarRef(var[56]) -> ref(1,9,24)={a:4,b:5}[80]
  820:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,24)[80], parent_tp=15, fld=65535)
  825:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][68]
  828:[80] GenFreeStack(value=12, discard=36)
  832:[44] VarVector(var[32]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][44]
  835:[56] ConstInt(val=2) -> 2[56]
  840:[60] GetVector(r=ref(1,1,4)=true[44], size=8, index=2[56]) -> ref(1,9,24)={a:4,b:5}[44]
  843:[56] ConstInt(val=6) -> 6[56]
  848:[60] SetInt(v1=ref(1,9,24)[44], fld=4, val=6[56])
  851:[44] VarVector(var[32]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][44]
  854:[56] ConstInt(val=0) -> 0[56]
  859:[60] GetVector(r=ref(1,1,4)=true[44], size=8, index=0[56]) -> ref(1,9,8)={a:1,b:2}[44]
  862:[56] VarRef(var[44]) -> ref(1,9,8)={a:1,b:2}[56]
  865:[68] GetInt(v1=ref(1,9,8)[56], fld=4) -> 2[56]
  868:[60] VarVector(var[32]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][60]
  871:[72] ConstInt(val=1) -> 1[72]
  876:[76] GetVector(r=ref(1,1,4)=true[60], size=8, index=1[72]) -> ref(1,9,16)={a:12,b:13}[60]
  879:[72] GetInt(v1=ref(1,9,16)[60], fld=0) -> 12[60]
  882:[64] AddInt(v1=2[56], v2=12[60]) -> 14[56]
  883:[60] VarVector(var[32]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][60]
  886:[72] ConstInt(val=2) -> 2[72]
  891:[76] GetVector(r=ref(1,1,4)=true[60], size=8, index=2[72]) -> ref(1,9,24)={a:4,b:6}[60]
  894:[72] GetInt(v1=ref(1,9,24)[60], fld=4) -> 6[60]
  897:[64] AddInt(v1=14[56], v2=6[60]) -> 20[56]
  898:[60] GenFreeStack(value=4, discard=24)
  902:[36] VarInt(var[32]) -> 20[36]
  905:[40] ConstInt(val=20) -> 20[40]
  910:[44] EqInt(v1=20[36], v2=20[40]) -> true[36]
  911:[37] GenGotoFalseWord(jump=917, if_false=true[36])
  914:[36] GenGotoWord(jump=967)
  967:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
