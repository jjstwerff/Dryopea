Test code:
struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[Elm{a:1, b:2}, Elm{a:12, b:13}, Elm{a:4, b:5}]; v[2].b=6; e=v[0]; e.b + v[1].a + v[2].b};
    assert(
        test_value == 20,
        "Test failed {test_value} != 20"
    );
}

Type 13:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 14:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 15:vector<Elm>[4]:Vector(13)

fn test {
  let test_value = {
    let v = {
      let db_14 = OpDatabase(8i32, 14i32);
      let vec_13 = OpGetField(db_14, 4i32, 15i32);
      OpSetInt(db_14, 4i32, 0i32);
      let elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 1i32);
      OpSetInt(elm_12, 4i32, 2i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 12i32);
      OpSetInt(elm_12, 4i32, 13i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 4i32);
      OpSetInt(elm_12, 4i32, 5i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      vec_13;
    };
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    let e = OpGetVector(v, 8i32, 0i32);
    OpAddInt(OpAddInt(OpGetInt(e, 4i32), OpGetInt(OpGetVector(v, 8i32, 1i32), 0i32)), OpGetInt(OpGetVector(v, 8i32, 2i32), 4i32));
  };
  if OpEqInt(test_value, 20i32) {null} else {OpGenPanic({
    let append_15 = "Test failed ";
    OpFormatInt(append_15, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_15, " != 20");
    append_15;
  })};
}

byte-code for object_vectors:test()
 668[0]: return-address
 668[4]: Database(size=8, db_tp=14) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 673[16]: VarRef(var[4]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 676[28]: GetField(v1: reference, fld=4) -> reference type=vector<Elm>[4]:Vector(13)[15]
 679[28]: VarRef(var[4]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 682[40]: ConstInt(val=0) -> integer
 687[44]: SetInt(v1: reference, fld=4, val: integer)
 690[28]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 693[40]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 698[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 701[52]: ConstInt(val=1) -> integer
 706[56]: SetInt(v1: reference, fld=0, val: integer)
 709[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 712[52]: ConstInt(val=2) -> integer
 717[56]: SetInt(v1: reference, fld=4, val: integer)
 720[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 723[52]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 726[64]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 731[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 734[52]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 739[52]: PutRef(var[28], value: reference)
 742[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 745[52]: ConstInt(val=12) -> integer
 750[56]: SetInt(v1: reference, fld=0, val: integer)
 753[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 756[52]: ConstInt(val=13) -> integer
 761[56]: SetInt(v1: reference, fld=4, val: integer)
 764[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 767[52]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 770[64]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 775[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 778[52]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 783[52]: PutRef(var[28], value: reference)
 786[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 789[52]: ConstInt(val=4) -> integer
 794[56]: SetInt(v1: reference, fld=0, val: integer)
 797[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 800[52]: ConstInt(val=5) -> integer
 805[56]: SetInt(v1: reference, fld=4, val: integer)
 808[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 811[52]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 814[64]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 819[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 822[52]: GenFreeStack(value=12, discard=36)
 826[16]: VarVector(var[4]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 829[28]: ConstInt(val=2) -> integer
 834[32]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 837[28]: ConstInt(val=6) -> integer
 842[32]: SetInt(v1: reference, fld=4, val: integer)
 845[16]: VarVector(var[4]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 848[28]: ConstInt(val=0) -> integer
 853[32]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 856[28]: VarRef(var[16]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 859[40]: GetInt(v1: reference, fld=4) -> integer
 862[32]: VarVector(var[4]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 865[44]: ConstInt(val=1) -> integer
 870[48]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 873[44]: GetInt(v1: reference, fld=0) -> integer
 876[36]: AddInt(v1: integer, v2: integer) -> integer
 877[32]: VarVector(var[4]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 880[44]: ConstInt(val=2) -> integer
 885[48]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 888[44]: GetInt(v1: reference, fld=4) -> integer
 891[36]: AddInt(v1: integer, v2: integer) -> integer
 892[32]: GenFreeStack(value=4, discard=24)
 896[8]: VarInt(var[4]) -> integer
 899[12]: ConstInt(val=20) -> integer
 904[16]: EqInt(v1: integer, v2: integer) -> boolean
 905[9]: GenGotoFalseWord(jump=911, if_false: boolean)
 908[8]: GenGotoWord(jump=963)
 911[8]: Text()
 912[32]: ConstText(_value="Test failed ") -> text
 926[48]: AppendText(var[8], v1: text)
 929[32]: VarInt(var[4]) -> integer
 932[36]: ConstInt(val=0) -> integer
 937[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 944[32]: ConstText(_value=" != 20") -> text
 952[48]: AppendText(var[8], v1: text)
 955[32]: VarText(var[8]) -> text
 958[48]: GenFreeStack(value=16, discard=24)
 962[24]: GenPanic(message: text)
 963[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] Database(size=8, db_tp=14) -> ref(1,1,0)={}[4]
  673:[16] VarRef(var[4]) -> ref(1,1,0)={}[16]
  676:[28] GetField(v1=ref(1,1,0)[16], fld=4) -> ref(1,1,4)=[][16]
  679:[28] VarRef(var[4]) -> ref(1,1,0)={}[28]
  682:[40] ConstInt(val=0) -> 0[40]
  687:[44] SetInt(v1=ref(1,1,0)[28], fld=4, val=0[40])
  690:[28] VarVector(var[16]) -> ref(1,1,4)=[][28]
  693:[40] NewRecord(data=ref(1,1,4)[28], parent_tp=15, fld=65535) -> ref(1,9,8)[28]
  698:[40] VarRef(var[28]) -> ref(1,9,8)={}[40]
  701:[52] ConstInt(val=1) -> 1[52]
  706:[56] SetInt(v1=ref(1,9,8)[40], fld=0, val=1[52])
  709:[40] VarRef(var[28]) -> ref(1,9,8)={a:1}[40]
  712:[52] ConstInt(val=2) -> 2[52]
  717:[56] SetInt(v1=ref(1,9,8)[40], fld=4, val=2[52])
  720:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2}][40]
  723:[52] VarRef(var[28]) -> ref(1,9,8)={a:1,b:2}[52]
  726:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,9,8)[52], parent_tp=15, fld=65535)
  731:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2}][40]
  734:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=15, fld=65535) -> ref(1,9,16)[40]
  739:[52] PutRef(var[28], value=ref(1,9,16)[40])
  742:[40] VarRef(var[28]) -> ref(1,9,16)={}[40]
  745:[52] ConstInt(val=12) -> 12[52]
  750:[56] SetInt(v1=ref(1,9,16)[40], fld=0, val=12[52])
  753:[40] VarRef(var[28]) -> ref(1,9,16)={a:12}[40]
  756:[52] ConstInt(val=13) -> 13[52]
  761:[56] SetInt(v1=ref(1,9,16)[40], fld=4, val=13[52])
  764:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][40]
  767:[52] VarRef(var[28]) -> ref(1,9,16)={a:12,b:13}[52]
  770:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,9,16)[52], parent_tp=15, fld=65535)
  775:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][40]
  778:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=15, fld=65535) -> ref(1,9,24)[40]
  783:[52] PutRef(var[28], value=ref(1,9,24)[40])
  786:[40] VarRef(var[28]) -> ref(1,9,24)={}[40]
  789:[52] ConstInt(val=4) -> 4[52]
  794:[56] SetInt(v1=ref(1,9,24)[40], fld=0, val=4[52])
  797:[40] VarRef(var[28]) -> ref(1,9,24)={a:4}[40]
  800:[52] ConstInt(val=5) -> 5[52]
  805:[56] SetInt(v1=ref(1,9,24)[40], fld=4, val=5[52])
  808:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][40]
  811:[52] VarRef(var[28]) -> ref(1,9,24)={a:4,b:5}[52]
  814:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,9,24)[52], parent_tp=15, fld=65535)
  819:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][40]
  822:[52] GenFreeStack(value=12, discard=36)
  826:[16] VarVector(var[4]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][16]
  829:[28] ConstInt(val=2) -> 2[28]
  834:[32] GetVector(r=ref(1,1,4)=true[16], size=8, index=2[28]) -> ref(1,9,24)={a:4,b:5}[16]
  837:[28] ConstInt(val=6) -> 6[28]
  842:[32] SetInt(v1=ref(1,9,24)[16], fld=4, val=6[28])
  845:[16] VarVector(var[4]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][16]
  848:[28] ConstInt(val=0) -> 0[28]
  853:[32] GetVector(r=ref(1,1,4)=true[16], size=8, index=0[28]) -> ref(1,9,8)={a:1,b:2}[16]
  856:[28] VarRef(var[16]) -> ref(1,9,8)={a:1,b:2}[28]
  859:[40] GetInt(v1=ref(1,9,8)[28], fld=4) -> 2[28]
  862:[32] VarVector(var[4]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][32]
  865:[44] ConstInt(val=1) -> 1[44]
  870:[48] GetVector(r=ref(1,1,4)=true[32], size=8, index=1[44]) -> ref(1,9,16)={a:12,b:13}[32]
  873:[44] GetInt(v1=ref(1,9,16)[32], fld=0) -> 12[32]
  876:[36] AddInt(v1=2[28], v2=12[32]) -> 14[28]
  877:[32] VarVector(var[4]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][32]
  880:[44] ConstInt(val=2) -> 2[44]
  885:[48] GetVector(r=ref(1,1,4)=true[32], size=8, index=2[44]) -> ref(1,9,24)={a:4,b:6}[32]
  888:[44] GetInt(v1=ref(1,9,24)[32], fld=4) -> 6[32]
  891:[36] AddInt(v1=14[28], v2=6[32]) -> 20[28]
  892:[32] GenFreeStack(value=4, discard=24)
  896:[8] VarInt(var[4]) -> 20[8]
  899:[12] ConstInt(val=20) -> 20[12]
  904:[16] EqInt(v1=20[8], v2=20[12]) -> true[8]
  905:[9] GenGotoFalseWord(jump=911, if_false=true[8])
  908:[8] GenGotoWord(jump=963)
  963:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
