struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[Elm{a:1, b:2}, Elm{a:12, b:13}, Elm{a:4, b:5}]; v[2].b=6; e=v[0]; e.b + v[1].a + v[2].b};
    assert(
        test_value == 20,
        "Test failed {test_value} != 20"
    );
}
Type 12:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 13:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 14:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __ref_1:ref(main_vector<Elm>) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    v:vector<ref(Elm)["_elm_2"]>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 13i32);
      _vec_1:vector<ref(Elm)["_elm_2"]>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(Elm)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      {#4 object
        OpSetInt(_elm_2, 0i32, 1i32);
        OpSetInt(_elm_2, 4i32, 2i32);
      }#4;
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(Elm)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      {#5 object
        OpSetInt(_elm_2, 0i32, 12i32);
        OpSetInt(_elm_2, 4i32, 13i32);
      }#5;
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(Elm)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      {#6 object
        OpSetInt(_elm_2, 0i32, 4i32);
        OpSetInt(_elm_2, 4i32, 5i32);
      }#6;
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _vec_1;
    }#3:vector<ref(Elm)["_elm_2"]>["__ref_1"];
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    e:ref(Elm)["v"] = OpGetVector(v, 8i32, 0i32);
    OpAddInt(OpAddInt(OpGetInt(e, 4i32), OpGetInt(OpGetVector(v, 8i32, 1i32), 0i32)), OpGetInt(OpGetVector(v, 8i32, 2i32), 4i32));
  }#2:integer;
  if OpEqInt(test_value, 20i32) null else OpPanic({#7 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 20");
    __work_1;
  }#7:text);
}#1

byte-code for object_vectors:test()
 645[0]: return-address
 645[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<Elm>) in 1
 646[16]: Text() var=__work_1[16]:text in 1
 647[40]: Database(var[4], db_tp=13) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[13] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 652[40]: VarRef(var[4]) -> ref(reference) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[13] var=__ref_1[4]:ref(main_vector<Elm>) in 1
 655[52]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
 658[52]: VarRef(var[4]) -> ref(reference) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[13] var=__ref_1[4]:ref(main_vector<Elm>) in 1
 661[64]: ConstInt(val=0) -> integer
 666[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 669[52]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 672[64]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 677[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 680[76]: ConstInt(val=1) -> integer
 685[80]: SetInt(v1: ref(reference), fld=0, val: integer)
 688[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 691[76]: ConstInt(val=2) -> integer
 696[80]: SetInt(v1: ref(reference), fld=4, val: integer)
 699[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 702[76]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 705[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 710[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 713[76]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 718[76]: PutRef(var[52], value: ref(reference))
 721[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 724[76]: ConstInt(val=12) -> integer
 729[80]: SetInt(v1: ref(reference), fld=0, val: integer)
 732[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 735[76]: ConstInt(val=13) -> integer
 740[80]: SetInt(v1: ref(reference), fld=4, val: integer)
 743[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 746[76]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 749[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 754[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 757[76]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 762[76]: PutRef(var[52], value: ref(reference))
 765[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 768[76]: ConstInt(val=4) -> integer
 773[80]: SetInt(v1: ref(reference), fld=0, val: integer)
 776[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 779[76]: ConstInt(val=5) -> integer
 784[80]: SetInt(v1: ref(reference), fld=4, val: integer)
 787[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 790[76]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 793[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 798[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 801[76]: FreeStack(value=12, discard=36) type=Variable[12]:{name:text[4], value:text[8]}[6]
 805[52]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 808[64]: ConstInt(val=2) -> integer
 813[68]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 816[64]: ConstInt(val=6) -> integer
 821[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 824[52]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 827[64]: ConstInt(val=0) -> integer
 832[68]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 835[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12] var=e[52]:ref(Elm)["v"] in 2
 838[76]: GetInt(v1: ref(reference), fld=4) -> integer
 841[68]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 844[80]: ConstInt(val=1) -> integer
 849[84]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 852[80]: GetInt(v1: ref(reference), fld=0) -> integer
 855[72]: AddInt(v1: integer, v2: integer) -> integer
 856[68]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(12)[14] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 859[80]: ConstInt(val=2) -> integer
 864[84]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 867[80]: GetInt(v1: ref(reference), fld=4) -> integer
 870[72]: AddInt(v1: integer, v2: integer) -> integer
 871[68]: FreeStack(value=4, discard=28) type=integer[4]:Base[0]
 875[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 878[48]: ConstInt(val=20) -> integer
 883[52]: EqInt(v1: integer, v2: integer) -> boolean
 884[45]: GotoFalseWord(jump=890, if_false: boolean)
 887[44]: GotoWord(jump=940)
 890[44]: ClearText(var[16]) var=__work_1[16]:text in 1
 893[44]: ConstText(_value="Test failed ") -> text
 907[60]: AppendText(var[16], v1: text)
 910[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 913[48]: ConstInt(val=0) -> integer
 918[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 925[44]: ConstText(_value=" != 20") -> text
 933[60]: AppendText(var[16], v1: text)
 936[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 939[60]: Panic(message: text)
 940[44]: VarRef(var[4]) -> ref(reference) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[13] var=__ref_1[4]:ref(main_vector<Elm>) in 1
 943[56]: FreeRef(v1: ref(reference))
 944[44]: FreeText(var[16])
 947[44]: Return(ret=0, value=0, discard=44)

Execute test:
  645:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  646:[20] Text()
  647:[44] Database(var[8], db_tp=13)
  652:[44] VarRef(var[8]) -> ref(1,1,0)={}[44]
  655:[56] GetField(v1=ref(1,1,0)[44], fld=4) -> ref(1,1,4)[44]
  658:[56] VarRef(var[8]) -> ref(1,1,0)={}[56]
  661:[68] ConstInt(val=0) -> 0[68]
  666:[72] SetInt(v1=ref(1,1,0)[56], fld=4, val=0[68])
  669:[56] VarVector(var[44]) -> ref(1,1,4)=[][56]
  672:[68] NewRecord(data=ref(1,1,4)[56], parent_tp=14, fld=65535) -> ref(1,9,8)[56]
  677:[68] VarRef(var[56]) -> ref(1,9,8)={}[68]
  680:[80] ConstInt(val=1) -> 1[80]
  685:[84] SetInt(v1=ref(1,9,8)[68], fld=0, val=1[80])
  688:[68] VarRef(var[56]) -> ref(1,9,8)={a:1}[68]
  691:[80] ConstInt(val=2) -> 2[80]
  696:[84] SetInt(v1=ref(1,9,8)[68], fld=4, val=2[80])
  699:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2}][68]
  702:[80] VarRef(var[56]) -> ref(1,9,8)={a:1,b:2}[80]
  705:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,8)[80], parent_tp=14, fld=65535)
  710:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2}][68]
  713:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=14, fld=65535) -> ref(1,9,16)[68]
  718:[80] PutRef(var[56], value=ref(1,9,16)[68])
  721:[68] VarRef(var[56]) -> ref(1,9,16)={}[68]
  724:[80] ConstInt(val=12) -> 12[80]
  729:[84] SetInt(v1=ref(1,9,16)[68], fld=0, val=12[80])
  732:[68] VarRef(var[56]) -> ref(1,9,16)={a:12}[68]
  735:[80] ConstInt(val=13) -> 13[80]
  740:[84] SetInt(v1=ref(1,9,16)[68], fld=4, val=13[80])
  743:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][68]
  746:[80] VarRef(var[56]) -> ref(1,9,16)={a:12,b:13}[80]
  749:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,16)[80], parent_tp=14, fld=65535)
  754:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][68]
  757:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=14, fld=65535) -> ref(1,9,24)[68]
  762:[80] PutRef(var[56], value=ref(1,9,24)[68])
  765:[68] VarRef(var[56]) -> ref(1,9,24)={}[68]
  768:[80] ConstInt(val=4) -> 4[80]
  773:[84] SetInt(v1=ref(1,9,24)[68], fld=0, val=4[80])
  776:[68] VarRef(var[56]) -> ref(1,9,24)={a:4}[68]
  779:[80] ConstInt(val=5) -> 5[80]
  784:[84] SetInt(v1=ref(1,9,24)[68], fld=4, val=5[80])
  787:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][68]
  790:[80] VarRef(var[56]) -> ref(1,9,24)={a:4,b:5}[80]
  793:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,24)[80], parent_tp=14, fld=65535)
  798:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][68]
  801:[80] FreeStack(value=12, discard=36)
  805:[56] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][56]
  808:[68] ConstInt(val=2) -> 2[68]
  813:[72] GetVector(r=ref(1,1,4)=true[56], size=8, index=2[68]) -> ref(1,9,24)={a:4,b:5}[56]
  816:[68] ConstInt(val=6) -> 6[68]
  821:[72] SetInt(v1=ref(1,9,24)[56], fld=4, val=6[68])
  824:[56] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][56]
  827:[68] ConstInt(val=0) -> 0[68]
  832:[72] GetVector(r=ref(1,1,4)=true[56], size=8, index=0[68]) -> ref(1,9,8)={a:1,b:2}[56]
  835:[68] VarRef(var[56]) -> ref(1,9,8)={a:1,b:2}[68]
  838:[80] GetInt(v1=ref(1,9,8)[68], fld=4) -> 2[68]
  841:[72] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][72]
  844:[84] ConstInt(val=1) -> 1[84]
  849:[88] GetVector(r=ref(1,1,4)=true[72], size=8, index=1[84]) -> ref(1,9,16)={a:12,b:13}[72]
  852:[84] GetInt(v1=ref(1,9,16)[72], fld=0) -> 12[72]
  855:[76] AddInt(v1=2[68], v2=12[72]) -> 14[68]
  856:[72] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][72]
  859:[84] ConstInt(val=2) -> 2[84]
  864:[88] GetVector(r=ref(1,1,4)=true[72], size=8, index=2[84]) -> ref(1,9,24)={a:4,b:6}[72]
  867:[84] GetInt(v1=ref(1,9,24)[72], fld=4) -> 6[72]
  870:[76] AddInt(v1=14[68], v2=6[72]) -> 20[68]
  871:[72] FreeStack(value=4, discard=28)
  875:[48] VarInt(var[44]) -> 20[48]
  878:[52] ConstInt(val=20) -> 20[52]
  883:[56] EqInt(v1=20[48], v2=20[52]) -> true[48]
  884:[49] GotoFalseWord(jump=890, if_false=true[48])
  887:[48] GotoWord(jump=940)
  940:[48] VarRef(var[8]) -> ref(1,1,0)={vector:[{a:1,b:2},{a:12,b:13},{a:4,b:6}]}[48]
  943:[60] FreeRef(v1=ref(1,1,0)[48])
  944:[48] FreeText(var[20])
  947:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
