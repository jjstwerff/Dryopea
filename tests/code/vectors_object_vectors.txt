struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[Elm{a:1, b:2}, Elm{a:12, b:13}, Elm{a:4, b:5}]; v[2].b=6; e=v[0]; e.b + v[1].a + v[2].b};
    assert(
        test_value == 20,
        "Test failed {test_value} != 20"
    );
}
Type 14:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 15:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 16:vector<Elm>[4]:Vector(14)

fn test() {#1 block
  __ref_1:ref(main_vector<Elm>) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    v:vector<ref(Elm)["_elm_2"]>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 15i32);
      _vec_1:vector<ref(Elm)["_elm_2"]>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(Elm)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      {#4 object
        OpSetInt(_elm_2, 0i32, 1i32);
        OpSetInt(_elm_2, 4i32, 2i32);
      }#4;
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _elm_2:ref(Elm)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      {#5 object
        OpSetInt(_elm_2, 0i32, 12i32);
        OpSetInt(_elm_2, 4i32, 13i32);
      }#5;
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _elm_2:ref(Elm)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      {#6 object
        OpSetInt(_elm_2, 0i32, 4i32);
        OpSetInt(_elm_2, 4i32, 5i32);
      }#6;
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _vec_1;
    }#3:vector<ref(Elm)["_elm_2"]>["__ref_1"];
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    e:ref(Elm)["v"] = OpGetVector(v, 8i32, 0i32);
    OpAddInt(OpAddInt(OpGetInt(e, 4i32), OpGetInt(OpGetVector(v, 8i32, 1i32), 0i32)), OpGetInt(OpGetVector(v, 8i32, 2i32), 4i32));
  }#2:integer;
  if OpEqInt(test_value, 20i32) null else OpPanic({#7 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 20");
    __work_1;
  }#7:text);
}#1

byte-code for object_vectors:test()
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<Elm>) in 1
   1[16]: Text() var=__work_1[16]:text in 1
   2[40]: Database(var[4], db_tp=15) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[15] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
   7[40]: VarRef(var[4]) -> ref(reference) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[15] var=__ref_1[4]:ref(main_vector<Elm>) in 1
  10[52]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  13[52]: VarRef(var[4]) -> ref(reference) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[15] var=__ref_1[4]:ref(main_vector<Elm>) in 1
  16[64]: ConstInt(val=0) -> integer
  21[68]: SetInt(v1: ref(reference), fld=4, val: integer)
  24[52]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
  27[64]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
  32[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
  35[76]: ConstInt(val=1) -> integer
  40[80]: SetInt(v1: ref(reference), fld=0, val: integer)
  43[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
  46[76]: ConstInt(val=2) -> integer
  51[80]: SetInt(v1: ref(reference), fld=4, val: integer)
  54[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
  57[76]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
  60[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
  65[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
  68[76]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
  73[76]: PutRef(var[52], value: ref(reference))
  76[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
  79[76]: ConstInt(val=12) -> integer
  84[80]: SetInt(v1: ref(reference), fld=0, val: integer)
  87[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
  90[76]: ConstInt(val=13) -> integer
  95[80]: SetInt(v1: ref(reference), fld=4, val: integer)
  98[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 101[76]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 104[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
 109[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 112[76]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
 117[76]: PutRef(var[52], value: ref(reference))
 120[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 123[76]: ConstInt(val=4) -> integer
 128[80]: SetInt(v1: ref(reference), fld=0, val: integer)
 131[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 134[76]: ConstInt(val=5) -> integer
 139[80]: SetInt(v1: ref(reference), fld=4, val: integer)
 142[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 145[76]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=_elm_2[52]:ref(Elm)["__ref_1"] in 3
 148[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
 153[64]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=_vec_1[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 3
 156[76]: FreeStack(value=12, discard=36) type=vector<text>[4]:Vector(5)[6]
 160[52]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 163[64]: ConstInt(val=2) -> integer
 168[68]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14]
 171[64]: ConstInt(val=6) -> integer
 176[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 179[52]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 182[64]: ConstInt(val=0) -> integer
 187[68]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14]
 190[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14] var=e[52]:ref(Elm)["v"] in 2
 193[76]: GetInt(v1: ref(reference), fld=4) -> integer
 196[68]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 199[80]: ConstInt(val=1) -> integer
 204[84]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14]
 207[80]: GetInt(v1: ref(reference), fld=0) -> integer
 210[72]: AddInt(v1: integer, v2: integer) -> integer
 211[68]: VarVector(var[40]) -> vector type=vector<Elm>[4]:Vector(14)[16] var=v[40]:vector<ref(Elm)["_elm_2"]>["__ref_1"] in 2
 214[80]: ConstInt(val=2) -> integer
 219[84]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=Elm[8]:{a:integer[0], b:integer[4]}[14]
 222[80]: GetInt(v1: ref(reference), fld=4) -> integer
 225[72]: AddInt(v1: integer, v2: integer) -> integer
 226[68]: FreeStack(value=4, discard=28) type=integer[4]:Base[0]
 230[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 233[48]: ConstInt(val=20) -> integer
 238[52]: EqInt(v1: integer, v2: integer) -> boolean
 239[45]: GotoFalseWord(jump=245, if_false: boolean)
 242[44]: GotoWord(jump=295)
 245[44]: ClearText(var[16]) var=__work_1[16]:text in 1
 248[44]: ConstText(_value="Test failed ") -> text
 262[60]: AppendText(var[16], v1: text)
 265[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 268[48]: ConstInt(val=0) -> integer
 273[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 280[44]: ConstText(_value=" != 20") -> text
 288[60]: AppendText(var[16], v1: text)
 291[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 294[60]: Panic(message: text)
 295[44]: VarRef(var[4]) -> ref(reference) type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[15] var=__ref_1[4]:ref(main_vector<Elm>) in 1
 298[56]: FreeRef(v1: ref(reference))
 299[44]: FreeText(var[16])
 302[44]: Return(ret=0, value=0, discard=44)

