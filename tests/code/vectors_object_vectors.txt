Test code:
struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[Elm{a:1, b:2}, Elm{a:12, b:13}, Elm{a:4, b:5}]; v[2].b=6; e=v[0]; e.b + v[1].a + v[2].b};
    assert(
        test_value == 20,
        "Test failed {test_value} != 20"
    );
}

Type 13:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 14:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 15:vector<Elm>[4]:Vector(13)

fn test {
  let test_value = {
    let v = {
      let db_14 = OpDatabase(8i32, 14i32);
      let vec_13 = OpGetField(db_14, 4i32, 15i32);
      OpSetInt(db_14, 4i32, 0i32);
      let elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 1i32);
      OpSetInt(elm_12, 4i32, 2i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 12i32);
      OpSetInt(elm_12, 4i32, 13i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetInt(elm_12, 0i32, 4i32);
      OpSetInt(elm_12, 4i32, 5i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      vec_13;
    };
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    let e = OpGetVector(v, 8i32, 0i32);
    OpAddInt(OpAddInt(OpGetInt(e, 4i32), OpGetInt(OpGetVector(v, 8i32, 1i32), 0i32)), OpGetInt(OpGetVector(v, 8i32, 2i32), 4i32));
  };
  if OpEqInt(test_value, 20i32) {null} else {OpGenPanic({
    let append_15 = "Test failed ";
    OpFormatInt(append_15, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_15, " != 20");
    append_15;
  })};
}

byte-code for object_vectors:test()
 664[0]: return-address
 664[4]: Database(size=8, db_tp=14) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 669[16]: VarRef(var[4]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 672[28]: GetField(v1: reference, fld=4) -> reference type=vector<Elm>[4]:Vector(13)[15]
 675[28]: VarRef(var[4]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[14]
 678[40]: ConstInt(val=0) -> integer
 683[44]: SetInt(v1: reference, fld=4, val: integer)
 686[28]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 689[40]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 694[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 697[52]: ConstInt(val=1) -> integer
 702[56]: SetInt(v1: reference, fld=0, val: integer)
 705[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 708[52]: ConstInt(val=2) -> integer
 713[56]: SetInt(v1: reference, fld=4, val: integer)
 716[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 719[52]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 722[64]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 727[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 730[52]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 735[52]: PutRef(var[28], value: reference)
 738[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 741[52]: ConstInt(val=12) -> integer
 746[56]: SetInt(v1: reference, fld=0, val: integer)
 749[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 752[52]: ConstInt(val=13) -> integer
 757[56]: SetInt(v1: reference, fld=4, val: integer)
 760[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 763[52]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 766[64]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 771[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 774[52]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 779[52]: PutRef(var[28], value: reference)
 782[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 785[52]: ConstInt(val=4) -> integer
 790[56]: SetInt(v1: reference, fld=0, val: integer)
 793[40]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 796[52]: ConstInt(val=5) -> integer
 801[56]: SetInt(v1: reference, fld=4, val: integer)
 804[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 807[52]: VarRef(var[28]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 810[64]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 815[40]: VarVector(var[16]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 818[52]: GenFreeStack(value=12, discard=36)
 822[16]: VarVector(var[4]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 825[28]: ConstInt(val=2) -> integer
 830[32]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 833[28]: ConstInt(val=6) -> integer
 838[32]: SetInt(v1: reference, fld=4, val: integer)
 841[16]: VarVector(var[4]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 844[28]: ConstInt(val=0) -> integer
 849[32]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 852[28]: VarRef(var[16]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 855[40]: GetInt(v1: reference, fld=4) -> integer
 858[32]: VarVector(var[4]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 861[44]: ConstInt(val=1) -> integer
 866[48]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 869[44]: GetInt(v1: reference, fld=0) -> integer
 872[36]: AddInt(v1: integer, v2: integer) -> integer
 873[32]: VarVector(var[4]) -> vector type=vector<Elm>[4]:Vector(13)[15]
 876[44]: ConstInt(val=2) -> integer
 881[48]: GetVector(r: vector, size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[13]
 884[44]: GetInt(v1: reference, fld=4) -> integer
 887[36]: AddInt(v1: integer, v2: integer) -> integer
 888[32]: GenFreeStack(value=4, discard=24)
 892[8]: VarInt(var[4]) -> integer
 895[12]: ConstInt(val=20) -> integer
 900[16]: EqInt(v1: integer, v2: integer) -> boolean
 901[9]: GenGotoFalseWord(jump=907, if_false: boolean)
 904[8]: GenGotoWord(jump=959)
 907[8]: Text()
 908[32]: ConstText(_value="Test failed ") -> text
 922[48]: AppendText(var[8], v1: text)
 925[32]: VarInt(var[4]) -> integer
 928[36]: ConstInt(val=0) -> integer
 933[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 940[32]: ConstText(_value=" != 20") -> text
 948[48]: AppendText(var[8], v1: text)
 951[32]: VarText(var[8]) -> text
 954[48]: GenFreeStack(value=16, discard=24)
 958[24]: GenPanic(message: text)
 959[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] Database(size=8, db_tp=14) -> ref(1,1,0)={}[4]
  669:[16] VarRef(var[4]) -> ref(1,1,0)={}[16]
  672:[28] GetField(v1=ref(1,1,0)[16], fld=4) -> ref(1,1,4)=[][16]
  675:[28] VarRef(var[4]) -> ref(1,1,0)={}[28]
  678:[40] ConstInt(val=0) -> 0[40]
  683:[44] SetInt(v1=ref(1,1,0)[28], fld=4, val=0[40])
  686:[28] VarVector(var[16]) -> ref(1,1,4)=[][28]
  689:[40] NewRecord(data=ref(1,1,4)[28], parent_tp=15, fld=65535) -> ref(1,9,8)[28]
  694:[40] VarRef(var[28]) -> ref(1,9,8)={}[40]
  697:[52] ConstInt(val=1) -> 1[52]
  702:[56] SetInt(v1=ref(1,9,8)[40], fld=0, val=1[52])
  705:[40] VarRef(var[28]) -> ref(1,9,8)={a:1}[40]
  708:[52] ConstInt(val=2) -> 2[52]
  713:[56] SetInt(v1=ref(1,9,8)[40], fld=4, val=2[52])
  716:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2}][40]
  719:[52] VarRef(var[28]) -> ref(1,9,8)={a:1,b:2}[52]
  722:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,9,8)[52], parent_tp=15, fld=65535)
  727:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2}][40]
  730:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=15, fld=65535) -> ref(1,9,16)[40]
  735:[52] PutRef(var[28], value=ref(1,9,16)[40])
  738:[40] VarRef(var[28]) -> ref(1,9,16)={}[40]
  741:[52] ConstInt(val=12) -> 12[52]
  746:[56] SetInt(v1=ref(1,9,16)[40], fld=0, val=12[52])
  749:[40] VarRef(var[28]) -> ref(1,9,16)={a:12}[40]
  752:[52] ConstInt(val=13) -> 13[52]
  757:[56] SetInt(v1=ref(1,9,16)[40], fld=4, val=13[52])
  760:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][40]
  763:[52] VarRef(var[28]) -> ref(1,9,16)={a:12,b:13}[52]
  766:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,9,16)[52], parent_tp=15, fld=65535)
  771:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][40]
  774:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=15, fld=65535) -> ref(1,9,24)[40]
  779:[52] PutRef(var[28], value=ref(1,9,24)[40])
  782:[40] VarRef(var[28]) -> ref(1,9,24)={}[40]
  785:[52] ConstInt(val=4) -> 4[52]
  790:[56] SetInt(v1=ref(1,9,24)[40], fld=0, val=4[52])
  793:[40] VarRef(var[28]) -> ref(1,9,24)={a:4}[40]
  796:[52] ConstInt(val=5) -> 5[52]
  801:[56] SetInt(v1=ref(1,9,24)[40], fld=4, val=5[52])
  804:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][40]
  807:[52] VarRef(var[28]) -> ref(1,9,24)={a:4,b:5}[52]
  810:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,9,24)[52], parent_tp=15, fld=65535)
  815:[40] VarVector(var[16]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][40]
  818:[52] GenFreeStack(value=12, discard=36)
  822:[16] VarVector(var[4]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][16]
  825:[28] ConstInt(val=2) -> 2[28]
  830:[32] GetVector(r=ref(1,1,4)=true[16], size=8, index=2[28]) -> ref(1,9,24)={a:4,b:5}[16]
  833:[28] ConstInt(val=6) -> 6[28]
  838:[32] SetInt(v1=ref(1,9,24)[16], fld=4, val=6[28])
  841:[16] VarVector(var[4]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][16]
  844:[28] ConstInt(val=0) -> 0[28]
  849:[32] GetVector(r=ref(1,1,4)=true[16], size=8, index=0[28]) -> ref(1,9,8)={a:1,b:2}[16]
  852:[28] VarRef(var[16]) -> ref(1,9,8)={a:1,b:2}[28]
  855:[40] GetInt(v1=ref(1,9,8)[28], fld=4) -> 2[28]
  858:[32] VarVector(var[4]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][32]
  861:[44] ConstInt(val=1) -> 1[44]
  866:[48] GetVector(r=ref(1,1,4)=true[32], size=8, index=1[44]) -> ref(1,9,16)={a:12,b:13}[32]
  869:[44] GetInt(v1=ref(1,9,16)[32], fld=0) -> 12[32]
  872:[36] AddInt(v1=2[28], v2=12[32]) -> 14[28]
  873:[32] VarVector(var[4]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][32]
  876:[44] ConstInt(val=2) -> 2[44]
  881:[48] GetVector(r=ref(1,1,4)=true[32], size=8, index=2[44]) -> ref(1,9,24)={a:4,b:6}[32]
  884:[44] GetInt(v1=ref(1,9,24)[32], fld=4) -> 6[32]
  887:[36] AddInt(v1=14[28], v2=6[32]) -> 20[28]
  888:[32] GenFreeStack(value=4, discard=24)
  892:[8] VarInt(var[4]) -> 20[8]
  895:[12] ConstInt(val=20) -> 20[12]
  900:[16] EqInt(v1=20[8], v2=20[12]) -> true[8]
  901:[9] GenGotoFalseWord(jump=907, if_false=true[8])
  904:[8] GenGotoWord(jump=959)
  959:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
