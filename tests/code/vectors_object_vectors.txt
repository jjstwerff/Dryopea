struct Elm {a:integer, b:integer}

pub fn test() {
    test_value = {v=[Elm{a:1, b:2}, Elm{a:12, b:13}, Elm{a:4, b:5}]; v[2].b=6; e=v[0]; e.b + v[1].a + v[2].b};
    assert(
        test_value == 20,
        "Test failed {test_value} != 20"
    );
}
Type 12:Elm[8]:
    a:integer[0]
    b:integer[4]

Type 13:main_vector<Elm>[8]:
    vector:vector<Elm>[4]

Type 14:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    v:vector<Elm>#[] = {#3 vector
      _db_3:main_vector<Elm> = OpDatabase(8i32, 13i32);
      _vec_2:vector<Elm>#[] = OpGetField(_db_3, 4i32, 65535i32);
      OpSetInt(_db_3, 4i32, 0i32);
      _elm_1:Elm = OpNewRecord(_vec_2, 14i32, 65535i32);
      {#4 object
        OpSetInt(_elm_1, 0i32, 1i32);
        OpSetInt(_elm_1, 4i32, 2i32);
      }#4;
      OpFinishRecord(_vec_2, _elm_1, 14i32, 65535i32);
      _elm_1:Elm = OpNewRecord(_vec_2, 14i32, 65535i32);
      {#5 object
        OpSetInt(_elm_1, 0i32, 12i32);
        OpSetInt(_elm_1, 4i32, 13i32);
      }#5;
      OpFinishRecord(_vec_2, _elm_1, 14i32, 65535i32);
      _elm_1:Elm = OpNewRecord(_vec_2, 14i32, 65535i32);
      {#6 object
        OpSetInt(_elm_1, 0i32, 4i32);
        OpSetInt(_elm_1, 4i32, 5i32);
      }#6;
      OpFinishRecord(_vec_2, _elm_1, 14i32, 65535i32);
      _vec_2;
    }#3:vector<Elm>#[];
    OpSetInt(OpGetVector(v, 8i32, 2i32), 4i32, 6i32);
    e:Elm = OpGetVector(v, 8i32, 0i32);
    OpAddInt(OpAddInt(OpGetInt(e, 4i32), OpGetInt(OpGetVector(v, 8i32, 1i32), 0i32)), OpGetInt(OpGetVector(v, 8i32, 2i32), 4i32));
  }#2:integer;
  if OpEqInt(test_value, 20i32) null else OpPanic({#7 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 20");
    __work_1;
  }#7:text);
}#1

byte-code for object_vectors:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Database(size=8, db_tp=13) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[13]
 698[40]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[13]
 701[52]: GetField(v1: reference, fld=4) -> reference type=Unknown type(65535)[65535]
 704[52]: VarRef(var[28]) -> reference type=main_vector<Elm>[8]:{vector:vector<Elm>[4]}[13]
 707[64]: ConstInt(val=0) -> integer
 712[68]: SetInt(v1: reference, fld=4, val: integer)
 715[52]: VarVector(var[40]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 718[64]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 723[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 726[76]: ConstInt(val=1) -> integer
 731[80]: SetInt(v1: reference, fld=0, val: integer)
 734[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 737[76]: ConstInt(val=2) -> integer
 742[80]: SetInt(v1: reference, fld=4, val: integer)
 745[64]: VarVector(var[40]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 748[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 751[88]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 756[64]: VarVector(var[40]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 759[76]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 764[76]: PutRef(var[52], value: reference)
 767[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 770[76]: ConstInt(val=12) -> integer
 775[80]: SetInt(v1: reference, fld=0, val: integer)
 778[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 781[76]: ConstInt(val=13) -> integer
 786[80]: SetInt(v1: reference, fld=4, val: integer)
 789[64]: VarVector(var[40]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 792[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 795[88]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 800[64]: VarVector(var[40]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 803[76]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 808[76]: PutRef(var[52], value: reference)
 811[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 814[76]: ConstInt(val=4) -> integer
 819[80]: SetInt(v1: reference, fld=0, val: integer)
 822[64]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 825[76]: ConstInt(val=5) -> integer
 830[80]: SetInt(v1: reference, fld=4, val: integer)
 833[64]: VarVector(var[40]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 836[76]: VarRef(var[52]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 839[88]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 844[64]: VarVector(var[40]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 847[76]: FreeStack(value=12, discard=48) type=Variable[12]:{name:text[4], value:text[8]}[6]
 851[40]: VarVector(var[28]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 854[52]: ConstInt(val=2) -> integer
 859[56]: GetVector(r: vector[], size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 862[52]: ConstInt(val=6) -> integer
 867[56]: SetInt(v1: reference, fld=4, val: integer)
 870[40]: VarVector(var[28]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 873[52]: ConstInt(val=0) -> integer
 878[56]: GetVector(r: vector[], size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 881[52]: VarRef(var[40]) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 884[64]: GetInt(v1: reference, fld=4) -> integer
 887[56]: VarVector(var[28]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 890[68]: ConstInt(val=1) -> integer
 895[72]: GetVector(r: vector[], size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 898[68]: GetInt(v1: reference, fld=0) -> integer
 901[60]: AddInt(v1: integer, v2: integer) -> integer
 902[56]: VarVector(var[28]) -> vector[] type=vector<Elm>[4]:Vector(12)[14]
 905[68]: ConstInt(val=2) -> integer
 910[72]: GetVector(r: vector[], size=8, index: integer) -> reference type=Elm[8]:{a:integer[0], b:integer[4]}[12]
 913[68]: GetInt(v1: reference, fld=4) -> integer
 916[60]: AddInt(v1: integer, v2: integer) -> integer
 917[56]: FreeStack(value=4, discard=28) type=integer[4]:Base[0]
 921[32]: VarInt(var[28]) -> integer
 924[36]: ConstInt(val=20) -> integer
 929[40]: EqInt(v1: integer, v2: integer) -> boolean
 930[33]: GotoFalseWord(jump=936, if_false: boolean)
 933[32]: GotoWord(jump=986)
 936[32]: ClearText(var[4])
 939[32]: ConstText(_value="Test failed ") -> text
 953[48]: AppendText(var[4], v1: text)
 956[32]: VarInt(var[28]) -> integer
 959[36]: ConstInt(val=0) -> integer
 964[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 971[32]: ConstText(_value=" != 20") -> text
 979[48]: AppendText(var[4], v1: text)
 982[32]: VarText(var[4]) -> text
 985[48]: Panic(message: text)
 986[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] Database(size=8, db_tp=13) -> ref(1,1,0)={}[32]
  698:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
  701:[56] GetField(v1=ref(1,1,0)[44], fld=4) -> ref(1,1,4)[44]
  704:[56] VarRef(var[32]) -> ref(1,1,0)={}[56]
  707:[68] ConstInt(val=0) -> 0[68]
  712:[72] SetInt(v1=ref(1,1,0)[56], fld=4, val=0[68])
  715:[56] VarVector(var[44]) -> ref(1,1,4)=[][56]
  718:[68] NewRecord(data=ref(1,1,4)[56], parent_tp=14, fld=65535) -> ref(1,9,8)[56]
  723:[68] VarRef(var[56]) -> ref(1,9,8)={}[68]
  726:[80] ConstInt(val=1) -> 1[80]
  731:[84] SetInt(v1=ref(1,9,8)[68], fld=0, val=1[80])
  734:[68] VarRef(var[56]) -> ref(1,9,8)={a:1}[68]
  737:[80] ConstInt(val=2) -> 2[80]
  742:[84] SetInt(v1=ref(1,9,8)[68], fld=4, val=2[80])
  745:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2}][68]
  748:[80] VarRef(var[56]) -> ref(1,9,8)={a:1,b:2}[80]
  751:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,8)[80], parent_tp=14, fld=65535)
  756:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2}][68]
  759:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=14, fld=65535) -> ref(1,9,16)[68]
  764:[80] PutRef(var[56], value=ref(1,9,16)[68])
  767:[68] VarRef(var[56]) -> ref(1,9,16)={}[68]
  770:[80] ConstInt(val=12) -> 12[80]
  775:[84] SetInt(v1=ref(1,9,16)[68], fld=0, val=12[80])
  778:[68] VarRef(var[56]) -> ref(1,9,16)={a:12}[68]
  781:[80] ConstInt(val=13) -> 13[80]
  786:[84] SetInt(v1=ref(1,9,16)[68], fld=4, val=13[80])
  789:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][68]
  792:[80] VarRef(var[56]) -> ref(1,9,16)={a:12,b:13}[80]
  795:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,16)[80], parent_tp=14, fld=65535)
  800:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13}][68]
  803:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=14, fld=65535) -> ref(1,9,24)[68]
  808:[80] PutRef(var[56], value=ref(1,9,24)[68])
  811:[68] VarRef(var[56]) -> ref(1,9,24)={}[68]
  814:[80] ConstInt(val=4) -> 4[80]
  819:[84] SetInt(v1=ref(1,9,24)[68], fld=0, val=4[80])
  822:[68] VarRef(var[56]) -> ref(1,9,24)={a:4}[68]
  825:[80] ConstInt(val=5) -> 5[80]
  830:[84] SetInt(v1=ref(1,9,24)[68], fld=4, val=5[80])
  833:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][68]
  836:[80] VarRef(var[56]) -> ref(1,9,24)={a:4,b:5}[80]
  839:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,24)[80], parent_tp=14, fld=65535)
  844:[68] VarVector(var[44]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][68]
  847:[80] FreeStack(value=12, discard=48)
  851:[44] VarVector(var[32]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:5}][44]
  854:[56] ConstInt(val=2) -> 2[56]
  859:[60] GetVector(r=ref(1,1,4)=true[44], size=8, index=2[56]) -> ref(1,9,24)={a:4,b:5}[44]
  862:[56] ConstInt(val=6) -> 6[56]
  867:[60] SetInt(v1=ref(1,9,24)[44], fld=4, val=6[56])
  870:[44] VarVector(var[32]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][44]
  873:[56] ConstInt(val=0) -> 0[56]
  878:[60] GetVector(r=ref(1,1,4)=true[44], size=8, index=0[56]) -> ref(1,9,8)={a:1,b:2}[44]
  881:[56] VarRef(var[44]) -> ref(1,9,8)={a:1,b:2}[56]
  884:[68] GetInt(v1=ref(1,9,8)[56], fld=4) -> 2[56]
  887:[60] VarVector(var[32]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][60]
  890:[72] ConstInt(val=1) -> 1[72]
  895:[76] GetVector(r=ref(1,1,4)=true[60], size=8, index=1[72]) -> ref(1,9,16)={a:12,b:13}[60]
  898:[72] GetInt(v1=ref(1,9,16)[60], fld=0) -> 12[60]
  901:[64] AddInt(v1=2[56], v2=12[60]) -> 14[56]
  902:[60] VarVector(var[32]) -> ref(1,1,4)=[{a:1,b:2},{a:12,b:13},{a:4,b:6}][60]
  905:[72] ConstInt(val=2) -> 2[72]
  910:[76] GetVector(r=ref(1,1,4)=true[60], size=8, index=2[72]) -> ref(1,9,24)={a:4,b:6}[60]
  913:[72] GetInt(v1=ref(1,9,24)[60], fld=4) -> 6[60]
  916:[64] AddInt(v1=14[56], v2=6[60]) -> 20[56]
  917:[60] FreeStack(value=4, discard=28)
  921:[36] VarInt(var[32]) -> 20[36]
  924:[40] ConstInt(val=20) -> 20[40]
  929:[44] EqInt(v1=20[36], v2=20[40]) -> true[36]
  930:[37] GotoFalseWord(jump=936, if_false=true[36])
  933:[36] GotoWord(jump=986)
  986:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
