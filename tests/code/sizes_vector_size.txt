struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S> };

pub fn test() {
    test_value = {m = Main{};
sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(m) + 100000 * sizeof(vector<S>)};
    assert(
        test_value == 1280812,
        "Test failed {test_value} != 1280812"
    );
}
Type 15:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 16:Main[8]:
    s:vector<S>[4]

Type 17:vector<S>[4]:Vector(15)

fn test() {#1 block
  __ref_1:ref(Main) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    m:ref(Main)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 16i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      __ref_1;
    }#3:ref(Main)["__ref_1"];
    OpAddInt(OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 8i32)), OpMulInt(10000i32, 8i32)), OpMulInt(100000i32, 12i32));
  }#2:integer;
  if OpEqInt(test_value, 1280812i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1280812");
    __work_1;
  }#4:text);
}#1

byte-code for vector_size:test() [1082]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Main) in 1
   1[16]: Text() var=__work_1[16]:text in 1
   2[40]: Database(var[4], db_tp=16) type=Main[8]:{s:vector<S>[4]}[16] var=m[40]:ref(Main)["__ref_1"] in 2
   7[40]: VarRef(var[4]) -> ref(reference) type=Main[8]:{s:vector<S>[4]}[16] var=__ref_1[4]:ref(Main) in 1
  10[52]: ConstInt(val=0) -> integer
  15[56]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[40]: VarRef(var[4]) -> ref(reference) type=Main[8]:{s:vector<S>[4]}[16] var=__ref_1[4]:ref(Main) in 1
  21[52]: ConstInt(val=12) -> integer
  26[56]: ConstInt(val=100) -> integer
  31[60]: ConstInt(val=8) -> integer
  36[64]: MulInt(v1: integer, v2: integer) -> integer
  37[60]: AddInt(v1: integer, v2: integer) -> integer
  38[56]: ConstInt(val=10000) -> integer
  43[60]: ConstInt(val=8) -> integer
  48[64]: MulInt(v1: integer, v2: integer) -> integer
  49[60]: AddInt(v1: integer, v2: integer) -> integer
  50[56]: ConstInt(val=100000) -> integer
  55[60]: ConstInt(val=12) -> integer
  60[64]: MulInt(v1: integer, v2: integer) -> integer
  61[60]: AddInt(v1: integer, v2: integer) -> integer
  62[56]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
  66[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
  69[48]: ConstInt(val=1280812) -> integer
  74[52]: EqInt(v1: integer, v2: integer) -> boolean
  75[45]: GotoFalseWord(jump=81, if_false: boolean)
  78[44]: GotoWord(jump=136)
  81[44]: ClearText(var[16]) var=__work_1[16]:text in 1
  84[44]: ConstText(_value="Test failed ") -> text
  98[60]: AppendText(var[16], v1: text)
 101[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 104[48]: ConstInt(val=0) -> integer
 109[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 116[44]: ConstText(_value=" != 1280812") -> text
 129[60]: AppendText(var[16], v1: text)
 132[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 135[60]: Panic(message: text)
 136[44]: FreeText(var[16])
 139[44]: VarRef(var[4]) -> ref(reference) type=Main[8]:{s:vector<S>[4]}[16] var=__ref_1[4]:ref(Main) in 1
 142[56]: FreeRef(v1: ref(reference))
 143[44]: Return(ret=0, value=0, discard=44)

