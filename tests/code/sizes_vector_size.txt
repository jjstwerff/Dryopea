struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S> };

pub fn test() {
    test_value = {m = Main{};
sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(m) + 100000 * sizeof(vector<S>)};
    assert(
        test_value == 1280812,
        "Test failed {test_value} != 1280812"
    );
}
Type 17:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 18:Main[8]:
    s:vector<S>[4]

Type 19:vector<S>[4]:Vector(17)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    m:ref(Main)["m"] = OpConvRefFromNull();
    OpDatabase(m, 18i32);
    OpSetInt(m, 4i32, 0i32);
    OpAddInt(OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 8i32)), OpMulInt(10000i32, 8i32)), OpMulInt(100000i32, 12i32));
  }#2:integer;
  if OpEqInt(test_value, 1280812i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1280812");
    __work_1;
  }#3:text);
}#1

byte-code for vector_size:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConvRefFromNull() -> ref(reference) var=m[28]:ref(Main)["m"] in 2
   2[40]: Database(var[28], db_tp=18) type=Main[8]:{s:vector<S>[4]}[18]
   7[40]: VarRef(var[28]) -> ref(reference) type=Main[8]:{s:vector<S>[4]}[18] var=m[28]:ref(Main)["m"] in 2
  10[52]: ConstInt(val=0) -> integer
  15[56]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[40]: ConstInt(val=12) -> integer
  23[44]: ConstInt(val=100) -> integer
  28[48]: ConstInt(val=8) -> integer
  33[52]: MulInt(v1: integer, v2: integer) -> integer
  34[48]: AddInt(v1: integer, v2: integer) -> integer
  35[44]: ConstInt(val=10000) -> integer
  40[48]: ConstInt(val=8) -> integer
  45[52]: MulInt(v1: integer, v2: integer) -> integer
  46[48]: AddInt(v1: integer, v2: integer) -> integer
  47[44]: ConstInt(val=100000) -> integer
  52[48]: ConstInt(val=12) -> integer
  57[52]: MulInt(v1: integer, v2: integer) -> integer
  58[48]: AddInt(v1: integer, v2: integer) -> integer
  59[44]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
  63[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  66[36]: ConstInt(val=1280812) -> integer
  71[40]: EqInt(v1: integer, v2: integer) -> boolean
  72[33]: GotoFalseWord(jump=78, if_false: boolean)
  75[32]: GotoWord(jump=133)
  78[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  81[32]: ConstText(_value="Test failed ") -> text
  95[48]: AppendText(var[4], v1: text)
  98[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 101[36]: ConstInt(val=0) -> integer
 106[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 113[32]: ConstText(_value=" != 1280812") -> text
 126[48]: AppendText(var[4], v1: text)
 129[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 132[48]: Panic(message: text)
 133[32]: FreeText(var[4])
 136[32]: Return(ret=0, value=0, discard=32)

