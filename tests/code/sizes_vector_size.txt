struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S> };

pub fn test() {
    test_value = {m = Main{};
sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(m) + 100000 * sizeof(vector<S>)};
    assert(
        test_value == 1280812,
        "Test failed {test_value} != 1280812"
    );
}
Type 17:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 18:Main[8]:
    s:vector<S>[4]

Type 19:vector<S>[4]:Vector(17)

fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    m:ref(Main)(2) = null;
    OpDatabase(m, 18i32);
    OpSetInt(m, 4i32, 0i32);
    _res_3:integer(2) = OpAddInt(OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 8i32)), OpMulInt(10000i32, 8i32)), OpMulInt(100000i32, 12i32));
    OpFreeRef(m);
    _res_3;
  }#block_2:integer;
  if OpEqInt(test_value, 1280812i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1280812");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for vector_size:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConvRefFromNull() -> ref(reference) var=m[32]:ref(Main)
   2[44]: Database(var[32], db_tp=18) type=Main[8]:{s:vector<S>[4]}[18]
   7[44]: VarRef(var[32]) -> ref(reference) type=Main[8]:{s:vector<S>[4]}[18] var=m[32]:ref(Main)
  10[56]: ConstInt(val=0) -> integer
  15[60]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[44]: ConstInt(val=12) -> integer var=_res_3[44]:integer
  23[48]: ConstInt(val=100) -> integer
  28[52]: ConstInt(val=8) -> integer
  33[56]: MulInt(v1: integer, v2: integer) -> integer
  34[52]: AddInt(v1: integer, v2: integer) -> integer
  35[48]: ConstInt(val=10000) -> integer
  40[52]: ConstInt(val=8) -> integer
  45[56]: MulInt(v1: integer, v2: integer) -> integer
  46[52]: AddInt(v1: integer, v2: integer) -> integer
  47[48]: ConstInt(val=100000) -> integer
  52[52]: ConstInt(val=12) -> integer
  57[56]: MulInt(v1: integer, v2: integer) -> integer
  58[52]: AddInt(v1: integer, v2: integer) -> integer
  59[48]: VarRef(var[32]) -> ref(reference) type=Main[8]:{s:vector<S>[4]}[18] var=m[32]:ref(Main)
  62[60]: FreeRef(v1: ref(reference))
  63[48]: VarInt(var[44]) -> integer var=_res_3[44]:integer
  66[52]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
  70[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  73[40]: ConstInt(val=1280812) -> integer
  78[44]: EqInt(v1: integer, v2: integer) -> boolean
  79[37]: GotoFalseWord(jump=85, if_false: boolean)
  82[36]: GotoWord(jump=140)
  85[36]: ClearText(var[8]) var=__work_1[8]:text
  88[36]: ConstText(_value="Test failed ") -> text
 102[52]: AppendText(var[8], v1: text)
 105[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
 108[40]: ConstInt(val=0) -> integer
 113[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 120[36]: ConstText(_value=" != 1280812") -> text
 133[52]: AppendText(var[8], v1: text)
 136[36]: VarText(var[8]) -> text var=__work_1[8]:text
 139[52]: Panic(message: text)
 140[36]: FreeText(var[8])
 143[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConvRefFromNull() -> ref(1,0,0)[32]
    2:[44] Database(var[32], db_tp=18)
    7:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
   10:[56] ConstInt(val=0) -> 0[56]
   15:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
   18:[44] ConstInt(val=12) -> 12[44]
   23:[48] ConstInt(val=100) -> 100[48]
   28:[52] ConstInt(val=8) -> 8[52]
   33:[56] MulInt(v1=100[48], v2=8[52]) -> 800[48]
   34:[52] AddInt(v1=12[44], v2=800[48]) -> 812[44]
   35:[48] ConstInt(val=10000) -> 10000[48]
   40:[52] ConstInt(val=8) -> 8[52]
   45:[56] MulInt(v1=10000[48], v2=8[52]) -> 80000[48]
   46:[52] AddInt(v1=812[44], v2=80000[48]) -> 80812[44]
   47:[48] ConstInt(val=100000) -> 100000[48]
   52:[52] ConstInt(val=12) -> 12[52]
   57:[56] MulInt(v1=100000[48], v2=12[52]) -> 1200000[48]
   58:[52] AddInt(v1=80812[44], v2=1200000[48]) -> 1280812[44]
   59:[48] VarRef(var[32]) -> ref(1,1,0)={}[48]
   62:[60] FreeRef(v1=ref(1,1,0)[48])
   63:[48] VarInt(var[44]) -> 1280812[48]
   66:[52] FreeStack(value=4, discard=20)
   70:[36] VarInt(var[32]) -> 1280812[36]
   73:[40] ConstInt(val=1280812) -> 1280812[40]
   78:[44] EqInt(v1=1280812[36], v2=1280812[40]) -> true[36]
   79:[37] GotoFalseWord(jump=1253, if_false=true[36])
   82:[36] GotoWord(jump=1308)
  140:[36] FreeText(var[8])
  143:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
