Test code:
struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S> };

pub fn test() {
    test_value = {m = Main{};
sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(m) + 100000 * sizeof(vector<S>)};
    assert(
        test_value == 1280812,
        "Test failed {test_value} != 1280812"
    );
}

Type 13:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 14:Main[8]:
    s:vector<S>[4]

Type 15:vector<S>[4]:Vector(13)

fn test {
  let test_value = {
    let m = {
      let val = OpDatabase(8i32, 14i32);
      OpSetInt(val, 4i32, 0i32);
      val;
    };
    OpAddInt(OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 8i32)), OpMulInt(10000i32, 8i32)), OpMulInt(100000i32, 12i32));
  };
  if OpEqInt(test_value, 1280812i32) {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatInt(append_9, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_9, " != 1280812");
    append_9;
  })};
}

byte-code for vector_size:test()
 664[0]: return-address
 664[4]: Database(size=8, db_tp=14) -> reference type=Main[8]:{s:vector<S>[4]}[14]
 669[16]: VarRef(var[4]) -> reference type=Main[8]:{s:vector<S>[4]}[14]
 672[28]: ConstInt(val=0) -> integer
 677[32]: SetInt(v1: reference, fld=4, val: integer)
 680[16]: VarRef(var[4]) -> reference type=Main[8]:{s:vector<S>[4]}[14]
 683[28]: GenFreeStack(value=12, discard=12)
 687[16]: ConstInt(val=12) -> integer
 692[20]: ConstInt(val=100) -> integer
 697[24]: ConstInt(val=8) -> integer
 702[28]: MulInt(v1: integer, v2: integer) -> integer
 703[24]: AddInt(v1: integer, v2: integer) -> integer
 704[20]: ConstInt(val=10000) -> integer
 709[24]: ConstInt(val=8) -> integer
 714[28]: MulInt(v1: integer, v2: integer) -> integer
 715[24]: AddInt(v1: integer, v2: integer) -> integer
 716[20]: ConstInt(val=100000) -> integer
 721[24]: ConstInt(val=12) -> integer
 726[28]: MulInt(v1: integer, v2: integer) -> integer
 727[24]: AddInt(v1: integer, v2: integer) -> integer
 728[20]: GenFreeStack(value=4, discard=12)
 732[8]: VarInt(var[4]) -> integer
 735[12]: ConstInt(val=1280812) -> integer
 740[16]: EqInt(v1: integer, v2: integer) -> boolean
 741[9]: GenGotoFalseWord(jump=747, if_false: boolean)
 744[8]: GenGotoWord(jump=804)
 747[8]: Text()
 748[32]: ConstText(_value="Test failed ") -> text
 762[48]: AppendText(var[8], v1: text)
 765[32]: VarInt(var[4]) -> integer
 768[36]: ConstInt(val=0) -> integer
 773[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 780[32]: ConstText(_value=" != 1280812") -> text
 793[48]: AppendText(var[8], v1: text)
 796[32]: VarText(var[8]) -> text
 799[48]: GenFreeStack(value=16, discard=24)
 803[24]: GenPanic(message: text)
 804[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] Database(size=8, db_tp=14) -> ref(1,1,0)={}[4]
  669:[16] VarRef(var[4]) -> ref(1,1,0)={}[16]
  672:[28] ConstInt(val=0) -> 0[28]
  677:[32] SetInt(v1=ref(1,1,0)[16], fld=4, val=0[28])
  680:[16] VarRef(var[4]) -> ref(1,1,0)={}[16]
  683:[28] GenFreeStack(value=12, discard=12)
  687:[16] ConstInt(val=12) -> 12[16]
  692:[20] ConstInt(val=100) -> 100[20]
  697:[24] ConstInt(val=8) -> 8[24]
  702:[28] MulInt(v1=100[20], v2=8[24]) -> 800[20]
  703:[24] AddInt(v1=12[16], v2=800[20]) -> 812[16]
  704:[20] ConstInt(val=10000) -> 10000[20]
  709:[24] ConstInt(val=8) -> 8[24]
  714:[28] MulInt(v1=10000[20], v2=8[24]) -> 80000[20]
  715:[24] AddInt(v1=812[16], v2=80000[20]) -> 80812[16]
  716:[20] ConstInt(val=100000) -> 100000[20]
  721:[24] ConstInt(val=12) -> 12[24]
  726:[28] MulInt(v1=100000[20], v2=12[24]) -> 1200000[20]
  727:[24] AddInt(v1=80812[16], v2=1200000[20]) -> 1280812[16]
  728:[20] GenFreeStack(value=4, discard=12)
  732:[8] VarInt(var[4]) -> 1280812[8]
  735:[12] ConstInt(val=1280812) -> 1280812[12]
  740:[16] EqInt(v1=1280812[8], v2=1280812[12]) -> true[8]
  741:[9] GenGotoFalseWord(jump=747, if_false=true[8])
  744:[8] GenGotoWord(jump=804)
  804:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
