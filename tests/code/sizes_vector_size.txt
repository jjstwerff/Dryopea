struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S> };

pub fn test() {
    test_value = {m = Main{};
sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(m) + 100000 * sizeof(vector<S>)};
    assert(
        test_value == 1280812,
        "Test failed {test_value} != 1280812"
    );
}
Type 11:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 12:Main[8]:
    s:vector<S>[4]

Type 13:vector<S>[4]:Vector(11)

fn test() {#1 block
  let __work_1:text = "";
  let test_value:integer = {#2 block
    let m:Main = {#3 object
      let _val_1:Main = OpDatabase(8i32, 12i32);
      OpSetInt(_val_1, 4i32, 0i32);
      _val_1;
    }#3:Main;
    OpAddInt(OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 8i32)), OpMulInt(10000i32, 8i32)), OpMulInt(100000i32, 12i32));
  }#2:integer;
  if OpEqInt(test_value, 1280812i32) null else OpPanic({#4 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1280812");
    __work_1;
  }#4:text);
}#1

byte-code for vector_size:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Database(size=8, db_tp=12) -> reference type=Main[8]:{s:vector<S>[4]}[12]
 681[40]: VarRef(var[28]) -> reference type=Main[8]:{s:vector<S>[4]}[12]
 684[52]: ConstInt(val=0) -> integer
 689[56]: SetInt(v1: reference, fld=4, val: integer)
 692[40]: VarRef(var[28]) -> reference type=Main[8]:{s:vector<S>[4]}[12]
 695[52]: FreeStack(value=12, discard=12) type=Main[8]:{s:vector<S>[4]}[12]
 699[40]: ConstInt(val=12) -> integer
 704[44]: ConstInt(val=100) -> integer
 709[48]: ConstInt(val=8) -> integer
 714[52]: MulInt(v1: integer, v2: integer) -> integer
 715[48]: AddInt(v1: integer, v2: integer) -> integer
 716[44]: ConstInt(val=10000) -> integer
 721[48]: ConstInt(val=8) -> integer
 726[52]: MulInt(v1: integer, v2: integer) -> integer
 727[48]: AddInt(v1: integer, v2: integer) -> integer
 728[44]: ConstInt(val=100000) -> integer
 733[48]: ConstInt(val=12) -> integer
 738[52]: MulInt(v1: integer, v2: integer) -> integer
 739[48]: AddInt(v1: integer, v2: integer) -> integer
 740[44]: FreeStack(value=4, discard=12) type=integer[4]:Base[0]
 744[32]: VarInt(var[28]) -> integer
 747[36]: ConstInt(val=1280812) -> integer
 752[40]: EqInt(v1: integer, v2: integer) -> boolean
 753[33]: GotoFalseWord(jump=759, if_false: boolean)
 756[32]: GotoWord(jump=814)
 759[32]: ClearText(var[4])
 762[32]: ConstText(_value="Test failed ") -> text
 776[48]: AppendText(var[4], v1: text)
 779[32]: VarInt(var[28]) -> integer
 782[36]: ConstInt(val=0) -> integer
 787[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 794[32]: ConstText(_value=" != 1280812") -> text
 807[48]: AppendText(var[4], v1: text)
 810[32]: VarText(var[4]) -> text
 813[48]: Panic(message: text)
 814[32]: Return(ret=0, value=0, discard=32)

Execute test:
  675:[8] Text()
  676:[32] Database(size=8, db_tp=12) -> ref(1,1,0)={}[32]
  681:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
  684:[56] ConstInt(val=0) -> 0[56]
  689:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  692:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
  695:[56] FreeStack(value=12, discard=12)
  699:[44] ConstInt(val=12) -> 12[44]
  704:[48] ConstInt(val=100) -> 100[48]
  709:[52] ConstInt(val=8) -> 8[52]
  714:[56] MulInt(v1=100[48], v2=8[52]) -> 800[48]
  715:[52] AddInt(v1=12[44], v2=800[48]) -> 812[44]
  716:[48] ConstInt(val=10000) -> 10000[48]
  721:[52] ConstInt(val=8) -> 8[52]
  726:[56] MulInt(v1=10000[48], v2=8[52]) -> 80000[48]
  727:[52] AddInt(v1=812[44], v2=80000[48]) -> 80812[44]
  728:[48] ConstInt(val=100000) -> 100000[48]
  733:[52] ConstInt(val=12) -> 12[52]
  738:[56] MulInt(v1=100000[48], v2=12[52]) -> 1200000[48]
  739:[52] AddInt(v1=80812[44], v2=1200000[48]) -> 1280812[44]
  740:[48] FreeStack(value=4, discard=12)
  744:[36] VarInt(var[32]) -> 1280812[36]
  747:[40] ConstInt(val=1280812) -> 1280812[40]
  752:[44] EqInt(v1=1280812[36], v2=1280812[40]) -> true[36]
  753:[37] GotoFalseWord(jump=759, if_false=true[36])
  756:[36] GotoWord(jump=814)
  814:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
