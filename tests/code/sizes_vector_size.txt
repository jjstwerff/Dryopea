Test code:
struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S> };

pub fn test() {
    test_value = {m = Main{};
sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(m) + 100000 * sizeof(vector<S>)};
    assert(
        test_value == 1280812,
        "Test failed {test_value} != 1280812"
    );
}

Type 13:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 14:Main[8]:
    s:vector<S>[4]

Type 15:vector<S>[4]:Vector(13)

fn test {
  let __work_3 = "";
  let test_value = {
    let m = {
      let val = OpDatabase(8i32, 14i32);
      OpSetInt(val, 4i32, 0i32);
      val;
    };
    OpAddInt(OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 8i32)), OpMulInt(10000i32, 8i32)), OpMulInt(100000i32, 12i32));
  };
  if OpEqInt(test_value, 1280812i32) {null} else {OpGenPanic({
    OpClearText(__work_3);
    OpAppendText(__work_3, "Test failed ");
    OpFormatInt(__work_3, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_3, " != 1280812");
    __work_3;
  })};
}

byte-code for vector_size:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: Database(size=8, db_tp=14) -> reference type=Main[8]:{s:vector<S>[4]}[14]
 679[40]: VarRef(var[28]) -> reference type=Main[8]:{s:vector<S>[4]}[14]
 682[52]: ConstInt(val=0) -> integer
 687[56]: SetInt(v1: reference, fld=4, val: integer)
 690[40]: VarRef(var[28]) -> reference type=Main[8]:{s:vector<S>[4]}[14]
 693[52]: GenFreeStack(value=12, discard=12)
 697[40]: ConstInt(val=12) -> integer
 702[44]: ConstInt(val=100) -> integer
 707[48]: ConstInt(val=8) -> integer
 712[52]: MulInt(v1: integer, v2: integer) -> integer
 713[48]: AddInt(v1: integer, v2: integer) -> integer
 714[44]: ConstInt(val=10000) -> integer
 719[48]: ConstInt(val=8) -> integer
 724[52]: MulInt(v1: integer, v2: integer) -> integer
 725[48]: AddInt(v1: integer, v2: integer) -> integer
 726[44]: ConstInt(val=100000) -> integer
 731[48]: ConstInt(val=12) -> integer
 736[52]: MulInt(v1: integer, v2: integer) -> integer
 737[48]: AddInt(v1: integer, v2: integer) -> integer
 738[44]: GenFreeStack(value=4, discard=12)
 742[32]: VarInt(var[28]) -> integer
 745[36]: ConstInt(val=1280812) -> integer
 750[40]: EqInt(v1: integer, v2: integer) -> boolean
 751[33]: GenGotoFalseWord(jump=757, if_false: boolean)
 754[32]: GenGotoWord(jump=812)
 757[32]: ClearText(var[4])
 760[32]: ConstText(_value="Test failed ") -> text(false)
 774[48]: AppendText(var[4], v1: text(false))
 777[32]: VarInt(var[28]) -> integer
 780[36]: ConstInt(val=0) -> integer
 785[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 792[32]: ConstText(_value=" != 1280812") -> text(false)
 805[48]: AppendText(var[4], v1: text(false))
 808[32]: VarText(var[4]) -> text(false)
 811[48]: GenPanic(message: text(false))
 812[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] Database(size=8, db_tp=14) -> ref(1,1,0)={}[32]
  679:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
  682:[56] ConstInt(val=0) -> 0[56]
  687:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  690:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
  693:[56] GenFreeStack(value=12, discard=12)
  697:[44] ConstInt(val=12) -> 12[44]
  702:[48] ConstInt(val=100) -> 100[48]
  707:[52] ConstInt(val=8) -> 8[52]
  712:[56] MulInt(v1=100[48], v2=8[52]) -> 800[48]
  713:[52] AddInt(v1=12[44], v2=800[48]) -> 812[44]
  714:[48] ConstInt(val=10000) -> 10000[48]
  719:[52] ConstInt(val=8) -> 8[52]
  724:[56] MulInt(v1=10000[48], v2=8[52]) -> 80000[48]
  725:[52] AddInt(v1=812[44], v2=80000[48]) -> 80812[44]
  726:[48] ConstInt(val=100000) -> 100000[48]
  731:[52] ConstInt(val=12) -> 12[52]
  736:[56] MulInt(v1=100000[48], v2=12[52]) -> 1200000[48]
  737:[52] AddInt(v1=80812[44], v2=1200000[48]) -> 1280812[44]
  738:[48] GenFreeStack(value=4, discard=12)
  742:[36] VarInt(var[32]) -> 1280812[36]
  745:[40] ConstInt(val=1280812) -> 1280812[40]
  750:[44] EqInt(v1=1280812[36], v2=1280812[40]) -> true[36]
  751:[37] GenGotoFalseWord(jump=757, if_false=true[36])
  754:[36] GenGotoWord(jump=812)
  812:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
