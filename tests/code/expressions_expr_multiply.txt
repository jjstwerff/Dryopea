pub fn test() {
    test_value = {1 + 2 * 3};
    assert(
        test_value == 7,
        "Test failed {test_value} != 7"
    );
}
fn test() {#1 block
  let __work_1:text = "";
  let test_value:integer = {#2 block
    OpAddInt(1i32, OpMulInt(2i32, 3i32));
  }#2:integer;
  if OpEqInt(test_value, 7i32) null else OpPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 7");
    __work_1;
  }#3:text);
}#1

byte-code for expr_multiply:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: ConstInt(val=1) -> integer
 681[32]: ConstInt(val=2) -> integer
 686[36]: ConstInt(val=3) -> integer
 691[40]: MulInt(v1: integer, v2: integer) -> integer
 692[36]: AddInt(v1: integer, v2: integer) -> integer
 693[32]: VarInt(var[28]) -> integer
 696[36]: ConstInt(val=7) -> integer
 701[40]: EqInt(v1: integer, v2: integer) -> boolean
 702[33]: GotoFalseWord(jump=708, if_false: boolean)
 705[32]: GotoWord(jump=757)
 708[32]: ClearText(var[4])
 711[32]: ConstText(_value="Test failed ") -> text
 725[48]: AppendText(var[4], v1: text)
 728[32]: VarInt(var[28]) -> integer
 731[36]: ConstInt(val=0) -> integer
 736[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 743[32]: ConstText(_value=" != 7") -> text
 750[48]: AppendText(var[4], v1: text)
 753[32]: VarText(var[4]) -> text
 756[48]: Panic(message: text)
 757[32]: Return(ret=0, value=0, discard=32)

Execute test:
  675:[8] Text()
  676:[32] ConstInt(val=1) -> 1[32]
  681:[36] ConstInt(val=2) -> 2[36]
  686:[40] ConstInt(val=3) -> 3[40]
  691:[44] MulInt(v1=2[36], v2=3[40]) -> 6[36]
  692:[40] AddInt(v1=1[32], v2=6[36]) -> 7[32]
  693:[36] VarInt(var[32]) -> 7[36]
  696:[40] ConstInt(val=7) -> 7[40]
  701:[44] EqInt(v1=7[36], v2=7[40]) -> true[36]
  702:[37] GotoFalseWord(jump=708, if_false=true[36])
  705:[36] GotoWord(jump=757)
  757:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
