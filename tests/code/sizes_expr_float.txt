Test code:
pub fn test() {
    test_value = {a = 1.1; sizeof(float) + 10 * sizeof(a)};
    assert(
        test_value == 88,
        "Test failed {test_value} != 88"
    );
}

fn test {
  let test_value = {
    let a = 1.1f64;
    OpAddInt(8i32, OpMulInt(10i32, 8i32));
  };
  if OpEqInt(test_value, 88i32) {null} else {OpGenPanic({
    let append_8 = "Test failed ";
    OpFormatInt(append_8, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_8, " != 88");
    append_8;
  })};
}

byte-code for expr_float:test()
 668[0]: return-address
 668[4]: ConstFloat(val=1.1) -> float
 677[12]: ConstInt(val=8) -> integer
 682[16]: ConstInt(val=10) -> integer
 687[20]: ConstInt(val=8) -> integer
 692[24]: MulInt(v1: integer, v2: integer) -> integer
 693[20]: AddInt(v1: integer, v2: integer) -> integer
 694[16]: GenFreeStack(value=4, discard=8)
 698[8]: VarInt(var[4]) -> integer
 701[12]: ConstInt(val=88) -> integer
 706[16]: EqInt(v1: integer, v2: integer) -> boolean
 707[9]: GenGotoFalseWord(jump=713, if_false: boolean)
 710[8]: GenGotoWord(jump=765)
 713[8]: Text()
 714[32]: ConstText(_value="Test failed ") -> text
 728[48]: AppendText(var[8], v1: text)
 731[32]: VarInt(var[4]) -> integer
 734[36]: ConstInt(val=0) -> integer
 739[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 746[32]: ConstText(_value=" != 88") -> text
 754[48]: AppendText(var[8], v1: text)
 757[32]: VarText(var[8]) -> text
 760[48]: GenFreeStack(value=16, discard=24)
 764[24]: GenPanic(message: text)
 765[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] ConstFloat(val=1.1) -> 1.1[4]
  677:[12] ConstInt(val=8) -> 8[12]
  682:[16] ConstInt(val=10) -> 10[16]
  687:[20] ConstInt(val=8) -> 8[20]
  692:[24] MulInt(v1=10[16], v2=8[20]) -> 80[16]
  693:[20] AddInt(v1=8[12], v2=80[16]) -> 88[12]
  694:[16] GenFreeStack(value=4, discard=8)
  698:[8] VarInt(var[4]) -> 88[8]
  701:[12] ConstInt(val=88) -> 88[12]
  706:[16] EqInt(v1=88[8], v2=88[12]) -> true[8]
  707:[9] GenGotoFalseWord(jump=713, if_false=true[8])
  710:[8] GenGotoWord(jump=765)
  765:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
