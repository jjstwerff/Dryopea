pub fn test() {
    test_value = {a = 1.1; sizeof(float) + 10 * sizeof(a)};
    assert(
        test_value == 88,
        "Test failed {test_value} != 88"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:float = 1.1f64;
    OpAddInt(8i32, OpMulInt(10i32, 8i32));
  }#2:integer;
  if OpEqInt(test_value, 88i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 88");
    __work_1;
  }#3:text);
}#1

byte-code for expr_float:test()
 645[0]: return-address
 645[4]: Text() var=__work_1[4]:text in 1
 646[28]: ConstFloat(val=1.1) -> float var=a[28]:float in 2
 655[36]: ConstInt(val=8) -> integer
 660[40]: ConstInt(val=10) -> integer
 665[44]: ConstInt(val=8) -> integer
 670[48]: MulInt(v1: integer, v2: integer) -> integer
 671[44]: AddInt(v1: integer, v2: integer) -> integer
 672[40]: FreeStack(value=4, discard=12) type=integer[4]:Base[0]
 676[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 679[36]: ConstInt(val=88) -> integer
 684[40]: EqInt(v1: integer, v2: integer) -> boolean
 685[33]: GotoFalseWord(jump=691, if_false: boolean)
 688[32]: GotoWord(jump=741)
 691[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 694[32]: ConstText(_value="Test failed ") -> text
 708[48]: AppendText(var[4], v1: text)
 711[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 714[36]: ConstInt(val=0) -> integer
 719[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 726[32]: ConstText(_value=" != 88") -> text
 734[48]: AppendText(var[4], v1: text)
 737[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 740[48]: Panic(message: text)
 741[32]: FreeText(var[4])
 744[32]: Return(ret=0, value=0, discard=32)

Execute test:
  645:[8] Text()
  646:[32] ConstFloat(val=1.1) -> 1.1[32]
  655:[40] ConstInt(val=8) -> 8[40]
  660:[44] ConstInt(val=10) -> 10[44]
  665:[48] ConstInt(val=8) -> 8[48]
  670:[52] MulInt(v1=10[44], v2=8[48]) -> 80[44]
  671:[48] AddInt(v1=8[40], v2=80[44]) -> 88[40]
  672:[44] FreeStack(value=4, discard=12)
  676:[36] VarInt(var[32]) -> 88[36]
  679:[40] ConstInt(val=88) -> 88[40]
  684:[44] EqInt(v1=88[36], v2=88[40]) -> true[36]
  685:[37] GotoFalseWord(jump=691, if_false=true[36])
  688:[36] GotoWord(jump=741)
  741:[36] FreeText(var[8])
  744:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
