pub fn test() {
    test_value = {a = 1.1; sizeof(float) + 10 * sizeof(a)};
    assert(
        test_value == 88,
        "Test failed {test_value} != 88"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    a(2):float = 1.1f64;
    OpAddInt(8i32, OpMulInt(10i32, 8i32));
  }#block(2):integer;
  if OpEqInt(test_value(1), 88i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 88");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for expr_float:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstFloat(val=1.1) -> float var=a[32]:float
  10[40]: ConstInt(val=8) -> integer
  15[44]: ConstInt(val=10) -> integer
  20[48]: ConstInt(val=8) -> integer
  25[52]: MulInt(v1: integer, v2: integer) -> integer
  26[48]: AddInt(v1: integer, v2: integer) -> integer
  27[44]: FreeStack(value=4, discard=12)
  31[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  34[40]: ConstInt(val=88) -> integer
  39[44]: EqInt(v1: integer, v2: integer) -> boolean
  40[37]: GotoFalseWord(jump=46, if_false: boolean)
  43[36]: GotoWord(jump=96)
  46[36]: ClearText(var[8]) var=__work_1[8]:text
  49[36]: ConstText(_value="Test failed ") -> text
  63[52]: AppendText(var[8], v1: text)
  66[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  69[40]: ConstInt(val=0) -> integer
  74[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  81[36]: ConstText(_value=" != 88") -> text
  89[52]: AppendText(var[8], v1: text)
  92[36]: VarText(var[8]) -> text var=__work_1[8]:text
  95[52]: Panic(message: text)
  96[36]: FreeText(var[8])
  99[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstFloat(val=1.1) -> 1.1[32]
   10:[40] ConstInt(val=8) -> 8[40]
   15:[44] ConstInt(val=10) -> 10[44]
   20:[48] ConstInt(val=8) -> 8[48]
   25:[52] MulInt(v1=10[44], v2=8[48]) -> 80[44]
   26:[48] AddInt(v1=8[40], v2=80[44]) -> 88[40]
   27:[44] FreeStack(value=4, discard=12)
   31:[36] VarInt(var[32]) -> 88[36]
   34:[40] ConstInt(val=88) -> 88[40]
   39:[44] EqInt(v1=88[36], v2=88[40]) -> true[36]
   40:[37] GotoFalseWord(jump=46, if_false=true[36])
   43:[36] GotoWord(jump=96)
   96:[36] FreeText(var[8])
   99:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
