Test code:
pub fn test() {
    test_value = {a = 1.1; sizeof(float) + 10 * sizeof(a)};
    assert(
        test_value == 88,
        "Test failed {test_value} != 88"
    );
}

fn test {
  let __work_2 = "";
  let test_value = {
    let a = 1.1f64;
    OpAddInt(8i32, OpMulInt(10i32, 8i32));
  };
  if OpEqInt(test_value, 88i32) {null} else {OpGenPanic({
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatInt(__work_2, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " != 88");
    __work_2;
  })};
}

byte-code for expr_float:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: ConstFloat(val=1.1) -> float
 683[36]: ConstInt(val=8) -> integer
 688[40]: ConstInt(val=10) -> integer
 693[44]: ConstInt(val=8) -> integer
 698[48]: MulInt(v1: integer, v2: integer) -> integer
 699[44]: AddInt(v1: integer, v2: integer) -> integer
 700[40]: GenFreeStack(value=4, discard=8)
 704[32]: VarInt(var[28]) -> integer
 707[36]: ConstInt(val=88) -> integer
 712[40]: EqInt(v1: integer, v2: integer) -> boolean
 713[33]: GenGotoFalseWord(jump=719, if_false: boolean)
 716[32]: GenGotoWord(jump=769)
 719[32]: ClearText(var[4])
 722[32]: ConstText(_value="Test failed ") -> text(false)
 736[48]: AppendText(var[4], v1: text(false))
 739[32]: VarInt(var[28]) -> integer
 742[36]: ConstInt(val=0) -> integer
 747[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 754[32]: ConstText(_value=" != 88") -> text(false)
 762[48]: AppendText(var[4], v1: text(false))
 765[32]: VarText(var[4]) -> text(false)
 768[48]: GenPanic(message: text(false))
 769[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] ConstFloat(val=1.1) -> 1.1[32]
  683:[40] ConstInt(val=8) -> 8[40]
  688:[44] ConstInt(val=10) -> 10[44]
  693:[48] ConstInt(val=8) -> 8[48]
  698:[52] MulInt(v1=10[44], v2=8[48]) -> 80[44]
  699:[48] AddInt(v1=8[40], v2=80[44]) -> 88[40]
  700:[44] GenFreeStack(value=4, discard=8)
  704:[36] VarInt(var[32]) -> 88[36]
  707:[40] ConstInt(val=88) -> 88[40]
  712:[44] EqInt(v1=88[36], v2=88[40]) -> true[36]
  713:[37] GenGotoFalseWord(jump=719, if_false=true[36])
  716:[36] GenGotoWord(jump=769)
  769:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
