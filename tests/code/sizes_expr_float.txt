pub fn test() {
    test_value = {a = 1.1; sizeof(float) + 10 * sizeof(a)};
    assert(
        test_value == 88,
        "Test failed {test_value} != 88"
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    let a = 1.1f64;
    OpAddInt(8i32, OpMulInt(10i32, 8i32));
  }#2;
  if OpEqInt(test_value, 88i32) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 88");
    __work_1;
  }#3);
}#1

byte-code for expr_float:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstFloat(val=1.1) -> float
 678[36]: ConstInt(val=8) -> integer
 683[40]: ConstInt(val=10) -> integer
 688[44]: ConstInt(val=8) -> integer
 693[48]: MulInt(v1: integer, v2: integer) -> integer
 694[44]: AddInt(v1: integer, v2: integer) -> integer
 695[40]: GenFreeStack(value=4, discard=8)
 699[32]: VarInt(var[28]) -> integer
 702[36]: ConstInt(val=88) -> integer
 707[40]: EqInt(v1: integer, v2: integer) -> boolean
 708[33]: GenGotoFalseWord(jump=714, if_false: boolean)
 711[32]: GenGotoWord(jump=764)
 714[32]: ClearText(var[4])
 717[32]: ConstText(_value="Test failed ") -> text(false, [])
 731[48]: AppendText(var[4], v1: text(false, []))
 734[32]: VarInt(var[28]) -> integer
 737[36]: ConstInt(val=0) -> integer
 742[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 749[32]: ConstText(_value=" != 88") -> text(false, [])
 757[48]: AppendText(var[4], v1: text(false, []))
 760[32]: VarText(var[4]) -> text(false, [])
 763[48]: GenPanic(message: text(false, []))
 764[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstFloat(val=1.1) -> 1.1[32]
  678:[40] ConstInt(val=8) -> 8[40]
  683:[44] ConstInt(val=10) -> 10[44]
  688:[48] ConstInt(val=8) -> 8[48]
  693:[52] MulInt(v1=10[44], v2=8[48]) -> 80[44]
  694:[48] AddInt(v1=8[40], v2=80[44]) -> 88[40]
  695:[44] GenFreeStack(value=4, discard=8)
  699:[36] VarInt(var[32]) -> 88[36]
  702:[40] ConstInt(val=88) -> 88[40]
  707:[44] EqInt(v1=88[36], v2=88[40]) -> true[36]
  708:[37] GenGotoFalseWord(jump=714, if_false=true[36])
  711:[36] GenGotoWord(jump=764)
  764:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
