Test code:
pub fn test() {
    test_value = {a = 1.1; sizeof(float) + 10 * sizeof(a)};
    assert(
        test_value == 88,
        "Test failed {test_value} != 88"
    );
}

fn test {
  let test_value = {
    let a = 1.1f64;
    OpAddInt(8i32, OpMulInt(10i32, 8i32));
  };
  if OpEqInt(test_value, 88i32) {null} else {OpGenPanic({
    let append_8 = "Test failed ";
    OpFormatInt(append_8, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_8, " != 88");
    append_8;
  })};
}

byte-code for expr_float:test()
 664[0]: return-address
 664[4]: ConstFloat(val=1.1) -> float
 673[12]: ConstInt(val=8) -> integer
 678[16]: ConstInt(val=10) -> integer
 683[20]: ConstInt(val=8) -> integer
 688[24]: MulInt(v1: integer, v2: integer) -> integer
 689[20]: AddInt(v1: integer, v2: integer) -> integer
 690[16]: GenFreeStack(value=4, discard=8)
 694[8]: VarInt(var[4]) -> integer
 697[12]: ConstInt(val=88) -> integer
 702[16]: EqInt(v1: integer, v2: integer) -> boolean
 703[9]: GenGotoFalseWord(jump=709, if_false: boolean)
 706[8]: GenGotoWord(jump=761)
 709[8]: Text()
 710[32]: ConstText(_value="Test failed ") -> text
 724[48]: AppendText(var[8], v1: text)
 727[32]: VarInt(var[4]) -> integer
 730[36]: ConstInt(val=0) -> integer
 735[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 742[32]: ConstText(_value=" != 88") -> text
 750[48]: AppendText(var[8], v1: text)
 753[32]: VarText(var[8]) -> text
 756[48]: GenFreeStack(value=16, discard=24)
 760[24]: GenPanic(message: text)
 761[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] ConstFloat(val=1.1) -> 1.1[4]
  673:[12] ConstInt(val=8) -> 8[12]
  678:[16] ConstInt(val=10) -> 10[16]
  683:[20] ConstInt(val=8) -> 8[20]
  688:[24] MulInt(v1=10[16], v2=8[20]) -> 80[16]
  689:[20] AddInt(v1=8[12], v2=80[16]) -> 88[12]
  690:[16] GenFreeStack(value=4, discard=8)
  694:[8] VarInt(var[4]) -> 88[8]
  697:[12] ConstInt(val=88) -> 88[12]
  702:[16] EqInt(v1=88[8], v2=88[12]) -> true[8]
  703:[9] GenGotoFalseWord(jump=709, if_false=true[8])
  706:[8] GenGotoWord(jump=761)
  761:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
