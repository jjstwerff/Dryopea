pub fn test() {
    test_value = {a = 1.1; sizeof(float) + 10 * sizeof(a)};
    assert(
        test_value == 88,
        "Test failed {test_value} != 88"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:float = 1.1f64;
    OpAddInt(8i32, OpMulInt(10i32, 8i32));
  }#2:integer;
  if OpEqInt(test_value, 88i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 88");
    __work_1;
  }#3:text);
}#1

byte-code for expr_float:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: ConstFloat(val=1.1) -> float
 685[36]: ConstInt(val=8) -> integer
 690[40]: ConstInt(val=10) -> integer
 695[44]: ConstInt(val=8) -> integer
 700[48]: MulInt(v1: integer, v2: integer) -> integer
 701[44]: AddInt(v1: integer, v2: integer) -> integer
 702[40]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 706[32]: VarInt(var[28]) -> integer
 709[36]: ConstInt(val=88) -> integer
 714[40]: EqInt(v1: integer, v2: integer) -> boolean
 715[33]: GotoFalseWord(jump=721, if_false: boolean)
 718[32]: GotoWord(jump=771)
 721[32]: ClearText(var[4])
 724[32]: ConstText(_value="Test failed ") -> text
 738[48]: AppendText(var[4], v1: text)
 741[32]: VarInt(var[28]) -> integer
 744[36]: ConstInt(val=0) -> integer
 749[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 756[32]: ConstText(_value=" != 88") -> text
 764[48]: AppendText(var[4], v1: text)
 767[32]: VarText(var[4]) -> text
 770[48]: Panic(message: text)
 771[32]: Return(ret=0, value=0, discard=32)

Execute test:
  675:[8] Text()
  676:[32] ConstFloat(val=1.1) -> 1.1[32]
  685:[40] ConstInt(val=8) -> 8[40]
  690:[44] ConstInt(val=10) -> 10[44]
  695:[48] ConstInt(val=8) -> 8[48]
  700:[52] MulInt(v1=10[44], v2=8[48]) -> 80[44]
  701:[48] AddInt(v1=8[40], v2=80[44]) -> 88[40]
  702:[44] FreeStack(value=4, discard=8)
  706:[36] VarInt(var[32]) -> 88[36]
  709:[40] ConstInt(val=88) -> 88[40]
  714:[44] EqInt(v1=88[36], v2=88[40]) -> true[36]
  715:[37] GotoFalseWord(jump=721, if_false=true[36])
  718:[36] GotoWord(jump=771)
  771:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
