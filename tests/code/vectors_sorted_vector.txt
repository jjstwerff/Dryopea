struct Elm {key: text, value: integer}
struct Db {map: sorted<Elm[-key]>}

pub fn test() {
    test_value = {db=Db {map: [Elm {key: "One", value: 1}, Elm {key: "Two", value: 2}]};
db.map += [Elm {key: "Three", value: 3}, Elm {key: "Four", value: 4}];
assert(db.map["Two"].value == 2, "Two element");
assert(db.map["Four"], "Four element");
assert(!db.map["Five"], "No element");
sum = 0;
for v in db.map {
  sum = sum * 10 + v.value;
};
sum = sum * 10 + db.map["Three"].value;
sum};
    assert(
        test_value == 23143,
        "Test failed {test_value} != 23143"
    );
}
Type 17:Elm[8]:
    key:text[0]
    value:integer[4]

Type 18:Db[8]:
    map:sorted<Elm[-key]>[4]

Type 19:sorted<Elm[-key]>[4]:Sorted(17, [(0, false)]) keys [tp:6 desc:true field:0, ]

Type 20:vector<Elm>[4]:Vector(17)

fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    db(2):ref(Db) = null;
    OpDatabase(db(2), 18i32);
    OpSetInt(db(2), 4i32, 0i32);
    _elm_1(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetText(_elm_1(2), 0i32, "One");
    OpSetInt(_elm_1(2), 4i32, 1i32);
    OpFinishRecord(db(2), _elm_1(2), 18i32, 0i32);
    _elm_1(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetText(_elm_1(2), 0i32, "Two");
    OpSetInt(_elm_1(2), 4i32, 2i32);
    OpFinishRecord(db(2), _elm_1(2), 18i32, 0i32);
    _elm_2(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetText(_elm_2(2), 0i32, "Three");
    OpSetInt(_elm_2(2), 4i32, 3i32);
    OpFinishRecord(db(2), _elm_2(2), 18i32, 0i32);
    _elm_2(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetText(_elm_2(2), 0i32, "Four");
    OpSetInt(_elm_2(2), 4i32, 4i32);
    OpFinishRecord(db(2), _elm_2(2), 18i32, 0i32);
    if OpEqInt(OpGetInt(OpGetRecord(OpGetField(db(2), 4i32, 19i32), 19i32, 1i32, "Two"), 4i32), 2i32) null else OpPanic("Two element");
    if OpConvBoolFromRef(OpGetRecord(OpGetField(db(2), 4i32, 19i32), 19i32, 1i32, "Four")) null else OpPanic("Four element");
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(db(2), 4i32, 19i32), 19i32, 1i32, "Five"))) null else OpPanic("No element");
    sum(2):integer = 0i32;
    {#For block(3):void
      v#index(3):integer = OpIterate(OpGetField(db(2), 4i32, 19i32), 130i32, 8i32, &[Key { type_nr: -6, position: 0 }], 0i32, 0i32);
      loop {#For loop_4
        v(4):ref(Elm)["db"] = OpStep(v#index(3), OpGetField(db(2), 4i32, 19i32), 130i32, 8i32);
        if OpNot(OpConvBoolFromRef(v(4))) {#break(5):void
          break(0);
        }#break(5):void else null;
        {#block(6):void
          sum(2):integer = OpAddInt(OpMulInt(sum(2), 10i32), OpGetInt(v(4), 4i32));
        }#block(6):void;
      }#For loop_4;
    }#For block(3):void;
    sum(2):integer = OpAddInt(OpMulInt(sum(2), 10i32), OpGetInt(OpGetRecord(OpGetField(db(2), 4i32, 19i32), 19i32, 1i32, "Three"), 4i32));
    OpFreeRef(db(2));
    sum(2);
  }#block(2):integer;
  if OpEqInt(test_value(1), 23143i32) null else OpPanic({#Formatted string(7):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 23143");
    __work_1(1);
  }#Formatted string(7):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for sorted_vector:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConvRefFromNull() -> ref(reference) var=db[32]:ref(Db)
   2[44]: Database(var[32], db_tp=18) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18]
   7[44]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
  10[56]: ConstInt(val=0) -> integer
  15[60]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[44]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
  21[56]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
  26[56]: VarRef(var[44]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_1[44]:ref(Elm)["db"]
  29[68]: ConstText(_value="One") -> text
  34[84]: SetText(v1: ref(reference), fld=0, val: text)
  37[56]: VarRef(var[44]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_1[44]:ref(Elm)["db"]
  40[68]: ConstInt(val=1) -> integer
  45[72]: SetInt(v1: ref(reference), fld=4, val: integer)
  48[56]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
  51[68]: VarRef(var[44]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_1[44]:ref(Elm)["db"]
  54[80]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
  59[56]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
  62[68]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
  67[68]: PutRef(var[44], value: ref(reference))
  70[56]: VarRef(var[44]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_1[44]:ref(Elm)["db"]
  73[68]: ConstText(_value="Two") -> text
  78[84]: SetText(v1: ref(reference), fld=0, val: text)
  81[56]: VarRef(var[44]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_1[44]:ref(Elm)["db"]
  84[68]: ConstInt(val=2) -> integer
  89[72]: SetInt(v1: ref(reference), fld=4, val: integer)
  92[56]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
  95[68]: VarRef(var[44]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_1[44]:ref(Elm)["db"]
  98[80]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
 103[56]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 106[68]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
 111[68]: VarRef(var[56]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_2[56]:ref(Elm)["db"]
 114[80]: ConstText(_value="Three") -> text
 121[96]: SetText(v1: ref(reference), fld=0, val: text)
 124[68]: VarRef(var[56]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_2[56]:ref(Elm)["db"]
 127[80]: ConstInt(val=3) -> integer
 132[84]: SetInt(v1: ref(reference), fld=4, val: integer)
 135[68]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 138[80]: VarRef(var[56]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_2[56]:ref(Elm)["db"]
 141[92]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
 146[68]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 149[80]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
 154[80]: PutRef(var[56], value: ref(reference))
 157[68]: VarRef(var[56]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_2[56]:ref(Elm)["db"]
 160[80]: ConstText(_value="Four") -> text
 166[96]: SetText(v1: ref(reference), fld=0, val: text)
 169[68]: VarRef(var[56]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_2[56]:ref(Elm)["db"]
 172[80]: ConstInt(val=4) -> integer
 177[84]: SetInt(v1: ref(reference), fld=4, val: integer)
 180[68]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 183[80]: VarRef(var[56]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=_elm_2[56]:ref(Elm)["db"]
 186[92]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
 191[68]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 194[80]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(17, [(0, false)]) keys [tp:6 desc:true field:0, ][19]
 197[80]: ConstText(_value="Two") -> text
 202[96]: GetRecord(data: ref(reference), db_tp=19, no_keys=1) -> ref(reference)
 206[80]: GetInt(v1: ref(reference), fld=4) -> integer
 209[72]: ConstInt(val=2) -> integer
 214[76]: EqInt(v1: integer, v2: integer) -> boolean
 215[69]: GotoFalseWord(jump=221, if_false: boolean)
 218[68]: GotoWord(jump=235)
 221[68]: ConstText(_value="Two element") -> text
 234[84]: Panic(message: text)
 235[68]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 238[80]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(17, [(0, false)]) keys [tp:6 desc:true field:0, ][19]
 241[80]: ConstText(_value="Four") -> text
 247[96]: GetRecord(data: ref(reference), db_tp=19, no_keys=1) -> ref(reference)
 251[80]: ConvBoolFromRef(val: ref(reference)) -> boolean
 252[69]: GotoFalseWord(jump=258, if_false: boolean)
 255[68]: GotoWord(jump=273)
 258[68]: ConstText(_value="Four element") -> text
 272[84]: Panic(message: text)
 273[68]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 276[80]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(17, [(0, false)]) keys [tp:6 desc:true field:0, ][19]
 279[80]: ConstText(_value="Five") -> text
 285[96]: GetRecord(data: ref(reference), db_tp=19, no_keys=1) -> ref(reference)
 289[80]: ConvBoolFromRef(val: ref(reference)) -> boolean
 290[69]: Not(v1: boolean) -> boolean
 291[69]: GotoFalseWord(jump=297, if_false: boolean)
 294[68]: GotoWord(jump=310)
 297[68]: ConstText(_value="No element") -> text
 309[84]: Panic(message: text)
 310[68]: ConstInt(val=0) -> integer var=sum[68]:integer
 315[72]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 318[84]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(17, [(0, false)]) keys [tp:6 desc:true field:0, ][19]
 321[84]: Iterate(data: ref(reference), on=130, arg=8, keys=[Key { type_nr: -6, position: 0 }], from_key=0, till_key=0) -> long
 331[80]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 334[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(17, [(0, false)]) keys [tp:6 desc:true field:0, ][19]
 337[92]: Step(state_var=20, data: ref(reference), on=130, arg=8) -> ref(reference)
 343[92]: VarRef(var[80]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=v[80]:ref(Elm)["db"]
 346[104]: ConvBoolFromRef(val: ref(reference)) -> boolean
 347[93]: Not(v1: boolean) -> boolean
 348[93]: GotoFalseWord(jump=358, if_false: boolean)
 351[92]: FreeStack(value=0, discard=12)
 355[80]: GotoWord(jump=384)
 358[92]: VarInt(var[68]) -> integer var=sum[68]:integer
 361[96]: ConstInt(val=10) -> integer
 366[100]: MulInt(v1: integer, v2: integer) -> integer
 367[96]: VarRef(var[80]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[17] var=v[80]:ref(Elm)["db"]
 370[108]: GetInt(v1: ref(reference), fld=4) -> integer
 373[100]: AddInt(v1: integer, v2: integer) -> integer
 374[96]: PutInt(var[68], value: integer)
 377[92]: FreeStack(value=0, discard=12)
 381[80]: GotoWord(jump=331)
 384[80]: FreeStack(value=0, discard=8)
 388[72]: VarInt(var[68]) -> integer var=sum[68]:integer
 391[76]: ConstInt(val=10) -> integer
 396[80]: MulInt(v1: integer, v2: integer) -> integer
 397[76]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 400[88]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(17, [(0, false)]) keys [tp:6 desc:true field:0, ][19]
 403[88]: ConstText(_value="Three") -> text
 410[104]: GetRecord(data: ref(reference), db_tp=19, no_keys=1) -> ref(reference)
 414[88]: GetInt(v1: ref(reference), fld=4) -> integer
 417[80]: AddInt(v1: integer, v2: integer) -> integer
 418[76]: PutInt(var[68], value: integer)
 421[72]: VarRef(var[32]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[18] var=db[32]:ref(Db)
 424[84]: FreeRef(v1: ref(reference))
 425[72]: VarInt(var[68]) -> integer var=sum[68]:integer
 428[76]: FreeStack(value=4, discard=44)
 432[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
 435[40]: ConstInt(val=23143) -> integer
 440[44]: EqInt(v1: integer, v2: integer) -> boolean
 441[37]: GotoFalseWord(jump=447, if_false: boolean)
 444[36]: GotoWord(jump=500)
 447[36]: ClearText(var[8]) var=__work_1[8]:text
 450[36]: ConstText(_value="Test failed ") -> text
 464[52]: AppendText(var[8], v1: text)
 467[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
 470[40]: ConstInt(val=0) -> integer
 475[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 482[36]: ConstText(_value=" != 23143") -> text
 493[52]: AppendText(var[8], v1: text)
 496[36]: VarText(var[8]) -> text var=__work_1[8]:text
 499[52]: Panic(message: text)
 500[36]: FreeText(var[8])
 503[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConvRefFromNull() -> ref(1,0,0)[32]
    2:[44] Database(var[32], db_tp=18)
    7:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
   10:[56] ConstInt(val=0) -> 0[56]
   15:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
   18:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
   21:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=18, fld=0) -> ref(1,9,8)[44]
   26:[56] VarRef(var[44]) -> ref(1,9,8)={}[56]
   29:[68] ConstText(_value="One") -> "One"[68]
   34:[84] SetText(v1=ref(1,9,8)[56], fld=0, val="One"[68])
   37:[56] VarRef(var[44]) -> ref(1,9,8)={key:"One"}[56]
   40:[68] ConstInt(val=1) -> 1[68]
   45:[72] SetInt(v1=ref(1,9,8)[56], fld=4, val=1[68])
   48:[56] VarRef(var[32]) -> ref(1,1,0)={map:[]}[56]
   51:[68] VarRef(var[44]) -> ref(1,9,8)={key:"One",value:1}[68]
   54:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,8)[68], parent_tp=18, fld=0)
   59:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
   62:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=18, fld=0) -> ref(1,9,24)[56]
   67:[68] PutRef(var[44], value=ref(1,9,24)[56])
   70:[56] VarRef(var[44]) -> ref(1,9,24)={}[56]
   73:[68] ConstText(_value="Two") -> "Two"[68]
   78:[84] SetText(v1=ref(1,9,24)[56], fld=0, val="Two"[68])
   81:[56] VarRef(var[44]) -> ref(1,9,24)={key:"Two"}[56]
   84:[68] ConstInt(val=2) -> 2[68]
   89:[72] SetInt(v1=ref(1,9,24)[56], fld=4, val=2[68])
   92:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
   95:[68] VarRef(var[44]) -> ref(1,9,24)={key:"Two",value:2}[68]
   98:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,24)[68], parent_tp=18, fld=0)
  103:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[56]
  106:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=18, fld=0) -> ref(1,9,32)[56]
  111:[68] VarRef(var[56]) -> ref(1,9,32)={}[68]
  114:[80] ConstText(_value="Three") -> "Three"[80]
  121:[96] SetText(v1=ref(1,9,32)[68], fld=0, val="Three"[80])
  124:[68] VarRef(var[56]) -> ref(1,9,32)={key:"Three"}[68]
  127:[80] ConstInt(val=3) -> 3[80]
  132:[84] SetInt(v1=ref(1,9,32)[68], fld=4, val=3[80])
  135:[68] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[68]
  138:[80] VarRef(var[56]) -> ref(1,9,32)={key:"Three",value:3}[80]
  141:[92] FinishRecord(data=ref(1,1,0)[68], rec=ref(1,9,32)[80], parent_tp=18, fld=0)
  146:[68] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[68]
  149:[80] NewRecord(data=ref(1,1,0)[68], parent_tp=18, fld=0) -> ref(1,9,40)[68]
  154:[80] PutRef(var[56], value=ref(1,9,40)[68])
  157:[68] VarRef(var[56]) -> ref(1,9,40)={}[68]
  160:[80] ConstText(_value="Four") -> "Four"[80]
  166:[96] SetText(v1=ref(1,9,40)[68], fld=0, val="Four"[80])
  169:[68] VarRef(var[56]) -> ref(1,9,40)={key:"Four"}[68]
  172:[80] ConstInt(val=4) -> 4[80]
  177:[84] SetInt(v1=ref(1,9,40)[68], fld=4, val=4[80])
  180:[68] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[68]
  183:[80] VarRef(var[56]) -> ref(1,9,40)={key:"Four",value:4}[80]
  186:[92] FinishRecord(data=ref(1,1,0)[68], rec=ref(1,9,40)[80], parent_tp=18, fld=0)
  191:[68] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[68]
  194:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][68]
  197:[80] ConstText(_value="Two") -> "Two"[80]
  202:[96] GetRecord(data=ref(1,1,4)[68], db_tp=19, no_keys=1, key1="Two"[80]) -> ref(1,9,8)[68]
  206:[80] GetInt(v1=ref(1,9,8)[68], fld=4) -> 2[68]
  209:[72] ConstInt(val=2) -> 2[72]
  214:[76] EqInt(v1=2[68], v2=2[72]) -> true[68]
  215:[69] GotoFalseWord(jump=221, if_false=true[68])
  218:[68] GotoWord(jump=235)
  235:[68] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[68]
  238:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][68]
  241:[80] ConstText(_value="Four") -> "Four"[80]
  247:[96] GetRecord(data=ref(1,1,4)[68], db_tp=19, no_keys=1, key1="Four"[80]) -> ref(1,9,32)[68]
  251:[80] ConvBoolFromRef(val=ref(1,9,32)[68]) -> true[68]
  252:[69] GotoFalseWord(jump=258, if_false=true[68])
  255:[68] GotoWord(jump=273)
  273:[68] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[68]
  276:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][68]
  279:[80] ConstText(_value="Five") -> "Five"[80]
  285:[96] GetRecord(data=ref(1,1,4)[68], db_tp=19, no_keys=1, key1="Five"[80]) -> ref(1,0,0)[68]
  289:[80] ConvBoolFromRef(val=ref(1,0,0)[68]) -> false[68]
  290:[69] Not(v1=false[68]) -> true[68]
  291:[69] GotoFalseWord(jump=297, if_false=true[68])
  294:[68] GotoWord(jump=310)
  310:[68] ConstInt(val=0) -> 0[68]
  315:[72] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[72]
  318:[84] GetField(v1=ref(1,1,0)[72], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][72]
  321:[84] Iterate(data=ref(1,1,4)[72], on=130, arg=8, keys=[Key { type_nr: -6, position: 0 }], from_key=0, till_key=0) -> 21474836479[72]
  331:[80] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[80]
  334:[92] GetField(v1=ref(1,1,0)[80], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][80]
  337:[92] Step(state_var=20, data=ref(1,1,4)[80], on=130, arg=8) -> ref(1,9,8)[80]
  343:[92] VarRef(var[80]) -> ref(1,9,8)={key:"Two",value:2}[92]
  346:[104] ConvBoolFromRef(val=ref(1,9,8)[92]) -> true[92]
  347:[93] Not(v1=true[92]) -> false[92]
  348:[93] GotoFalseWord(jump=358, if_false=false[92])
  358:[92] VarInt(var[68]) -> 0[92]
  361:[96] ConstInt(val=10) -> 10[96]
  366:[100] MulInt(v1=0[92], v2=10[96]) -> 0[92]
  367:[96] VarRef(var[80]) -> ref(1,9,8)={key:"Two",value:2}[96]
  370:[108] GetInt(v1=ref(1,9,8)[96], fld=4) -> 2[96]
  373:[100] AddInt(v1=0[92], v2=2[96]) -> 2[92]
  374:[96] PutInt(var[68], value=2[92])
  377:[92] FreeStack(value=0, discard=12)
  381:[80] GotoWord(jump=331)
  331:[80] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[80]
  334:[92] GetField(v1=ref(1,1,0)[80], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][80]
  337:[92] Step(state_var=20, data=ref(1,1,4)[80], on=130, arg=8) -> ref(1,9,16)[80]
  343:[92] VarRef(var[80]) -> ref(1,9,16)={key:"Three",value:3}[92]
  346:[104] ConvBoolFromRef(val=ref(1,9,16)[92]) -> true[92]
  347:[93] Not(v1=true[92]) -> false[92]
  348:[93] GotoFalseWord(jump=358, if_false=false[92])
  358:[92] VarInt(var[68]) -> 2[92]
  361:[96] ConstInt(val=10) -> 10[96]
  366:[100] MulInt(v1=2[92], v2=10[96]) -> 20[92]
  367:[96] VarRef(var[80]) -> ref(1,9,16)={key:"Three",value:3}[96]
  370:[108] GetInt(v1=ref(1,9,16)[96], fld=4) -> 3[96]
  373:[100] AddInt(v1=20[92], v2=3[96]) -> 23[92]
  374:[96] PutInt(var[68], value=23[92])
  377:[92] FreeStack(value=0, discard=12)
  381:[80] GotoWord(jump=331)
  331:[80] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[80]
  334:[92] GetField(v1=ref(1,1,0)[80], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][80]
  337:[92] Step(state_var=20, data=ref(1,1,4)[80], on=130, arg=8) -> ref(1,9,24)[80]
  343:[92] VarRef(var[80]) -> ref(1,9,24)={key:"One",value:1}[92]
  346:[104] ConvBoolFromRef(val=ref(1,9,24)[92]) -> true[92]
  347:[93] Not(v1=true[92]) -> false[92]
  348:[93] GotoFalseWord(jump=358, if_false=false[92])
  358:[92] VarInt(var[68]) -> 23[92]
  361:[96] ConstInt(val=10) -> 10[96]
  366:[100] MulInt(v1=23[92], v2=10[96]) -> 230[92]
  367:[96] VarRef(var[80]) -> ref(1,9,24)={key:"One",value:1}[96]
  370:[108] GetInt(v1=ref(1,9,24)[96], fld=4) -> 1[96]
  373:[100] AddInt(v1=230[92], v2=1[96]) -> 231[92]
  374:[96] PutInt(var[68], value=231[92])
  377:[92] FreeStack(value=0, discard=12)
  381:[80] GotoWord(jump=331)
  331:[80] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[80]
  334:[92] GetField(v1=ref(1,1,0)[80], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][80]
  337:[92] Step(state_var=20, data=ref(1,1,4)[80], on=130, arg=8) -> ref(1,9,32)[80]
  343:[92] VarRef(var[80]) -> ref(1,9,32)={key:"Four",value:4}[92]
  346:[104] ConvBoolFromRef(val=ref(1,9,32)[92]) -> true[92]
  347:[93] Not(v1=true[92]) -> false[92]
  348:[93] GotoFalseWord(jump=358, if_false=false[92])
  358:[92] VarInt(var[68]) -> 231[92]
  361:[96] ConstInt(val=10) -> 10[96]
  366:[100] MulInt(v1=231[92], v2=10[96]) -> 2310[92]
  367:[96] VarRef(var[80]) -> ref(1,9,32)={key:"Four",value:4}[96]
  370:[108] GetInt(v1=ref(1,9,32)[96], fld=4) -> 4[96]
  373:[100] AddInt(v1=2310[92], v2=4[96]) -> 2314[92]
  374:[96] PutInt(var[68], value=2314[92])
  377:[92] FreeStack(value=0, discard=12)
  381:[80] GotoWord(jump=331)
  331:[80] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[80]
  334:[92] GetField(v1=ref(1,1,0)[80], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][80]
  337:[92] Step(state_var=20, data=ref(1,1,4)[80], on=130, arg=8) -> ref(1,0,2147483647)[80]
  343:[92] VarRef(var[80]) -> ref(1,0,2147483647)=null[92]
  346:[104] ConvBoolFromRef(val=ref(1,0,2147483647)[92]) -> false[92]
  347:[93] Not(v1=false[92]) -> true[92]
  348:[93] GotoFalseWord(jump=358, if_false=true[92])
  351:[92] FreeStack(value=0, discard=12)
  355:[80] GotoWord(jump=384)
  384:[80] FreeStack(value=0, discard=8)
  388:[72] VarInt(var[68]) -> 2314[72]
  391:[76] ConstInt(val=10) -> 10[76]
  396:[80] MulInt(v1=2314[72], v2=10[76]) -> 23140[72]
  397:[76] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[76]
  400:[88] GetField(v1=ref(1,1,0)[76], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][76]
  403:[88] ConstText(_value="Three") -> "Three"[88]
  410:[104] GetRecord(data=ref(1,1,4)[76], db_tp=19, no_keys=1, key1="Three"[88]) -> ref(1,9,16)[76]
  414:[88] GetInt(v1=ref(1,9,16)[76], fld=4) -> 3[76]
  417:[80] AddInt(v1=23140[72], v2=3[76]) -> 23143[72]
  418:[76] PutInt(var[68], value=23143[72])
  421:[72] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[72]
  424:[84] FreeRef(v1=ref(1,1,0)[72])
  425:[72] VarInt(var[68]) -> 23143[72]
  428:[76] FreeStack(value=4, discard=44)
  432:[36] VarInt(var[32]) -> 23143[36]
  435:[40] ConstInt(val=23143) -> 23143[40]
  440:[44] EqInt(v1=23143[36], v2=23143[40]) -> true[36]
  441:[37] GotoFalseWord(jump=447, if_false=true[36])
  444:[36] GotoWord(jump=500)
  500:[36] FreeText(var[8])
  503:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
