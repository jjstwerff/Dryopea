Test code:
struct Elm {key: text, value: integer}
struct Db {map: sorted<Elm[-key]>}

pub fn test() {
    test_value = {db=Db {map: [Elm {key: "One", value: 1}, Elm {key: "Two", value: 2}]};
db.map += [Elm {key: "Three", value: 3}, Elm {key: "Four", value: 4}];
sum = 0;
for v in db.map {
  sum = sum * 10 + v.value;
};
sum = sum * 10 + db.map["Three"].value;
sum};
    assert(
        test_value == 23143,
        "Test failed {test_value} != 23143"
    );
}

Type 13:Elm[12]:
    key:text[4]
    value:integer[8]

Type 14:Db[8]:
    map:sorted<Elm[-key]>[4]

Type 15:sorted<Elm[-key]>[4]:Sorted(13, [(0, false)])

Type 16:vector<Elm>[4]:Vector(13)

fn test {
  let test_value = {
    let db = {
      let val = OpDatabase(8i32, 14i32);
      OpSetInt(val, 4i32, 0i32);
      let elm_16 = OpNewRecord(val, 14i32, 0i32);
      OpSetText(elm_16, 4i32, "One");
      OpSetInt(elm_16, 8i32, 1i32);
      OpFinishRecord(val, elm_16, 14i32, 0i32);
      elm_16 = OpNewRecord(val, 14i32, 0i32);
      OpSetText(elm_16, 4i32, "Two");
      OpSetInt(elm_16, 8i32, 2i32);
      OpFinishRecord(val, elm_16, 14i32, 0i32);
      val;
    };
    {
      let elm_17 = OpNewRecord(db, 14i32, 0i32);
      OpSetText(elm_17, 4i32, "Three");
      OpSetInt(elm_17, 8i32, 3i32);
      OpFinishRecord(db, elm_17, 14i32, 0i32);
      elm_17 = OpNewRecord(db, 14i32, 0i32);
      OpSetText(elm_17, 4i32, "Four");
      OpSetInt(elm_17, 8i32, 4i32);
      OpFinishRecord(db, elm_17, 14i32, 0i32);
    };
    let sum = 0i32;
    {
      let v#index = OpStart(OpGetField(db, 4i32, 15i32), 15i32, 0i32);
      loop {
        let v = OpNext(OpGetField(db, 4i32, 15i32), v#index, 15i32, 0i32);
        if OpNot(OpConvBoolFromRef(v)) {break(0)} else {null};
        {
          sum = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        };
      };
    };
    sum = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(OpGetRecord(OpGetField(db, 4i32, 15i32), 15i32, 1i32, "Three"), 8i32));
    sum;
  };
  if OpEqInt(test_value, 23143i32) {null} else {OpGenPanic({
    let append_18 = "Test failed ";
    OpFormatInt(append_18, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_18, " != 23143");
    append_18;
  })};
}

byte-code for sorted_vector:test()
 668[0]: return-address
 668[4]: Database(size=8, db_tp=14) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 673[16]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 676[28]: ConstInt(val=0) -> integer
 681[32]: SetInt(v1: reference, fld=4, val: integer)
 684[16]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 687[28]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 692[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 695[40]: ConstText(_value="One") -> text
 700[56]: SetText(v1: reference, fld=4, val: text)
 703[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 706[40]: ConstInt(val=1) -> integer
 711[44]: SetInt(v1: reference, fld=8, val: integer)
 714[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 717[40]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 720[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 725[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 728[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 733[40]: PutRef(var[16], value: reference)
 736[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 739[40]: ConstText(_value="Two") -> text
 744[56]: SetText(v1: reference, fld=4, val: text)
 747[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 750[40]: ConstInt(val=2) -> integer
 755[44]: SetInt(v1: reference, fld=8, val: integer)
 758[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 761[40]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 764[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 769[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 772[40]: GenFreeStack(value=12, discard=24)
 776[16]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 779[28]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 784[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 787[40]: ConstText(_value="Three") -> text
 794[56]: SetText(v1: reference, fld=4, val: text)
 797[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 800[40]: ConstInt(val=3) -> integer
 805[44]: SetInt(v1: reference, fld=8, val: integer)
 808[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 811[40]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 814[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 819[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 822[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 827[40]: PutRef(var[16], value: reference)
 830[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 833[40]: ConstText(_value="Four") -> text
 839[56]: SetText(v1: reference, fld=4, val: text)
 842[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 845[40]: ConstInt(val=4) -> integer
 850[44]: SetInt(v1: reference, fld=8, val: integer)
 853[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 856[40]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 859[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 864[28]: GenFreeStack(value=0, discard=12)
 868[16]: ConstInt(val=0) -> integer
 873[20]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 876[32]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(13, [(0, false)])[15]
 879[32]: Start(data: reference, db_tp=15, no_keys=0) -> integer
 883[24]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 886[36]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(13, [(0, false)])[15]
 889[36]: Next(data: reference, pos=16, db_tp=15, no_keys=0) -> reference
 895[36]: VarRef(var[24]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 898[48]: ConvBoolFromRef(val: reference) -> boolean
 899[37]: Not(v1: boolean) -> boolean
 900[37]: GenGotoFalseWord(jump=910, if_false: boolean)
 903[36]: GenFreeStack(value=0, discard=12)
 907[24]: GenGotoWord(jump=936)
 910[36]: VarInt(var[16]) -> integer
 913[40]: ConstInt(val=10) -> integer
 918[44]: MulInt(v1: integer, v2: integer) -> integer
 919[40]: VarRef(var[24]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 922[52]: GetInt(v1: reference, fld=8) -> integer
 925[44]: AddInt(v1: integer, v2: integer) -> integer
 926[40]: PutInt(var[16], value: integer)
 929[36]: GenFreeStack(value=0, discard=12)
 933[24]: GenGotoWord(jump=883)
 936[24]: GenFreeStack(value=0, discard=4)
 940[20]: VarInt(var[16]) -> integer
 943[24]: ConstInt(val=10) -> integer
 948[28]: MulInt(v1: integer, v2: integer) -> integer
 949[24]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 952[36]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(13, [(0, false)])[15]
 955[36]: ConstText(_value="Three") -> text
 962[52]: GetRecord(data: reference, db_tp=15, no_keys=1) -> reference
 966[36]: GetInt(v1: reference, fld=8) -> integer
 969[28]: AddInt(v1: integer, v2: integer) -> integer
 970[24]: PutInt(var[16], value: integer)
 973[20]: VarInt(var[16]) -> integer
 976[24]: GenFreeStack(value=4, discard=16)
 980[8]: VarInt(var[4]) -> integer
 983[12]: ConstInt(val=23143) -> integer
 988[16]: EqInt(v1: integer, v2: integer) -> boolean
 989[9]: GenGotoFalseWord(jump=995, if_false: boolean)
 992[8]: GenGotoWord(jump=1050)
 995[8]: Text()
 996[32]: ConstText(_value="Test failed ") -> text
1010[48]: AppendText(var[8], v1: text)
1013[32]: VarInt(var[4]) -> integer
1016[36]: ConstInt(val=0) -> integer
1021[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1028[32]: ConstText(_value=" != 23143") -> text
1039[48]: AppendText(var[8], v1: text)
1042[32]: VarText(var[8]) -> text
1045[48]: GenFreeStack(value=16, discard=24)
1049[24]: GenPanic(message: text)
1050[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] Database(size=8, db_tp=14) -> ref(1,1,0)={map:[]}[4]
  673:[16] VarRef(var[4]) -> ref(1,1,0)={map:[]}[16]
  676:[28] ConstInt(val=0) -> 0[28]
  681:[32] SetInt(v1=ref(1,1,0)[16], fld=4, val=0[28])
  684:[16] VarRef(var[4]) -> ref(1,1,0)={map:[]}[16]
  687:[28] NewRecord(data=ref(1,1,0)[16], parent_tp=14, fld=0) -> ref(1,9,8)[16]
  692:[28] VarRef(var[16]) -> ref(1,9,8)={}[28]
  695:[40] ConstText(_value="One") -> "One"[40]
  700:[56] SetText(v1=ref(1,9,8)[28], fld=4, val="One"[40])
  703:[28] VarRef(var[16]) -> ref(1,9,8)={key:"One"}[28]
  706:[40] ConstInt(val=1) -> 1[40]
  711:[44] SetInt(v1=ref(1,9,8)[28], fld=8, val=1[40])
  714:[28] VarRef(var[4]) -> ref(1,1,0)={map:[]}[28]
  717:[40] VarRef(var[16]) -> ref(1,9,8)={key:"One",value:1}[40]
  720:[52] FinishRecord(data=ref(1,1,0)[28], rec=ref(1,9,8)[40], parent_tp=14, fld=0)
  725:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[28]
  728:[40] NewRecord(data=ref(1,1,0)[28], parent_tp=14, fld=0) -> ref(1,9,32)[28]
  733:[40] PutRef(var[16], value=ref(1,9,32)[28])
  736:[28] VarRef(var[16]) -> ref(1,9,32)={}[28]
  739:[40] ConstText(_value="Two") -> "Two"[40]
  744:[56] SetText(v1=ref(1,9,32)[28], fld=4, val="Two"[40])
  747:[28] VarRef(var[16]) -> ref(1,9,32)={key:"Two"}[28]
  750:[40] ConstInt(val=2) -> 2[40]
  755:[44] SetInt(v1=ref(1,9,32)[28], fld=8, val=2[40])
  758:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[28]
  761:[40] VarRef(var[16]) -> ref(1,9,32)={key:"Two",value:2}[40]
  764:[52] FinishRecord(data=ref(1,1,0)[28], rec=ref(1,9,32)[40], parent_tp=14, fld=0)
  769:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[28]
  772:[40] GenFreeStack(value=12, discard=24)
  776:[16] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[16]
  779:[28] NewRecord(data=ref(1,1,0)[16], parent_tp=14, fld=0) -> ref(1,9,44)[16]
  784:[28] VarRef(var[16]) -> ref(1,9,44)={}[28]
  787:[40] ConstText(_value="Three") -> "Three"[40]
  794:[56] SetText(v1=ref(1,9,44)[28], fld=4, val="Three"[40])
  797:[28] VarRef(var[16]) -> ref(1,9,44)={key:"Three"}[28]
  800:[40] ConstInt(val=3) -> 3[40]
  805:[44] SetInt(v1=ref(1,9,44)[28], fld=8, val=3[40])
  808:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[28]
  811:[40] VarRef(var[16]) -> ref(1,9,44)={key:"Three",value:3}[40]
  814:[52] FinishRecord(data=ref(1,1,0)[28], rec=ref(1,9,44)[40], parent_tp=14, fld=0)
  819:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[28]
  822:[40] NewRecord(data=ref(1,1,0)[28], parent_tp=14, fld=0) -> ref(1,9,56)[28]
  827:[40] PutRef(var[16], value=ref(1,9,56)[28])
  830:[28] VarRef(var[16]) -> ref(1,9,56)={}[28]
  833:[40] ConstText(_value="Four") -> "Four"[40]
  839:[56] SetText(v1=ref(1,9,56)[28], fld=4, val="Four"[40])
  842:[28] VarRef(var[16]) -> ref(1,9,56)={key:"Four"}[28]
  845:[40] ConstInt(val=4) -> 4[40]
  850:[44] SetInt(v1=ref(1,9,56)[28], fld=8, val=4[40])
  853:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[28]
  856:[40] VarRef(var[16]) -> ref(1,9,56)={key:"Four",value:4}[40]
  859:[52] FinishRecord(data=ref(1,1,0)[28], rec=ref(1,9,56)[40], parent_tp=14, fld=0)
  864:[28] GenFreeStack(value=0, discard=12)
  868:[16] ConstInt(val=0) -> 0[16]
  873:[20] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[20]
  876:[32] GetField(v1=ref(1,1,0)[20], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][20]
  879:[32] Start(data=ref(1,1,4)[20], db_tp=15, no_keys=0) -> 2147483647[20]
  883:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  886:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  889:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,9,8)[24]
  895:[36] VarRef(var[24]) -> ref(1,9,8)={key:"Two",value:2}[36]
  898:[48] ConvBoolFromRef(val=ref(1,9,8)[36]) -> true[36]
  899:[37] Not(v1=true[36]) -> false[36]
  900:[37] GenGotoFalseWord(jump=910, if_false=false[36])
  910:[36] VarInt(var[16]) -> 0[36]
  913:[40] ConstInt(val=10) -> 10[40]
  918:[44] MulInt(v1=0[36], v2=10[40]) -> 0[36]
  919:[40] VarRef(var[24]) -> ref(1,9,8)={key:"Two",value:2}[40]
  922:[52] GetInt(v1=ref(1,9,8)[40], fld=8) -> 2[40]
  925:[44] AddInt(v1=0[36], v2=2[40]) -> 2[36]
  926:[40] PutInt(var[16], value=2[36])
  929:[36] GenFreeStack(value=0, discard=12)
  933:[24] GenGotoWord(jump=883)
  883:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  886:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  889:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,9,20)[24]
  895:[36] VarRef(var[24]) -> ref(1,9,20)={key:"Three",value:3}[36]
  898:[48] ConvBoolFromRef(val=ref(1,9,20)[36]) -> true[36]
  899:[37] Not(v1=true[36]) -> false[36]
  900:[37] GenGotoFalseWord(jump=910, if_false=false[36])
  910:[36] VarInt(var[16]) -> 2[36]
  913:[40] ConstInt(val=10) -> 10[40]
  918:[44] MulInt(v1=2[36], v2=10[40]) -> 20[36]
  919:[40] VarRef(var[24]) -> ref(1,9,20)={key:"Three",value:3}[40]
  922:[52] GetInt(v1=ref(1,9,20)[40], fld=8) -> 3[40]
  925:[44] AddInt(v1=20[36], v2=3[40]) -> 23[36]
  926:[40] PutInt(var[16], value=23[36])
  929:[36] GenFreeStack(value=0, discard=12)
  933:[24] GenGotoWord(jump=883)
  883:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  886:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  889:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,9,32)[24]
  895:[36] VarRef(var[24]) -> ref(1,9,32)={key:"One",value:1}[36]
  898:[48] ConvBoolFromRef(val=ref(1,9,32)[36]) -> true[36]
  899:[37] Not(v1=true[36]) -> false[36]
  900:[37] GenGotoFalseWord(jump=910, if_false=false[36])
  910:[36] VarInt(var[16]) -> 23[36]
  913:[40] ConstInt(val=10) -> 10[40]
  918:[44] MulInt(v1=23[36], v2=10[40]) -> 230[36]
  919:[40] VarRef(var[24]) -> ref(1,9,32)={key:"One",value:1}[40]
  922:[52] GetInt(v1=ref(1,9,32)[40], fld=8) -> 1[40]
  925:[44] AddInt(v1=230[36], v2=1[40]) -> 231[36]
  926:[40] PutInt(var[16], value=231[36])
  929:[36] GenFreeStack(value=0, discard=12)
  933:[24] GenGotoWord(jump=883)
  883:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  886:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  889:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,9,44)[24]
  895:[36] VarRef(var[24]) -> ref(1,9,44)={key:"Four",value:4}[36]
  898:[48] ConvBoolFromRef(val=ref(1,9,44)[36]) -> true[36]
  899:[37] Not(v1=true[36]) -> false[36]
  900:[37] GenGotoFalseWord(jump=910, if_false=false[36])
  910:[36] VarInt(var[16]) -> 231[36]
  913:[40] ConstInt(val=10) -> 10[40]
  918:[44] MulInt(v1=231[36], v2=10[40]) -> 2310[36]
  919:[40] VarRef(var[24]) -> ref(1,9,44)={key:"Four",value:4}[40]
  922:[52] GetInt(v1=ref(1,9,44)[40], fld=8) -> 4[40]
  925:[44] AddInt(v1=2310[36], v2=4[40]) -> 2314[36]
  926:[40] PutInt(var[16], value=2314[36])
  929:[36] GenFreeStack(value=0, discard=12)
  933:[24] GenGotoWord(jump=883)
  883:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  886:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  889:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,0,2147483647)[24]
  895:[36] VarRef(var[24]) -> ref(1,0,2147483647)={}[36]
  898:[48] ConvBoolFromRef(val=ref(1,0,2147483647)[36]) -> false[36]
  899:[37] Not(v1=false[36]) -> true[36]
  900:[37] GenGotoFalseWord(jump=910, if_false=true[36])
  903:[36] GenFreeStack(value=0, discard=12)
  907:[24] GenGotoWord(jump=936)
  936:[24] GenFreeStack(value=0, discard=4)
  940:[20] VarInt(var[16]) -> 2314[20]
  943:[24] ConstInt(val=10) -> 10[24]
  948:[28] MulInt(v1=2314[20], v2=10[24]) -> 23140[20]
  949:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  952:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  955:[36] ConstText(_value="Three") -> "Three"[36]
  962:[52] GetRecord(data=ref(1,1,4)[24], db_tp=15, no_keys=1, key1="Three"[36]) -> ref(1,9,20)[24]
  966:[36] GetInt(v1=ref(1,9,20)[24], fld=8) -> 3[24]
  969:[28] AddInt(v1=23140[20], v2=3[24]) -> 23143[20]
  970:[24] PutInt(var[16], value=23143[20])
  973:[20] VarInt(var[16]) -> 23143[20]
  976:[24] GenFreeStack(value=4, discard=16)
  980:[8] VarInt(var[4]) -> 23143[8]
  983:[12] ConstInt(val=23143) -> 23143[12]
  988:[16] EqInt(v1=23143[8], v2=23143[12]) -> true[8]
  989:[9] GenGotoFalseWord(jump=995, if_false=true[8])
  992:[8] GenGotoWord(jump=1050)
 1050:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
