struct Elm {key: text, value: integer}
struct Db {map: sorted<Elm[-key]>}

pub fn test() {
    test_value = {db=Db {map: [Elm {key: "One", value: 1}, Elm {key: "Two", value: 2}]};
db.map += [Elm {key: "Three", value: 3}, Elm {key: "Four", value: 4}];
sum = 0;
for v in db.map {
  sum = sum * 10 + v.value;
};
sum = sum * 10 + db.map["Three"].value;
sum};
    assert(
        test_value == 23143,
        "Test failed {test_value} != 23143"
    );
}
Type 12:Elm[12]:
    key:text[4]
    value:integer[8]

Type 13:Db[8]:
    map:sorted<Elm[-key]>[4]

Type 14:sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ]

Type 15:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __ref_1:Db = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    db:Db["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 13i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      {#4 vector
        _elm_1:Elm = OpNewRecord(__ref_1, 13i32, 0i32);
        {#5 object
          OpSetText(_elm_1, 4i32, "One");
          OpSetInt(_elm_1, 8i32, 1i32);
        }#5;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:Elm = OpNewRecord(__ref_1, 13i32, 0i32);
        {#6 object
          OpSetText(_elm_1, 4i32, "Two");
          OpSetInt(_elm_1, 8i32, 2i32);
        }#6;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
      }#4;
      __ref_1;
    }#3:Db["__ref_1"];
    {#7 vector
      _elm_2:Elm = OpNewRecord(db, 13i32, 0i32);
      {#8 object
        OpSetText(_elm_2, 4i32, "Three");
        OpSetInt(_elm_2, 8i32, 3i32);
      }#8;
      OpFinishRecord(db, _elm_2, 13i32, 0i32);
      _elm_2:Elm = OpNewRecord(db, 13i32, 0i32);
      {#9 object
        OpSetText(_elm_2, 4i32, "Four");
        OpSetInt(_elm_2, 8i32, 4i32);
      }#9;
      OpFinishRecord(db, _elm_2, 13i32, 0i32);
    }#7;
    sum:integer = 0i32;
    {#10 for
      v#index:integer = OpStart(OpGetField(db, 4i32, 14i32), 14i32, 0i32);
      loop {#11 for loop
        v:Elm = OpNext(OpGetField(db, 4i32, 14i32), v#index, 14i32, 0i32);
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#12 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        }#12;
      }#11;
    }#10;
    sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 1i32, "Three"), 8i32));
    sum;
  }#2:integer;
  if OpEqInt(test_value, 23143i32) null else OpPanic({#13 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 23143");
    __work_1;
  }#13:text);
}#1

byte-code for sorted_vector:test()
 691[0]: return-address
 691[4]: ConvRefFromNull() -> reference
 692[16]: Text()
 693[40]: Database(var[4], db_tp=13) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 698[40]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 701[52]: ConstInt(val=0) -> integer
 706[56]: SetInt(v1: reference, fld=4, val: integer)
 709[40]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 712[52]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 717[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 720[64]: ConstText(_value="One") -> text
 725[80]: SetText(v1: reference, fld=4, val: text)
 728[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 731[64]: ConstInt(val=1) -> integer
 736[68]: SetInt(v1: reference, fld=8, val: integer)
 739[52]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 742[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 745[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 750[52]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 753[64]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 758[64]: PutRef(var[40], value: reference)
 761[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 764[64]: ConstText(_value="Two") -> text
 769[80]: SetText(v1: reference, fld=4, val: text)
 772[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 775[64]: ConstInt(val=2) -> integer
 780[68]: SetInt(v1: reference, fld=8, val: integer)
 783[52]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 786[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 789[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 794[52]: FreeStack(value=0, discard=12)
 798[40]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 801[52]: VarRef(var[40]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 804[64]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 809[64]: VarRef(var[52]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 812[76]: ConstText(_value="Three") -> text
 819[92]: SetText(v1: reference, fld=4, val: text)
 822[64]: VarRef(var[52]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 825[76]: ConstInt(val=3) -> integer
 830[80]: SetInt(v1: reference, fld=8, val: integer)
 833[64]: VarRef(var[40]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 836[76]: VarRef(var[52]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 839[88]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 844[64]: VarRef(var[40]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 847[76]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 852[76]: PutRef(var[52], value: reference)
 855[64]: VarRef(var[52]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 858[76]: ConstText(_value="Four") -> text
 864[92]: SetText(v1: reference, fld=4, val: text)
 867[64]: VarRef(var[52]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 870[76]: ConstInt(val=4) -> integer
 875[80]: SetInt(v1: reference, fld=8, val: integer)
 878[64]: VarRef(var[40]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 881[76]: VarRef(var[52]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 884[88]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 889[64]: FreeStack(value=0, discard=12)
 893[52]: ConstInt(val=0) -> integer
 898[56]: VarRef(var[40]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 901[68]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ][14]
 904[68]: Start(data: reference, db_tp=14, no_keys=0) -> integer
 908[60]: VarRef(var[40]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 911[72]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ][14]
 914[72]: Next(data: reference, pos=16, db_tp=14, no_keys=0) -> reference
 920[72]: VarRef(var[60]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 923[84]: ConvBoolFromRef(val: reference) -> boolean
 924[73]: Not(v1: boolean) -> boolean
 925[73]: GotoFalseWord(jump=935, if_false: boolean)
 928[72]: FreeStack(value=0, discard=12)
 932[60]: GotoWord(jump=961)
 935[72]: VarInt(var[52]) -> integer
 938[76]: ConstInt(val=10) -> integer
 943[80]: MulInt(v1: integer, v2: integer) -> integer
 944[76]: VarRef(var[60]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 947[88]: GetInt(v1: reference, fld=8) -> integer
 950[80]: AddInt(v1: integer, v2: integer) -> integer
 951[76]: PutInt(var[52], value: integer)
 954[72]: FreeStack(value=0, discard=12)
 958[60]: GotoWord(jump=908)
 961[60]: FreeStack(value=0, discard=4)
 965[56]: VarInt(var[52]) -> integer
 968[60]: ConstInt(val=10) -> integer
 973[64]: MulInt(v1: integer, v2: integer) -> integer
 974[60]: VarRef(var[40]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 977[72]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ][14]
 980[72]: ConstText(_value="Three") -> text
 987[88]: GetRecord(data: reference, db_tp=14, no_keys=1) -> reference
 991[72]: GetInt(v1: reference, fld=8) -> integer
 994[64]: AddInt(v1: integer, v2: integer) -> integer
 995[60]: PutInt(var[52], value: integer)
 998[56]: VarInt(var[52]) -> integer
1001[60]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
1005[44]: VarInt(var[40]) -> integer
1008[48]: ConstInt(val=23143) -> integer
1013[52]: EqInt(v1: integer, v2: integer) -> boolean
1014[45]: GotoFalseWord(jump=1020, if_false: boolean)
1017[44]: GotoWord(jump=1073)
1020[44]: ClearText(var[16])
1023[44]: ConstText(_value="Test failed ") -> text
1037[60]: AppendText(var[16], v1: text)
1040[44]: VarInt(var[40]) -> integer
1043[48]: ConstInt(val=0) -> integer
1048[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1055[44]: ConstText(_value=" != 23143") -> text
1066[60]: AppendText(var[16], v1: text)
1069[44]: VarText(var[16]) -> text
1072[60]: Panic(message: text)
1073[44]: FreeText(var[16])
1076[44]: Return(ret=0, value=0, discard=44)

Execute test:
  691:[8] ConvRefFromNull() -> ref(65535,0,0)[8]
  692:[20] Text()
  693:[44] Database(var[8], db_tp=13)
  698:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  701:[56] ConstInt(val=0) -> 0[56]
  706:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  709:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  712:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=13, fld=0) -> ref(1,9,8)[44]
  717:[56] VarRef(var[44]) -> ref(1,9,8)={}[56]
  720:[68] ConstText(_value="One") -> "One"[68]
  725:[84] SetText(v1=ref(1,9,8)[56], fld=4, val="One"[68])
  728:[56] VarRef(var[44]) -> ref(1,9,8)={key:"One"}[56]
  731:[68] ConstInt(val=1) -> 1[68]
  736:[72] SetInt(v1=ref(1,9,8)[56], fld=8, val=1[68])
  739:[56] VarRef(var[8]) -> ref(1,1,0)={map:[]}[56]
  742:[68] VarRef(var[44]) -> ref(1,9,8)={key:"One",value:1}[68]
  745:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,8)[68], parent_tp=13, fld=0)
  750:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  753:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,9,32)[56]
  758:[68] PutRef(var[44], value=ref(1,9,32)[56])
  761:[56] VarRef(var[44]) -> ref(1,9,32)={}[56]
  764:[68] ConstText(_value="Two") -> "Two"[68]
  769:[84] SetText(v1=ref(1,9,32)[56], fld=4, val="Two"[68])
  772:[56] VarRef(var[44]) -> ref(1,9,32)={key:"Two"}[56]
  775:[68] ConstInt(val=2) -> 2[68]
  780:[72] SetInt(v1=ref(1,9,32)[56], fld=8, val=2[68])
  783:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  786:[68] VarRef(var[44]) -> ref(1,9,32)={key:"Two",value:2}[68]
  789:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,32)[68], parent_tp=13, fld=0)
  794:[56] FreeStack(value=0, discard=12)
  798:[44] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[44]
  801:[56] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[56]
  804:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,9,44)[56]
  809:[68] VarRef(var[56]) -> ref(1,9,44)={}[68]
  812:[80] ConstText(_value="Three") -> "Three"[80]
  819:[96] SetText(v1=ref(1,9,44)[68], fld=4, val="Three"[80])
  822:[68] VarRef(var[56]) -> ref(1,9,44)={key:"Three"}[68]
  825:[80] ConstInt(val=3) -> 3[80]
  830:[84] SetInt(v1=ref(1,9,44)[68], fld=8, val=3[80])
  833:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[68]
  836:[80] VarRef(var[56]) -> ref(1,9,44)={key:"Three",value:3}[80]
  839:[92] FinishRecord(data=ref(1,1,0)[68], rec=ref(1,9,44)[80], parent_tp=13, fld=0)
  844:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[68]
  847:[80] NewRecord(data=ref(1,1,0)[68], parent_tp=13, fld=0) -> ref(1,9,56)[68]
  852:[80] PutRef(var[56], value=ref(1,9,56)[68])
  855:[68] VarRef(var[56]) -> ref(1,9,56)={}[68]
  858:[80] ConstText(_value="Four") -> "Four"[80]
  864:[96] SetText(v1=ref(1,9,56)[68], fld=4, val="Four"[80])
  867:[68] VarRef(var[56]) -> ref(1,9,56)={key:"Four"}[68]
  870:[80] ConstInt(val=4) -> 4[80]
  875:[84] SetInt(v1=ref(1,9,56)[68], fld=8, val=4[80])
  878:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[68]
  881:[80] VarRef(var[56]) -> ref(1,9,56)={key:"Four",value:4}[80]
  884:[92] FinishRecord(data=ref(1,1,0)[68], rec=ref(1,9,56)[80], parent_tp=13, fld=0)
  889:[68] FreeStack(value=0, discard=12)
  893:[56] ConstInt(val=0) -> 0[56]
  898:[60] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[60]
  901:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][60]
  904:[72] Start(data=ref(1,1,4)[60], db_tp=14, no_keys=0) -> 2147483647[60]
  908:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  911:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  914:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,8)[64]
  920:[76] VarRef(var[64]) -> ref(1,9,8)={key:"Two",value:2}[76]
  923:[88] ConvBoolFromRef(val=ref(1,9,8)[76]) -> true[76]
  924:[77] Not(v1=true[76]) -> false[76]
  925:[77] GotoFalseWord(jump=935, if_false=false[76])
  935:[76] VarInt(var[56]) -> 0[76]
  938:[80] ConstInt(val=10) -> 10[80]
  943:[84] MulInt(v1=0[76], v2=10[80]) -> 0[76]
  944:[80] VarRef(var[64]) -> ref(1,9,8)={key:"Two",value:2}[80]
  947:[92] GetInt(v1=ref(1,9,8)[80], fld=8) -> 2[80]
  950:[84] AddInt(v1=0[76], v2=2[80]) -> 2[76]
  951:[80] PutInt(var[56], value=2[76])
  954:[76] FreeStack(value=0, discard=12)
  958:[64] GotoWord(jump=908)
  908:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  911:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  914:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,20)[64]
  920:[76] VarRef(var[64]) -> ref(1,9,20)={key:"Three",value:3}[76]
  923:[88] ConvBoolFromRef(val=ref(1,9,20)[76]) -> true[76]
  924:[77] Not(v1=true[76]) -> false[76]
  925:[77] GotoFalseWord(jump=935, if_false=false[76])
  935:[76] VarInt(var[56]) -> 2[76]
  938:[80] ConstInt(val=10) -> 10[80]
  943:[84] MulInt(v1=2[76], v2=10[80]) -> 20[76]
  944:[80] VarRef(var[64]) -> ref(1,9,20)={key:"Three",value:3}[80]
  947:[92] GetInt(v1=ref(1,9,20)[80], fld=8) -> 3[80]
  950:[84] AddInt(v1=20[76], v2=3[80]) -> 23[76]
  951:[80] PutInt(var[56], value=23[76])
  954:[76] FreeStack(value=0, discard=12)
  958:[64] GotoWord(jump=908)
  908:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  911:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  914:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,32)[64]
  920:[76] VarRef(var[64]) -> ref(1,9,32)={key:"One",value:1}[76]
  923:[88] ConvBoolFromRef(val=ref(1,9,32)[76]) -> true[76]
  924:[77] Not(v1=true[76]) -> false[76]
  925:[77] GotoFalseWord(jump=935, if_false=false[76])
  935:[76] VarInt(var[56]) -> 23[76]
  938:[80] ConstInt(val=10) -> 10[80]
  943:[84] MulInt(v1=23[76], v2=10[80]) -> 230[76]
  944:[80] VarRef(var[64]) -> ref(1,9,32)={key:"One",value:1}[80]
  947:[92] GetInt(v1=ref(1,9,32)[80], fld=8) -> 1[80]
  950:[84] AddInt(v1=230[76], v2=1[80]) -> 231[76]
  951:[80] PutInt(var[56], value=231[76])
  954:[76] FreeStack(value=0, discard=12)
  958:[64] GotoWord(jump=908)
  908:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  911:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  914:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,44)[64]
  920:[76] VarRef(var[64]) -> ref(1,9,44)={key:"Four",value:4}[76]
  923:[88] ConvBoolFromRef(val=ref(1,9,44)[76]) -> true[76]
  924:[77] Not(v1=true[76]) -> false[76]
  925:[77] GotoFalseWord(jump=935, if_false=false[76])
  935:[76] VarInt(var[56]) -> 231[76]
  938:[80] ConstInt(val=10) -> 10[80]
  943:[84] MulInt(v1=231[76], v2=10[80]) -> 2310[76]
  944:[80] VarRef(var[64]) -> ref(1,9,44)={key:"Four",value:4}[80]
  947:[92] GetInt(v1=ref(1,9,44)[80], fld=8) -> 4[80]
  950:[84] AddInt(v1=2310[76], v2=4[80]) -> 2314[76]
  951:[80] PutInt(var[56], value=2314[76])
  954:[76] FreeStack(value=0, discard=12)
  958:[64] GotoWord(jump=908)
  908:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  911:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  914:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,0,2147483647)[64]
  920:[76] VarRef(var[64]) -> ref(1,0,2147483647)={}[76]
  923:[88] ConvBoolFromRef(val=ref(1,0,2147483647)[76]) -> false[76]
  924:[77] Not(v1=false[76]) -> true[76]
  925:[77] GotoFalseWord(jump=935, if_false=true[76])
  928:[76] FreeStack(value=0, discard=12)
  932:[64] GotoWord(jump=961)
  961:[64] FreeStack(value=0, discard=4)
  965:[60] VarInt(var[56]) -> 2314[60]
  968:[64] ConstInt(val=10) -> 10[64]
  973:[68] MulInt(v1=2314[60], v2=10[64]) -> 23140[60]
  974:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  977:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  980:[76] ConstText(_value="Three") -> "Three"[76]
  987:[92] GetRecord(data=ref(1,1,4)[64], db_tp=14, no_keys=1, key1="Three"[76]) -> ref(1,9,20)[64]
  991:[76] GetInt(v1=ref(1,9,20)[64], fld=8) -> 3[64]
  994:[68] AddInt(v1=23140[60], v2=3[64]) -> 23143[60]
  995:[64] PutInt(var[56], value=23143[60])
  998:[60] VarInt(var[56]) -> 23143[60]
 1001:[64] FreeStack(value=4, discard=20)
 1005:[48] VarInt(var[44]) -> 23143[48]
 1008:[52] ConstInt(val=23143) -> 23143[52]
 1013:[56] EqInt(v1=23143[48], v2=23143[52]) -> true[48]
 1014:[49] GotoFalseWord(jump=1020, if_false=true[48])
 1017:[48] GotoWord(jump=1073)
 1073:[48] FreeText(var[20])
 1076:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
