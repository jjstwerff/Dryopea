struct Elm {key: text, value: integer}
struct Db {map: sorted<Elm[-key]>}

pub fn test() {
    test_value = {db=Db {map: [Elm {key: "One", value: 1}, Elm {key: "Two", value: 2}]};
db.map += [Elm {key: "Three", value: 3}, Elm {key: "Four", value: 4}];
sum = 0;
for v in db.map {
  sum = sum * 10 + v.value;
};
sum = sum * 10 + db.map["Three"].value;
sum};
    assert(
        test_value == 23143,
        "Test failed {test_value} != 23143"
    );
}
Type 11:Elm[12]:
    key:text[4]
    value:integer[8]

Type 12:Db[8]:
    map:sorted<Elm[-key]>[4]

Type 13:sorted<Elm[-key]>[4]:Sorted(11, [(0, false)]) keys [tp:6 desc:true field:4, ]

Type 14:vector<Elm>[4]:Vector(11)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    db:Db = {#3 object
      _val_1:Db = OpDatabase(8i32, 12i32);
      OpSetInt(_val_1, 4i32, 0i32);
      {#4 vector
        _elm_2:Elm = OpNewRecord(_val_1, 12i32, 0i32);
        {#5 object
          OpSetText(_elm_2, 4i32, "One");
          OpSetInt(_elm_2, 8i32, 1i32);
        }#5;
        OpFinishRecord(_val_1, _elm_2, 12i32, 0i32);
        _elm_2:Elm = OpNewRecord(_val_1, 12i32, 0i32);
        {#6 object
          OpSetText(_elm_2, 4i32, "Two");
          OpSetInt(_elm_2, 8i32, 2i32);
        }#6;
        OpFinishRecord(_val_1, _elm_2, 12i32, 0i32);
      }#4;
      _val_1;
    }#3:Db;
    {#7 vector
      _elm_3:Elm = OpNewRecord(db, 12i32, 0i32);
      {#8 object
        OpSetText(_elm_3, 4i32, "Three");
        OpSetInt(_elm_3, 8i32, 3i32);
      }#8;
      OpFinishRecord(db, _elm_3, 12i32, 0i32);
      _elm_3:Elm = OpNewRecord(db, 12i32, 0i32);
      {#9 object
        OpSetText(_elm_3, 4i32, "Four");
        OpSetInt(_elm_3, 8i32, 4i32);
      }#9;
      OpFinishRecord(db, _elm_3, 12i32, 0i32);
    }#7;
    sum:integer = 0i32;
    {#10 for
      v#index:integer = OpStart(OpGetField(db, 4i32, 13i32), 13i32, 0i32);
      loop {#11 for loop
        v:Elm = OpNext(OpGetField(db, 4i32, 13i32), v#index, 13i32, 0i32);
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#12 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        }#12;
      }#11;
    }#10;
    sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(OpGetRecord(OpGetField(db, 4i32, 13i32), 13i32, 1i32, "Three"), 8i32));
    sum;
  }#2:integer;
  if OpEqInt(test_value, 23143i32) null else OpPanic({#13 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 23143");
    __work_1;
  }#13:text);
}#1

byte-code for sorted_vector:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Database(size=8, db_tp=12) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 681[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 684[52]: ConstInt(val=0) -> integer
 689[56]: SetInt(v1: reference, fld=4, val: integer)
 692[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 695[52]: NewRecord(data: reference, parent_tp=12, fld=0) -> reference
 700[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 703[64]: ConstText(_value="One") -> text
 708[80]: SetText(v1: reference, fld=4, val: text)
 711[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 714[64]: ConstInt(val=1) -> integer
 719[68]: SetInt(v1: reference, fld=8, val: integer)
 722[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 725[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 728[76]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=0)
 733[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 736[64]: NewRecord(data: reference, parent_tp=12, fld=0) -> reference
 741[64]: PutRef(var[40], value: reference)
 744[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 747[64]: ConstText(_value="Two") -> text
 752[80]: SetText(v1: reference, fld=4, val: text)
 755[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 758[64]: ConstInt(val=2) -> integer
 763[68]: SetInt(v1: reference, fld=8, val: integer)
 766[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 769[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 772[76]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=0)
 777[52]: FreeStack(value=0, discard=12)
 781[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 784[52]: FreeStack(value=12, discard=12) type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 788[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 791[52]: NewRecord(data: reference, parent_tp=12, fld=0) -> reference
 796[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 799[64]: ConstText(_value="Three") -> text
 806[80]: SetText(v1: reference, fld=4, val: text)
 809[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 812[64]: ConstInt(val=3) -> integer
 817[68]: SetInt(v1: reference, fld=8, val: integer)
 820[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 823[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 826[76]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=0)
 831[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 834[64]: NewRecord(data: reference, parent_tp=12, fld=0) -> reference
 839[64]: PutRef(var[40], value: reference)
 842[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 845[64]: ConstText(_value="Four") -> text
 851[80]: SetText(v1: reference, fld=4, val: text)
 854[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 857[64]: ConstInt(val=4) -> integer
 862[68]: SetInt(v1: reference, fld=8, val: integer)
 865[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 868[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 871[76]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=0)
 876[52]: FreeStack(value=0, discard=12)
 880[40]: ConstInt(val=0) -> integer
 885[44]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 888[56]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(11, [(0, false)]) keys [tp:6 desc:true field:4, ][13]
 891[56]: Start(data: reference, db_tp=13, no_keys=0) -> integer
 895[48]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 898[60]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(11, [(0, false)]) keys [tp:6 desc:true field:4, ][13]
 901[60]: Next(data: reference, pos=16, db_tp=13, no_keys=0) -> reference
 907[60]: VarRef(var[48]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 910[72]: ConvBoolFromRef(val: reference) -> boolean
 911[61]: Not(v1: boolean) -> boolean
 912[61]: GotoFalseWord(jump=922, if_false: boolean)
 915[60]: FreeStack(value=0, discard=12)
 919[48]: GotoWord(jump=948)
 922[60]: VarInt(var[40]) -> integer
 925[64]: ConstInt(val=10) -> integer
 930[68]: MulInt(v1: integer, v2: integer) -> integer
 931[64]: VarRef(var[48]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[11]
 934[76]: GetInt(v1: reference, fld=8) -> integer
 937[68]: AddInt(v1: integer, v2: integer) -> integer
 938[64]: PutInt(var[40], value: integer)
 941[60]: FreeStack(value=0, discard=12)
 945[48]: GotoWord(jump=895)
 948[48]: FreeStack(value=0, discard=4)
 952[44]: VarInt(var[40]) -> integer
 955[48]: ConstInt(val=10) -> integer
 960[52]: MulInt(v1: integer, v2: integer) -> integer
 961[48]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[12]
 964[60]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(11, [(0, false)]) keys [tp:6 desc:true field:4, ][13]
 967[60]: ConstText(_value="Three") -> text
 974[76]: GetRecord(data: reference, db_tp=13, no_keys=1) -> reference
 978[60]: GetInt(v1: reference, fld=8) -> integer
 981[52]: AddInt(v1: integer, v2: integer) -> integer
 982[48]: PutInt(var[40], value: integer)
 985[44]: VarInt(var[40]) -> integer
 988[48]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
 992[32]: VarInt(var[28]) -> integer
 995[36]: ConstInt(val=23143) -> integer
1000[40]: EqInt(v1: integer, v2: integer) -> boolean
1001[33]: GotoFalseWord(jump=1007, if_false: boolean)
1004[32]: GotoWord(jump=1060)
1007[32]: ClearText(var[4])
1010[32]: ConstText(_value="Test failed ") -> text
1024[48]: AppendText(var[4], v1: text)
1027[32]: VarInt(var[28]) -> integer
1030[36]: ConstInt(val=0) -> integer
1035[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1042[32]: ConstText(_value=" != 23143") -> text
1053[48]: AppendText(var[4], v1: text)
1056[32]: VarText(var[4]) -> text
1059[48]: Panic(message: text)
1060[32]: Return(ret=0, value=0, discard=32)

Execute test:
  675:[8] Text()
  676:[32] Database(size=8, db_tp=12) -> ref(1,1,0)={map:[]}[32]
  681:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
  684:[56] ConstInt(val=0) -> 0[56]
  689:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  692:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
  695:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=12, fld=0) -> ref(1,9,8)[44]
  700:[56] VarRef(var[44]) -> ref(1,9,8)={}[56]
  703:[68] ConstText(_value="One") -> "One"[68]
  708:[84] SetText(v1=ref(1,9,8)[56], fld=4, val="One"[68])
  711:[56] VarRef(var[44]) -> ref(1,9,8)={key:"One"}[56]
  714:[68] ConstInt(val=1) -> 1[68]
  719:[72] SetInt(v1=ref(1,9,8)[56], fld=8, val=1[68])
  722:[56] VarRef(var[32]) -> ref(1,1,0)={map:[]}[56]
  725:[68] VarRef(var[44]) -> ref(1,9,8)={key:"One",value:1}[68]
  728:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,8)[68], parent_tp=12, fld=0)
  733:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  736:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=12, fld=0) -> ref(1,9,32)[56]
  741:[68] PutRef(var[44], value=ref(1,9,32)[56])
  744:[56] VarRef(var[44]) -> ref(1,9,32)={}[56]
  747:[68] ConstText(_value="Two") -> "Two"[68]
  752:[84] SetText(v1=ref(1,9,32)[56], fld=4, val="Two"[68])
  755:[56] VarRef(var[44]) -> ref(1,9,32)={key:"Two"}[56]
  758:[68] ConstInt(val=2) -> 2[68]
  763:[72] SetInt(v1=ref(1,9,32)[56], fld=8, val=2[68])
  766:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  769:[68] VarRef(var[44]) -> ref(1,9,32)={key:"Two",value:2}[68]
  772:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,32)[68], parent_tp=12, fld=0)
  777:[56] FreeStack(value=0, discard=12)
  781:[44] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[44]
  784:[56] FreeStack(value=12, discard=12)
  788:[44] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[44]
  791:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=12, fld=0) -> ref(1,9,44)[44]
  796:[56] VarRef(var[44]) -> ref(1,9,44)={}[56]
  799:[68] ConstText(_value="Three") -> "Three"[68]
  806:[84] SetText(v1=ref(1,9,44)[56], fld=4, val="Three"[68])
  809:[56] VarRef(var[44]) -> ref(1,9,44)={key:"Three"}[56]
  812:[68] ConstInt(val=3) -> 3[68]
  817:[72] SetInt(v1=ref(1,9,44)[56], fld=8, val=3[68])
  820:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[56]
  823:[68] VarRef(var[44]) -> ref(1,9,44)={key:"Three",value:3}[68]
  826:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,44)[68], parent_tp=12, fld=0)
  831:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[56]
  834:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=12, fld=0) -> ref(1,9,56)[56]
  839:[68] PutRef(var[44], value=ref(1,9,56)[56])
  842:[56] VarRef(var[44]) -> ref(1,9,56)={}[56]
  845:[68] ConstText(_value="Four") -> "Four"[68]
  851:[84] SetText(v1=ref(1,9,56)[56], fld=4, val="Four"[68])
  854:[56] VarRef(var[44]) -> ref(1,9,56)={key:"Four"}[56]
  857:[68] ConstInt(val=4) -> 4[68]
  862:[72] SetInt(v1=ref(1,9,56)[56], fld=8, val=4[68])
  865:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[56]
  868:[68] VarRef(var[44]) -> ref(1,9,56)={key:"Four",value:4}[68]
  871:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,56)[68], parent_tp=12, fld=0)
  876:[56] FreeStack(value=0, discard=12)
  880:[44] ConstInt(val=0) -> 0[44]
  885:[48] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[48]
  888:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][48]
  891:[60] Start(data=ref(1,1,4)[48], db_tp=13, no_keys=0) -> 2147483647[48]
  895:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  898:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  901:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=13, no_keys=0) -> ref(1,9,8)[52]
  907:[64] VarRef(var[52]) -> ref(1,9,8)={key:"Two",value:2}[64]
  910:[76] ConvBoolFromRef(val=ref(1,9,8)[64]) -> true[64]
  911:[65] Not(v1=true[64]) -> false[64]
  912:[65] GotoFalseWord(jump=922, if_false=false[64])
  922:[64] VarInt(var[44]) -> 0[64]
  925:[68] ConstInt(val=10) -> 10[68]
  930:[72] MulInt(v1=0[64], v2=10[68]) -> 0[64]
  931:[68] VarRef(var[52]) -> ref(1,9,8)={key:"Two",value:2}[68]
  934:[80] GetInt(v1=ref(1,9,8)[68], fld=8) -> 2[68]
  937:[72] AddInt(v1=0[64], v2=2[68]) -> 2[64]
  938:[68] PutInt(var[44], value=2[64])
  941:[64] FreeStack(value=0, discard=12)
  945:[52] GotoWord(jump=895)
  895:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  898:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  901:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=13, no_keys=0) -> ref(1,9,20)[52]
  907:[64] VarRef(var[52]) -> ref(1,9,20)={key:"Three",value:3}[64]
  910:[76] ConvBoolFromRef(val=ref(1,9,20)[64]) -> true[64]
  911:[65] Not(v1=true[64]) -> false[64]
  912:[65] GotoFalseWord(jump=922, if_false=false[64])
  922:[64] VarInt(var[44]) -> 2[64]
  925:[68] ConstInt(val=10) -> 10[68]
  930:[72] MulInt(v1=2[64], v2=10[68]) -> 20[64]
  931:[68] VarRef(var[52]) -> ref(1,9,20)={key:"Three",value:3}[68]
  934:[80] GetInt(v1=ref(1,9,20)[68], fld=8) -> 3[68]
  937:[72] AddInt(v1=20[64], v2=3[68]) -> 23[64]
  938:[68] PutInt(var[44], value=23[64])
  941:[64] FreeStack(value=0, discard=12)
  945:[52] GotoWord(jump=895)
  895:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  898:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  901:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=13, no_keys=0) -> ref(1,9,32)[52]
  907:[64] VarRef(var[52]) -> ref(1,9,32)={key:"One",value:1}[64]
  910:[76] ConvBoolFromRef(val=ref(1,9,32)[64]) -> true[64]
  911:[65] Not(v1=true[64]) -> false[64]
  912:[65] GotoFalseWord(jump=922, if_false=false[64])
  922:[64] VarInt(var[44]) -> 23[64]
  925:[68] ConstInt(val=10) -> 10[68]
  930:[72] MulInt(v1=23[64], v2=10[68]) -> 230[64]
  931:[68] VarRef(var[52]) -> ref(1,9,32)={key:"One",value:1}[68]
  934:[80] GetInt(v1=ref(1,9,32)[68], fld=8) -> 1[68]
  937:[72] AddInt(v1=230[64], v2=1[68]) -> 231[64]
  938:[68] PutInt(var[44], value=231[64])
  941:[64] FreeStack(value=0, discard=12)
  945:[52] GotoWord(jump=895)
  895:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  898:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  901:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=13, no_keys=0) -> ref(1,9,44)[52]
  907:[64] VarRef(var[52]) -> ref(1,9,44)={key:"Four",value:4}[64]
  910:[76] ConvBoolFromRef(val=ref(1,9,44)[64]) -> true[64]
  911:[65] Not(v1=true[64]) -> false[64]
  912:[65] GotoFalseWord(jump=922, if_false=false[64])
  922:[64] VarInt(var[44]) -> 231[64]
  925:[68] ConstInt(val=10) -> 10[68]
  930:[72] MulInt(v1=231[64], v2=10[68]) -> 2310[64]
  931:[68] VarRef(var[52]) -> ref(1,9,44)={key:"Four",value:4}[68]
  934:[80] GetInt(v1=ref(1,9,44)[68], fld=8) -> 4[68]
  937:[72] AddInt(v1=2310[64], v2=4[68]) -> 2314[64]
  938:[68] PutInt(var[44], value=2314[64])
  941:[64] FreeStack(value=0, discard=12)
  945:[52] GotoWord(jump=895)
  895:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  898:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  901:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=13, no_keys=0) -> ref(1,0,2147483647)[52]
  907:[64] VarRef(var[52]) -> ref(1,0,2147483647)={}[64]
  910:[76] ConvBoolFromRef(val=ref(1,0,2147483647)[64]) -> false[64]
  911:[65] Not(v1=false[64]) -> true[64]
  912:[65] GotoFalseWord(jump=922, if_false=true[64])
  915:[64] FreeStack(value=0, discard=12)
  919:[52] GotoWord(jump=948)
  948:[52] FreeStack(value=0, discard=4)
  952:[48] VarInt(var[44]) -> 2314[48]
  955:[52] ConstInt(val=10) -> 10[52]
  960:[56] MulInt(v1=2314[48], v2=10[52]) -> 23140[48]
  961:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  964:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  967:[64] ConstText(_value="Three") -> "Three"[64]
  974:[80] GetRecord(data=ref(1,1,4)[52], db_tp=13, no_keys=1, key1="Three"[64]) -> ref(1,9,20)[52]
  978:[64] GetInt(v1=ref(1,9,20)[52], fld=8) -> 3[52]
  981:[56] AddInt(v1=23140[48], v2=3[52]) -> 23143[48]
  982:[52] PutInt(var[44], value=23143[48])
  985:[48] VarInt(var[44]) -> 23143[48]
  988:[52] FreeStack(value=4, discard=16)
  992:[36] VarInt(var[32]) -> 23143[36]
  995:[40] ConstInt(val=23143) -> 23143[40]
 1000:[44] EqInt(v1=23143[36], v2=23143[40]) -> true[36]
 1001:[37] GotoFalseWord(jump=1007, if_false=true[36])
 1004:[36] GotoWord(jump=1060)
 1060:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
