Test code:
struct Elm {key: text, value: integer}
struct Db {map: sorted<Elm[-key]>}

pub fn test() {
    test_value = {db=Db {map: [Elm {key: "One", value: 1}, Elm {key: "Two", value: 2}]};
db.map += [Elm {key: "Three", value: 3}, Elm {key: "Four", value: 4}];
sum = 0;
for v in db.map {
  sum = sum * 10 + v.value;
};
sum = sum * 10 + db.map["Three"].value;
sum};
    assert(
        test_value == 23143,
        "Test failed {test_value} != 23143"
    );
}

Type 13:Elm[12]:
    key:text[4]
    value:integer[8]

Type 14:Db[8]:
    map:sorted<Elm[-key]>[4]

Type 15:sorted<Elm[-key]>[4]:Sorted(13, [(0, false)]) keys [tp:6 desc:true field:4, ]

Type 16:vector<Elm>[4]:Vector(13)

fn test {
  let __work_10 = "";
  let test_value = {
    let db = {
      let val = OpDatabase(8i32, 14i32);
      OpSetInt(val, 4i32, 0i32);
      let elm_15 = OpNewRecord(val, 14i32, 0i32);
      OpSetText(elm_15, 4i32, "One");
      OpSetInt(elm_15, 8i32, 1i32);
      OpFinishRecord(val, elm_15, 14i32, 0i32);
      elm_15 = OpNewRecord(val, 14i32, 0i32);
      OpSetText(elm_15, 4i32, "Two");
      OpSetInt(elm_15, 8i32, 2i32);
      OpFinishRecord(val, elm_15, 14i32, 0i32);
      val;
    };
    {
      let elm_16 = OpNewRecord(db, 14i32, 0i32);
      OpSetText(elm_16, 4i32, "Three");
      OpSetInt(elm_16, 8i32, 3i32);
      OpFinishRecord(db, elm_16, 14i32, 0i32);
      elm_16 = OpNewRecord(db, 14i32, 0i32);
      OpSetText(elm_16, 4i32, "Four");
      OpSetInt(elm_16, 8i32, 4i32);
      OpFinishRecord(db, elm_16, 14i32, 0i32);
    };
    let sum = 0i32;
    {
      let v#index = OpStart(OpGetField(db, 4i32, 15i32), 15i32, 0i32);
      loop {
        let v = OpNext(OpGetField(db, 4i32, 15i32), v#index, 15i32, 0i32);
        if OpNot(OpConvBoolFromRef(v)) {break(0)} else {null};
        {
          sum = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        };
      };
    };
    sum = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(OpGetRecord(OpGetField(db, 4i32, 15i32), 15i32, 1i32, "Three"), 8i32));
    sum;
  };
  if OpEqInt(test_value, 23143i32) {null} else {OpGenPanic({
    OpClearText(__work_10);
    OpAppendText(__work_10, "Test failed ");
    OpFormatInt(__work_10, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_10, " != 23143");
    __work_10;
  })};
}

byte-code for sorted_vector:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: Database(size=8, db_tp=14) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 679[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 682[52]: ConstInt(val=0) -> integer
 687[56]: SetInt(v1: reference, fld=4, val: integer)
 690[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 693[52]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 698[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 701[64]: ConstText(_value="One") -> text(false)
 706[80]: SetText(v1: reference, fld=4, val: text(false))
 709[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 712[64]: ConstInt(val=1) -> integer
 717[68]: SetInt(v1: reference, fld=8, val: integer)
 720[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 723[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 726[76]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 731[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 734[64]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 739[64]: PutRef(var[40], value: reference)
 742[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 745[64]: ConstText(_value="Two") -> text(false)
 750[80]: SetText(v1: reference, fld=4, val: text(false))
 753[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 756[64]: ConstInt(val=2) -> integer
 761[68]: SetInt(v1: reference, fld=8, val: integer)
 764[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 767[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 770[76]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 775[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 778[64]: GenFreeStack(value=12, discard=24)
 782[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 785[52]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 790[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 793[64]: ConstText(_value="Three") -> text(false)
 800[80]: SetText(v1: reference, fld=4, val: text(false))
 803[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 806[64]: ConstInt(val=3) -> integer
 811[68]: SetInt(v1: reference, fld=8, val: integer)
 814[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 817[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 820[76]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 825[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 828[64]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 833[64]: PutRef(var[40], value: reference)
 836[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 839[64]: ConstText(_value="Four") -> text(false)
 845[80]: SetText(v1: reference, fld=4, val: text(false))
 848[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 851[64]: ConstInt(val=4) -> integer
 856[68]: SetInt(v1: reference, fld=8, val: integer)
 859[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 862[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 865[76]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 870[52]: GenFreeStack(value=0, discard=12)
 874[40]: ConstInt(val=0) -> integer
 879[44]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 882[56]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(13, [(0, false)]) keys [tp:6 desc:true field:4, ][15]
 885[56]: Start(data: reference, db_tp=15, no_keys=0) -> integer
 889[48]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 892[60]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(13, [(0, false)]) keys [tp:6 desc:true field:4, ][15]
 895[60]: Next(data: reference, pos=16, db_tp=15, no_keys=0) -> reference
 901[60]: VarRef(var[48]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 904[72]: ConvBoolFromRef(val: reference) -> boolean
 905[61]: Not(v1: boolean) -> boolean
 906[61]: GenGotoFalseWord(jump=916, if_false: boolean)
 909[60]: GenFreeStack(value=0, discard=12)
 913[48]: GenGotoWord(jump=942)
 916[60]: VarInt(var[40]) -> integer
 919[64]: ConstInt(val=10) -> integer
 924[68]: MulInt(v1: integer, v2: integer) -> integer
 925[64]: VarRef(var[48]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 928[76]: GetInt(v1: reference, fld=8) -> integer
 931[68]: AddInt(v1: integer, v2: integer) -> integer
 932[64]: PutInt(var[40], value: integer)
 935[60]: GenFreeStack(value=0, discard=12)
 939[48]: GenGotoWord(jump=889)
 942[48]: GenFreeStack(value=0, discard=4)
 946[44]: VarInt(var[40]) -> integer
 949[48]: ConstInt(val=10) -> integer
 954[52]: MulInt(v1: integer, v2: integer) -> integer
 955[48]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 958[60]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(13, [(0, false)]) keys [tp:6 desc:true field:4, ][15]
 961[60]: ConstText(_value="Three") -> text(false)
 968[76]: GetRecord(data: reference, db_tp=15, no_keys=1) -> reference
 972[60]: GetInt(v1: reference, fld=8) -> integer
 975[52]: AddInt(v1: integer, v2: integer) -> integer
 976[48]: PutInt(var[40], value: integer)
 979[44]: VarInt(var[40]) -> integer
 982[48]: GenFreeStack(value=4, discard=16)
 986[32]: VarInt(var[28]) -> integer
 989[36]: ConstInt(val=23143) -> integer
 994[40]: EqInt(v1: integer, v2: integer) -> boolean
 995[33]: GenGotoFalseWord(jump=1001, if_false: boolean)
 998[32]: GenGotoWord(jump=1054)
1001[32]: ClearText(var[4])
1004[32]: ConstText(_value="Test failed ") -> text(false)
1018[48]: AppendText(var[4], v1: text(false))
1021[32]: VarInt(var[28]) -> integer
1024[36]: ConstInt(val=0) -> integer
1029[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1036[32]: ConstText(_value=" != 23143") -> text(false)
1047[48]: AppendText(var[4], v1: text(false))
1050[32]: VarText(var[4]) -> text(false)
1053[48]: GenPanic(message: text(false))
1054[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] Database(size=8, db_tp=14) -> ref(1,1,0)={map:[]}[32]
  679:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
  682:[56] ConstInt(val=0) -> 0[56]
  687:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  690:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
  693:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=14, fld=0) -> ref(1,9,8)[44]
  698:[56] VarRef(var[44]) -> ref(1,9,8)={}[56]
  701:[68] ConstText(_value="One") -> "One"[68]
  706:[84] SetText(v1=ref(1,9,8)[56], fld=4, val="One"[68])
  709:[56] VarRef(var[44]) -> ref(1,9,8)={key:"One"}[56]
  712:[68] ConstInt(val=1) -> 1[68]
  717:[72] SetInt(v1=ref(1,9,8)[56], fld=8, val=1[68])
  720:[56] VarRef(var[32]) -> ref(1,1,0)={map:[]}[56]
  723:[68] VarRef(var[44]) -> ref(1,9,8)={key:"One",value:1}[68]
  726:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,8)[68], parent_tp=14, fld=0)
  731:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  734:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=14, fld=0) -> ref(1,9,32)[56]
  739:[68] PutRef(var[44], value=ref(1,9,32)[56])
  742:[56] VarRef(var[44]) -> ref(1,9,32)={}[56]
  745:[68] ConstText(_value="Two") -> "Two"[68]
  750:[84] SetText(v1=ref(1,9,32)[56], fld=4, val="Two"[68])
  753:[56] VarRef(var[44]) -> ref(1,9,32)={key:"Two"}[56]
  756:[68] ConstInt(val=2) -> 2[68]
  761:[72] SetInt(v1=ref(1,9,32)[56], fld=8, val=2[68])
  764:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  767:[68] VarRef(var[44]) -> ref(1,9,32)={key:"Two",value:2}[68]
  770:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,32)[68], parent_tp=14, fld=0)
  775:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[56]
  778:[68] GenFreeStack(value=12, discard=24)
  782:[44] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[44]
  785:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=14, fld=0) -> ref(1,9,44)[44]
  790:[56] VarRef(var[44]) -> ref(1,9,44)={}[56]
  793:[68] ConstText(_value="Three") -> "Three"[68]
  800:[84] SetText(v1=ref(1,9,44)[56], fld=4, val="Three"[68])
  803:[56] VarRef(var[44]) -> ref(1,9,44)={key:"Three"}[56]
  806:[68] ConstInt(val=3) -> 3[68]
  811:[72] SetInt(v1=ref(1,9,44)[56], fld=8, val=3[68])
  814:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[56]
  817:[68] VarRef(var[44]) -> ref(1,9,44)={key:"Three",value:3}[68]
  820:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,44)[68], parent_tp=14, fld=0)
  825:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[56]
  828:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=14, fld=0) -> ref(1,9,56)[56]
  833:[68] PutRef(var[44], value=ref(1,9,56)[56])
  836:[56] VarRef(var[44]) -> ref(1,9,56)={}[56]
  839:[68] ConstText(_value="Four") -> "Four"[68]
  845:[84] SetText(v1=ref(1,9,56)[56], fld=4, val="Four"[68])
  848:[56] VarRef(var[44]) -> ref(1,9,56)={key:"Four"}[56]
  851:[68] ConstInt(val=4) -> 4[68]
  856:[72] SetInt(v1=ref(1,9,56)[56], fld=8, val=4[68])
  859:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[56]
  862:[68] VarRef(var[44]) -> ref(1,9,56)={key:"Four",value:4}[68]
  865:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,56)[68], parent_tp=14, fld=0)
  870:[56] GenFreeStack(value=0, discard=12)
  874:[44] ConstInt(val=0) -> 0[44]
  879:[48] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[48]
  882:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][48]
  885:[60] Start(data=ref(1,1,4)[48], db_tp=15, no_keys=0) -> 2147483647[48]
  889:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  892:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  895:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=15, no_keys=0) -> ref(1,9,8)[52]
  901:[64] VarRef(var[52]) -> ref(1,9,8)={key:"Two",value:2}[64]
  904:[76] ConvBoolFromRef(val=ref(1,9,8)[64]) -> true[64]
  905:[65] Not(v1=true[64]) -> false[64]
  906:[65] GenGotoFalseWord(jump=916, if_false=false[64])
  916:[64] VarInt(var[44]) -> 0[64]
  919:[68] ConstInt(val=10) -> 10[68]
  924:[72] MulInt(v1=0[64], v2=10[68]) -> 0[64]
  925:[68] VarRef(var[52]) -> ref(1,9,8)={key:"Two",value:2}[68]
  928:[80] GetInt(v1=ref(1,9,8)[68], fld=8) -> 2[68]
  931:[72] AddInt(v1=0[64], v2=2[68]) -> 2[64]
  932:[68] PutInt(var[44], value=2[64])
  935:[64] GenFreeStack(value=0, discard=12)
  939:[52] GenGotoWord(jump=889)
  889:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  892:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  895:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=15, no_keys=0) -> ref(1,9,20)[52]
  901:[64] VarRef(var[52]) -> ref(1,9,20)={key:"Three",value:3}[64]
  904:[76] ConvBoolFromRef(val=ref(1,9,20)[64]) -> true[64]
  905:[65] Not(v1=true[64]) -> false[64]
  906:[65] GenGotoFalseWord(jump=916, if_false=false[64])
  916:[64] VarInt(var[44]) -> 2[64]
  919:[68] ConstInt(val=10) -> 10[68]
  924:[72] MulInt(v1=2[64], v2=10[68]) -> 20[64]
  925:[68] VarRef(var[52]) -> ref(1,9,20)={key:"Three",value:3}[68]
  928:[80] GetInt(v1=ref(1,9,20)[68], fld=8) -> 3[68]
  931:[72] AddInt(v1=20[64], v2=3[68]) -> 23[64]
  932:[68] PutInt(var[44], value=23[64])
  935:[64] GenFreeStack(value=0, discard=12)
  939:[52] GenGotoWord(jump=889)
  889:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  892:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  895:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=15, no_keys=0) -> ref(1,9,32)[52]
  901:[64] VarRef(var[52]) -> ref(1,9,32)={key:"One",value:1}[64]
  904:[76] ConvBoolFromRef(val=ref(1,9,32)[64]) -> true[64]
  905:[65] Not(v1=true[64]) -> false[64]
  906:[65] GenGotoFalseWord(jump=916, if_false=false[64])
  916:[64] VarInt(var[44]) -> 23[64]
  919:[68] ConstInt(val=10) -> 10[68]
  924:[72] MulInt(v1=23[64], v2=10[68]) -> 230[64]
  925:[68] VarRef(var[52]) -> ref(1,9,32)={key:"One",value:1}[68]
  928:[80] GetInt(v1=ref(1,9,32)[68], fld=8) -> 1[68]
  931:[72] AddInt(v1=230[64], v2=1[68]) -> 231[64]
  932:[68] PutInt(var[44], value=231[64])
  935:[64] GenFreeStack(value=0, discard=12)
  939:[52] GenGotoWord(jump=889)
  889:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  892:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  895:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=15, no_keys=0) -> ref(1,9,44)[52]
  901:[64] VarRef(var[52]) -> ref(1,9,44)={key:"Four",value:4}[64]
  904:[76] ConvBoolFromRef(val=ref(1,9,44)[64]) -> true[64]
  905:[65] Not(v1=true[64]) -> false[64]
  906:[65] GenGotoFalseWord(jump=916, if_false=false[64])
  916:[64] VarInt(var[44]) -> 231[64]
  919:[68] ConstInt(val=10) -> 10[68]
  924:[72] MulInt(v1=231[64], v2=10[68]) -> 2310[64]
  925:[68] VarRef(var[52]) -> ref(1,9,44)={key:"Four",value:4}[68]
  928:[80] GetInt(v1=ref(1,9,44)[68], fld=8) -> 4[68]
  931:[72] AddInt(v1=2310[64], v2=4[68]) -> 2314[64]
  932:[68] PutInt(var[44], value=2314[64])
  935:[64] GenFreeStack(value=0, discard=12)
  939:[52] GenGotoWord(jump=889)
  889:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  892:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  895:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=15, no_keys=0) -> ref(1,0,2147483647)[52]
  901:[64] VarRef(var[52]) -> ref(1,0,2147483647)={}[64]
  904:[76] ConvBoolFromRef(val=ref(1,0,2147483647)[64]) -> false[64]
  905:[65] Not(v1=false[64]) -> true[64]
  906:[65] GenGotoFalseWord(jump=916, if_false=true[64])
  909:[64] GenFreeStack(value=0, discard=12)
  913:[52] GenGotoWord(jump=942)
  942:[52] GenFreeStack(value=0, discard=4)
  946:[48] VarInt(var[44]) -> 2314[48]
  949:[52] ConstInt(val=10) -> 10[52]
  954:[56] MulInt(v1=2314[48], v2=10[52]) -> 23140[48]
  955:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  958:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  961:[64] ConstText(_value="Three") -> "Three"[64]
  968:[80] GetRecord(data=ref(1,1,4)[52], db_tp=15, no_keys=1, key1="Three"[64]) -> ref(1,9,20)[52]
  972:[64] GetInt(v1=ref(1,9,20)[52], fld=8) -> 3[52]
  975:[56] AddInt(v1=23140[48], v2=3[52]) -> 23143[48]
  976:[52] PutInt(var[44], value=23143[48])
  979:[48] VarInt(var[44]) -> 23143[48]
  982:[52] GenFreeStack(value=4, discard=16)
  986:[36] VarInt(var[32]) -> 23143[36]
  989:[40] ConstInt(val=23143) -> 23143[40]
  994:[44] EqInt(v1=23143[36], v2=23143[40]) -> true[36]
  995:[37] GenGotoFalseWord(jump=1001, if_false=true[36])
  998:[36] GenGotoWord(jump=1054)
 1054:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
