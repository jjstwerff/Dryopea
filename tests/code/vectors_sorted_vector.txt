struct Elm {key: text, value: integer}
struct Db {map: sorted<Elm[-key]>}

pub fn test() {
    test_value = {db=Db {map: [Elm {key: "One", value: 1}, Elm {key: "Two", value: 2}]};
db.map += [Elm {key: "Three", value: 3}, Elm {key: "Four", value: 4}];
assert(db.map["Two"].value == 2, "Two element");
assert(db.map["Four"], "Four element");
assert(!db.map["Five"], "No element");
sum = 0;
for v in db.map {
  sum = sum * 10 + v.value;
};
sum = sum * 10 + db.map["Three"].value;
sum};
    assert(
        test_value == 23143,
        "Test failed {test_value} != 23143"
    );
}
Type 12:Elm[8]:
    key:text[0]
    value:integer[4]

Type 13:Db[8]:
    map:sorted<Elm[-key]>[4]

Type 14:sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:0, ]

Type 15:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __ref_1:ref(Db) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    db:ref(Db)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 13i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      {#4 vector
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#5 object
          OpSetText(_elm_1, 0i32, "One");
          OpSetInt(_elm_1, 4i32, 1i32);
        }#5;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#6 object
          OpSetText(_elm_1, 0i32, "Two");
          OpSetInt(_elm_1, 4i32, 2i32);
        }#6;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
      }#4;
      __ref_1;
    }#3:ref(Db)["__ref_1"];
    {#7 vector
      _elm_2:ref(Elm)["db"] = OpNewRecord(db, 13i32, 0i32);
      {#8 object
        OpSetText(_elm_2, 0i32, "Three");
        OpSetInt(_elm_2, 4i32, 3i32);
      }#8;
      OpFinishRecord(db, _elm_2, 13i32, 0i32);
      _elm_2:ref(Elm)["db"] = OpNewRecord(db, 13i32, 0i32);
      {#9 object
        OpSetText(_elm_2, 0i32, "Four");
        OpSetInt(_elm_2, 4i32, 4i32);
      }#9;
      OpFinishRecord(db, _elm_2, 13i32, 0i32);
    }#7;
    if OpEqInt(OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 1i32, "Two"), 4i32), 2i32) null else OpPanic("Two element");
    if OpConvBoolFromRef(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 1i32, "Four")) null else OpPanic("Four element");
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 1i32, "Five"))) null else OpPanic("No element");
    sum:integer = 0i32;
    {#10 for
      v#index:integer = OpStart(OpGetField(db, 4i32, 14i32), 14i32, 0i32);
      loop {#11 for loop
        v:ref(Elm)["db"] = OpNext(OpGetField(db, 4i32, 14i32), v#index, 14i32, 0i32);
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#12 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 4i32));
        }#12;
      }#11;
    }#10;
    sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 1i32, "Three"), 4i32));
    sum;
  }#2:integer;
  if OpEqInt(test_value, 23143i32) null else OpPanic({#13 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 23143");
    __work_1;
  }#13:text);
}#1

byte-code for sorted_vector:test()
 655[0]: return-address
 655[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Db) in 1
 656[16]: Text() var=__work_1[16]:text in 1
 657[40]: Database(var[4], db_tp=13) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 662[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 665[52]: ConstInt(val=0) -> integer
 670[56]: SetInt(v1: ref(reference), fld=4, val: integer)
 673[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 676[52]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 681[52]: VarRef(var[40]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 684[64]: ConstText(_value="One") -> text
 689[80]: SetText(v1: ref(reference), fld=0, val: text)
 692[52]: VarRef(var[40]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 695[64]: ConstInt(val=1) -> integer
 700[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 703[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 706[64]: VarRef(var[40]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 709[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 714[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 717[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 722[64]: PutRef(var[40], value: ref(reference))
 725[52]: VarRef(var[40]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 728[64]: ConstText(_value="Two") -> text
 733[80]: SetText(v1: ref(reference), fld=0, val: text)
 736[52]: VarRef(var[40]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 739[64]: ConstInt(val=2) -> integer
 744[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 747[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 750[64]: VarRef(var[40]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 753[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 758[52]: FreeStack(value=0, discard=12)
 762[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 765[52]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 768[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 773[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 776[76]: ConstText(_value="Three") -> text
 783[92]: SetText(v1: ref(reference), fld=0, val: text)
 786[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 789[76]: ConstInt(val=3) -> integer
 794[80]: SetInt(v1: ref(reference), fld=4, val: integer)
 797[64]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 800[76]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 803[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 808[64]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 811[76]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 816[76]: PutRef(var[52], value: ref(reference))
 819[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 822[76]: ConstText(_value="Four") -> text
 828[92]: SetText(v1: ref(reference), fld=0, val: text)
 831[64]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 834[76]: ConstInt(val=4) -> integer
 839[80]: SetInt(v1: ref(reference), fld=4, val: integer)
 842[64]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 845[76]: VarRef(var[52]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 848[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 853[64]: FreeStack(value=0, discard=12)
 857[52]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 860[64]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:0, ][14]
 863[64]: ConstText(_value="Two") -> text
 868[80]: GetRecord(data: ref(reference), db_tp=14, no_keys=1) -> ref(reference)
 872[64]: GetInt(v1: ref(reference), fld=4) -> integer
 875[56]: ConstInt(val=2) -> integer
 880[60]: EqInt(v1: integer, v2: integer) -> boolean
 881[53]: GotoFalseWord(jump=887, if_false: boolean)
 884[52]: GotoWord(jump=901)
 887[52]: ConstText(_value="Two element") -> text
 900[68]: Panic(message: text)
 901[52]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 904[64]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:0, ][14]
 907[64]: ConstText(_value="Four") -> text
 913[80]: GetRecord(data: ref(reference), db_tp=14, no_keys=1) -> ref(reference)
 917[64]: ConvBoolFromRef(val: ref(reference)) -> boolean
 918[53]: GotoFalseWord(jump=924, if_false: boolean)
 921[52]: GotoWord(jump=939)
 924[52]: ConstText(_value="Four element") -> text
 938[68]: Panic(message: text)
 939[52]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 942[64]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:0, ][14]
 945[64]: ConstText(_value="Five") -> text
 951[80]: GetRecord(data: ref(reference), db_tp=14, no_keys=1) -> ref(reference)
 955[64]: ConvBoolFromRef(val: ref(reference)) -> boolean
 956[53]: Not(v1: boolean) -> boolean
 957[53]: GotoFalseWord(jump=963, if_false: boolean)
 960[52]: GotoWord(jump=976)
 963[52]: ConstText(_value="No element") -> text
 975[68]: Panic(message: text)
 976[52]: ConstInt(val=0) -> integer var=sum[52]:integer in 2
 981[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 984[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:0, ][14]
 987[68]: Start(data: ref(reference), db_tp=14, no_keys=0) -> integer
 991[60]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 994[72]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:0, ][14]
 997[72]: Next(data: ref(reference), pos=16, db_tp=14, no_keys=0) -> ref(reference)
1003[72]: VarRef(var[60]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=v[60]:ref(Elm)["db"] in 11
1006[84]: ConvBoolFromRef(val: ref(reference)) -> boolean
1007[73]: Not(v1: boolean) -> boolean
1008[73]: GotoFalseWord(jump=1018, if_false: boolean)
1011[72]: FreeStack(value=0, discard=12)
1015[60]: GotoWord(jump=1044)
1018[72]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
1021[76]: ConstInt(val=10) -> integer
1026[80]: MulInt(v1: integer, v2: integer) -> integer
1027[76]: VarRef(var[60]) -> ref(reference) type=Elm[8]:{key:text[0], value:integer[4]}[12] var=v[60]:ref(Elm)["db"] in 11
1030[88]: GetInt(v1: ref(reference), fld=4) -> integer
1033[80]: AddInt(v1: integer, v2: integer) -> integer
1034[76]: PutInt(var[52], value: integer)
1037[72]: FreeStack(value=0, discard=12)
1041[60]: GotoWord(jump=991)
1044[60]: FreeStack(value=0, discard=4)
1048[56]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
1051[60]: ConstInt(val=10) -> integer
1056[64]: MulInt(v1: integer, v2: integer) -> integer
1057[60]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1060[72]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:0, ][14]
1063[72]: ConstText(_value="Three") -> text
1070[88]: GetRecord(data: ref(reference), db_tp=14, no_keys=1) -> ref(reference)
1074[72]: GetInt(v1: ref(reference), fld=4) -> integer
1077[64]: AddInt(v1: integer, v2: integer) -> integer
1078[60]: PutInt(var[52], value: integer)
1081[56]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
1084[60]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
1088[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
1091[48]: ConstInt(val=23143) -> integer
1096[52]: EqInt(v1: integer, v2: integer) -> boolean
1097[45]: GotoFalseWord(jump=1103, if_false: boolean)
1100[44]: GotoWord(jump=1156)
1103[44]: ClearText(var[16]) var=__work_1[16]:text in 1
1106[44]: ConstText(_value="Test failed ") -> text
1120[60]: AppendText(var[16], v1: text)
1123[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
1126[48]: ConstInt(val=0) -> integer
1131[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1138[44]: ConstText(_value=" != 23143") -> text
1149[60]: AppendText(var[16], v1: text)
1152[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
1155[60]: Panic(message: text)
1156[44]: FreeText(var[16])
1159[44]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1162[56]: FreeRef(v1: ref(reference))
1163[44]: Return(ret=0, value=0, discard=44)

Execute test:
  655:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  656:[20] Text()
  657:[44] Database(var[8], db_tp=13)
  662:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  665:[56] ConstInt(val=0) -> 0[56]
  670:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  673:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  676:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=13, fld=0) -> ref(1,9,8)[44]
  681:[56] VarRef(var[44]) -> ref(1,9,8)={}[56]
  684:[68] ConstText(_value="One") -> "One"[68]
  689:[84] SetText(v1=ref(1,9,8)[56], fld=0, val="One"[68])
  692:[56] VarRef(var[44]) -> ref(1,9,8)={key:"One"}[56]
  695:[68] ConstInt(val=1) -> 1[68]
  700:[72] SetInt(v1=ref(1,9,8)[56], fld=4, val=1[68])
  703:[56] VarRef(var[8]) -> ref(1,1,0)={map:[]}[56]
  706:[68] VarRef(var[44]) -> ref(1,9,8)={key:"One",value:1}[68]
  709:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,8)[68], parent_tp=13, fld=0)
  714:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  717:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,9,24)[56]
  722:[68] PutRef(var[44], value=ref(1,9,24)[56])
  725:[56] VarRef(var[44]) -> ref(1,9,24)={}[56]
  728:[68] ConstText(_value="Two") -> "Two"[68]
  733:[84] SetText(v1=ref(1,9,24)[56], fld=0, val="Two"[68])
  736:[56] VarRef(var[44]) -> ref(1,9,24)={key:"Two"}[56]
  739:[68] ConstInt(val=2) -> 2[68]
  744:[72] SetInt(v1=ref(1,9,24)[56], fld=4, val=2[68])
  747:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  750:[68] VarRef(var[44]) -> ref(1,9,24)={key:"Two",value:2}[68]
  753:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,24)[68], parent_tp=13, fld=0)
  758:[56] FreeStack(value=0, discard=12)
  762:[44] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[44]
  765:[56] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[56]
  768:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,9,32)[56]
  773:[68] VarRef(var[56]) -> ref(1,9,32)={}[68]
  776:[80] ConstText(_value="Three") -> "Three"[80]
  783:[96] SetText(v1=ref(1,9,32)[68], fld=0, val="Three"[80])
  786:[68] VarRef(var[56]) -> ref(1,9,32)={key:"Three"}[68]
  789:[80] ConstInt(val=3) -> 3[80]
  794:[84] SetInt(v1=ref(1,9,32)[68], fld=4, val=3[80])
  797:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[68]
  800:[80] VarRef(var[56]) -> ref(1,9,32)={key:"Three",value:3}[80]
  803:[92] FinishRecord(data=ref(1,1,0)[68], rec=ref(1,9,32)[80], parent_tp=13, fld=0)
  808:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[68]
  811:[80] NewRecord(data=ref(1,1,0)[68], parent_tp=13, fld=0) -> ref(1,9,40)[68]
  816:[80] PutRef(var[56], value=ref(1,9,40)[68])
  819:[68] VarRef(var[56]) -> ref(1,9,40)={}[68]
  822:[80] ConstText(_value="Four") -> "Four"[80]
  828:[96] SetText(v1=ref(1,9,40)[68], fld=0, val="Four"[80])
  831:[68] VarRef(var[56]) -> ref(1,9,40)={key:"Four"}[68]
  834:[80] ConstInt(val=4) -> 4[80]
  839:[84] SetInt(v1=ref(1,9,40)[68], fld=4, val=4[80])
  842:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[68]
  845:[80] VarRef(var[56]) -> ref(1,9,40)={key:"Four",value:4}[80]
  848:[92] FinishRecord(data=ref(1,1,0)[68], rec=ref(1,9,40)[80], parent_tp=13, fld=0)
  853:[68] FreeStack(value=0, discard=12)
  857:[56] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[56]
  860:[68] GetField(v1=ref(1,1,0)[56], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][56]
  863:[68] ConstText(_value="Two") -> "Two"[68]
  868:[84] GetRecord(data=ref(1,1,4)[56], db_tp=14, no_keys=1, key1="Two"[68]) -> ref(1,9,8)[56]
  872:[68] GetInt(v1=ref(1,9,8)[56], fld=4) -> 2[56]
  875:[60] ConstInt(val=2) -> 2[60]
  880:[64] EqInt(v1=2[56], v2=2[60]) -> true[56]
  881:[57] GotoFalseWord(jump=887, if_false=true[56])
  884:[56] GotoWord(jump=901)
  901:[56] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[56]
  904:[68] GetField(v1=ref(1,1,0)[56], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][56]
  907:[68] ConstText(_value="Four") -> "Four"[68]
  913:[84] GetRecord(data=ref(1,1,4)[56], db_tp=14, no_keys=1, key1="Four"[68]) -> ref(1,9,32)[56]
  917:[68] ConvBoolFromRef(val=ref(1,9,32)[56]) -> true[56]
  918:[57] GotoFalseWord(jump=924, if_false=true[56])
  921:[56] GotoWord(jump=939)
  939:[56] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[56]
  942:[68] GetField(v1=ref(1,1,0)[56], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][56]
  945:[68] ConstText(_value="Five") -> "Five"[68]
  951:[84] GetRecord(data=ref(1,1,4)[56], db_tp=14, no_keys=1, key1="Five"[68]) -> ref(1,0,0)[56]
  955:[68] ConvBoolFromRef(val=ref(1,0,0)[56]) -> false[56]
  956:[57] Not(v1=false[56]) -> true[56]
  957:[57] GotoFalseWord(jump=963, if_false=true[56])
  960:[56] GotoWord(jump=976)
  976:[56] ConstInt(val=0) -> 0[56]
  981:[60] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[60]
  984:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][60]
  987:[72] Start(data=ref(1,1,4)[60], db_tp=14, no_keys=0) -> 2147483647[60]
  991:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  994:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  997:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,8)[64]
 1003:[76] VarRef(var[64]) -> ref(1,9,8)={key:"Two",value:2}[76]
 1006:[88] ConvBoolFromRef(val=ref(1,9,8)[76]) -> true[76]
 1007:[77] Not(v1=true[76]) -> false[76]
 1008:[77] GotoFalseWord(jump=1018, if_false=false[76])
 1018:[76] VarInt(var[56]) -> 0[76]
 1021:[80] ConstInt(val=10) -> 10[80]
 1026:[84] MulInt(v1=0[76], v2=10[80]) -> 0[76]
 1027:[80] VarRef(var[64]) -> ref(1,9,8)={key:"Two",value:2}[80]
 1030:[92] GetInt(v1=ref(1,9,8)[80], fld=4) -> 2[80]
 1033:[84] AddInt(v1=0[76], v2=2[80]) -> 2[76]
 1034:[80] PutInt(var[56], value=2[76])
 1037:[76] FreeStack(value=0, discard=12)
 1041:[64] GotoWord(jump=991)
  991:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  994:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  997:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,16)[64]
 1003:[76] VarRef(var[64]) -> ref(1,9,16)={key:"Three",value:3}[76]
 1006:[88] ConvBoolFromRef(val=ref(1,9,16)[76]) -> true[76]
 1007:[77] Not(v1=true[76]) -> false[76]
 1008:[77] GotoFalseWord(jump=1018, if_false=false[76])
 1018:[76] VarInt(var[56]) -> 2[76]
 1021:[80] ConstInt(val=10) -> 10[80]
 1026:[84] MulInt(v1=2[76], v2=10[80]) -> 20[76]
 1027:[80] VarRef(var[64]) -> ref(1,9,16)={key:"Three",value:3}[80]
 1030:[92] GetInt(v1=ref(1,9,16)[80], fld=4) -> 3[80]
 1033:[84] AddInt(v1=20[76], v2=3[80]) -> 23[76]
 1034:[80] PutInt(var[56], value=23[76])
 1037:[76] FreeStack(value=0, discard=12)
 1041:[64] GotoWord(jump=991)
  991:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  994:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  997:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,24)[64]
 1003:[76] VarRef(var[64]) -> ref(1,9,24)={key:"One",value:1}[76]
 1006:[88] ConvBoolFromRef(val=ref(1,9,24)[76]) -> true[76]
 1007:[77] Not(v1=true[76]) -> false[76]
 1008:[77] GotoFalseWord(jump=1018, if_false=false[76])
 1018:[76] VarInt(var[56]) -> 23[76]
 1021:[80] ConstInt(val=10) -> 10[80]
 1026:[84] MulInt(v1=23[76], v2=10[80]) -> 230[76]
 1027:[80] VarRef(var[64]) -> ref(1,9,24)={key:"One",value:1}[80]
 1030:[92] GetInt(v1=ref(1,9,24)[80], fld=4) -> 1[80]
 1033:[84] AddInt(v1=230[76], v2=1[80]) -> 231[76]
 1034:[80] PutInt(var[56], value=231[76])
 1037:[76] FreeStack(value=0, discard=12)
 1041:[64] GotoWord(jump=991)
  991:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  994:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  997:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,32)[64]
 1003:[76] VarRef(var[64]) -> ref(1,9,32)={key:"Four",value:4}[76]
 1006:[88] ConvBoolFromRef(val=ref(1,9,32)[76]) -> true[76]
 1007:[77] Not(v1=true[76]) -> false[76]
 1008:[77] GotoFalseWord(jump=1018, if_false=false[76])
 1018:[76] VarInt(var[56]) -> 231[76]
 1021:[80] ConstInt(val=10) -> 10[80]
 1026:[84] MulInt(v1=231[76], v2=10[80]) -> 2310[76]
 1027:[80] VarRef(var[64]) -> ref(1,9,32)={key:"Four",value:4}[80]
 1030:[92] GetInt(v1=ref(1,9,32)[80], fld=4) -> 4[80]
 1033:[84] AddInt(v1=2310[76], v2=4[80]) -> 2314[76]
 1034:[80] PutInt(var[56], value=2314[76])
 1037:[76] FreeStack(value=0, discard=12)
 1041:[64] GotoWord(jump=991)
  991:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  994:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  997:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,0,2147483647)[64]
 1003:[76] VarRef(var[64]) -> ref(1,0,2147483647)=null[76]
 1006:[88] ConvBoolFromRef(val=ref(1,0,2147483647)[76]) -> false[76]
 1007:[77] Not(v1=false[76]) -> true[76]
 1008:[77] GotoFalseWord(jump=1018, if_false=true[76])
 1011:[76] FreeStack(value=0, discard=12)
 1015:[64] GotoWord(jump=1044)
 1044:[64] FreeStack(value=0, discard=4)
 1048:[60] VarInt(var[56]) -> 2314[60]
 1051:[64] ConstInt(val=10) -> 10[64]
 1056:[68] MulInt(v1=2314[60], v2=10[64]) -> 23140[60]
 1057:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
 1060:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
 1063:[76] ConstText(_value="Three") -> "Three"[76]
 1070:[92] GetRecord(data=ref(1,1,4)[64], db_tp=14, no_keys=1, key1="Three"[76]) -> ref(1,9,16)[64]
 1074:[76] GetInt(v1=ref(1,9,16)[64], fld=4) -> 3[64]
 1077:[68] AddInt(v1=23140[60], v2=3[64]) -> 23143[60]
 1078:[64] PutInt(var[56], value=23143[60])
 1081:[60] VarInt(var[56]) -> 23143[60]
 1084:[64] FreeStack(value=4, discard=20)
 1088:[48] VarInt(var[44]) -> 23143[48]
 1091:[52] ConstInt(val=23143) -> 23143[52]
 1096:[56] EqInt(v1=23143[48], v2=23143[52]) -> true[48]
 1097:[49] GotoFalseWord(jump=1103, if_false=true[48])
 1100:[48] GotoWord(jump=1156)
 1156:[48] FreeText(var[20])
 1159:[48] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[48]
 1162:[60] FreeRef(v1=ref(1,1,0)[48])
 1163:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
