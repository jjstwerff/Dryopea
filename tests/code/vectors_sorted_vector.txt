Test code:
struct Elm {key: text, value: integer}
struct Db {map: sorted<Elm[-key]>}

pub fn test() {
    test_value = {db=Db {map: [Elm {key: "One", value: 1}, Elm {key: "Two", value: 2}]};
db.map += [Elm {key: "Three", value: 3}, Elm {key: "Four", value: 4}];
sum = 0;
for v in db.map {
  sum = sum * 10 + v.value;
};
sum = sum * 10 + db.map["Three"].value;
sum};
    assert(
        test_value == 23143,
        "Test failed {test_value} != 23143"
    );
}

Type 13:Elm[12]:
    key:text[4]
    value:integer[8]

Type 14:Db[8]:
    map:sorted<Elm[-key]>[4]

Type 15:sorted<Elm[-key]>[4]:Sorted(13, [(0, false)])

Type 16:vector<Elm>[4]:Vector(13)

fn test {
  let test_value = {
    let db = {
      let val = OpDatabase(8i32, 14i32);
      OpSetInt(val, 4i32, 0i32);
      let elm_16 = OpNewRecord(val, 14i32, 0i32);
      OpSetText(elm_16, 4i32, "One");
      OpSetInt(elm_16, 8i32, 1i32);
      OpFinishRecord(val, elm_16, 14i32, 0i32);
      elm_16 = OpNewRecord(val, 14i32, 0i32);
      OpSetText(elm_16, 4i32, "Two");
      OpSetInt(elm_16, 8i32, 2i32);
      OpFinishRecord(val, elm_16, 14i32, 0i32);
      val;
    };
    {
      let elm_17 = OpNewRecord(db, 14i32, 0i32);
      OpSetText(elm_17, 4i32, "Three");
      OpSetInt(elm_17, 8i32, 3i32);
      OpFinishRecord(db, elm_17, 14i32, 0i32);
      elm_17 = OpNewRecord(db, 14i32, 0i32);
      OpSetText(elm_17, 4i32, "Four");
      OpSetInt(elm_17, 8i32, 4i32);
      OpFinishRecord(db, elm_17, 14i32, 0i32);
    };
    let sum = 0i32;
    {
      let v#index = OpStart(OpGetField(db, 4i32, 15i32), 15i32, 0i32);
      loop {
        let v = OpNext(OpGetField(db, 4i32, 15i32), v#index, 15i32, 0i32);
        if OpNot(OpConvBoolFromRef(v)) {break(0)} else {null};
        {
          sum = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        };
      };
    };
    sum = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(OpGetRecord(OpGetField(db, 4i32, 15i32), 15i32, 1i32, "Three"), 8i32));
    sum;
  };
  if OpEqInt(test_value, 23143i32) {null} else {OpGenPanic({
    let append_18 = "Test failed ";
    OpFormatInt(append_18, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_18, " != 23143");
    append_18;
  })};
}

byte-code for sorted_vector:test()
 664[0]: return-address
 664[4]: Database(size=8, db_tp=14) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 669[16]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 672[28]: ConstInt(val=0) -> integer
 677[32]: SetInt(v1: reference, fld=4, val: integer)
 680[16]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 683[28]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 688[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 691[40]: ConstText(_value="One") -> text
 696[56]: SetText(v1: reference, fld=4, val: text)
 699[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 702[40]: ConstInt(val=1) -> integer
 707[44]: SetInt(v1: reference, fld=8, val: integer)
 710[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 713[40]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 716[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 721[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 724[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 729[40]: PutRef(var[16], value: reference)
 732[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 735[40]: ConstText(_value="Two") -> text
 740[56]: SetText(v1: reference, fld=4, val: text)
 743[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 746[40]: ConstInt(val=2) -> integer
 751[44]: SetInt(v1: reference, fld=8, val: integer)
 754[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 757[40]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 760[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 765[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 768[40]: GenFreeStack(value=12, discard=24)
 772[16]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 775[28]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 780[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 783[40]: ConstText(_value="Three") -> text
 790[56]: SetText(v1: reference, fld=4, val: text)
 793[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 796[40]: ConstInt(val=3) -> integer
 801[44]: SetInt(v1: reference, fld=8, val: integer)
 804[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 807[40]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 810[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 815[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 818[40]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 823[40]: PutRef(var[16], value: reference)
 826[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 829[40]: ConstText(_value="Four") -> text
 835[56]: SetText(v1: reference, fld=4, val: text)
 838[28]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 841[40]: ConstInt(val=4) -> integer
 846[44]: SetInt(v1: reference, fld=8, val: integer)
 849[28]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 852[40]: VarRef(var[16]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 855[52]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 860[28]: GenFreeStack(value=0, discard=12)
 864[16]: ConstInt(val=0) -> integer
 869[20]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 872[32]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(13, [(0, false)])[15]
 875[32]: Start(data: reference, db_tp=15, no_keys=0) -> integer
 879[24]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 882[36]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(13, [(0, false)])[15]
 885[36]: Next(data: reference, pos=16, db_tp=15, no_keys=0) -> reference
 891[36]: VarRef(var[24]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 894[48]: ConvBoolFromRef(val: reference) -> boolean
 895[37]: Not(v1: boolean) -> boolean
 896[37]: GenGotoFalseWord(jump=906, if_false: boolean)
 899[36]: GenFreeStack(value=0, discard=12)
 903[24]: GenGotoWord(jump=932)
 906[36]: VarInt(var[16]) -> integer
 909[40]: ConstInt(val=10) -> integer
 914[44]: MulInt(v1: integer, v2: integer) -> integer
 915[40]: VarRef(var[24]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[13]
 918[52]: GetInt(v1: reference, fld=8) -> integer
 921[44]: AddInt(v1: integer, v2: integer) -> integer
 922[40]: PutInt(var[16], value: integer)
 925[36]: GenFreeStack(value=0, discard=12)
 929[24]: GenGotoWord(jump=879)
 932[24]: GenFreeStack(value=0, discard=4)
 936[20]: VarInt(var[16]) -> integer
 939[24]: ConstInt(val=10) -> integer
 944[28]: MulInt(v1: integer, v2: integer) -> integer
 945[24]: VarRef(var[4]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[14]
 948[36]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(13, [(0, false)])[15]
 951[36]: ConstText(_value="Three") -> text
 958[52]: GetRecord(data: reference, db_tp=15, no_keys=1) -> reference
 962[36]: GetInt(v1: reference, fld=8) -> integer
 965[28]: AddInt(v1: integer, v2: integer) -> integer
 966[24]: PutInt(var[16], value: integer)
 969[20]: VarInt(var[16]) -> integer
 972[24]: GenFreeStack(value=4, discard=16)
 976[8]: VarInt(var[4]) -> integer
 979[12]: ConstInt(val=23143) -> integer
 984[16]: EqInt(v1: integer, v2: integer) -> boolean
 985[9]: GenGotoFalseWord(jump=991, if_false: boolean)
 988[8]: GenGotoWord(jump=1046)
 991[8]: Text()
 992[32]: ConstText(_value="Test failed ") -> text
1006[48]: AppendText(var[8], v1: text)
1009[32]: VarInt(var[4]) -> integer
1012[36]: ConstInt(val=0) -> integer
1017[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1024[32]: ConstText(_value=" != 23143") -> text
1035[48]: AppendText(var[8], v1: text)
1038[32]: VarText(var[8]) -> text
1041[48]: GenFreeStack(value=16, discard=24)
1045[24]: GenPanic(message: text)
1046[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] Database(size=8, db_tp=14) -> ref(1,1,0)={map:[]}[4]
  669:[16] VarRef(var[4]) -> ref(1,1,0)={map:[]}[16]
  672:[28] ConstInt(val=0) -> 0[28]
  677:[32] SetInt(v1=ref(1,1,0)[16], fld=4, val=0[28])
  680:[16] VarRef(var[4]) -> ref(1,1,0)={map:[]}[16]
  683:[28] NewRecord(data=ref(1,1,0)[16], parent_tp=14, fld=0) -> ref(1,9,8)[16]
  688:[28] VarRef(var[16]) -> ref(1,9,8)={}[28]
  691:[40] ConstText(_value="One") -> "One"[40]
  696:[56] SetText(v1=ref(1,9,8)[28], fld=4, val="One"[40])
  699:[28] VarRef(var[16]) -> ref(1,9,8)={key:"One"}[28]
  702:[40] ConstInt(val=1) -> 1[40]
  707:[44] SetInt(v1=ref(1,9,8)[28], fld=8, val=1[40])
  710:[28] VarRef(var[4]) -> ref(1,1,0)={map:[]}[28]
  713:[40] VarRef(var[16]) -> ref(1,9,8)={key:"One",value:1}[40]
  716:[52] FinishRecord(data=ref(1,1,0)[28], rec=ref(1,9,8)[40], parent_tp=14, fld=0)
  721:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[28]
  724:[40] NewRecord(data=ref(1,1,0)[28], parent_tp=14, fld=0) -> ref(1,9,32)[28]
  729:[40] PutRef(var[16], value=ref(1,9,32)[28])
  732:[28] VarRef(var[16]) -> ref(1,9,32)={}[28]
  735:[40] ConstText(_value="Two") -> "Two"[40]
  740:[56] SetText(v1=ref(1,9,32)[28], fld=4, val="Two"[40])
  743:[28] VarRef(var[16]) -> ref(1,9,32)={key:"Two"}[28]
  746:[40] ConstInt(val=2) -> 2[40]
  751:[44] SetInt(v1=ref(1,9,32)[28], fld=8, val=2[40])
  754:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[28]
  757:[40] VarRef(var[16]) -> ref(1,9,32)={key:"Two",value:2}[40]
  760:[52] FinishRecord(data=ref(1,1,0)[28], rec=ref(1,9,32)[40], parent_tp=14, fld=0)
  765:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[28]
  768:[40] GenFreeStack(value=12, discard=24)
  772:[16] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[16]
  775:[28] NewRecord(data=ref(1,1,0)[16], parent_tp=14, fld=0) -> ref(1,9,44)[16]
  780:[28] VarRef(var[16]) -> ref(1,9,44)={}[28]
  783:[40] ConstText(_value="Three") -> "Three"[40]
  790:[56] SetText(v1=ref(1,9,44)[28], fld=4, val="Three"[40])
  793:[28] VarRef(var[16]) -> ref(1,9,44)={key:"Three"}[28]
  796:[40] ConstInt(val=3) -> 3[40]
  801:[44] SetInt(v1=ref(1,9,44)[28], fld=8, val=3[40])
  804:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[28]
  807:[40] VarRef(var[16]) -> ref(1,9,44)={key:"Three",value:3}[40]
  810:[52] FinishRecord(data=ref(1,1,0)[28], rec=ref(1,9,44)[40], parent_tp=14, fld=0)
  815:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[28]
  818:[40] NewRecord(data=ref(1,1,0)[28], parent_tp=14, fld=0) -> ref(1,9,56)[28]
  823:[40] PutRef(var[16], value=ref(1,9,56)[28])
  826:[28] VarRef(var[16]) -> ref(1,9,56)={}[28]
  829:[40] ConstText(_value="Four") -> "Four"[40]
  835:[56] SetText(v1=ref(1,9,56)[28], fld=4, val="Four"[40])
  838:[28] VarRef(var[16]) -> ref(1,9,56)={key:"Four"}[28]
  841:[40] ConstInt(val=4) -> 4[40]
  846:[44] SetInt(v1=ref(1,9,56)[28], fld=8, val=4[40])
  849:[28] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[28]
  852:[40] VarRef(var[16]) -> ref(1,9,56)={key:"Four",value:4}[40]
  855:[52] FinishRecord(data=ref(1,1,0)[28], rec=ref(1,9,56)[40], parent_tp=14, fld=0)
  860:[28] GenFreeStack(value=0, discard=12)
  864:[16] ConstInt(val=0) -> 0[16]
  869:[20] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[20]
  872:[32] GetField(v1=ref(1,1,0)[20], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][20]
  875:[32] Start(data=ref(1,1,4)[20], db_tp=15, no_keys=0) -> 2147483647[20]
  879:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  882:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  885:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,9,8)[24]
  891:[36] VarRef(var[24]) -> ref(1,9,8)={key:"Two",value:2}[36]
  894:[48] ConvBoolFromRef(val=ref(1,9,8)[36]) -> true[36]
  895:[37] Not(v1=true[36]) -> false[36]
  896:[37] GenGotoFalseWord(jump=906, if_false=false[36])
  906:[36] VarInt(var[16]) -> 0[36]
  909:[40] ConstInt(val=10) -> 10[40]
  914:[44] MulInt(v1=0[36], v2=10[40]) -> 0[36]
  915:[40] VarRef(var[24]) -> ref(1,9,8)={key:"Two",value:2}[40]
  918:[52] GetInt(v1=ref(1,9,8)[40], fld=8) -> 2[40]
  921:[44] AddInt(v1=0[36], v2=2[40]) -> 2[36]
  922:[40] PutInt(var[16], value=2[36])
  925:[36] GenFreeStack(value=0, discard=12)
  929:[24] GenGotoWord(jump=879)
  879:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  882:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  885:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,9,20)[24]
  891:[36] VarRef(var[24]) -> ref(1,9,20)={key:"Three",value:3}[36]
  894:[48] ConvBoolFromRef(val=ref(1,9,20)[36]) -> true[36]
  895:[37] Not(v1=true[36]) -> false[36]
  896:[37] GenGotoFalseWord(jump=906, if_false=false[36])
  906:[36] VarInt(var[16]) -> 2[36]
  909:[40] ConstInt(val=10) -> 10[40]
  914:[44] MulInt(v1=2[36], v2=10[40]) -> 20[36]
  915:[40] VarRef(var[24]) -> ref(1,9,20)={key:"Three",value:3}[40]
  918:[52] GetInt(v1=ref(1,9,20)[40], fld=8) -> 3[40]
  921:[44] AddInt(v1=20[36], v2=3[40]) -> 23[36]
  922:[40] PutInt(var[16], value=23[36])
  925:[36] GenFreeStack(value=0, discard=12)
  929:[24] GenGotoWord(jump=879)
  879:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  882:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  885:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,9,32)[24]
  891:[36] VarRef(var[24]) -> ref(1,9,32)={key:"One",value:1}[36]
  894:[48] ConvBoolFromRef(val=ref(1,9,32)[36]) -> true[36]
  895:[37] Not(v1=true[36]) -> false[36]
  896:[37] GenGotoFalseWord(jump=906, if_false=false[36])
  906:[36] VarInt(var[16]) -> 23[36]
  909:[40] ConstInt(val=10) -> 10[40]
  914:[44] MulInt(v1=23[36], v2=10[40]) -> 230[36]
  915:[40] VarRef(var[24]) -> ref(1,9,32)={key:"One",value:1}[40]
  918:[52] GetInt(v1=ref(1,9,32)[40], fld=8) -> 1[40]
  921:[44] AddInt(v1=230[36], v2=1[40]) -> 231[36]
  922:[40] PutInt(var[16], value=231[36])
  925:[36] GenFreeStack(value=0, discard=12)
  929:[24] GenGotoWord(jump=879)
  879:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  882:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  885:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,9,44)[24]
  891:[36] VarRef(var[24]) -> ref(1,9,44)={key:"Four",value:4}[36]
  894:[48] ConvBoolFromRef(val=ref(1,9,44)[36]) -> true[36]
  895:[37] Not(v1=true[36]) -> false[36]
  896:[37] GenGotoFalseWord(jump=906, if_false=false[36])
  906:[36] VarInt(var[16]) -> 231[36]
  909:[40] ConstInt(val=10) -> 10[40]
  914:[44] MulInt(v1=231[36], v2=10[40]) -> 2310[36]
  915:[40] VarRef(var[24]) -> ref(1,9,44)={key:"Four",value:4}[40]
  918:[52] GetInt(v1=ref(1,9,44)[40], fld=8) -> 4[40]
  921:[44] AddInt(v1=2310[36], v2=4[40]) -> 2314[36]
  922:[40] PutInt(var[16], value=2314[36])
  925:[36] GenFreeStack(value=0, discard=12)
  929:[24] GenGotoWord(jump=879)
  879:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  882:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  885:[36] Next(data=ref(1,1,4)[24], pos=16, db_tp=15, no_keys=0) -> ref(1,0,2147483647)[24]
  891:[36] VarRef(var[24]) -> ref(1,0,2147483647)={}[36]
  894:[48] ConvBoolFromRef(val=ref(1,0,2147483647)[36]) -> false[36]
  895:[37] Not(v1=false[36]) -> true[36]
  896:[37] GenGotoFalseWord(jump=906, if_false=true[36])
  899:[36] GenFreeStack(value=0, discard=12)
  903:[24] GenGotoWord(jump=932)
  932:[24] GenFreeStack(value=0, discard=4)
  936:[20] VarInt(var[16]) -> 2314[20]
  939:[24] ConstInt(val=10) -> 10[24]
  944:[28] MulInt(v1=2314[20], v2=10[24]) -> 23140[20]
  945:[24] VarRef(var[4]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[24]
  948:[36] GetField(v1=ref(1,1,0)[24], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][24]
  951:[36] ConstText(_value="Three") -> "Three"[36]
  958:[52] GetRecord(data=ref(1,1,4)[24], db_tp=15, no_keys=1, key1="Three"[36]) -> ref(1,9,20)[24]
  962:[36] GetInt(v1=ref(1,9,20)[24], fld=8) -> 3[24]
  965:[28] AddInt(v1=23140[20], v2=3[24]) -> 23143[20]
  966:[24] PutInt(var[16], value=23143[20])
  969:[20] VarInt(var[16]) -> 23143[20]
  972:[24] GenFreeStack(value=4, discard=16)
  976:[8] VarInt(var[4]) -> 23143[8]
  979:[12] ConstInt(val=23143) -> 23143[12]
  984:[16] EqInt(v1=23143[8], v2=23143[12]) -> true[8]
  985:[9] GenGotoFalseWord(jump=991, if_false=true[8])
  988:[8] GenGotoWord(jump=1046)
 1046:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
