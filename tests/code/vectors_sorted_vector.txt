struct Elm {key: text, value: integer}
struct Db {map: sorted<Elm[-key]>}

pub fn test() {
    test_value = {db=Db {map: [Elm {key: "One", value: 1}, Elm {key: "Two", value: 2}]};
db.map += [Elm {key: "Three", value: 3}, Elm {key: "Four", value: 4}];
sum = 0;
for v in db.map {
  sum = sum * 10 + v.value;
};
sum = sum * 10 + db.map["Three"].value;
sum};
    assert(
        test_value == 23143,
        "Test failed {test_value} != 23143"
    );
}
Type 12:Elm[12]:
    key:text[4]
    value:integer[8]

Type 13:Db[8]:
    map:sorted<Elm[-key]>[4]

Type 14:sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ]

Type 15:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    db:Db["_val_1"] = {#3 object
      _val_1:Db = OpDatabase(8i32, 13i32);
      OpSetInt(_val_1, 4i32, 0i32);
      {#4 vector
        _elm_2:Elm = OpNewRecord(_val_1, 13i32, 0i32);
        {#5 object
          OpSetText(_elm_2, 4i32, "One");
          OpSetInt(_elm_2, 8i32, 1i32);
        }#5;
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2:Elm = OpNewRecord(_val_1, 13i32, 0i32);
        {#6 object
          OpSetText(_elm_2, 4i32, "Two");
          OpSetInt(_elm_2, 8i32, 2i32);
        }#6;
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
      }#4;
      _val_1;
    }#3:Db["_val_1"];
    {#7 vector
      _elm_3:Elm = OpNewRecord(db, 13i32, 0i32);
      {#8 object
        OpSetText(_elm_3, 4i32, "Three");
        OpSetInt(_elm_3, 8i32, 3i32);
      }#8;
      OpFinishRecord(db, _elm_3, 13i32, 0i32);
      _elm_3:Elm = OpNewRecord(db, 13i32, 0i32);
      {#9 object
        OpSetText(_elm_3, 4i32, "Four");
        OpSetInt(_elm_3, 8i32, 4i32);
      }#9;
      OpFinishRecord(db, _elm_3, 13i32, 0i32);
    }#7;
    sum:integer = 0i32;
    {#10 for
      v#index:integer = OpStart(OpGetField(db, 4i32, 14i32), 14i32, 0i32);
      loop {#11 for loop
        v:Elm = OpNext(OpGetField(db, 4i32, 14i32), v#index, 14i32, 0i32);
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#12 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        }#12;
      }#11;
    }#10;
    sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 1i32, "Three"), 8i32));
    sum;
  }#2:integer;
  if OpEqInt(test_value, 23143i32) null else OpPanic({#13 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 23143");
    __work_1;
  }#13:text);
}#1

byte-code for sorted_vector:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Database(size=8, db_tp=13) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 698[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 701[52]: ConstInt(val=0) -> integer
 706[56]: SetInt(v1: reference, fld=4, val: integer)
 709[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 712[52]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 717[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 720[64]: ConstText(_value="One") -> text
 725[80]: SetText(v1: reference, fld=4, val: text)
 728[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 731[64]: ConstInt(val=1) -> integer
 736[68]: SetInt(v1: reference, fld=8, val: integer)
 739[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 742[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 745[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 750[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 753[64]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 758[64]: PutRef(var[40], value: reference)
 761[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 764[64]: ConstText(_value="Two") -> text
 769[80]: SetText(v1: reference, fld=4, val: text)
 772[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 775[64]: ConstInt(val=2) -> integer
 780[68]: SetInt(v1: reference, fld=8, val: integer)
 783[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 786[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 789[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 794[52]: FreeStack(value=0, discard=12)
 798[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 801[52]: FreeStack(value=12, discard=24) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 805[40]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 808[52]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 813[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 816[64]: ConstText(_value="Three") -> text
 823[80]: SetText(v1: reference, fld=4, val: text)
 826[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 829[64]: ConstInt(val=3) -> integer
 834[68]: SetInt(v1: reference, fld=8, val: integer)
 837[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 840[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 843[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 848[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 851[64]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 856[64]: PutRef(var[40], value: reference)
 859[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 862[64]: ConstText(_value="Four") -> text
 868[80]: SetText(v1: reference, fld=4, val: text)
 871[52]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 874[64]: ConstInt(val=4) -> integer
 879[68]: SetInt(v1: reference, fld=8, val: integer)
 882[52]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 885[64]: VarRef(var[40]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 888[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 893[52]: FreeStack(value=0, discard=12)
 897[40]: ConstInt(val=0) -> integer
 902[44]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 905[56]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ][14]
 908[56]: Start(data: reference, db_tp=14, no_keys=0) -> integer
 912[48]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 915[60]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ][14]
 918[60]: Next(data: reference, pos=16, db_tp=14, no_keys=0) -> reference
 924[60]: VarRef(var[48]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 927[72]: ConvBoolFromRef(val: reference) -> boolean
 928[61]: Not(v1: boolean) -> boolean
 929[61]: GotoFalseWord(jump=939, if_false: boolean)
 932[60]: FreeStack(value=0, discard=12)
 936[48]: GotoWord(jump=965)
 939[60]: VarInt(var[40]) -> integer
 942[64]: ConstInt(val=10) -> integer
 947[68]: MulInt(v1: integer, v2: integer) -> integer
 948[64]: VarRef(var[48]) -> reference type=Elm[12]:{key:text[4], value:integer[8]}[12]
 951[76]: GetInt(v1: reference, fld=8) -> integer
 954[68]: AddInt(v1: integer, v2: integer) -> integer
 955[64]: PutInt(var[40], value: integer)
 958[60]: FreeStack(value=0, discard=12)
 962[48]: GotoWord(jump=912)
 965[48]: FreeStack(value=0, discard=4)
 969[44]: VarInt(var[40]) -> integer
 972[48]: ConstInt(val=10) -> integer
 977[52]: MulInt(v1: integer, v2: integer) -> integer
 978[48]: VarRef(var[28]) -> reference type=Db[8]:{map:sorted<Elm[-key]>[4]}[13]
 981[60]: GetField(v1: reference, fld=4) -> reference type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ][14]
 984[60]: ConstText(_value="Three") -> text
 991[76]: GetRecord(data: reference, db_tp=14, no_keys=1) -> reference
 995[60]: GetInt(v1: reference, fld=8) -> integer
 998[52]: AddInt(v1: integer, v2: integer) -> integer
 999[48]: PutInt(var[40], value: integer)
1002[44]: VarInt(var[40]) -> integer
1005[48]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
1009[32]: VarInt(var[28]) -> integer
1012[36]: ConstInt(val=23143) -> integer
1017[40]: EqInt(v1: integer, v2: integer) -> boolean
1018[33]: GotoFalseWord(jump=1024, if_false: boolean)
1021[32]: GotoWord(jump=1077)
1024[32]: ClearText(var[4])
1027[32]: ConstText(_value="Test failed ") -> text
1041[48]: AppendText(var[4], v1: text)
1044[32]: VarInt(var[28]) -> integer
1047[36]: ConstInt(val=0) -> integer
1052[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1059[32]: ConstText(_value=" != 23143") -> text
1070[48]: AppendText(var[4], v1: text)
1073[32]: VarText(var[4]) -> text
1076[48]: Panic(message: text)
1077[32]: FreeText(var[4])
1080[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] Database(size=8, db_tp=13) -> ref(1,1,0)={map:[]}[32]
  698:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
  701:[56] ConstInt(val=0) -> 0[56]
  706:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  709:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
  712:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=13, fld=0) -> ref(1,9,8)[44]
  717:[56] VarRef(var[44]) -> ref(1,9,8)={}[56]
  720:[68] ConstText(_value="One") -> "One"[68]
  725:[84] SetText(v1=ref(1,9,8)[56], fld=4, val="One"[68])
  728:[56] VarRef(var[44]) -> ref(1,9,8)={key:"One"}[56]
  731:[68] ConstInt(val=1) -> 1[68]
  736:[72] SetInt(v1=ref(1,9,8)[56], fld=8, val=1[68])
  739:[56] VarRef(var[32]) -> ref(1,1,0)={map:[]}[56]
  742:[68] VarRef(var[44]) -> ref(1,9,8)={key:"One",value:1}[68]
  745:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,8)[68], parent_tp=13, fld=0)
  750:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  753:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,9,32)[56]
  758:[68] PutRef(var[44], value=ref(1,9,32)[56])
  761:[56] VarRef(var[44]) -> ref(1,9,32)={}[56]
  764:[68] ConstText(_value="Two") -> "Two"[68]
  769:[84] SetText(v1=ref(1,9,32)[56], fld=4, val="Two"[68])
  772:[56] VarRef(var[44]) -> ref(1,9,32)={key:"Two"}[56]
  775:[68] ConstInt(val=2) -> 2[68]
  780:[72] SetInt(v1=ref(1,9,32)[56], fld=8, val=2[68])
  783:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  786:[68] VarRef(var[44]) -> ref(1,9,32)={key:"Two",value:2}[68]
  789:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,32)[68], parent_tp=13, fld=0)
  794:[56] FreeStack(value=0, discard=12)
  798:[44] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[44]
  801:[56] FreeStack(value=12, discard=24)
  805:[44] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[44]
  808:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=13, fld=0) -> ref(1,9,44)[44]
  813:[56] VarRef(var[44]) -> ref(1,9,44)={}[56]
  816:[68] ConstText(_value="Three") -> "Three"[68]
  823:[84] SetText(v1=ref(1,9,44)[56], fld=4, val="Three"[68])
  826:[56] VarRef(var[44]) -> ref(1,9,44)={key:"Three"}[56]
  829:[68] ConstInt(val=3) -> 3[68]
  834:[72] SetInt(v1=ref(1,9,44)[56], fld=8, val=3[68])
  837:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[56]
  840:[68] VarRef(var[44]) -> ref(1,9,44)={key:"Three",value:3}[68]
  843:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,44)[68], parent_tp=13, fld=0)
  848:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[56]
  851:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,9,56)[56]
  856:[68] PutRef(var[44], value=ref(1,9,56)[56])
  859:[56] VarRef(var[44]) -> ref(1,9,56)={}[56]
  862:[68] ConstText(_value="Four") -> "Four"[68]
  868:[84] SetText(v1=ref(1,9,56)[56], fld=4, val="Four"[68])
  871:[56] VarRef(var[44]) -> ref(1,9,56)={key:"Four"}[56]
  874:[68] ConstInt(val=4) -> 4[68]
  879:[72] SetInt(v1=ref(1,9,56)[56], fld=8, val=4[68])
  882:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[56]
  885:[68] VarRef(var[44]) -> ref(1,9,56)={key:"Four",value:4}[68]
  888:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,56)[68], parent_tp=13, fld=0)
  893:[56] FreeStack(value=0, discard=12)
  897:[44] ConstInt(val=0) -> 0[44]
  902:[48] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[48]
  905:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][48]
  908:[60] Start(data=ref(1,1,4)[48], db_tp=14, no_keys=0) -> 2147483647[48]
  912:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  915:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  918:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=14, no_keys=0) -> ref(1,9,8)[52]
  924:[64] VarRef(var[52]) -> ref(1,9,8)={key:"Two",value:2}[64]
  927:[76] ConvBoolFromRef(val=ref(1,9,8)[64]) -> true[64]
  928:[65] Not(v1=true[64]) -> false[64]
  929:[65] GotoFalseWord(jump=939, if_false=false[64])
  939:[64] VarInt(var[44]) -> 0[64]
  942:[68] ConstInt(val=10) -> 10[68]
  947:[72] MulInt(v1=0[64], v2=10[68]) -> 0[64]
  948:[68] VarRef(var[52]) -> ref(1,9,8)={key:"Two",value:2}[68]
  951:[80] GetInt(v1=ref(1,9,8)[68], fld=8) -> 2[68]
  954:[72] AddInt(v1=0[64], v2=2[68]) -> 2[64]
  955:[68] PutInt(var[44], value=2[64])
  958:[64] FreeStack(value=0, discard=12)
  962:[52] GotoWord(jump=912)
  912:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  915:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  918:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=14, no_keys=0) -> ref(1,9,20)[52]
  924:[64] VarRef(var[52]) -> ref(1,9,20)={key:"Three",value:3}[64]
  927:[76] ConvBoolFromRef(val=ref(1,9,20)[64]) -> true[64]
  928:[65] Not(v1=true[64]) -> false[64]
  929:[65] GotoFalseWord(jump=939, if_false=false[64])
  939:[64] VarInt(var[44]) -> 2[64]
  942:[68] ConstInt(val=10) -> 10[68]
  947:[72] MulInt(v1=2[64], v2=10[68]) -> 20[64]
  948:[68] VarRef(var[52]) -> ref(1,9,20)={key:"Three",value:3}[68]
  951:[80] GetInt(v1=ref(1,9,20)[68], fld=8) -> 3[68]
  954:[72] AddInt(v1=20[64], v2=3[68]) -> 23[64]
  955:[68] PutInt(var[44], value=23[64])
  958:[64] FreeStack(value=0, discard=12)
  962:[52] GotoWord(jump=912)
  912:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  915:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  918:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=14, no_keys=0) -> ref(1,9,32)[52]
  924:[64] VarRef(var[52]) -> ref(1,9,32)={key:"One",value:1}[64]
  927:[76] ConvBoolFromRef(val=ref(1,9,32)[64]) -> true[64]
  928:[65] Not(v1=true[64]) -> false[64]
  929:[65] GotoFalseWord(jump=939, if_false=false[64])
  939:[64] VarInt(var[44]) -> 23[64]
  942:[68] ConstInt(val=10) -> 10[68]
  947:[72] MulInt(v1=23[64], v2=10[68]) -> 230[64]
  948:[68] VarRef(var[52]) -> ref(1,9,32)={key:"One",value:1}[68]
  951:[80] GetInt(v1=ref(1,9,32)[68], fld=8) -> 1[68]
  954:[72] AddInt(v1=230[64], v2=1[68]) -> 231[64]
  955:[68] PutInt(var[44], value=231[64])
  958:[64] FreeStack(value=0, discard=12)
  962:[52] GotoWord(jump=912)
  912:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  915:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  918:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=14, no_keys=0) -> ref(1,9,44)[52]
  924:[64] VarRef(var[52]) -> ref(1,9,44)={key:"Four",value:4}[64]
  927:[76] ConvBoolFromRef(val=ref(1,9,44)[64]) -> true[64]
  928:[65] Not(v1=true[64]) -> false[64]
  929:[65] GotoFalseWord(jump=939, if_false=false[64])
  939:[64] VarInt(var[44]) -> 231[64]
  942:[68] ConstInt(val=10) -> 10[68]
  947:[72] MulInt(v1=231[64], v2=10[68]) -> 2310[64]
  948:[68] VarRef(var[52]) -> ref(1,9,44)={key:"Four",value:4}[68]
  951:[80] GetInt(v1=ref(1,9,44)[68], fld=8) -> 4[68]
  954:[72] AddInt(v1=2310[64], v2=4[68]) -> 2314[64]
  955:[68] PutInt(var[44], value=2314[64])
  958:[64] FreeStack(value=0, discard=12)
  962:[52] GotoWord(jump=912)
  912:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  915:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  918:[64] Next(data=ref(1,1,4)[52], pos=16, db_tp=14, no_keys=0) -> ref(1,0,2147483647)[52]
  924:[64] VarRef(var[52]) -> ref(1,0,2147483647)={}[64]
  927:[76] ConvBoolFromRef(val=ref(1,0,2147483647)[64]) -> false[64]
  928:[65] Not(v1=false[64]) -> true[64]
  929:[65] GotoFalseWord(jump=939, if_false=true[64])
  932:[64] FreeStack(value=0, discard=12)
  936:[52] GotoWord(jump=965)
  965:[52] FreeStack(value=0, discard=4)
  969:[48] VarInt(var[44]) -> 2314[48]
  972:[52] ConstInt(val=10) -> 10[52]
  977:[56] MulInt(v1=2314[48], v2=10[52]) -> 23140[48]
  978:[52] VarRef(var[32]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[52]
  981:[64] GetField(v1=ref(1,1,0)[52], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][52]
  984:[64] ConstText(_value="Three") -> "Three"[64]
  991:[80] GetRecord(data=ref(1,1,4)[52], db_tp=14, no_keys=1, key1="Three"[64]) -> ref(1,9,20)[52]
  995:[64] GetInt(v1=ref(1,9,20)[52], fld=8) -> 3[52]
  998:[56] AddInt(v1=23140[48], v2=3[52]) -> 23143[48]
  999:[52] PutInt(var[44], value=23143[48])
 1002:[48] VarInt(var[44]) -> 23143[48]
 1005:[52] FreeStack(value=4, discard=20)
 1009:[36] VarInt(var[32]) -> 23143[36]
 1012:[40] ConstInt(val=23143) -> 23143[40]
 1017:[44] EqInt(v1=23143[36], v2=23143[40]) -> true[36]
 1018:[37] GotoFalseWord(jump=1024, if_false=true[36])
 1021:[36] GotoWord(jump=1077)
 1077:[36] FreeText(var[8])
 1080:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
