struct Elm {key: text, value: integer}
struct Db {map: sorted<Elm[-key]>}

pub fn test() {
    test_value = {db=Db {map: [Elm {key: "One", value: 1}, Elm {key: "Two", value: 2}]};
db.map += [Elm {key: "Three", value: 3}, Elm {key: "Four", value: 4}];
sum = 0;
for v in db.map {
  sum = sum * 10 + v.value;
};
sum = sum * 10 + db.map["Three"].value;
sum};
    assert(
        test_value == 23143,
        "Test failed {test_value} != 23143"
    );
}
Type 12:Elm[12]:
    key:text[4]
    value:integer[8]

Type 13:Db[8]:
    map:sorted<Elm[-key]>[4]

Type 14:sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ]

Type 15:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __ref_1:ref(Db) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    db:ref(Db)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 13i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      {#4 vector
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#5 object
          OpSetText(_elm_1, 4i32, "One");
          OpSetInt(_elm_1, 8i32, 1i32);
        }#5;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#6 object
          OpSetText(_elm_1, 4i32, "Two");
          OpSetInt(_elm_1, 8i32, 2i32);
        }#6;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
      }#4;
      __ref_1;
    }#3:ref(Db)["__ref_1"];
    {#7 vector
      _elm_2:ref(Elm)["db"] = OpNewRecord(db, 13i32, 0i32);
      {#8 object
        OpSetText(_elm_2, 4i32, "Three");
        OpSetInt(_elm_2, 8i32, 3i32);
      }#8;
      OpFinishRecord(db, _elm_2, 13i32, 0i32);
      _elm_2:ref(Elm)["db"] = OpNewRecord(db, 13i32, 0i32);
      {#9 object
        OpSetText(_elm_2, 4i32, "Four");
        OpSetInt(_elm_2, 8i32, 4i32);
      }#9;
      OpFinishRecord(db, _elm_2, 13i32, 0i32);
    }#7;
    sum:integer = 0i32;
    {#10 for
      v#index:integer = OpStart(OpGetField(db, 4i32, 14i32), 14i32, 0i32);
      loop {#11 for loop
        v:ref(Elm)["db"] = OpNext(OpGetField(db, 4i32, 14i32), v#index, 14i32, 0i32);
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#12 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        }#12;
      }#11;
    }#10;
    sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 1i32, "Three"), 8i32));
    sum;
  }#2:integer;
  if OpEqInt(test_value, 23143i32) null else OpPanic({#13 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 23143");
    __work_1;
  }#13:text);
}#1

byte-code for sorted_vector:test()
 655[0]: return-address
 655[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Db) in 1
 656[16]: Text() var=__work_1[16]:text in 1
 657[40]: Database(var[4], db_tp=13) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 662[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 665[52]: ConstInt(val=0) -> integer
 670[56]: SetInt(v1: ref(reference), fld=4, val: integer)
 673[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 676[52]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 681[52]: VarRef(var[40]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 684[64]: ConstText(_value="One") -> text
 689[80]: SetText(v1: ref(reference), fld=4, val: text)
 692[52]: VarRef(var[40]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 695[64]: ConstInt(val=1) -> integer
 700[68]: SetInt(v1: ref(reference), fld=8, val: integer)
 703[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 706[64]: VarRef(var[40]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 709[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 714[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 717[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 722[64]: PutRef(var[40], value: ref(reference))
 725[52]: VarRef(var[40]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 728[64]: ConstText(_value="Two") -> text
 733[80]: SetText(v1: ref(reference), fld=4, val: text)
 736[52]: VarRef(var[40]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 739[64]: ConstInt(val=2) -> integer
 744[68]: SetInt(v1: ref(reference), fld=8, val: integer)
 747[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 750[64]: VarRef(var[40]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 753[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 758[52]: FreeStack(value=0, discard=12)
 762[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 765[52]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 768[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 773[64]: VarRef(var[52]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 776[76]: ConstText(_value="Three") -> text
 783[92]: SetText(v1: ref(reference), fld=4, val: text)
 786[64]: VarRef(var[52]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 789[76]: ConstInt(val=3) -> integer
 794[80]: SetInt(v1: ref(reference), fld=8, val: integer)
 797[64]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 800[76]: VarRef(var[52]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 803[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 808[64]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 811[76]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 816[76]: PutRef(var[52], value: ref(reference))
 819[64]: VarRef(var[52]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 822[76]: ConstText(_value="Four") -> text
 828[92]: SetText(v1: ref(reference), fld=4, val: text)
 831[64]: VarRef(var[52]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 834[76]: ConstInt(val=4) -> integer
 839[80]: SetInt(v1: ref(reference), fld=8, val: integer)
 842[64]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 845[76]: VarRef(var[52]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=_elm_2[52]:ref(Elm)["db"] in 7
 848[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 853[64]: FreeStack(value=0, discard=12)
 857[52]: ConstInt(val=0) -> integer var=sum[52]:integer in 2
 862[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 865[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ][14]
 868[68]: Start(data: ref(reference), db_tp=14, no_keys=0) -> integer
 872[60]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 875[72]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ][14]
 878[72]: Next(data: ref(reference), pos=16, db_tp=14, no_keys=0) -> ref(reference)
 884[72]: VarRef(var[60]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=v[60]:ref(Elm)["db"] in 11
 887[84]: ConvBoolFromRef(val: ref(reference)) -> boolean
 888[73]: Not(v1: boolean) -> boolean
 889[73]: GotoFalseWord(jump=899, if_false: boolean)
 892[72]: FreeStack(value=0, discard=12)
 896[60]: GotoWord(jump=925)
 899[72]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
 902[76]: ConstInt(val=10) -> integer
 907[80]: MulInt(v1: integer, v2: integer) -> integer
 908[76]: VarRef(var[60]) -> ref(reference) type=Elm[12]:{key:text[4], value:integer[8]}[12] var=v[60]:ref(Elm)["db"] in 11
 911[88]: GetInt(v1: ref(reference), fld=8) -> integer
 914[80]: AddInt(v1: integer, v2: integer) -> integer
 915[76]: PutInt(var[52], value: integer)
 918[72]: FreeStack(value=0, discard=12)
 922[60]: GotoWord(jump=872)
 925[60]: FreeStack(value=0, discard=4)
 929[56]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
 932[60]: ConstInt(val=10) -> integer
 937[64]: MulInt(v1: integer, v2: integer) -> integer
 938[60]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 941[72]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-key]>[4]:Sorted(12, [(0, false)]) keys [tp:6 desc:true field:4, ][14]
 944[72]: ConstText(_value="Three") -> text
 951[88]: GetRecord(data: ref(reference), db_tp=14, no_keys=1) -> ref(reference)
 955[72]: GetInt(v1: ref(reference), fld=8) -> integer
 958[64]: AddInt(v1: integer, v2: integer) -> integer
 959[60]: PutInt(var[52], value: integer)
 962[56]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
 965[60]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
 969[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 972[48]: ConstInt(val=23143) -> integer
 977[52]: EqInt(v1: integer, v2: integer) -> boolean
 978[45]: GotoFalseWord(jump=984, if_false: boolean)
 981[44]: GotoWord(jump=1037)
 984[44]: ClearText(var[16]) var=__work_1[16]:text in 1
 987[44]: ConstText(_value="Test failed ") -> text
1001[60]: AppendText(var[16], v1: text)
1004[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
1007[48]: ConstInt(val=0) -> integer
1012[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1019[44]: ConstText(_value=" != 23143") -> text
1030[60]: AppendText(var[16], v1: text)
1033[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
1036[60]: Panic(message: text)
1037[44]: FreeText(var[16])
1040[44]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1043[56]: FreeRef(v1: ref(reference))
1044[44]: Return(ret=0, value=0, discard=44)

Execute test:
  655:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  656:[20] Text()
  657:[44] Database(var[8], db_tp=13)
  662:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  665:[56] ConstInt(val=0) -> 0[56]
  670:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  673:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  676:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=13, fld=0) -> ref(1,9,8)[44]
  681:[56] VarRef(var[44]) -> ref(1,9,8)={}[56]
  684:[68] ConstText(_value="One") -> "One"[68]
  689:[84] SetText(v1=ref(1,9,8)[56], fld=4, val="One"[68])
  692:[56] VarRef(var[44]) -> ref(1,9,8)={key:"One"}[56]
  695:[68] ConstInt(val=1) -> 1[68]
  700:[72] SetInt(v1=ref(1,9,8)[56], fld=8, val=1[68])
  703:[56] VarRef(var[8]) -> ref(1,1,0)={map:[]}[56]
  706:[68] VarRef(var[44]) -> ref(1,9,8)={key:"One",value:1}[68]
  709:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,8)[68], parent_tp=13, fld=0)
  714:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  717:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,9,32)[56]
  722:[68] PutRef(var[44], value=ref(1,9,32)[56])
  725:[56] VarRef(var[44]) -> ref(1,9,32)={}[56]
  728:[68] ConstText(_value="Two") -> "Two"[68]
  733:[84] SetText(v1=ref(1,9,32)[56], fld=4, val="Two"[68])
  736:[56] VarRef(var[44]) -> ref(1,9,32)={key:"Two"}[56]
  739:[68] ConstInt(val=2) -> 2[68]
  744:[72] SetInt(v1=ref(1,9,32)[56], fld=8, val=2[68])
  747:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"One",value:1}]}[56]
  750:[68] VarRef(var[44]) -> ref(1,9,32)={key:"Two",value:2}[68]
  753:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,32)[68], parent_tp=13, fld=0)
  758:[56] FreeStack(value=0, discard=12)
  762:[44] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[44]
  765:[56] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[56]
  768:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,9,44)[56]
  773:[68] VarRef(var[56]) -> ref(1,9,44)={}[68]
  776:[80] ConstText(_value="Three") -> "Three"[80]
  783:[96] SetText(v1=ref(1,9,44)[68], fld=4, val="Three"[80])
  786:[68] VarRef(var[56]) -> ref(1,9,44)={key:"Three"}[68]
  789:[80] ConstInt(val=3) -> 3[80]
  794:[84] SetInt(v1=ref(1,9,44)[68], fld=8, val=3[80])
  797:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"One",value:1}]}[68]
  800:[80] VarRef(var[56]) -> ref(1,9,44)={key:"Three",value:3}[80]
  803:[92] FinishRecord(data=ref(1,1,0)[68], rec=ref(1,9,44)[80], parent_tp=13, fld=0)
  808:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[68]
  811:[80] NewRecord(data=ref(1,1,0)[68], parent_tp=13, fld=0) -> ref(1,9,56)[68]
  816:[80] PutRef(var[56], value=ref(1,9,56)[68])
  819:[68] VarRef(var[56]) -> ref(1,9,56)={}[68]
  822:[80] ConstText(_value="Four") -> "Four"[80]
  828:[96] SetText(v1=ref(1,9,56)[68], fld=4, val="Four"[80])
  831:[68] VarRef(var[56]) -> ref(1,9,56)={key:"Four"}[68]
  834:[80] ConstInt(val=4) -> 4[80]
  839:[84] SetInt(v1=ref(1,9,56)[68], fld=8, val=4[80])
  842:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1}]}[68]
  845:[80] VarRef(var[56]) -> ref(1,9,56)={key:"Four",value:4}[80]
  848:[92] FinishRecord(data=ref(1,1,0)[68], rec=ref(1,9,56)[80], parent_tp=13, fld=0)
  853:[68] FreeStack(value=0, discard=12)
  857:[56] ConstInt(val=0) -> 0[56]
  862:[60] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[60]
  865:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][60]
  868:[72] Start(data=ref(1,1,4)[60], db_tp=14, no_keys=0) -> 2147483647[60]
  872:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  875:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  878:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,8)[64]
  884:[76] VarRef(var[64]) -> ref(1,9,8)={key:"Two",value:2}[76]
  887:[88] ConvBoolFromRef(val=ref(1,9,8)[76]) -> true[76]
  888:[77] Not(v1=true[76]) -> false[76]
  889:[77] GotoFalseWord(jump=899, if_false=false[76])
  899:[76] VarInt(var[56]) -> 0[76]
  902:[80] ConstInt(val=10) -> 10[80]
  907:[84] MulInt(v1=0[76], v2=10[80]) -> 0[76]
  908:[80] VarRef(var[64]) -> ref(1,9,8)={key:"Two",value:2}[80]
  911:[92] GetInt(v1=ref(1,9,8)[80], fld=8) -> 2[80]
  914:[84] AddInt(v1=0[76], v2=2[80]) -> 2[76]
  915:[80] PutInt(var[56], value=2[76])
  918:[76] FreeStack(value=0, discard=12)
  922:[64] GotoWord(jump=872)
  872:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  875:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  878:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,20)[64]
  884:[76] VarRef(var[64]) -> ref(1,9,20)={key:"Three",value:3}[76]
  887:[88] ConvBoolFromRef(val=ref(1,9,20)[76]) -> true[76]
  888:[77] Not(v1=true[76]) -> false[76]
  889:[77] GotoFalseWord(jump=899, if_false=false[76])
  899:[76] VarInt(var[56]) -> 2[76]
  902:[80] ConstInt(val=10) -> 10[80]
  907:[84] MulInt(v1=2[76], v2=10[80]) -> 20[76]
  908:[80] VarRef(var[64]) -> ref(1,9,20)={key:"Three",value:3}[80]
  911:[92] GetInt(v1=ref(1,9,20)[80], fld=8) -> 3[80]
  914:[84] AddInt(v1=20[76], v2=3[80]) -> 23[76]
  915:[80] PutInt(var[56], value=23[76])
  918:[76] FreeStack(value=0, discard=12)
  922:[64] GotoWord(jump=872)
  872:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  875:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  878:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,32)[64]
  884:[76] VarRef(var[64]) -> ref(1,9,32)={key:"One",value:1}[76]
  887:[88] ConvBoolFromRef(val=ref(1,9,32)[76]) -> true[76]
  888:[77] Not(v1=true[76]) -> false[76]
  889:[77] GotoFalseWord(jump=899, if_false=false[76])
  899:[76] VarInt(var[56]) -> 23[76]
  902:[80] ConstInt(val=10) -> 10[80]
  907:[84] MulInt(v1=23[76], v2=10[80]) -> 230[76]
  908:[80] VarRef(var[64]) -> ref(1,9,32)={key:"One",value:1}[80]
  911:[92] GetInt(v1=ref(1,9,32)[80], fld=8) -> 1[80]
  914:[84] AddInt(v1=230[76], v2=1[80]) -> 231[76]
  915:[80] PutInt(var[56], value=231[76])
  918:[76] FreeStack(value=0, discard=12)
  922:[64] GotoWord(jump=872)
  872:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  875:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  878:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,9,44)[64]
  884:[76] VarRef(var[64]) -> ref(1,9,44)={key:"Four",value:4}[76]
  887:[88] ConvBoolFromRef(val=ref(1,9,44)[76]) -> true[76]
  888:[77] Not(v1=true[76]) -> false[76]
  889:[77] GotoFalseWord(jump=899, if_false=false[76])
  899:[76] VarInt(var[56]) -> 231[76]
  902:[80] ConstInt(val=10) -> 10[80]
  907:[84] MulInt(v1=231[76], v2=10[80]) -> 2310[76]
  908:[80] VarRef(var[64]) -> ref(1,9,44)={key:"Four",value:4}[80]
  911:[92] GetInt(v1=ref(1,9,44)[80], fld=8) -> 4[80]
  914:[84] AddInt(v1=2310[76], v2=4[80]) -> 2314[76]
  915:[80] PutInt(var[56], value=2314[76])
  918:[76] FreeStack(value=0, discard=12)
  922:[64] GotoWord(jump=872)
  872:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  875:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  878:[76] Next(data=ref(1,1,4)[64], pos=16, db_tp=14, no_keys=0) -> ref(1,0,2147483647)[64]
  884:[76] VarRef(var[64]) -> ref(1,0,2147483647)={}[76]
  887:[88] ConvBoolFromRef(val=ref(1,0,2147483647)[76]) -> false[76]
  888:[77] Not(v1=false[76]) -> true[76]
  889:[77] GotoFalseWord(jump=899, if_false=true[76])
  892:[76] FreeStack(value=0, discard=12)
  896:[64] GotoWord(jump=925)
  925:[64] FreeStack(value=0, discard=4)
  929:[60] VarInt(var[56]) -> 2314[60]
  932:[64] ConstInt(val=10) -> 10[64]
  937:[68] MulInt(v1=2314[60], v2=10[64]) -> 23140[60]
  938:[64] VarRef(var[44]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[64]
  941:[76] GetField(v1=ref(1,1,0)[64], fld=4) -> ref(1,1,4)=[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}][64]
  944:[76] ConstText(_value="Three") -> "Three"[76]
  951:[92] GetRecord(data=ref(1,1,4)[64], db_tp=14, no_keys=1, key1="Three"[76]) -> ref(1,9,20)[64]
  955:[76] GetInt(v1=ref(1,9,20)[64], fld=8) -> 3[64]
  958:[68] AddInt(v1=23140[60], v2=3[64]) -> 23143[60]
  959:[64] PutInt(var[56], value=23143[60])
  962:[60] VarInt(var[56]) -> 23143[60]
  965:[64] FreeStack(value=4, discard=20)
  969:[48] VarInt(var[44]) -> 23143[48]
  972:[52] ConstInt(val=23143) -> 23143[52]
  977:[56] EqInt(v1=23143[48], v2=23143[52]) -> true[48]
  978:[49] GotoFalseWord(jump=984, if_false=true[48])
  981:[48] GotoWord(jump=1037)
 1037:[48] FreeText(var[20])
 1040:[48] VarRef(var[8]) -> ref(1,1,0)={map:[{key:"Two",value:2},{key:"Three",value:3},{key:"One",value:1},{key:"Four",value:4}]}[48]
 1043:[60] FreeRef(v1=ref(1,1,0)[48])
 1044:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
