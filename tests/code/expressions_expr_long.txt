Test code:
pub fn test() {
    test_value = {a = -2l; 3l != abs(a)};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}

fn test {
  let __work_2 = "";
  let test_value = {
    let a = OpMinSingleLong(2i64);
    OpNeLong(3i64, _tp_long_abs(a));
  };
  if OpEqBool(test_value, true) {null} else {OpGenPanic({
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatBool(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != true");
    __work_2;
  })};
}

byte-code for expr_long:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: ConstLong(val=2) -> long
 683[36]: MinSingleLong(v1: long) -> long
 684[36]: ConstLong(val=3) -> long
 693[44]: VarLong(var[28]) -> long
 696[52]: GenCall(size=0, to=10)
 703[52]: NeLong(v1: long, v2: long) -> boolean
 704[37]: GenFreeStack(value=1, discard=8)
 708[29]: VarBool(var[28]) -> boolean
 711[30]: ConstTrue() -> boolean
 712[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 713[30]: GenGotoFalseWord(jump=719, if_false: boolean)
 716[29]: GenGotoWord(jump=769)
 719[29]: ClearText(var[4])
 722[29]: ConstText(_value="Test failed ") -> text(false)
 736[45]: AppendText(var[4], v1: text(false))
 739[29]: VarBool(var[28]) -> boolean
 742[30]: ConstInt(val=0) -> integer
 747[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 752[29]: ConstText(_value=" != true") -> text(false)
 762[45]: AppendText(var[4], v1: text(false))
 765[29]: VarText(var[4]) -> text(false)
 768[45]: GenPanic(message: text(false))
 769[29]: GenReturn(ret=0, value=0, discard=29)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] ConstLong(val=2) -> 2[32]
  683:[40] MinSingleLong(v1=2[32]) -> -2[32]
  684:[40] ConstLong(val=3) -> 3[40]
  693:[48] VarLong(var[32]) -> -2[48]
  696:[56] GenCall(size=0, to=10)
   10:[60] VarLong(var[48]) -> -2[60]
   13:[68] AbsLong(v1=-2[60]) -> 2[60]
   14:[68] GenReturn(ret=703[56], value=8, discard=20)
  703:[56] NeLong(v1=3[40], v2=2[48]) -> true[40]
  704:[41] GenFreeStack(value=1, discard=8)
  708:[33] VarBool(var[32]) -> true[33]
  711:[34] ConstTrue() -> true[34]
  712:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
  713:[34] GenGotoFalseWord(jump=719, if_false=true[33])
  716:[33] GenGotoWord(jump=769)
  769:[33] GenReturn(ret=4294967295[4], value=0, discard=29)
Finished
