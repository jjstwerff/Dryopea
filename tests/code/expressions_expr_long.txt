pub fn test() {
    test_value = {a = -2l; 3l != abs(a)};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:boolean(1) = {#block_2:boolean
    a:long(2) = OpMinSingleLong(2i64);
    OpNeLong(3i64, _tp_long_abs(a));
  }#block_2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for expr_long:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstLong(val=2) -> long var=a[32]:long
  10[40]: MinSingleLong(v1: long) -> long
  11[40]: ConstLong(val=3) -> long
  20[48]: VarLong(var[32]) -> long var=a[32]:long
  23[56]: Call(size=0, to=10)
  30[56]: NeLong(v1: long, v2: long) -> boolean
  31[41]: FreeStack(value=1, discard=9) type=boolean[1]:Base[4]
  35[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  38[34]: ConstTrue() -> boolean
  39[35]: EqBool(v1: boolean, v2: boolean) -> boolean
  40[34]: GotoFalseWord(jump=46, if_false: boolean)
  43[33]: GotoWord(jump=96)
  46[33]: ClearText(var[8]) var=__work_1[8]:text
  49[33]: ConstText(_value="Test failed ") -> text
  63[49]: AppendText(var[8], v1: text)
  66[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  69[34]: ConstInt(val=0) -> integer
  74[38]: FormatBool(var[8], val: boolean, width: integer, dir=-1, token=32)
  79[33]: ConstText(_value=" != true") -> text
  89[49]: AppendText(var[8], v1: text)
  92[33]: VarText(var[8]) -> text var=__work_1[8]:text
  95[49]: Panic(message: text)
  96[33]: FreeText(var[8])
  99[33]: Return(ret=0, value=0, discard=29)

Execute test:
    0:[8] Text()
    1:[32] ConstLong(val=2) -> 2[32]
   10:[40] MinSingleLong(v1=2[32]) -> -2[32]
   11:[40] ConstLong(val=3) -> 3[40]
   20:[48] VarLong(var[32]) -> -2[48]
   23:[56] Call(size=0, to=10)
   10:[60] VarLong(var[48]) -> -2[60]
   13:[68] AbsLong(v1=-2[60]) -> 2[60]
   14:[68] Return(ret=1198[56], value=8, discard=20) -> 2[48]
   30:[56] NeLong(v1=3[40], v2=2[48]) -> true[40]
   31:[41] FreeStack(value=1, discard=9)
   35:[33] VarBool(var[32]) -> true[33]
   38:[34] ConstTrue() -> true[34]
   39:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
   40:[34] GotoFalseWord(jump=1214, if_false=true[33])
   43:[33] GotoWord(jump=1264)
   96:[33] FreeText(var[8])
   99:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
