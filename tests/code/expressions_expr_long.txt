pub fn test() {
    test_value = {a = -2l; 3l != abs(a)};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    a:long = OpMinSingleLong(2i64);
    OpNeLong(3i64, _tp_long_abs(a));
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for expr_long:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstLong(val=2) -> long var=a[28]:long in 2
  10[36]: MinSingleLong(v1: long) -> long
  11[36]: ConstLong(val=3) -> long
  20[44]: VarLong(var[28]) -> long var=a[28]:long in 2
  23[52]: Call(size=0, to=10)
  30[52]: NeLong(v1: long, v2: long) -> boolean
  31[37]: FreeStack(value=1, discard=9) type=boolean[1]:Base[4]
  35[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  38[30]: ConstTrue() -> boolean
  39[31]: EqBool(v1: boolean, v2: boolean) -> boolean
  40[30]: GotoFalseWord(jump=46, if_false: boolean)
  43[29]: GotoWord(jump=96)
  46[29]: ClearText(var[4]) var=__work_1[4]:text in 1
  49[29]: ConstText(_value="Test failed ") -> text
  63[45]: AppendText(var[4], v1: text)
  66[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  69[30]: ConstInt(val=0) -> integer
  74[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
  79[29]: ConstText(_value=" != true") -> text
  89[45]: AppendText(var[4], v1: text)
  92[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  95[45]: Panic(message: text)
  96[29]: FreeText(var[4])
  99[29]: Return(ret=0, value=0, discard=29)

