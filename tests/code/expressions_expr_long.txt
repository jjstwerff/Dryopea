pub fn test() {
    test_value = {a = -2l; 3l != abs(a)};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    a:long = OpMinSingleLong(2i64);
    OpNeLong(3i64, _tp_long_abs(a));
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for expr_long:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: ConstLong(val=2) -> long var=a[28]:long in 2
 665[36]: MinSingleLong(v1: long) -> long
 666[36]: ConstLong(val=3) -> long
 675[44]: VarLong(var[28]) -> long var=a[28]:long in 2
 678[52]: Call(size=0, to=10)
 685[52]: NeLong(v1: long, v2: long) -> boolean
 686[37]: FreeStack(value=1, discard=9) type=boolean[1]:Base[4]
 690[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
 693[30]: ConstTrue() -> boolean
 694[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 695[30]: GotoFalseWord(jump=701, if_false: boolean)
 698[29]: GotoWord(jump=751)
 701[29]: ClearText(var[4]) var=__work_1[4]:text in 1
 704[29]: ConstText(_value="Test failed ") -> text
 718[45]: AppendText(var[4], v1: text)
 721[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
 724[30]: ConstInt(val=0) -> integer
 729[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 734[29]: ConstText(_value=" != true") -> text
 744[45]: AppendText(var[4], v1: text)
 747[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 750[45]: Panic(message: text)
 751[29]: FreeText(var[4])
 754[29]: Return(ret=0, value=0, discard=29)

Execute test:
  655:[8] Text()
  656:[32] ConstLong(val=2) -> 2[32]
  665:[40] MinSingleLong(v1=2[32]) -> -2[32]
  666:[40] ConstLong(val=3) -> 3[40]
  675:[48] VarLong(var[32]) -> -2[48]
  678:[56] Call(size=0, to=10)
   10:[60] VarLong(var[48]) -> -2[60]
   13:[68] AbsLong(v1=-2[60]) -> 2[60]
   14:[68] Return(ret=685[56], value=8, discard=20) -> 2[48]
  685:[56] NeLong(v1=3[40], v2=2[48]) -> true[40]
  686:[41] FreeStack(value=1, discard=9)
  690:[33] VarBool(var[32]) -> true[33]
  693:[34] ConstTrue() -> true[34]
  694:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
  695:[34] GotoFalseWord(jump=701, if_false=true[33])
  698:[33] GotoWord(jump=751)
  751:[33] FreeText(var[8])
  754:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
