pub fn test() {
    test_value = {"a{for x in 1..7 {x*2}:02}b"};
    assert(
        test_value == "a[02,04,06,08,10,12]b",
        "Test failed {test_value} != \"a[02,04,06,08,10,12]b\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "a";
      OpAppendText(__work_1, "[");
      x#index:integer = OpConvIntFromNull();
      x#count:integer = 0i32;
      loop {#4 iter for
        _val_1:integer = {#5 iter for loop
          x:integer = {#6 for next
            x#index:integer = if OpNot(OpConvBoolFromInt(x#index)) 1i32 else OpAddInt(x#index, 1i32);
            if OpGeInt(x#index, 7i32) break(0) else null;
            x#index;
          }#6:integer;
          {#7 block
            OpMulInt(x, 2i32);
          }#7:integer;
        }#5:integer;
        if OpGtInt(x#count, 0i32) OpAppendText(__work_1, ",") else null;
        x#count:integer = OpAddInt(x#count, 1i32);
        OpFormatInt(__work_1, _val_1, 10i32, 2i32, 48i32, false, false);
      }#4;
      OpAppendText(__work_1, "]");
      OpAppendText(__work_1, "b");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a[02,04,06,08,10,12]b") null else OpPanic({#8 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a[02,04,06,08,10,12]b"");
    __work_2;
  }#8:text);
}#1

byte-code for format_range:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: ClearText(var[28]) var=__work_1[28]:text in 1
   6[76]: ConstText(_value="a") -> text
   9[92]: AppendText(var[28], v1: text)
  12[76]: ConstText(_value="[") -> text
  15[92]: AppendText(var[28], v1: text)
  18[76]: ConvIntFromNull() -> integer var=x#index[76]:integer in 3
  19[80]: ConstInt(val=0) -> integer var=x#count[80]:integer in 3
  24[84]: VarInt(var[76]) -> integer var=x#index[76]:integer in 3
  27[88]: ConvBoolFromInt(v1: integer) -> boolean
  28[85]: Not(v1: boolean) -> boolean
  29[85]: GotoFalseWord(jump=40, if_false: boolean)
  32[84]: ConstInt(val=1) -> integer
  37[88]: GotoWord(jump=49)
  40[84]: VarInt(var[76]) -> integer var=x#index[76]:integer in 3
  43[88]: ConstInt(val=1) -> integer
  48[92]: AddInt(v1: integer, v2: integer) -> integer
  49[88]: PutInt(var[76], value: integer)
  52[84]: VarInt(var[76]) -> integer var=x#index[76]:integer in 3
  55[88]: ConstInt(val=7) -> integer
  60[92]: GeInt(v1: integer, v2: integer) -> boolean
  61[85]: GotoFalseWord(jump=67, if_false: boolean)
  64[84]: GotoWord(jump=135)
  67[84]: VarInt(var[76]) -> integer var=x#index[76]:integer in 3
  70[88]: VarInt(var[84]) -> integer var=x[84]:integer in 5
  73[92]: ConstInt(val=2) -> integer
  78[96]: MulInt(v1: integer, v2: integer) -> integer
  79[92]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
  83[88]: VarInt(var[80]) -> integer var=x#count[80]:integer in 3
  86[92]: ConstInt(val=0) -> integer
  91[96]: GtInt(v1: integer, v2: integer) -> boolean
  92[89]: GotoFalseWord(jump=101, if_false: boolean)
  95[88]: ConstText(_value=",") -> text
  98[104]: AppendText(var[28], v1: text)
 101[88]: VarInt(var[80]) -> integer var=x#count[80]:integer in 3
 104[92]: ConstInt(val=1) -> integer
 109[96]: AddInt(v1: integer, v2: integer) -> integer
 110[92]: PutInt(var[80], value: integer)
 113[88]: VarInt(var[84]) -> integer var=_val_1[84]:integer in 4
 116[92]: ConstInt(val=2) -> integer
 121[96]: FormatInt(var[28], val: integer, radix=10, width: integer, token=48, plus=false, note=false)
 128[88]: FreeStack(value=0, discard=4)
 132[84]: GotoWord(jump=24)
 135[84]: ConstText(_value="]") -> text
 138[100]: AppendText(var[28], v1: text)
 141[84]: ConstText(_value="b") -> text
 144[100]: AppendText(var[28], v1: text)
 147[84]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 150[100]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 154[92]: AppendText(var[52], v1: text)
 157[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 160[92]: ConstText(_value="a[02,04,06,08,10,12]b") -> text
 183[108]: EqText(v1: text, v2: text) -> boolean
 184[77]: GotoFalseWord(jump=190, if_false: boolean)
 187[76]: GotoWord(jump=259)
 190[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 193[76]: ConstText(_value="Test failed ") -> text
 207[92]: AppendText(var[4], v1: text)
 210[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 213[92]: ConstInt(val=0) -> integer
 218[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 223[76]: ConstText(_value=" != "a[02,04,06,08,10,12]b"") -> text
 252[92]: AppendText(var[4], v1: text)
 255[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 258[92]: Panic(message: text)
 259[76]: FreeText(var[52])
 262[76]: FreeText(var[28])
 265[76]: FreeText(var[4])
 268[76]: Return(ret=0, value=0, discard=76)

