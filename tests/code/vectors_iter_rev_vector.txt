pub fn test() {
    test_value = {v=[1, 2, 4, 8];
c = 0;
for e in v[rev(0..=3)] {
  c = c * 10 + e;
}
c};
    assert(
        test_value == 8421,
        "Test failed {test_value} != 8421"
    );
}
Type 12:vector<integer>[4]:Vector(0)

Type 13:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    v:vector<integer>#[] = {#3 vector
      _db_3:main_vector<integer> = OpDatabase(4i32, 13i32);
      _vec_2:vector<integer>#[] = OpGetField(_db_3, 4i32, 65535i32);
      OpSetInt(_db_3, 4i32, 0i32);
      _elm_1:boolean = OpNewRecord(_vec_2, 12i32, 65535i32);
      OpSetInt(_elm_1, 0i32, 1i32);
      OpFinishRecord(_vec_2, _elm_1, 12i32, 65535i32);
      _elm_1:boolean = OpNewRecord(_vec_2, 12i32, 65535i32);
      OpSetInt(_elm_1, 0i32, 2i32);
      OpFinishRecord(_vec_2, _elm_1, 12i32, 65535i32);
      _elm_1:boolean = OpNewRecord(_vec_2, 12i32, 65535i32);
      OpSetInt(_elm_1, 0i32, 4i32);
      OpFinishRecord(_vec_2, _elm_1, 12i32, 65535i32);
      _elm_1:boolean = OpNewRecord(_vec_2, 12i32, 65535i32);
      OpSetInt(_elm_1, 0i32, 8i32);
      OpFinishRecord(_vec_2, _elm_1, 12i32, 65535i32);
      _vec_2;
    }#3:vector<integer>#[];
    c:integer = 0i32;
    {#4 for
      _index_4:integer = OpConvIntFromNull();
      loop {#5 for loop
        e:integer = {#6 for next
          OpGetInt(OpGetVector(v, 4i32, {#7 for next block
            _index_4:integer = if OpNot(OpConvBoolFromInt(_index_4)) 3i32 else OpMinInt(_index_4, 1i32);
            if OpLtInt(_index_4, 0i32) break(0) else null;
            _index_4;
          }#7:integer), 0i32);
        }#6:integer;
        {#8 block
          c:integer = OpAddInt(OpMulInt(c, 10i32), e);
        }#8;
      }#5;
    }#4;
    c;
  }#2:integer;
  if OpEqInt(test_value, 8421i32) null else OpPanic({#9 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 8421");
    __work_1;
  }#9:text);
}#1

byte-code for iter_rev_vector:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Database(size=4, db_tp=13) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 698[40]: VarRef(var[28]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 701[52]: GetField(v1: reference, fld=4) -> reference type=Unknown type(65535)[65535]
 704[52]: VarRef(var[28]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 707[64]: ConstInt(val=0) -> integer
 712[68]: SetInt(v1: reference, fld=4, val: integer)
 715[52]: VarVector(var[40]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 718[64]: NewRecord(data: reference, parent_tp=12, fld=65535) -> reference
 723[64]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 726[76]: ConstInt(val=1) -> integer
 731[80]: SetInt(v1: reference, fld=0, val: integer)
 734[64]: VarVector(var[40]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 737[76]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 740[88]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=65535)
 745[64]: VarVector(var[40]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 748[76]: NewRecord(data: reference, parent_tp=12, fld=65535) -> reference
 753[76]: PutRef(var[52], value: reference)
 756[64]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 759[76]: ConstInt(val=2) -> integer
 764[80]: SetInt(v1: reference, fld=0, val: integer)
 767[64]: VarVector(var[40]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 770[76]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 773[88]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=65535)
 778[64]: VarVector(var[40]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 781[76]: NewRecord(data: reference, parent_tp=12, fld=65535) -> reference
 786[76]: PutRef(var[52], value: reference)
 789[64]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 792[76]: ConstInt(val=4) -> integer
 797[80]: SetInt(v1: reference, fld=0, val: integer)
 800[64]: VarVector(var[40]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 803[76]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 806[88]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=65535)
 811[64]: VarVector(var[40]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 814[76]: NewRecord(data: reference, parent_tp=12, fld=65535) -> reference
 819[76]: PutRef(var[52], value: reference)
 822[64]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 825[76]: ConstInt(val=8) -> integer
 830[80]: SetInt(v1: reference, fld=0, val: integer)
 833[64]: VarVector(var[40]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 836[76]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 839[88]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=65535)
 844[64]: VarVector(var[40]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 847[76]: FreeStack(value=12, discard=48) type=Variable[12]:{name:text[4], value:text[8]}[6]
 851[40]: ConstInt(val=0) -> integer
 856[44]: ConvIntFromNull() -> integer
 857[48]: VarVector(var[28]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 860[60]: VarInt(var[44]) -> integer
 863[64]: ConvBoolFromInt(v1: integer) -> boolean
 864[61]: Not(v1: boolean) -> boolean
 865[61]: GotoFalseWord(jump=876, if_false: boolean)
 868[60]: ConstInt(val=3) -> integer
 873[64]: GotoWord(jump=885)
 876[60]: VarInt(var[44]) -> integer
 879[64]: ConstInt(val=1) -> integer
 884[68]: MinInt(v1: integer, v2: integer) -> integer
 885[64]: PutInt(var[44], value: integer)
 888[60]: VarInt(var[44]) -> integer
 891[64]: ConstInt(val=0) -> integer
 896[68]: LtInt(v1: integer, v2: integer) -> boolean
 897[61]: GotoFalseWord(jump=907, if_false: boolean)
 900[60]: FreeStack(value=0, discard=12)
 904[48]: GotoWord(jump=939)
 907[60]: VarInt(var[44]) -> integer
 910[64]: GetVector(r: vector[], size=4, index: integer) -> reference type=integer[4]:Base[0]
 913[60]: GetInt(v1: reference, fld=0) -> integer
 916[52]: VarInt(var[40]) -> integer
 919[56]: ConstInt(val=10) -> integer
 924[60]: MulInt(v1: integer, v2: integer) -> integer
 925[56]: VarInt(var[48]) -> integer
 928[60]: AddInt(v1: integer, v2: integer) -> integer
 929[56]: PutInt(var[40], value: integer)
 932[52]: FreeStack(value=0, discard=4)
 936[48]: GotoWord(jump=857)
 939[48]: FreeStack(value=0, discard=4)
 943[44]: VarInt(var[40]) -> integer
 946[48]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
 950[32]: VarInt(var[28]) -> integer
 953[36]: ConstInt(val=8421) -> integer
 958[40]: EqInt(v1: integer, v2: integer) -> boolean
 959[33]: GotoFalseWord(jump=965, if_false: boolean)
 962[32]: GotoWord(jump=1017)
 965[32]: ClearText(var[4])
 968[32]: ConstText(_value="Test failed ") -> text
 982[48]: AppendText(var[4], v1: text)
 985[32]: VarInt(var[28]) -> integer
 988[36]: ConstInt(val=0) -> integer
 993[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1000[32]: ConstText(_value=" != 8421") -> text
1010[48]: AppendText(var[4], v1: text)
1013[32]: VarText(var[4]) -> text
1016[48]: Panic(message: text)
1017[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] Database(size=4, db_tp=13) -> ref(1,1,0)={}[32]
  698:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
  701:[56] GetField(v1=ref(1,1,0)[44], fld=4) -> ref(1,1,4)[44]
  704:[56] VarRef(var[32]) -> ref(1,1,0)={}[56]
  707:[68] ConstInt(val=0) -> 0[68]
  712:[72] SetInt(v1=ref(1,1,0)[56], fld=4, val=0[68])
  715:[56] VarVector(var[44]) -> ref(1,1,4)=[][56]
  718:[68] NewRecord(data=ref(1,1,4)[56], parent_tp=12, fld=65535) -> ref(1,5,8)[56]
  723:[68] VarRef(var[56]) -> ref(1,5,8)=false[68]
  726:[80] ConstInt(val=1) -> 1[80]
  731:[84] SetInt(v1=ref(1,5,8)[68], fld=0, val=1[80])
  734:[68] VarVector(var[44]) -> ref(1,1,4)=[1][68]
  737:[80] VarRef(var[56]) -> ref(1,5,8)=true[80]
  740:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,5,8)[80], parent_tp=12, fld=65535)
  745:[68] VarVector(var[44]) -> ref(1,1,4)=[1][68]
  748:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=12, fld=65535) -> ref(1,5,12)[68]
  753:[80] PutRef(var[56], value=ref(1,5,12)[68])
  756:[68] VarRef(var[56]) -> ref(1,5,12)=false[68]
  759:[80] ConstInt(val=2) -> 2[80]
  764:[84] SetInt(v1=ref(1,5,12)[68], fld=0, val=2[80])
  767:[68] VarVector(var[44]) -> ref(1,1,4)=[1,2][68]
  770:[80] VarRef(var[56]) -> ref(1,5,12)=true[80]
  773:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,5,12)[80], parent_tp=12, fld=65535)
  778:[68] VarVector(var[44]) -> ref(1,1,4)=[1,2][68]
  781:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=12, fld=65535) -> ref(1,5,16)[68]
  786:[80] PutRef(var[56], value=ref(1,5,16)[68])
  789:[68] VarRef(var[56]) -> ref(1,5,16)=false[68]
  792:[80] ConstInt(val=4) -> 4[80]
  797:[84] SetInt(v1=ref(1,5,16)[68], fld=0, val=4[80])
  800:[68] VarVector(var[44]) -> ref(1,1,4)=[1,2,4][68]
  803:[80] VarRef(var[56]) -> ref(1,5,16)=true[80]
  806:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,5,16)[80], parent_tp=12, fld=65535)
  811:[68] VarVector(var[44]) -> ref(1,1,4)=[1,2,4][68]
  814:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=12, fld=65535) -> ref(1,5,20)[68]
  819:[80] PutRef(var[56], value=ref(1,5,20)[68])
  822:[68] VarRef(var[56]) -> ref(1,5,20)=false[68]
  825:[80] ConstInt(val=8) -> 8[80]
  830:[84] SetInt(v1=ref(1,5,20)[68], fld=0, val=8[80])
  833:[68] VarVector(var[44]) -> ref(1,1,4)=[1,2,4,8][68]
  836:[80] VarRef(var[56]) -> ref(1,5,20)=true[80]
  839:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,5,20)[80], parent_tp=12, fld=65535)
  844:[68] VarVector(var[44]) -> ref(1,1,4)=[1,2,4,8][68]
  847:[80] FreeStack(value=12, discard=48)
  851:[44] ConstInt(val=0) -> 0[44]
  856:[48] ConvIntFromNull() -> -2147483648[48]
  857:[52] VarVector(var[32]) -> ref(1,1,4)=[1,2,4,8][52]
  860:[64] VarInt(var[48]) -> -2147483648[64]
  863:[68] ConvBoolFromInt(v1=-2147483648[64]) -> false[64]
  864:[65] Not(v1=false[64]) -> true[64]
  865:[65] GotoFalseWord(jump=876, if_false=true[64])
  868:[64] ConstInt(val=3) -> 3[64]
  873:[68] GotoWord(jump=885)
  885:[68] PutInt(var[48], value=3[64])
  888:[64] VarInt(var[48]) -> 3[64]
  891:[68] ConstInt(val=0) -> 0[68]
  896:[72] LtInt(v1=3[64], v2=0[68]) -> false[64]
  897:[65] GotoFalseWord(jump=907, if_false=false[64])
  907:[64] VarInt(var[48]) -> 3[64]
  910:[68] GetVector(r=ref(1,1,4)=true[52], size=4, index=3[64]) -> ref(1,5,20)=8[52]
  913:[64] GetInt(v1=ref(1,5,20)[52], fld=0) -> 8[52]
  916:[56] VarInt(var[44]) -> 0[56]
  919:[60] ConstInt(val=10) -> 10[60]
  924:[64] MulInt(v1=0[56], v2=10[60]) -> 0[56]
  925:[60] VarInt(var[52]) -> 8[60]
  928:[64] AddInt(v1=0[56], v2=8[60]) -> 8[56]
  929:[60] PutInt(var[44], value=8[56])
  932:[56] FreeStack(value=0, discard=4)
  936:[52] GotoWord(jump=857)
  857:[52] VarVector(var[32]) -> ref(1,1,4)=[1,2,4,8][52]
  860:[64] VarInt(var[48]) -> 3[64]
  863:[68] ConvBoolFromInt(v1=3[64]) -> true[64]
  864:[65] Not(v1=true[64]) -> false[64]
  865:[65] GotoFalseWord(jump=876, if_false=false[64])
  876:[64] VarInt(var[48]) -> 3[64]
  879:[68] ConstInt(val=1) -> 1[68]
  884:[72] MinInt(v1=3[64], v2=1[68]) -> 2[64]
  885:[68] PutInt(var[48], value=2[64])
  888:[64] VarInt(var[48]) -> 2[64]
  891:[68] ConstInt(val=0) -> 0[68]
  896:[72] LtInt(v1=2[64], v2=0[68]) -> false[64]
  897:[65] GotoFalseWord(jump=907, if_false=false[64])
  907:[64] VarInt(var[48]) -> 2[64]
  910:[68] GetVector(r=ref(1,1,4)=true[52], size=4, index=2[64]) -> ref(1,5,16)=4[52]
  913:[64] GetInt(v1=ref(1,5,16)[52], fld=0) -> 4[52]
  916:[56] VarInt(var[44]) -> 8[56]
  919:[60] ConstInt(val=10) -> 10[60]
  924:[64] MulInt(v1=8[56], v2=10[60]) -> 80[56]
  925:[60] VarInt(var[52]) -> 4[60]
  928:[64] AddInt(v1=80[56], v2=4[60]) -> 84[56]
  929:[60] PutInt(var[44], value=84[56])
  932:[56] FreeStack(value=0, discard=4)
  936:[52] GotoWord(jump=857)
  857:[52] VarVector(var[32]) -> ref(1,1,4)=[1,2,4,8][52]
  860:[64] VarInt(var[48]) -> 2[64]
  863:[68] ConvBoolFromInt(v1=2[64]) -> true[64]
  864:[65] Not(v1=true[64]) -> false[64]
  865:[65] GotoFalseWord(jump=876, if_false=false[64])
  876:[64] VarInt(var[48]) -> 2[64]
  879:[68] ConstInt(val=1) -> 1[68]
  884:[72] MinInt(v1=2[64], v2=1[68]) -> 1[64]
  885:[68] PutInt(var[48], value=1[64])
  888:[64] VarInt(var[48]) -> 1[64]
  891:[68] ConstInt(val=0) -> 0[68]
  896:[72] LtInt(v1=1[64], v2=0[68]) -> false[64]
  897:[65] GotoFalseWord(jump=907, if_false=false[64])
  907:[64] VarInt(var[48]) -> 1[64]
  910:[68] GetVector(r=ref(1,1,4)=true[52], size=4, index=1[64]) -> ref(1,5,12)=2[52]
  913:[64] GetInt(v1=ref(1,5,12)[52], fld=0) -> 2[52]
  916:[56] VarInt(var[44]) -> 84[56]
  919:[60] ConstInt(val=10) -> 10[60]
  924:[64] MulInt(v1=84[56], v2=10[60]) -> 840[56]
  925:[60] VarInt(var[52]) -> 2[60]
  928:[64] AddInt(v1=840[56], v2=2[60]) -> 842[56]
  929:[60] PutInt(var[44], value=842[56])
  932:[56] FreeStack(value=0, discard=4)
  936:[52] GotoWord(jump=857)
  857:[52] VarVector(var[32]) -> ref(1,1,4)=[1,2,4,8][52]
  860:[64] VarInt(var[48]) -> 1[64]
  863:[68] ConvBoolFromInt(v1=1[64]) -> true[64]
  864:[65] Not(v1=true[64]) -> false[64]
  865:[65] GotoFalseWord(jump=876, if_false=false[64])
  876:[64] VarInt(var[48]) -> 1[64]
  879:[68] ConstInt(val=1) -> 1[68]
  884:[72] MinInt(v1=1[64], v2=1[68]) -> 0[64]
  885:[68] PutInt(var[48], value=0[64])
  888:[64] VarInt(var[48]) -> 0[64]
  891:[68] ConstInt(val=0) -> 0[68]
  896:[72] LtInt(v1=0[64], v2=0[68]) -> false[64]
  897:[65] GotoFalseWord(jump=907, if_false=false[64])
  907:[64] VarInt(var[48]) -> 0[64]
  910:[68] GetVector(r=ref(1,1,4)=true[52], size=4, index=0[64]) -> ref(1,5,8)=1[52]
  913:[64] GetInt(v1=ref(1,5,8)[52], fld=0) -> 1[52]
  916:[56] VarInt(var[44]) -> 842[56]
  919:[60] ConstInt(val=10) -> 10[60]
  924:[64] MulInt(v1=842[56], v2=10[60]) -> 8420[56]
  925:[60] VarInt(var[52]) -> 1[60]
  928:[64] AddInt(v1=8420[56], v2=1[60]) -> 8421[56]
  929:[60] PutInt(var[44], value=8421[56])
  932:[56] FreeStack(value=0, discard=4)
  936:[52] GotoWord(jump=857)
  857:[52] VarVector(var[32]) -> ref(1,1,4)=[1,2,4,8][52]
  860:[64] VarInt(var[48]) -> 0[64]
  863:[68] ConvBoolFromInt(v1=0[64]) -> true[64]
  864:[65] Not(v1=true[64]) -> false[64]
  865:[65] GotoFalseWord(jump=876, if_false=false[64])
  876:[64] VarInt(var[48]) -> 0[64]
  879:[68] ConstInt(val=1) -> 1[68]
  884:[72] MinInt(v1=0[64], v2=1[68]) -> -1[64]
  885:[68] PutInt(var[48], value=-1[64])
  888:[64] VarInt(var[48]) -> -1[64]
  891:[68] ConstInt(val=0) -> 0[68]
  896:[72] LtInt(v1=-1[64], v2=0[68]) -> true[64]
  897:[65] GotoFalseWord(jump=907, if_false=true[64])
  900:[64] FreeStack(value=0, discard=12)
  904:[52] GotoWord(jump=939)
  939:[52] FreeStack(value=0, discard=4)
  943:[48] VarInt(var[44]) -> 8421[48]
  946:[52] FreeStack(value=4, discard=20)
  950:[36] VarInt(var[32]) -> 8421[36]
  953:[40] ConstInt(val=8421) -> 8421[40]
  958:[44] EqInt(v1=8421[36], v2=8421[40]) -> true[36]
  959:[37] GotoFalseWord(jump=965, if_false=true[36])
  962:[36] GotoWord(jump=1017)
 1017:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
