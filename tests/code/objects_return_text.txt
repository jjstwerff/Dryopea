pub struct Data {
    name: text,
    number: integer
}

fn data(n: text) -> text {
    res = Data { name: n };
    res.name
}

pub fn test() {
    test_value = {data("test")};
    assert(
        test_value == "test",
        "Test failed {test_value} != \"test\""
    );
}
Type 12:Data[12]:
    name:text[4]
    number:integer[8]

fn data(n:text, res:Data) -> text["res"] {#1 block
  {#2 object
    OpDatabase(res, 12i32);
    OpSetText(res, 4i32, n);
    OpSetInt(res, 8i32, 0i32);
  }#2;
  OpGetText(res, 4i32);
}#1:text["res"]

byte-code for return_text:data(n: text[0], res: ref(Data)[16]) -> text["res"]
 655[28]: return-address
 655[32]: Database(var[16], db_tp=12) type=Data[12]:{name:text[4], number:integer[8]}[12]
 660[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[12] var=res[16]:ref(Data)["res"] in 0
 663[44]: ArgText(var[0]) -> text var=n[0]:text in 0
 666[60]: SetText(v1: ref(reference), fld=4, val: text)
 669[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[12] var=res[16]:ref(Data)["res"] in 0
 672[44]: ConstInt(val=0) -> integer
 677[48]: SetInt(v1: ref(reference), fld=8, val: integer)
 680[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[12] var=res[16]:ref(Data)["res"] in 0
 683[44]: GetText(v1: ref(reference), fld=4) -> text["n"]
 686[48]: Return(ret=28, value=16, discard=48) type=text[4]:Base[5]

fn test() {#1 block
  __ref_1:ref(Data) = null;
  __work_1:text = "";
  test_value:text["__ref_1"] = {#2 block
    data("test", __ref_1);
  }#2:text["__ref_1"];
  if OpEqText(test_value, "test") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "test"");
    __work_1;
  }#3:text);
}#1

byte-code for return_text:test()
 692[0]: return-address
 692[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Data) in 1
 693[16]: Text() var=__work_1[16]:text in 1
 694[40]: Text() var=test_value[40]:text["__ref_1"] in 1
 695[64]: ConstText(_value="test") -> text
 701[80]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[12] var=__ref_1[4]:ref(Data) in 1
 704[92]: Call(size=0, to=655)
 711[80]: AppendText(var[40], v1: text)
 714[64]: VarText(var[40]) -> text var=test_value[40]:text["__ref_1"] in 1
 717[80]: ConstText(_value="test") -> text
 723[96]: EqText(v1: text, v2: text) -> boolean
 724[65]: GotoFalseWord(jump=730, if_false: boolean)
 727[64]: GotoWord(jump=782)
 730[64]: ClearText(var[16]) var=__work_1[16]:text in 1
 733[64]: ConstText(_value="Test failed ") -> text
 747[80]: AppendText(var[16], v1: text)
 750[64]: VarText(var[40]) -> text var=test_value[40]:text["__ref_1"] in 1
 753[80]: ConstInt(val=0) -> integer
 758[84]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 763[64]: ConstText(_value=" != "test"") -> text
 775[80]: AppendText(var[16], v1: text)
 778[64]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 781[80]: Panic(message: text)
 782[64]: FreeText(var[40])
 785[64]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[12] var=__ref_1[4]:ref(Data) in 1
 788[76]: FreeRef(v1: ref(reference))
 789[64]: FreeText(var[16])
 792[64]: Return(ret=0, value=0, discard=64)

Execute test:
  692:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  693:[20] Text()
  694:[44] Text()
  695:[68] ConstText(_value="test") -> "test"[68]
  701:[84] VarRef(var[8]) -> ref(1,0,0)=null[84]
  704:[96] Call(size=0, to=655)
  655:[100] Database(var[84], db_tp=12)
  660:[100] VarRef(var[84]) -> ref(1,1,0)={}[100]
  663:[112] ArgText(var[68]) -> "test"[112]
  666:[128] SetText(v1=ref(1,1,0)[100], fld=4, val="test"[112])
  669:[100] VarRef(var[84]) -> ref(1,1,0)={name:"test"}[100]
  672:[112] ConstInt(val=0) -> 0[112]
  677:[116] SetInt(v1=ref(1,1,0)[100], fld=8, val=0[112])
  680:[100] VarRef(var[84]) -> ref(1,1,0)={name:"test",number:0}[100]
  683:[112] GetText(v1=ref(1,1,0)[100], fld=4) -> "test"[100]
  686:[116] Return(ret=711[96], value=16, discard=48) -> "test"[68]
  711:[84] AppendText(var[44], v1="test"[68])
  714:[68] VarText(var[44]) -> "test"[68]
  717:[84] ConstText(_value="test") -> "test"[84]
  723:[100] EqText(v1="test"[68], v2="test"[84]) -> true[68]
  724:[69] GotoFalseWord(jump=730, if_false=true[68])
  727:[68] GotoWord(jump=782)
  782:[68] FreeText(var[44])
  785:[68] VarRef(var[8]) -> ref(1,0,0)=null[68]
  788:[80] FreeRef(v1=ref(1,0,0)[68])
  789:[68] FreeText(var[20])
  792:[68] Return(ret=4294967295[4], value=0, discard=64)
Finished
