pub struct Data {
    name: text,
    number: integer
}

fn data(n: text) -> text {
    res = Data { name: n };
    res.name
}

pub fn test() {
    test_value = {data("test")};
    assert(
        test_value == "test",
        "Test failed {test_value} != \"test\""
    );
}
Type 14:Data[12]:
    name:text[4]
    number:integer[8]

fn data(n:text, res:Data) -> text["res"] {#1 block
  {#2 object
    OpDatabase(res, 14i32);
    OpSetText(res, 4i32, n);
    OpSetInt(res, 8i32, 0i32);
  }#2;
  OpGetText(res, 4i32);
}#1:text["res"]

byte-code for return_text:data(n: text[0], res: ref(Data)[16]) [1073] -> text["res"]
   0[28]: return-address
   0[32]: Database(var[16], db_tp=14) type=Data[12]:{name:text[4], number:integer[8]}[14]
   5[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=res[16]:ref(Data)["res"] in 0
   8[44]: ArgText(var[0]) -> text var=n[0]:text in 0
  11[60]: SetText(v1: ref(reference), fld=4, val: text)
  14[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=res[16]:ref(Data)["res"] in 0
  17[44]: ConstInt(val=0) -> integer
  22[48]: SetInt(v1: ref(reference), fld=8, val: integer)
  25[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=res[16]:ref(Data)["res"] in 0
  28[44]: GetText(v1: ref(reference), fld=4) -> text["n"]
  31[48]: Return(ret=28, value=16, discard=48) type=text[4]:Base[5]

fn test() {#1 block
  __ref_1:ref(Data) = null;
  __work_1:text = "";
  test_value:text["__ref_1"] = {#2 block
    data("test", __ref_1);
  }#2:text["__ref_1"];
  if OpEqText(test_value, "test") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "test"");
    __work_1;
  }#3:text);
}#1

byte-code for return_text:test() [1110]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Data) in 1
   1[16]: Text() var=__work_1[16]:text in 1
   2[40]: Text() var=test_value[40]:text["__ref_1"] in 1
   3[64]: ConstText(_value="test") -> text
   9[80]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=__ref_1[4]:ref(Data) in 1
  12[92]: Call(size=0, to=1073)
  19[80]: AppendText(var[40], v1: text)
  22[64]: VarText(var[40]) -> text var=test_value[40]:text["__ref_1"] in 1
  25[80]: ConstText(_value="test") -> text
  31[96]: EqText(v1: text, v2: text) -> boolean
  32[65]: GotoFalseWord(jump=38, if_false: boolean)
  35[64]: GotoWord(jump=90)
  38[64]: ClearText(var[16]) var=__work_1[16]:text in 1
  41[64]: ConstText(_value="Test failed ") -> text
  55[80]: AppendText(var[16], v1: text)
  58[64]: VarText(var[40]) -> text var=test_value[40]:text["__ref_1"] in 1
  61[80]: ConstInt(val=0) -> integer
  66[84]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
  71[64]: ConstText(_value=" != "test"") -> text
  83[80]: AppendText(var[16], v1: text)
  86[64]: VarText(var[16]) -> text var=__work_1[16]:text in 1
  89[80]: Panic(message: text)
  90[64]: FreeText(var[40])
  93[64]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[14] var=__ref_1[4]:ref(Data) in 1
  96[76]: FreeRef(v1: ref(reference))
  97[64]: FreeText(var[16])
 100[64]: Return(ret=0, value=0, discard=64)

