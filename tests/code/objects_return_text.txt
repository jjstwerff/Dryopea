pub struct Data {
    name: text,
    number: integer
}

fn data(n: text) -> text {
    res = Data { name: n };
    res.name
}

pub fn test() {
    test_value = {data("test")};
    assert(
        test_value == "test",
        "Test failed {test_value} != \"test\""
    );
}
Type 17:Data[12]:
    name:text[4]
    number:integer[8]

fn data(n:text, res:Data["res"]) -> text["res"] {#1 block
  res:ref(Data)["res"] = OpConvRefFromNull();
  OpDatabase(res, 17i32);
  OpSetText(res, 4i32, n);
  OpSetInt(res, 8i32, 0i32);
  OpGetText(res, 4i32);
}#1:text["res"]

byte-code for return_text:data(n: text[0], res: ref(Data)["res"][16]) [1176] -> text["res"]
   0[28]: return-address
   0[32]: ConvRefFromNull() -> ref(reference) var=res[16]:ref(Data)["res"] in 0
   1[44]: PutRef(var[16], value: ref(reference))
   4[32]: Database(var[16], db_tp=17) type=Data[12]:{name:text[4], number:integer[8]}[17]
   9[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[16]:ref(Data)["res"] in 0
  12[44]: ArgText(var[0]) -> text var=n[0]:text in 0
  15[60]: SetText(v1: ref(reference), fld=4, val: text)
  18[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[16]:ref(Data)["res"] in 0
  21[44]: ConstInt(val=0) -> integer
  26[48]: SetInt(v1: ref(reference), fld=8, val: integer)
  29[32]: VarRef(var[16]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[16]:ref(Data)["res"] in 0
  32[44]: GetText(v1: ref(reference), fld=4) -> text["n"]
  35[48]: Return(ret=28, value=16, discard=48) type=text[4]:Base[5]

fn test() {#1 block
  __ref_1:ref(Data)["__ref_1"] = null;
  __work_1:text = "";
  test_value:text["__ref_1"] = {#2 block
    data("test", __ref_1);
  }#2:text["__ref_1"];
  if OpEqText(test_value, "test") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "test"");
    __work_1;
  }#3:text);
}#1

byte-code for return_text:test() [1217]
   0[0]: return-address
   0[4]: CreateRef(var[3]) -> ref(reference) var=__ref_1[4]:ref(Data)["__ref_1"] in 1
   3[16]: Text() var=__work_1[16]:text in 1
   4[40]: Text() var=test_value[40]:text["__ref_1"] in 1
   5[64]: ConstText(_value="test") -> text
  11[80]: VarRef(var[4]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=__ref_1[4]:ref(Data)["__ref_1"] in 1
  14[92]: Call(size=0, to=1176)
  21[80]: AppendText(var[40], v1: text)
  24[64]: VarText(var[40]) -> text var=test_value[40]:text["__ref_1"] in 1
  27[80]: ConstText(_value="test") -> text
  33[96]: EqText(v1: text, v2: text) -> boolean
  34[65]: GotoFalseWord(jump=40, if_false: boolean)
  37[64]: GotoWord(jump=92)
  40[64]: ClearText(var[16]) var=__work_1[16]:text in 1
  43[64]: ConstText(_value="Test failed ") -> text
  57[80]: AppendText(var[16], v1: text)
  60[64]: VarText(var[40]) -> text var=test_value[40]:text["__ref_1"] in 1
  63[80]: ConstInt(val=0) -> integer
  68[84]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
  73[64]: ConstText(_value=" != "test"") -> text
  85[80]: AppendText(var[16], v1: text)
  88[64]: VarText(var[16]) -> text var=__work_1[16]:text in 1
  91[80]: Panic(message: text)
  92[64]: FreeText(var[40])
  95[64]: FreeText(var[16])
  98[64]: Return(ret=0, value=0, discard=64)

