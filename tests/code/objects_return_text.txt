pub struct Data {
    name: text,
    number: integer
}

fn data(n: text) -> text {
    res = Data { name: n };
    res.name
}

pub fn test() {
    test_value = {data("test")};
    assert(
        test_value == "test",
        "Test failed {test_value} != \"test\""
    );
}
Type 17:Data[12]:
    name:text[4]
    number:integer[8]

fn data(n:text, res:Data) -> text["res"] {#block(1):text["res"]
  OpDatabase(res(0), 17i32);
  OpSetText(res(0), 4i32, n(0));
  OpSetInt(res(0), 8i32, 0i32);
  OpGetText(res(0), 4i32);
}#block(1):text["res"]

byte-code for return_text:data(n: text[4], res: ref(Data)[20]) [1119] -> text["res"]
   0[32]: return-address
   0[36]: Database(var[20], db_tp=17) type=Data[12]:{name:text[4], number:integer[8]}[17]
   5[36]: VarRef(var[20]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[20]:ref(Data)
   8[48]: ArgText(var[4]) -> text var=n[4]:text
  11[64]: SetText(v1: ref(reference), fld=4, val: text)
  14[36]: VarRef(var[20]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[20]:ref(Data)
  17[48]: ConstInt(val=0) -> integer
  22[52]: SetInt(v1: ref(reference), fld=8, val: integer)
  25[36]: VarRef(var[20]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=res[20]:ref(Data)
  28[48]: GetText(v1: ref(reference), fld=4) -> text["n"]
  31[52]: Return(ret=28, value=16, discard=48) type=text[4]:Base[5]

fn test() {#block(1):void
  __ref_1(1):ref(Data) = null;
  __work_1(1):text = "";
  test_value(1):text["__ref_1"] = {#block(2):text["__ref_1"]
    data("test", __ref_1(1));
  }#block(2):text["__ref_1"];
  if OpEqText(test_value(1), "test") null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatText(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != "test"");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(test_value(1));
  OpFreeRef(__ref_1(1));
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for return_text:test() [1156]
   0[4]: return-address
   0[8]: ConvRefFromNull() -> ref(reference) var=__ref_1[8]:ref(Data)
   1[20]: Text() var=__work_1[20]:text
   2[44]: Text() var=test_value[44]:text["__ref_1"]
   3[68]: ConstText(_value="test") -> text
   9[84]: VarRef(var[8]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=__ref_1[8]:ref(Data)
  12[96]: Call(size=0, to=1119)
  19[84]: AppendText(var[44], v1: text)
  22[68]: VarText(var[44]) -> text var=test_value[44]:text["__ref_1"]
  25[84]: ConstText(_value="test") -> text
  31[100]: EqText(v1: text, v2: text) -> boolean
  32[69]: GotoFalseWord(jump=38, if_false: boolean)
  35[68]: GotoWord(jump=90)
  38[68]: ClearText(var[20]) var=__work_1[20]:text
  41[68]: ConstText(_value="Test failed ") -> text
  55[84]: AppendText(var[20], v1: text)
  58[68]: VarText(var[44]) -> text var=test_value[44]:text["__ref_1"]
  61[84]: ConstInt(val=0) -> integer
  66[88]: FormatText(var[20], val: text, width: integer, dir=-1, token=32)
  71[68]: ConstText(_value=" != "test"") -> text
  83[84]: AppendText(var[20], v1: text)
  86[68]: VarText(var[20]) -> text var=__work_1[20]:text
  89[84]: Panic(message: text)
  90[68]: FreeText(var[44])
  93[68]: VarRef(var[8]) -> ref(reference) type=Data[12]:{name:text[4], number:integer[8]}[17] var=__ref_1[8]:ref(Data)
  96[80]: FreeRef(v1: ref(reference))
  97[68]: FreeText(var[20])
 100[68]: Return(ret=0, value=0, discard=64)

Execute test:
    0:[8] ConvRefFromNull() -> ref(1,0,0)[8]
    1:[20] Text()
    2:[44] Text()
    3:[68] ConstText(_value="test") -> "test"[68]
    9:[84] VarRef(var[8]) -> ref(1,0,0)=null[84]
   12:[96] Call(size=0, to=1119)
 1119:[100] Database(var[84], db_tp=17)
 1124:[100] VarRef(var[84]) -> ref(1,1,0)={}[100]
 1127:[112] ArgText(var[68]) -> "test"[112]
 1130:[128] SetText(v1=ref(1,1,0)[100], fld=4, val="test"[112])
 1133:[100] VarRef(var[84]) -> ref(1,1,0)={name:"test"}[100]
 1136:[112] ConstInt(val=0) -> 0[112]
 1141:[116] SetInt(v1=ref(1,1,0)[100], fld=8, val=0[112])
 1144:[100] VarRef(var[84]) -> ref(1,1,0)={name:"test",number:0}[100]
 1147:[112] GetText(v1=ref(1,1,0)[100], fld=4) -> "test"[100]
 1150:[116] Return(ret=1175[96], value=16, discard=48) -> "test"[68]
   19:[84] AppendText(var[44], v1="test"[68])
   22:[68] VarText(var[44]) -> "test"[68]
   25:[84] ConstText(_value="test") -> "test"[84]
   31:[100] EqText(v1="test"[68], v2="test"[84]) -> true[68]
   32:[69] GotoFalseWord(jump=38, if_false=true[68])
   35:[68] GotoWord(jump=90)
   90:[68] FreeText(var[44])
   93:[68] VarRef(var[8]) -> ref(1,0,0)=null[68]
   96:[80] FreeRef(v1=ref(1,0,0)[68])
   97:[68] FreeText(var[20])
  100:[68] Return(ret=4294967295[4], value=0, discard=64)
Finished
