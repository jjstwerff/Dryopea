pub fn test() {
    test_value = {a="12345";a[2..]};
    assert(
        test_value == "345",
        "Test failed {test_value} != \"345\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  a:text = "";
  test_value:text["a"] = {#2 block
    a:text = "12345";
    OpGetTextSub(a, 2i32, 2147483647i32);
  }#2:text["a"];
  if OpEqText(test_value, "345") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "345"");
    __work_1;
  }#3:text);
}#1

byte-code for sub_open:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=a[28]:text in 1
   2[52]: Text() var=test_value[52]:text["a"] in 1
   3[76]: ClearText(var[28]) var=a[28]:text in 1
   6[76]: ConstText(_value="12345") -> text
  13[92]: AppendText(var[28], v1: text)
  16[76]: VarText(var[28]) -> text var=a[28]:text in 1
  19[92]: ConstInt(val=2) -> integer
  24[96]: ConstInt(val=2147483647) -> integer
  29[100]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  30[92]: AppendText(var[52], v1: text)
  33[76]: VarText(var[52]) -> text var=test_value[52]:text["a"] in 1
  36[92]: ConstText(_value="345") -> text
  41[108]: EqText(v1: text, v2: text) -> boolean
  42[77]: GotoFalseWord(jump=48, if_false: boolean)
  45[76]: GotoWord(jump=99)
  48[76]: ClearText(var[4]) var=__work_1[4]:text in 1
  51[76]: ConstText(_value="Test failed ") -> text
  65[92]: AppendText(var[4], v1: text)
  68[76]: VarText(var[52]) -> text var=test_value[52]:text["a"] in 1
  71[92]: ConstInt(val=0) -> integer
  76[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  81[76]: ConstText(_value=" != "345"") -> text
  92[92]: AppendText(var[4], v1: text)
  95[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  98[92]: Panic(message: text)
  99[76]: FreeText(var[52])
 102[76]: FreeText(var[28])
 105[76]: FreeText(var[4])
 108[76]: Return(ret=0, value=0, discard=76)

