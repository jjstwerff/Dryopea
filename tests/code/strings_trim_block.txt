pub fn test() {
    test_value = {s = " 12   "; trim(s)};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  s(1):text = "";
  test_value(1):text["s"] = {#block(2):text["s"]
    s(1):text = " 12   ";
    _tp_text_trim(s(1));
  }#block(2):text["s"];
  if OpEqText(test_value(1), "12") null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatText(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != "12"");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(test_value(1));
  OpFreeText(s(1));
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for trim_block:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=s[32]:text
   2[56]: Text() var=test_value[56]:text["s"]
   3[80]: ClearText(var[32]) var=s[32]:text
   6[80]: ConstText(_value=" 12   ") -> text
  14[96]: AppendText(var[32], v1: text)
  17[80]: VarText(var[32]) -> text var=s[32]:text
  20[96]: StaticCall(_tp_text_trim)
  23[96]: AppendText(var[56], v1: text)
  26[80]: VarText(var[56]) -> text var=test_value[56]:text["s"]
  29[96]: ConstText(_value="12") -> text
  33[112]: EqText(v1: text, v2: text) -> boolean
  34[81]: GotoFalseWord(jump=40, if_false: boolean)
  37[80]: GotoWord(jump=90)
  40[80]: ClearText(var[8]) var=__work_1[8]:text
  43[80]: ConstText(_value="Test failed ") -> text
  57[96]: AppendText(var[8], v1: text)
  60[80]: VarText(var[56]) -> text var=test_value[56]:text["s"]
  63[96]: ConstInt(val=0) -> integer
  68[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  73[80]: ConstText(_value=" != "12"") -> text
  83[96]: AppendText(var[8], v1: text)
  86[80]: VarText(var[8]) -> text var=__work_1[8]:text
  89[96]: Panic(message: text)
  90[80]: FreeText(var[56])
  93[80]: FreeText(var[32])
  96[80]: FreeText(var[8])
  99[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value=" 12   ") -> " 12   "[80]
   14:[96] AppendText(var[32], v1=" 12   "[80])
   17:[80] VarText(var[32]) -> " 12   "[80]
   20:[96] StaticCall(_tp_text_trim)
   23:[96] AppendText(var[56], v1="12"[80])
   26:[80] VarText(var[56]) -> "12"[80]
   29:[96] ConstText(_value="12") -> "12"[96]
   33:[112] EqText(v1="12"[80], v2="12"[96]) -> true[80]
   34:[81] GotoFalseWord(jump=40, if_false=true[80])
   37:[80] GotoWord(jump=90)
   90:[80] FreeText(var[56])
   93:[80] FreeText(var[32])
   96:[80] FreeText(var[8])
   99:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
