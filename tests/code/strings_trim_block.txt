pub fn test() {
    test_value = {s = " 12   "; trim(s)};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text["s"] = {#2 block
    s:text = " 12   ";
    _tp_text_trim(s);
  }#2:text["s"];
  if OpEqText(test_value, "12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "12"");
    __work_1;
  }#3:text);
}#1

byte-code for trim_block:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Text()
 677[52]: Text()
 678[76]: ConstText(_value=" 12   ") -> text
 686[92]: AppendText(var[52], v1: text)
 689[76]: VarText(var[52]) -> text
 692[92]: StaticCall(_tp_text_trim)
 695[92]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 699[68]: AppendText(var[28], v1: text)
 702[52]: VarText(var[28]) -> text
 705[68]: ConstText(_value="12") -> text
 709[84]: EqText(v1: text, v2: text) -> boolean
 710[53]: GotoFalseWord(jump=716, if_false: boolean)
 713[52]: GotoWord(jump=766)
 716[52]: ClearText(var[4])
 719[52]: ConstText(_value="Test failed ") -> text
 733[68]: AppendText(var[4], v1: text)
 736[52]: VarText(var[28]) -> text
 739[68]: ConstInt(val=0) -> integer
 744[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 749[52]: ConstText(_value=" != "12"") -> text
 759[68]: AppendText(var[4], v1: text)
 762[52]: VarText(var[4]) -> text
 765[68]: Panic(message: text)
 766[52]: Return(ret=0, value=0, discard=52)

Execute test:
  675:[8] Text()
  676:[32] Text()
  677:[56] Text()
  678:[80] ConstText(_value=" 12   ") -> " 12   "[80]
  686:[96] AppendText(var[56], v1=" 12   "[80])
  689:[80] VarText(var[56]) -> " 12   "[80]
  692:[96] StaticCall(call=4)
  695:[96] FreeStack(value=16, discard=24)
  699:[72] AppendText(var[32], v1="12"[56])
  702:[56] VarText(var[32]) -> "12"[56]
  705:[72] ConstText(_value="12") -> "12"[72]
  709:[88] EqText(v1="12"[56], v2="12"[72]) -> true[56]
  710:[57] GotoFalseWord(jump=716, if_false=true[56])
  713:[56] GotoWord(jump=766)
  766:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
