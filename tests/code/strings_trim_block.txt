pub fn test() {
    test_value = {s = " 12   "; trim(s)};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text["s"] = {#2 block
    s:text = " 12   ";
    _tp_text_trim(s);
  }#2:text["s"];
  if OpEqText(test_value, "12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "12"");
    __work_1;
  }#3:text);
}#1

byte-code for trim_block:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Text()
 684[52]: Text()
 685[76]: ConstText(_value=" 12   ") -> text
 693[92]: AppendText(var[52], v1: text)
 696[76]: VarText(var[52]) -> text
 699[92]: StaticCall(_tp_text_trim)
 702[92]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 706[68]: AppendText(var[28], v1: text)
 709[52]: VarText(var[28]) -> text
 712[68]: ConstText(_value="12") -> text
 716[84]: EqText(v1: text, v2: text) -> boolean
 717[53]: GotoFalseWord(jump=723, if_false: boolean)
 720[52]: GotoWord(jump=773)
 723[52]: ClearText(var[4])
 726[52]: ConstText(_value="Test failed ") -> text
 740[68]: AppendText(var[4], v1: text)
 743[52]: VarText(var[28]) -> text
 746[68]: ConstInt(val=0) -> integer
 751[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 756[52]: ConstText(_value=" != "12"") -> text
 766[68]: AppendText(var[4], v1: text)
 769[52]: VarText(var[4]) -> text
 772[68]: Panic(message: text)
 773[52]: Return(ret=0, value=0, discard=52)

Execute test:
  682:[8] Text()
  683:[32] Text()
  684:[56] Text()
  685:[80] ConstText(_value=" 12   ") -> " 12   "[80]
  693:[96] AppendText(var[56], v1=" 12   "[80])
  696:[80] VarText(var[56]) -> " 12   "[80]
  699:[96] StaticCall(call=4)
  702:[96] FreeStack(value=16, discard=24)
  706:[72] AppendText(var[32], v1="12"[56])
  709:[56] VarText(var[32]) -> "12"[56]
  712:[72] ConstText(_value="12") -> "12"[72]
  716:[88] EqText(v1="12"[56], v2="12"[72]) -> true[56]
  717:[57] GotoFalseWord(jump=723, if_false=true[56])
  720:[56] GotoWord(jump=773)
  773:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
