pub fn test() {
    test_value = {s = " 12   "; trim(s)};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  s:text = "";
  test_value:text["s"] = {#2 block
    s:text = " 12   ";
    _tp_text_trim(s);
  }#2:text["s"];
  if OpEqText(test_value, "12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "12"");
    __work_1;
  }#3:text);
}#1

byte-code for trim_block:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=s[28]:text in 1
   2[52]: Text() var=test_value[52]:text["s"] in 1
   3[76]: ClearText(var[28]) var=s[28]:text in 1
   6[76]: ConstText(_value=" 12   ") -> text
  14[92]: AppendText(var[28], v1: text)
  17[76]: VarText(var[28]) -> text var=s[28]:text in 1
  20[92]: StaticCall(_tp_text_trim)
  23[92]: AppendText(var[52], v1: text)
  26[76]: VarText(var[52]) -> text var=test_value[52]:text["s"] in 1
  29[92]: ConstText(_value="12") -> text
  33[108]: EqText(v1: text, v2: text) -> boolean
  34[77]: GotoFalseWord(jump=40, if_false: boolean)
  37[76]: GotoWord(jump=90)
  40[76]: ClearText(var[4]) var=__work_1[4]:text in 1
  43[76]: ConstText(_value="Test failed ") -> text
  57[92]: AppendText(var[4], v1: text)
  60[76]: VarText(var[52]) -> text var=test_value[52]:text["s"] in 1
  63[92]: ConstInt(val=0) -> integer
  68[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  73[76]: ConstText(_value=" != "12"") -> text
  83[92]: AppendText(var[4], v1: text)
  86[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  89[92]: Panic(message: text)
  90[76]: FreeText(var[52])
  93[76]: FreeText(var[28])
  96[76]: FreeText(var[4])
  99[76]: Return(ret=0, value=0, discard=76)

