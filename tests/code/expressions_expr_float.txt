pub fn test() {
    test_value = {1.1};
    assert(
        test_value == 1.1,
        "Test failed {test_value} != 1.1"
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    1.1f64;
  }#2;
  if OpEqFloat(test_value, 1.1f64) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 1.1");
    __work_1;
  }#3);
}#1

byte-code for expr_float:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstFloat(val=1.1) -> float
 678[36]: VarFloat(var[28]) -> float
 681[44]: ConstFloat(val=1.1) -> float
 690[52]: EqFloat(v1: float, v2: float) -> boolean
 691[37]: GenGotoFalseWord(jump=697, if_false: boolean)
 694[36]: GenGotoWord(jump=749)
 697[36]: ClearText(var[4])
 700[36]: ConstText(_value="Test failed ") -> text(false, [])
 714[52]: AppendText(var[4], v1: text(false, []))
 717[36]: VarFloat(var[28]) -> float
 720[44]: ConstInt(val=0) -> integer
 725[48]: ConstInt(val=0) -> integer
 730[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 733[36]: ConstText(_value=" != 1.1") -> text(false, [])
 742[52]: AppendText(var[4], v1: text(false, []))
 745[36]: VarText(var[4]) -> text(false, [])
 748[52]: GenPanic(message: text(false, []))
 749[36]: GenReturn(ret=0, value=0, discard=36)

Execute test:
  668:[8] Text()
  669:[32] ConstFloat(val=1.1) -> 1.1[32]
  678:[40] VarFloat(var[32]) -> 1.1[40]
  681:[48] ConstFloat(val=1.1) -> 1.1[48]
  690:[56] EqFloat(v1=1.1[40], v2=1.1[48]) -> true[40]
  691:[41] GenGotoFalseWord(jump=697, if_false=true[40])
  694:[40] GenGotoWord(jump=749)
  749:[40] GenReturn(ret=4294967295[4], value=0, discard=36)
Finished
