pub fn test() {
    test_value = {1.1};
    assert(
        test_value == 1.1,
        "Test failed {test_value} != 1.1"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    1.1f64;
  }#2:float;
  if OpEqFloat(test_value, 1.1f64) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 1.1");
    __work_1;
  }#3:text);
}#1

byte-code for expr_float:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: ConstFloat(val=1.1) -> float
 701[36]: VarFloat(var[28]) -> float
 704[44]: ConstFloat(val=1.1) -> float
 713[52]: EqFloat(v1: float, v2: float) -> boolean
 714[37]: GotoFalseWord(jump=720, if_false: boolean)
 717[36]: GotoWord(jump=772)
 720[36]: ClearText(var[4])
 723[36]: ConstText(_value="Test failed ") -> text
 737[52]: AppendText(var[4], v1: text)
 740[36]: VarFloat(var[28]) -> float
 743[44]: ConstInt(val=0) -> integer
 748[48]: ConstInt(val=0) -> integer
 753[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 756[36]: ConstText(_value=" != 1.1") -> text
 765[52]: AppendText(var[4], v1: text)
 768[36]: VarText(var[4]) -> text
 771[52]: Panic(message: text)
 772[36]: FreeText(var[4])
 775[36]: Return(ret=0, value=0, discard=36)

Execute test:
  691:[8] Text()
  692:[32] ConstFloat(val=1.1) -> 1.1[32]
  701:[40] VarFloat(var[32]) -> 1.1[40]
  704:[48] ConstFloat(val=1.1) -> 1.1[48]
  713:[56] EqFloat(v1=1.1[40], v2=1.1[48]) -> true[40]
  714:[41] GotoFalseWord(jump=720, if_false=true[40])
  717:[40] GotoWord(jump=772)
  772:[40] FreeText(var[8])
  775:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
