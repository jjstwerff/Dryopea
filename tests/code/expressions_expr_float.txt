pub fn test() {
    test_value = {1.1};
    assert(
        test_value == 1.1,
        "Test failed {test_value} != 1.1"
    );
}
fn test() {#1 block
  let __work_1:text = "";
  let test_value:float = {#2 block
    1.1f64;
  }#2:float;
  if OpEqFloat(test_value, 1.1f64) null else OpPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 1.1");
    __work_1;
  }#3:text);
}#1

byte-code for expr_float:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: ConstFloat(val=1.1) -> float
 685[36]: VarFloat(var[28]) -> float
 688[44]: ConstFloat(val=1.1) -> float
 697[52]: EqFloat(v1: float, v2: float) -> boolean
 698[37]: GotoFalseWord(jump=704, if_false: boolean)
 701[36]: GotoWord(jump=756)
 704[36]: ClearText(var[4])
 707[36]: ConstText(_value="Test failed ") -> text
 721[52]: AppendText(var[4], v1: text)
 724[36]: VarFloat(var[28]) -> float
 727[44]: ConstInt(val=0) -> integer
 732[48]: ConstInt(val=0) -> integer
 737[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 740[36]: ConstText(_value=" != 1.1") -> text
 749[52]: AppendText(var[4], v1: text)
 752[36]: VarText(var[4]) -> text
 755[52]: Panic(message: text)
 756[36]: Return(ret=0, value=0, discard=36)

Execute test:
  675:[8] Text()
  676:[32] ConstFloat(val=1.1) -> 1.1[32]
  685:[40] VarFloat(var[32]) -> 1.1[40]
  688:[48] ConstFloat(val=1.1) -> 1.1[48]
  697:[56] EqFloat(v1=1.1[40], v2=1.1[48]) -> true[40]
  698:[41] GotoFalseWord(jump=704, if_false=true[40])
  701:[40] GotoWord(jump=756)
  756:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
