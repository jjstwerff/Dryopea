pub fn test() {
    test_value = {1.1};
    assert(
        test_value == 1.1,
        "Test failed {test_value} != 1.1"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    1.1f64;
  }#2:float;
  if OpEqFloat(test_value, 1.1f64) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 1.1");
    __work_1;
  }#3:text);
}#1

byte-code for expr_float:test()
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstFloat(val=1.1) -> float var=test_value[28]:float in 1
  10[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
  13[44]: ConstFloat(val=1.1) -> float
  22[52]: EqFloat(v1: float, v2: float) -> boolean
  23[37]: GotoFalseWord(jump=29, if_false: boolean)
  26[36]: GotoWord(jump=81)
  29[36]: ClearText(var[4]) var=__work_1[4]:text in 1
  32[36]: ConstText(_value="Test failed ") -> text
  46[52]: AppendText(var[4], v1: text)
  49[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
  52[44]: ConstInt(val=0) -> integer
  57[48]: ConstInt(val=0) -> integer
  62[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
  65[36]: ConstText(_value=" != 1.1") -> text
  74[52]: AppendText(var[4], v1: text)
  77[36]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  80[52]: Panic(message: text)
  81[36]: FreeText(var[4])
  84[36]: Return(ret=0, value=0, discard=36)

