pub fn test() {
    test_value = {1.1};
    assert(
        test_value == 1.1,
        "Test failed {test_value} != 1.1"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    1.1f64;
  }#2:float;
  if OpEqFloat(test_value, 1.1f64) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 1.1");
    __work_1;
  }#3:text);
}#1

byte-code for expr_float:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstFloat(val=1.1) -> float
 702[36]: VarFloat(var[28]) -> float
 705[44]: ConstFloat(val=1.1) -> float
 714[52]: EqFloat(v1: float, v2: float) -> boolean
 715[37]: GotoFalseWord(jump=721, if_false: boolean)
 718[36]: GotoWord(jump=773)
 721[36]: ClearText(var[4])
 724[36]: ConstText(_value="Test failed ") -> text
 738[52]: AppendText(var[4], v1: text)
 741[36]: VarFloat(var[28]) -> float
 744[44]: ConstInt(val=0) -> integer
 749[48]: ConstInt(val=0) -> integer
 754[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 757[36]: ConstText(_value=" != 1.1") -> text
 766[52]: AppendText(var[4], v1: text)
 769[36]: VarText(var[4]) -> text
 772[52]: Panic(message: text)
 773[36]: Return(ret=0, value=0, discard=36)

Execute test:
  692:[8] Text()
  693:[32] ConstFloat(val=1.1) -> 1.1[32]
  702:[40] VarFloat(var[32]) -> 1.1[40]
  705:[48] ConstFloat(val=1.1) -> 1.1[48]
  714:[56] EqFloat(v1=1.1[40], v2=1.1[48]) -> true[40]
  715:[41] GotoFalseWord(jump=721, if_false=true[40])
  718:[40] GotoWord(jump=773)
  773:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
