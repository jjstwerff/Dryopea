pub fn test() {
    test_value = {1.1};
    assert(
        test_value == 1.1,
        "Test failed {test_value} != 1.1"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):float = {#block(2):float
    1.1f64;
  }#block(2):float;
  if OpEqFloat(test_value(1), 1.1f64) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatFloat(__work_1(1), test_value(1), 0i32, 0i32);
    OpAppendText(__work_1(1), " != 1.1");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for expr_float:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstFloat(val=1.1) -> float var=test_value[32]:float
  10[40]: VarFloat(var[32]) -> float var=test_value[32]:float
  13[48]: ConstFloat(val=1.1) -> float
  22[56]: EqFloat(v1: float, v2: float) -> boolean
  23[41]: GotoFalseWord(jump=29, if_false: boolean)
  26[40]: GotoWord(jump=81)
  29[40]: ClearText(var[8]) var=__work_1[8]:text
  32[40]: ConstText(_value="Test failed ") -> text
  46[56]: AppendText(var[8], v1: text)
  49[40]: VarFloat(var[32]) -> float var=test_value[32]:float
  52[48]: ConstInt(val=0) -> integer
  57[52]: ConstInt(val=0) -> integer
  62[56]: FormatFloat(var[8], val: float, width: integer, precision: integer)
  65[40]: ConstText(_value=" != 1.1") -> text
  74[56]: AppendText(var[8], v1: text)
  77[40]: VarText(var[8]) -> text var=__work_1[8]:text
  80[56]: Panic(message: text)
  81[40]: FreeText(var[8])
  84[40]: Return(ret=0, value=0, discard=36)

Execute test:
    0:[8] Text()
    1:[32] ConstFloat(val=1.1) -> 1.1[32]
   10:[40] VarFloat(var[32]) -> 1.1[40]
   13:[48] ConstFloat(val=1.1) -> 1.1[48]
   22:[56] EqFloat(v1=1.1[40], v2=1.1[48]) -> true[40]
   23:[41] GotoFalseWord(jump=29, if_false=true[40])
   26:[40] GotoWord(jump=81)
   81:[40] FreeText(var[8])
   84:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
