enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {"Two" as Number < "Four" as Number};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
Type 17:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    OpLtEnum(OpCastEnumFromText("Two", 17i32), OpCastEnumFromText("Four", 17i32));
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for to_enum:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstText(_value="Two") -> text var=test_value[28]:boolean in 1
   6[44]: CastEnumFromText(v1: text, enum_tp=17) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[17]
   9[29]: ConstText(_value="Four") -> text
  15[45]: CastEnumFromText(v1: text, enum_tp=17) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[17]
  18[30]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
  19[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  22[30]: ConstTrue() -> boolean
  23[31]: EqBool(v1: boolean, v2: boolean) -> boolean
  24[30]: GotoFalseWord(jump=30, if_false: boolean)
  27[29]: GotoWord(jump=80)
  30[29]: ClearText(var[4]) var=__work_1[4]:text in 1
  33[29]: ConstText(_value="Test failed ") -> text
  47[45]: AppendText(var[4], v1: text)
  50[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  53[30]: ConstInt(val=0) -> integer
  58[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
  63[29]: ConstText(_value=" != true") -> text
  73[45]: AppendText(var[4], v1: text)
  76[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  79[45]: Panic(message: text)
  80[29]: FreeText(var[4])
  83[29]: Return(ret=0, value=0, discard=29)

