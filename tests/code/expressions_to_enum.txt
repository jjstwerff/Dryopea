enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {"Two" as Number < "Four" as Number};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
Type 11:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    OpLtEnum(OpCastEnumFromText("Two", 11i32), OpCastEnumFromText("Four", 11i32));
  }#2;
  if OpEqBool(test_value, true) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3);
}#1

byte-code for to_enum:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="Two") -> text(false, [])
 674[44]: CastEnumFromText(v1: text(false, []), enum_tp=11) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[11]
 677[29]: ConstText(_value="Four") -> text(false, [])
 683[45]: CastEnumFromText(v1: text(false, []), enum_tp=11) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[11]
 686[30]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
 687[29]: VarBool(var[28]) -> boolean
 690[30]: ConstTrue() -> boolean
 691[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 692[30]: GenGotoFalseWord(jump=698, if_false: boolean)
 695[29]: GenGotoWord(jump=748)
 698[29]: ClearText(var[4])
 701[29]: ConstText(_value="Test failed ") -> text(false, [])
 715[45]: AppendText(var[4], v1: text(false, []))
 718[29]: VarBool(var[28]) -> boolean
 721[30]: ConstInt(val=0) -> integer
 726[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 731[29]: ConstText(_value=" != true") -> text(false, [])
 741[45]: AppendText(var[4], v1: text(false, []))
 744[29]: VarText(var[4]) -> text(false, [])
 747[45]: GenPanic(message: text(false, []))
 748[29]: GenReturn(ret=0, value=0, discard=29)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="Two") -> "Two"[32]
  674:[48] CastEnumFromText(v1="Two"[32], enum_tp=11) -> Two(2)[32]
  677:[33] ConstText(_value="Four") -> "Four"[33]
  683:[49] CastEnumFromText(v1="Four"[33], enum_tp=11) -> Four(4)[33]
  686:[34] LtEnum(v1=2[32], v2=4[33]) -> true[32]
  687:[33] VarBool(var[32]) -> true[33]
  690:[34] ConstTrue() -> true[34]
  691:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
  692:[34] GenGotoFalseWord(jump=698, if_false=true[33])
  695:[33] GenGotoWord(jump=748)
  748:[33] GenReturn(ret=4294967295[4], value=0, discard=29)
Finished
