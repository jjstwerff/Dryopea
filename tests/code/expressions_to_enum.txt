enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {"Two" as Number < "Four" as Number};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
Type 11:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    OpLtEnum(OpCastEnumFromText("Two", 11i32), OpCastEnumFromText("Four", 11i32));
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for to_enum:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: ConstText(_value="Two") -> text
 681[44]: CastEnumFromText(v1: text, enum_tp=11) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[11]
 684[29]: ConstText(_value="Four") -> text
 690[45]: CastEnumFromText(v1: text, enum_tp=11) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[11]
 693[30]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
 694[29]: VarBool(var[28]) -> boolean
 697[30]: ConstTrue() -> boolean
 698[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 699[30]: GotoFalseWord(jump=705, if_false: boolean)
 702[29]: GotoWord(jump=755)
 705[29]: ClearText(var[4])
 708[29]: ConstText(_value="Test failed ") -> text
 722[45]: AppendText(var[4], v1: text)
 725[29]: VarBool(var[28]) -> boolean
 728[30]: ConstInt(val=0) -> integer
 733[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 738[29]: ConstText(_value=" != true") -> text
 748[45]: AppendText(var[4], v1: text)
 751[29]: VarText(var[4]) -> text
 754[45]: Panic(message: text)
 755[29]: Return(ret=0, value=0, discard=29)

Execute test:
  675:[8] Text()
  676:[32] ConstText(_value="Two") -> "Two"[32]
  681:[48] CastEnumFromText(v1="Two"[32], enum_tp=11) -> Two(2)[32]
  684:[33] ConstText(_value="Four") -> "Four"[33]
  690:[49] CastEnumFromText(v1="Four"[33], enum_tp=11) -> Four(4)[33]
  693:[34] LtEnum(v1=2[32], v2=4[33]) -> true[32]
  694:[33] VarBool(var[32]) -> true[33]
  697:[34] ConstTrue() -> true[34]
  698:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
  699:[34] GotoFalseWord(jump=705, if_false=true[33])
  702:[33] GotoWord(jump=755)
  755:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
