pub fn test() {
    test_value = {"123" as long + 2};
    assert(
        test_value == 125l,
        "Test failed {test_value} != 125l"
    );
}
fn test() {#1 block
  let __work_1:text = "";
  let test_value:long = {#2 block
    OpAddLong(OpCastLongFromText("123"), OpConvLongFromInt(2i32));
  }#2:long;
  if OpEqLong(test_value, 125i64) null else OpPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatLong(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125l");
    __work_1;
  }#3:text);
}#1

byte-code for convert_text:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: ConstText(_value="123") -> text
 681[44]: CastLongFromText(v1: text) -> long
 682[36]: ConstInt(val=2) -> integer
 687[40]: ConvLongFromInt(v1: integer) -> long
 688[44]: AddLong(v1: long, v2: long) -> long
 689[36]: VarLong(var[28]) -> long
 692[44]: ConstLong(val=125) -> long
 701[52]: EqLong(v1: long, v2: long) -> boolean
 702[37]: GotoFalseWord(jump=708, if_false: boolean)
 705[36]: GotoWord(jump=760)
 708[36]: ClearText(var[4])
 711[36]: ConstText(_value="Test failed ") -> text
 725[52]: AppendText(var[4], v1: text)
 728[36]: VarLong(var[28]) -> long
 731[44]: ConstInt(val=0) -> integer
 736[48]: FormatLong(var[4], val: long, radix=10, width: integer, token=32, plus=false, note=false)
 743[36]: ConstText(_value=" != 125l") -> text
 753[52]: AppendText(var[4], v1: text)
 756[36]: VarText(var[4]) -> text
 759[52]: Panic(message: text)
 760[36]: Return(ret=0, value=0, discard=36)

Execute test:
  675:[8] Text()
  676:[32] ConstText(_value="123") -> "123"[32]
  681:[48] CastLongFromText(v1="123"[32]) -> 123[32]
  682:[40] ConstInt(val=2) -> 2[40]
  687:[44] ConvLongFromInt(v1=2[40]) -> 2[40]
  688:[48] AddLong(v1=123[32], v2=2[40]) -> 125[32]
  689:[40] VarLong(var[32]) -> 125[40]
  692:[48] ConstLong(val=125) -> 125[48]
  701:[56] EqLong(v1=125[40], v2=125[48]) -> true[40]
  702:[41] GotoFalseWord(jump=708, if_false=true[40])
  705:[40] GotoWord(jump=760)
  760:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
