pub fn test() {
    test_value = {"a{1l+1:+4}b{12l as integer}c {2l * (4l % 6l) >= 8} d"};
    assert(
        test_value == "a  +2b12c true d",
        "Test failed {test_value} != \"a  +2b12c true d\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "a";
      OpFormatLong(__work_1, OpAddLong(1i64, OpConvLongFromInt(1i32)), 10i32, 4i32, 32i32, true, false);
      OpAppendText(__work_1, "b");
      OpFormatInt(__work_1, OpCastIntFromLong(12i64), 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "c ");
      OpFormatBool(__work_1, OpGeLong(OpMulLong(2i64, OpRemLong(4i64, 6i64)), OpConvLongFromInt(8i32)), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, " d");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a  +2b12c true d") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a  +2b12c true d"");
    __work_2;
  }#4:text);
}#1

byte-code for format_long:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Text()
 694[52]: Text()
 695[76]: ClearText(var[28])
 698[76]: ConstText(_value="a") -> text
 701[92]: AppendText(var[28], v1: text)
 704[76]: ConstLong(val=1) -> long
 713[84]: ConstInt(val=1) -> integer
 718[88]: ConvLongFromInt(v1: integer) -> long
 719[92]: AddLong(v1: long, v2: long) -> long
 720[84]: ConstInt(val=4) -> integer
 725[88]: FormatLong(var[28], val: long, radix=10, width: integer, token=32, plus=true, note=false)
 732[76]: ConstText(_value="b") -> text
 735[92]: AppendText(var[28], v1: text)
 738[76]: ConstLong(val=12) -> long
 747[84]: CastIntFromLong(v1: long) -> integer
 748[80]: ConstInt(val=0) -> integer
 753[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 760[76]: ConstText(_value="c ") -> text
 764[92]: AppendText(var[28], v1: text)
 767[76]: ConstLong(val=2) -> long
 776[84]: ConstLong(val=4) -> long
 785[92]: ConstLong(val=6) -> long
 794[100]: RemLong(v1: long, v2: long) -> long
 795[92]: MulLong(v1: long, v2: long) -> long
 796[84]: ConstInt(val=8) -> integer
 801[88]: ConvLongFromInt(v1: integer) -> long
 802[92]: GeLong(v1: long, v2: long) -> boolean
 803[77]: ConstInt(val=0) -> integer
 808[81]: FormatBool(var[28], val: boolean, width: integer, dir=-1, token=32)
 813[76]: ConstText(_value=" d") -> text
 817[92]: AppendText(var[28], v1: text)
 820[76]: VarText(var[28]) -> text
 823[92]: AppendText(var[52], v1: text)
 826[76]: VarText(var[52]) -> text
 829[92]: ConstText(_value="a  +2b12c true d") -> text
 847[108]: EqText(v1: text, v2: text) -> boolean
 848[77]: GotoFalseWord(jump=854, if_false: boolean)
 851[76]: GotoWord(jump=918)
 854[76]: ClearText(var[4])
 857[76]: ConstText(_value="Test failed ") -> text
 871[92]: AppendText(var[4], v1: text)
 874[76]: VarText(var[52]) -> text
 877[92]: ConstInt(val=0) -> integer
 882[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 887[76]: ConstText(_value=" != "a  +2b12c true d"") -> text
 911[92]: AppendText(var[4], v1: text)
 914[76]: VarText(var[4]) -> text
 917[92]: Panic(message: text)
 918[76]: Return(ret=0, value=0, discard=76)

Execute test:
  692:[8] Text()
  693:[32] Text()
  694:[56] Text()
  695:[80] ClearText(var[32])
  698:[80] ConstText(_value="a") -> "a"[80]
  701:[96] AppendText(var[32], v1="a"[80])
  704:[80] ConstLong(val=1) -> 1[80]
  713:[88] ConstInt(val=1) -> 1[88]
  718:[92] ConvLongFromInt(v1=1[88]) -> 1[88]
  719:[96] AddLong(v1=1[80], v2=1[88]) -> 2[80]
  720:[88] ConstInt(val=4) -> 4[88]
  725:[92] FormatLong(var[32], val=2[80], radix=10, width=4[88], token=32, plus=true, note=false)
  732:[80] ConstText(_value="b") -> "b"[80]
  735:[96] AppendText(var[32], v1="b"[80])
  738:[80] ConstLong(val=12) -> 12[80]
  747:[88] CastIntFromLong(v1=12[80]) -> 12[80]
  748:[84] ConstInt(val=0) -> 0[84]
  753:[88] FormatInt(var[32], val=12[80], radix=10, width=0[84], token=32, plus=false, note=false)
  760:[80] ConstText(_value="c ") -> "c "[80]
  764:[96] AppendText(var[32], v1="c "[80])
  767:[80] ConstLong(val=2) -> 2[80]
  776:[88] ConstLong(val=4) -> 4[88]
  785:[96] ConstLong(val=6) -> 6[96]
  794:[104] RemLong(v1=4[88], v2=6[96]) -> 4[88]
  795:[96] MulLong(v1=2[80], v2=4[88]) -> 8[80]
  796:[88] ConstInt(val=8) -> 8[88]
  801:[92] ConvLongFromInt(v1=8[88]) -> 8[88]
  802:[96] GeLong(v1=8[80], v2=8[88]) -> true[80]
  803:[81] ConstInt(val=0) -> 0[81]
  808:[85] FormatBool(var[32], val=true[80], width=0[81], dir=-1, token=32)
  813:[80] ConstText(_value=" d") -> " d"[80]
  817:[96] AppendText(var[32], v1=" d"[80])
  820:[80] VarText(var[32]) -> "a  +2b12c true d"[80]
  823:[96] AppendText(var[56], v1="a  +2b12c true d"[80])
  826:[80] VarText(var[56]) -> "a  +2b12c true d"[80]
  829:[96] ConstText(_value="a  +2b12c true d") -> "a  +2b12c true d"[96]
  847:[112] EqText(v1="a  +2b12c true d"[80], v2="a  +2b12c true d"[96]) -> true[80]
  848:[81] GotoFalseWord(jump=854, if_false=true[80])
  851:[80] GotoWord(jump=918)
  918:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
