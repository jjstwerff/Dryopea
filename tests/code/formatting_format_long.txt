pub fn test() {
    test_value = {"a{1l+1:+4}b{12l as integer}c {2l * (4l % 6l) >= 8} d"};
    assert(
        test_value == "a  +2b12c true d",
        "Test failed {test_value} != \"a  +2b12c true d\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "a";
      OpFormatLong(__work_1, OpAddLong(1i64, OpConvLongFromInt(1i32)), 10i32, 4i32, 32i32, true, false);
      OpAppendText(__work_1, "b");
      OpFormatInt(__work_1, OpCastIntFromLong(12i64), 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "c ");
      OpFormatBool(__work_1, OpGeLong(OpMulLong(2i64, OpRemLong(4i64, 6i64)), OpConvLongFromInt(8i32)), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, " d");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a  +2b12c true d") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a  +2b12c true d"");
    __work_2;
  }#4:text);
}#1

byte-code for format_long:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: ClearText(var[28]) var=__work_1[28]:text in 1
   6[76]: ConstText(_value="a") -> text
   9[92]: AppendText(var[28], v1: text)
  12[76]: ConstLong(val=1) -> long
  21[84]: ConstInt(val=1) -> integer
  26[88]: ConvLongFromInt(v1: integer) -> long
  27[92]: AddLong(v1: long, v2: long) -> long
  28[84]: ConstInt(val=4) -> integer
  33[88]: FormatLong(var[28], val: long, radix=10, width: integer, token=32, plus=true, note=false)
  40[76]: ConstText(_value="b") -> text
  43[92]: AppendText(var[28], v1: text)
  46[76]: ConstLong(val=12) -> long
  55[84]: CastIntFromLong(v1: long) -> integer
  56[80]: ConstInt(val=0) -> integer
  61[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  68[76]: ConstText(_value="c ") -> text
  72[92]: AppendText(var[28], v1: text)
  75[76]: ConstLong(val=2) -> long
  84[84]: ConstLong(val=4) -> long
  93[92]: ConstLong(val=6) -> long
 102[100]: RemLong(v1: long, v2: long) -> long
 103[92]: MulLong(v1: long, v2: long) -> long
 104[84]: ConstInt(val=8) -> integer
 109[88]: ConvLongFromInt(v1: integer) -> long
 110[92]: GeLong(v1: long, v2: long) -> boolean
 111[77]: ConstInt(val=0) -> integer
 116[81]: FormatBool(var[28], val: boolean, width: integer, dir=-1, token=32)
 121[76]: ConstText(_value=" d") -> text
 125[92]: AppendText(var[28], v1: text)
 128[76]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 131[92]: AppendText(var[52], v1: text)
 134[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 137[92]: ConstText(_value="a  +2b12c true d") -> text
 155[108]: EqText(v1: text, v2: text) -> boolean
 156[77]: GotoFalseWord(jump=162, if_false: boolean)
 159[76]: GotoWord(jump=226)
 162[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 165[76]: ConstText(_value="Test failed ") -> text
 179[92]: AppendText(var[4], v1: text)
 182[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 185[92]: ConstInt(val=0) -> integer
 190[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 195[76]: ConstText(_value=" != "a  +2b12c true d"") -> text
 219[92]: AppendText(var[4], v1: text)
 222[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 225[92]: Panic(message: text)
 226[76]: FreeText(var[52])
 229[76]: FreeText(var[28])
 232[76]: FreeText(var[4])
 235[76]: Return(ret=0, value=0, discard=76)

