pub fn test() {
    test_value = {"a{1l+1:+4}b{12l as integer}c {2l * (4l % 6l) >= 8} d"};
    assert(
        test_value == "a  +2b12c true d",
        "Test failed {test_value} != \"a  +2b12c true d\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "a";
      OpFormatLong(__work_1, OpAddLong(1i64, OpConvLongFromInt(1i32)), 10i32, 4i32, 32i32, true, false);
      OpAppendText(__work_1, "b");
      OpFormatInt(__work_1, OpCastIntFromLong(12i64), 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "c ");
      OpFormatBool(__work_1, OpGeLong(OpMulLong(2i64, OpRemLong(4i64, 6i64)), OpConvLongFromInt(8i32)), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, " d");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a  +2b12c true d") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a  +2b12c true d"");
    __work_2;
  }#4:text);
}#1

byte-code for format_long:test()
 655[0]: return-address
 655[4]: Text() var=__work_2[4]:text in 1
 656[28]: Text() var=__work_1[28]:text in 1
 657[52]: Text() var=test_value[52]:text in 1
 658[76]: ClearText(var[28]) var=__work_1[28]:text in 1
 661[76]: ConstText(_value="a") -> text
 664[92]: AppendText(var[28], v1: text)
 667[76]: ConstLong(val=1) -> long
 676[84]: ConstInt(val=1) -> integer
 681[88]: ConvLongFromInt(v1: integer) -> long
 682[92]: AddLong(v1: long, v2: long) -> long
 683[84]: ConstInt(val=4) -> integer
 688[88]: FormatLong(var[28], val: long, radix=10, width: integer, token=32, plus=true, note=false)
 695[76]: ConstText(_value="b") -> text
 698[92]: AppendText(var[28], v1: text)
 701[76]: ConstLong(val=12) -> long
 710[84]: CastIntFromLong(v1: long) -> integer
 711[80]: ConstInt(val=0) -> integer
 716[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 723[76]: ConstText(_value="c ") -> text
 727[92]: AppendText(var[28], v1: text)
 730[76]: ConstLong(val=2) -> long
 739[84]: ConstLong(val=4) -> long
 748[92]: ConstLong(val=6) -> long
 757[100]: RemLong(v1: long, v2: long) -> long
 758[92]: MulLong(v1: long, v2: long) -> long
 759[84]: ConstInt(val=8) -> integer
 764[88]: ConvLongFromInt(v1: integer) -> long
 765[92]: GeLong(v1: long, v2: long) -> boolean
 766[77]: ConstInt(val=0) -> integer
 771[81]: FormatBool(var[28], val: boolean, width: integer, dir=-1, token=32)
 776[76]: ConstText(_value=" d") -> text
 780[92]: AppendText(var[28], v1: text)
 783[76]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 786[92]: AppendText(var[52], v1: text)
 789[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 792[92]: ConstText(_value="a  +2b12c true d") -> text
 810[108]: EqText(v1: text, v2: text) -> boolean
 811[77]: GotoFalseWord(jump=817, if_false: boolean)
 814[76]: GotoWord(jump=881)
 817[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 820[76]: ConstText(_value="Test failed ") -> text
 834[92]: AppendText(var[4], v1: text)
 837[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 840[92]: ConstInt(val=0) -> integer
 845[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 850[76]: ConstText(_value=" != "a  +2b12c true d"") -> text
 874[92]: AppendText(var[4], v1: text)
 877[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 880[92]: Panic(message: text)
 881[76]: FreeText(var[52])
 884[76]: FreeText(var[28])
 887[76]: FreeText(var[4])
 890[76]: Return(ret=0, value=0, discard=76)

Execute test:
  655:[8] Text()
  656:[32] Text()
  657:[56] Text()
  658:[80] ClearText(var[32])
  661:[80] ConstText(_value="a") -> "a"[80]
  664:[96] AppendText(var[32], v1="a"[80])
  667:[80] ConstLong(val=1) -> 1[80]
  676:[88] ConstInt(val=1) -> 1[88]
  681:[92] ConvLongFromInt(v1=1[88]) -> 1[88]
  682:[96] AddLong(v1=1[80], v2=1[88]) -> 2[80]
  683:[88] ConstInt(val=4) -> 4[88]
  688:[92] FormatLong(var[32], val=2[80], radix=10, width=4[88], token=32, plus=true, note=false)
  695:[80] ConstText(_value="b") -> "b"[80]
  698:[96] AppendText(var[32], v1="b"[80])
  701:[80] ConstLong(val=12) -> 12[80]
  710:[88] CastIntFromLong(v1=12[80]) -> 12[80]
  711:[84] ConstInt(val=0) -> 0[84]
  716:[88] FormatInt(var[32], val=12[80], radix=10, width=0[84], token=32, plus=false, note=false)
  723:[80] ConstText(_value="c ") -> "c "[80]
  727:[96] AppendText(var[32], v1="c "[80])
  730:[80] ConstLong(val=2) -> 2[80]
  739:[88] ConstLong(val=4) -> 4[88]
  748:[96] ConstLong(val=6) -> 6[96]
  757:[104] RemLong(v1=4[88], v2=6[96]) -> 4[88]
  758:[96] MulLong(v1=2[80], v2=4[88]) -> 8[80]
  759:[88] ConstInt(val=8) -> 8[88]
  764:[92] ConvLongFromInt(v1=8[88]) -> 8[88]
  765:[96] GeLong(v1=8[80], v2=8[88]) -> true[80]
  766:[81] ConstInt(val=0) -> 0[81]
  771:[85] FormatBool(var[32], val=true[80], width=0[81], dir=-1, token=32)
  776:[80] ConstText(_value=" d") -> " d"[80]
  780:[96] AppendText(var[32], v1=" d"[80])
  783:[80] VarText(var[32]) -> "a  +2b12c true d"[80]
  786:[96] AppendText(var[56], v1="a  +2b12c true d"[80])
  789:[80] VarText(var[56]) -> "a  +2b12c true d"[80]
  792:[96] ConstText(_value="a  +2b12c true d") -> "a  +2b12c true d"[96]
  810:[112] EqText(v1="a  +2b12c true d"[80], v2="a  +2b12c true d"[96]) -> true[80]
  811:[81] GotoFalseWord(jump=817, if_false=true[80])
  814:[80] GotoWord(jump=881)
  881:[80] FreeText(var[56])
  884:[80] FreeText(var[32])
  887:[80] FreeText(var[8])
  890:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
