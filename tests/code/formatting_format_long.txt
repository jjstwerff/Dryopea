Test code:
pub fn test() {
    test_value = {"a{1l+1:+4}b{12l as integer}c {2l * (4l % 6l) >= 8} d"};
    assert(
        test_value == "a  +2b12c true d",
        "Test failed {test_value} != \"a  +2b12c true d\""
    );
}

fn test {
  let test_value = {
    {
      let append_8 = "a";
      OpFormatLong(append_8, OpAddLong(1i64, OpConvLongFromInt(1i32)), 10i32, 4i32, 32i32, true, false);
      OpAppendText(append_8, "b");
      OpFormatInt(append_8, OpCastIntFromLong(12i64), 10i32, 0i32, 32i32, false, false);
      OpAppendText(append_8, "c ");
      OpFormatBool(append_8, OpGeLong(OpMulLong(2i64, OpRemLong(4i64, 6i64)), OpConvLongFromInt(8i32)), 0i32, -1i32, 32i32);
      OpAppendText(append_8, " d");
      append_8;
    };
  };
  if OpEqText(test_value, "a  +2b12c true d") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "a  +2b12c true d"");
    append_9;
  })};
}

byte-code for format_long:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: Text()
 666[52]: ConstText(_value="a") -> text
 669[68]: AppendText(var[28], v1: text)
 672[52]: ConstLong(val=1) -> long
 681[60]: ConstInt(val=1) -> integer
 686[64]: ConvLongFromInt(v1: integer) -> long
 687[68]: AddLong(v1: long, v2: long) -> long
 688[60]: ConstInt(val=4) -> integer
 693[64]: FormatLong(var[28], val: long, radix=10, width: integer, token=32, plus=true, note=false)
 700[52]: ConstText(_value="b") -> text
 703[68]: AppendText(var[28], v1: text)
 706[52]: ConstLong(val=12) -> long
 715[60]: CastIntFromLong(v1: long) -> integer
 716[56]: ConstInt(val=0) -> integer
 721[60]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 728[52]: ConstText(_value="c ") -> text
 732[68]: AppendText(var[28], v1: text)
 735[52]: ConstLong(val=2) -> long
 744[60]: ConstLong(val=4) -> long
 753[68]: ConstLong(val=6) -> long
 762[76]: RemLong(v1: long, v2: long) -> long
 763[68]: MulLong(v1: long, v2: long) -> long
 764[60]: ConstInt(val=8) -> integer
 769[64]: ConvLongFromInt(v1: integer) -> long
 770[68]: GeLong(v1: long, v2: long) -> boolean
 771[53]: ConstInt(val=0) -> integer
 776[57]: FormatBool(var[28], val: boolean, width: integer, dir=-1, token=32)
 781[52]: ConstText(_value=" d") -> text
 785[68]: AppendText(var[28], v1: text)
 788[52]: VarText(var[28]) -> text
 791[68]: GenFreeStack(value=16, discard=24)
 795[44]: AppendText(var[4], v1: text)
 798[28]: VarText(var[4]) -> text
 801[44]: ConstText(_value="a  +2b12c true d") -> text
 819[60]: EqText(v1: text, v2: text) -> boolean
 820[29]: GenGotoFalseWord(jump=826, if_false: boolean)
 823[28]: GenGotoWord(jump=892)
 826[28]: Text()
 827[52]: ConstText(_value="Test failed ") -> text
 841[68]: AppendText(var[28], v1: text)
 844[52]: VarText(var[4]) -> text
 847[68]: ConstInt(val=0) -> integer
 852[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 857[52]: ConstText(_value=" != "a  +2b12c true d"") -> text
 881[68]: AppendText(var[28], v1: text)
 884[52]: VarText(var[28]) -> text
 887[68]: GenFreeStack(value=16, discard=24)
 891[44]: GenPanic(message: text)
 892[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] Text()
  666:[52] ConstText(_value="a") -> "a"[52]
  669:[68] AppendText(var[28], v1="a"[52])
  672:[52] ConstLong(val=1) -> 1[52]
  681:[60] ConstInt(val=1) -> 1[60]
  686:[64] ConvLongFromInt(v1=1[60]) -> 1[60]
  687:[68] AddLong(v1=1[52], v2=1[60]) -> 2[52]
  688:[60] ConstInt(val=4) -> 4[60]
  693:[64] FormatLong(var[28], val=2[52], radix=10, width=4[60], token=32, plus=true, note=false)
  700:[52] ConstText(_value="b") -> "b"[52]
  703:[68] AppendText(var[28], v1="b"[52])
  706:[52] ConstLong(val=12) -> 12[52]
  715:[60] CastIntFromLong(v1=12[52]) -> 12[52]
  716:[56] ConstInt(val=0) -> 0[56]
  721:[60] FormatInt(var[28], val=12[52], radix=10, width=0[56], token=32, plus=false, note=false)
  728:[52] ConstText(_value="c ") -> "c "[52]
  732:[68] AppendText(var[28], v1="c "[52])
  735:[52] ConstLong(val=2) -> 2[52]
  744:[60] ConstLong(val=4) -> 4[60]
  753:[68] ConstLong(val=6) -> 6[68]
  762:[76] RemLong(v1=4[60], v2=6[68]) -> 4[60]
  763:[68] MulLong(v1=2[52], v2=4[60]) -> 8[52]
  764:[60] ConstInt(val=8) -> 8[60]
  769:[64] ConvLongFromInt(v1=8[60]) -> 8[60]
  770:[68] GeLong(v1=8[52], v2=8[60]) -> true[52]
  771:[53] ConstInt(val=0) -> 0[53]
  776:[57] FormatBool(var[28], val=true[52], width=0[53], dir=-1, token=32)
  781:[52] ConstText(_value=" d") -> " d"[52]
  785:[68] AppendText(var[28], v1=" d"[52])
  788:[52] VarText(var[28]) -> "a  +2b12c true d"[52]
  791:[68] GenFreeStack(value=16, discard=24)
  795:[44] AppendText(var[4], v1="a  +2b12c true d"[28])
  798:[28] VarText(var[4]) -> "a  +2b12c true d"[28]
  801:[44] ConstText(_value="a  +2b12c true d") -> "a  +2b12c true d"[44]
  819:[60] EqText(v1="a  +2b12c true d"[28], v2="a  +2b12c true d"[44]) -> true[28]
  820:[29] GenGotoFalseWord(jump=826, if_false=true[28])
  823:[28] GenGotoWord(jump=892)
  892:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
