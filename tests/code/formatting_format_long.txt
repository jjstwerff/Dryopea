pub fn test() {
    test_value = {"a{1l+1:+4}b{12l as integer}c {2l * (4l % 6l) >= 8} d"};
    assert(
        test_value == "a  +2b12c true d",
        "Test failed {test_value} != \"a  +2b12c true d\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "a";
      OpFormatLong(__work_1, OpAddLong(1i64, OpConvLongFromInt(1i32)), 10i32, 4i32, 32i32, true, false);
      OpAppendText(__work_1, "b");
      OpFormatInt(__work_1, OpCastIntFromLong(12i64), 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "c ");
      OpFormatBool(__work_1, OpGeLong(OpMulLong(2i64, OpRemLong(4i64, 6i64)), OpConvLongFromInt(8i32)), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, " d");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a  +2b12c true d") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a  +2b12c true d"");
    __work_2;
  }#4:text);
}#1

byte-code for format_long:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: Text()
 693[52]: Text()
 694[76]: ClearText(var[28])
 697[76]: ConstText(_value="a") -> text
 700[92]: AppendText(var[28], v1: text)
 703[76]: ConstLong(val=1) -> long
 712[84]: ConstInt(val=1) -> integer
 717[88]: ConvLongFromInt(v1: integer) -> long
 718[92]: AddLong(v1: long, v2: long) -> long
 719[84]: ConstInt(val=4) -> integer
 724[88]: FormatLong(var[28], val: long, radix=10, width: integer, token=32, plus=true, note=false)
 731[76]: ConstText(_value="b") -> text
 734[92]: AppendText(var[28], v1: text)
 737[76]: ConstLong(val=12) -> long
 746[84]: CastIntFromLong(v1: long) -> integer
 747[80]: ConstInt(val=0) -> integer
 752[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 759[76]: ConstText(_value="c ") -> text
 763[92]: AppendText(var[28], v1: text)
 766[76]: ConstLong(val=2) -> long
 775[84]: ConstLong(val=4) -> long
 784[92]: ConstLong(val=6) -> long
 793[100]: RemLong(v1: long, v2: long) -> long
 794[92]: MulLong(v1: long, v2: long) -> long
 795[84]: ConstInt(val=8) -> integer
 800[88]: ConvLongFromInt(v1: integer) -> long
 801[92]: GeLong(v1: long, v2: long) -> boolean
 802[77]: ConstInt(val=0) -> integer
 807[81]: FormatBool(var[28], val: boolean, width: integer, dir=-1, token=32)
 812[76]: ConstText(_value=" d") -> text
 816[92]: AppendText(var[28], v1: text)
 819[76]: VarText(var[28]) -> text
 822[92]: AppendText(var[52], v1: text)
 825[76]: VarText(var[52]) -> text
 828[92]: ConstText(_value="a  +2b12c true d") -> text
 846[108]: EqText(v1: text, v2: text) -> boolean
 847[77]: GotoFalseWord(jump=853, if_false: boolean)
 850[76]: GotoWord(jump=917)
 853[76]: ClearText(var[4])
 856[76]: ConstText(_value="Test failed ") -> text
 870[92]: AppendText(var[4], v1: text)
 873[76]: VarText(var[52]) -> text
 876[92]: ConstInt(val=0) -> integer
 881[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 886[76]: ConstText(_value=" != "a  +2b12c true d"") -> text
 910[92]: AppendText(var[4], v1: text)
 913[76]: VarText(var[4]) -> text
 916[92]: Panic(message: text)
 917[76]: FreeText(var[52])
 920[76]: FreeText(var[28])
 923[76]: FreeText(var[4])
 926[76]: Return(ret=0, value=0, discard=76)

Execute test:
  691:[8] Text()
  692:[32] Text()
  693:[56] Text()
  694:[80] ClearText(var[32])
  697:[80] ConstText(_value="a") -> "a"[80]
  700:[96] AppendText(var[32], v1="a"[80])
  703:[80] ConstLong(val=1) -> 1[80]
  712:[88] ConstInt(val=1) -> 1[88]
  717:[92] ConvLongFromInt(v1=1[88]) -> 1[88]
  718:[96] AddLong(v1=1[80], v2=1[88]) -> 2[80]
  719:[88] ConstInt(val=4) -> 4[88]
  724:[92] FormatLong(var[32], val=2[80], radix=10, width=4[88], token=32, plus=true, note=false)
  731:[80] ConstText(_value="b") -> "b"[80]
  734:[96] AppendText(var[32], v1="b"[80])
  737:[80] ConstLong(val=12) -> 12[80]
  746:[88] CastIntFromLong(v1=12[80]) -> 12[80]
  747:[84] ConstInt(val=0) -> 0[84]
  752:[88] FormatInt(var[32], val=12[80], radix=10, width=0[84], token=32, plus=false, note=false)
  759:[80] ConstText(_value="c ") -> "c "[80]
  763:[96] AppendText(var[32], v1="c "[80])
  766:[80] ConstLong(val=2) -> 2[80]
  775:[88] ConstLong(val=4) -> 4[88]
  784:[96] ConstLong(val=6) -> 6[96]
  793:[104] RemLong(v1=4[88], v2=6[96]) -> 4[88]
  794:[96] MulLong(v1=2[80], v2=4[88]) -> 8[80]
  795:[88] ConstInt(val=8) -> 8[88]
  800:[92] ConvLongFromInt(v1=8[88]) -> 8[88]
  801:[96] GeLong(v1=8[80], v2=8[88]) -> true[80]
  802:[81] ConstInt(val=0) -> 0[81]
  807:[85] FormatBool(var[32], val=true[80], width=0[81], dir=-1, token=32)
  812:[80] ConstText(_value=" d") -> " d"[80]
  816:[96] AppendText(var[32], v1=" d"[80])
  819:[80] VarText(var[32]) -> "a  +2b12c true d"[80]
  822:[96] AppendText(var[56], v1="a  +2b12c true d"[80])
  825:[80] VarText(var[56]) -> "a  +2b12c true d"[80]
  828:[96] ConstText(_value="a  +2b12c true d") -> "a  +2b12c true d"[96]
  846:[112] EqText(v1="a  +2b12c true d"[80], v2="a  +2b12c true d"[96]) -> true[80]
  847:[81] GotoFalseWord(jump=853, if_false=true[80])
  850:[80] GotoWord(jump=917)
  917:[80] FreeText(var[56])
  920:[80] FreeText(var[32])
  923:[80] FreeText(var[8])
  926:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
