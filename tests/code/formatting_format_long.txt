Test code:
pub fn test() {
    test_value = {"a{1l+1:+4}b{12l as integer}c {2l * (4l % 6l) >= 8} d"};
    assert(
        test_value == "a  +2b12c true d",
        "Test failed {test_value} != \"a  +2b12c true d\""
    );
}

fn test {
  let test_value = {
    {
      let append_8 = "a";
      OpFormatLong(append_8, OpAddLong(1i64, OpConvLongFromInt(1i32)), 10i32, 4i32, 32i32, true, false);
      OpAppendText(append_8, "b");
      OpFormatInt(append_8, OpCastIntFromLong(12i64), 10i32, 0i32, 32i32, false, false);
      OpAppendText(append_8, "c ");
      OpFormatBool(append_8, OpGeLong(OpMulLong(2i64, OpRemLong(4i64, 6i64)), OpConvLongFromInt(8i32)), 0i32, -1i32, 32i32);
      OpAppendText(append_8, " d");
      append_8;
    };
  };
  if OpEqText(test_value, "a  +2b12c true d") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "a  +2b12c true d"");
    append_9;
  })};
}

byte-code for format_long:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="a") -> text
 673[68]: AppendText(var[28], v1: text)
 676[52]: ConstLong(val=1) -> long
 685[60]: ConstInt(val=1) -> integer
 690[64]: ConvLongFromInt(v1: integer) -> long
 691[68]: AddLong(v1: long, v2: long) -> long
 692[60]: ConstInt(val=4) -> integer
 697[64]: FormatLong(var[28], val: long, radix=10, width: integer, token=32, plus=true, note=false)
 704[52]: ConstText(_value="b") -> text
 707[68]: AppendText(var[28], v1: text)
 710[52]: ConstLong(val=12) -> long
 719[60]: CastIntFromLong(v1: long) -> integer
 720[56]: ConstInt(val=0) -> integer
 725[60]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 732[52]: ConstText(_value="c ") -> text
 736[68]: AppendText(var[28], v1: text)
 739[52]: ConstLong(val=2) -> long
 748[60]: ConstLong(val=4) -> long
 757[68]: ConstLong(val=6) -> long
 766[76]: RemLong(v1: long, v2: long) -> long
 767[68]: MulLong(v1: long, v2: long) -> long
 768[60]: ConstInt(val=8) -> integer
 773[64]: ConvLongFromInt(v1: integer) -> long
 774[68]: GeLong(v1: long, v2: long) -> boolean
 775[53]: ConstInt(val=0) -> integer
 780[57]: FormatBool(var[28], val: boolean, width: integer, dir=-1, token=32)
 785[52]: ConstText(_value=" d") -> text
 789[68]: AppendText(var[28], v1: text)
 792[52]: VarText(var[28]) -> text
 795[68]: GenFreeStack(value=16, discard=24)
 799[44]: AppendText(var[4], v1: text)
 802[28]: VarText(var[4]) -> text
 805[44]: ConstText(_value="a  +2b12c true d") -> text
 823[60]: EqText(v1: text, v2: text) -> boolean
 824[29]: GenGotoFalseWord(jump=830, if_false: boolean)
 827[28]: GenGotoWord(jump=896)
 830[28]: Text()
 831[52]: ConstText(_value="Test failed ") -> text
 845[68]: AppendText(var[28], v1: text)
 848[52]: VarText(var[4]) -> text
 851[68]: ConstInt(val=0) -> integer
 856[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 861[52]: ConstText(_value=" != "a  +2b12c true d"") -> text
 885[68]: AppendText(var[28], v1: text)
 888[52]: VarText(var[28]) -> text
 891[68]: GenFreeStack(value=16, discard=24)
 895[44]: GenPanic(message: text)
 896[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Text()
  670:[52] ConstText(_value="a") -> "a"[52]
  673:[68] AppendText(var[28], v1="a"[52])
  676:[52] ConstLong(val=1) -> 1[52]
  685:[60] ConstInt(val=1) -> 1[60]
  690:[64] ConvLongFromInt(v1=1[60]) -> 1[60]
  691:[68] AddLong(v1=1[52], v2=1[60]) -> 2[52]
  692:[60] ConstInt(val=4) -> 4[60]
  697:[64] FormatLong(var[28], val=2[52], radix=10, width=4[60], token=32, plus=true, note=false)
  704:[52] ConstText(_value="b") -> "b"[52]
  707:[68] AppendText(var[28], v1="b"[52])
  710:[52] ConstLong(val=12) -> 12[52]
  719:[60] CastIntFromLong(v1=12[52]) -> 12[52]
  720:[56] ConstInt(val=0) -> 0[56]
  725:[60] FormatInt(var[28], val=12[52], radix=10, width=0[56], token=32, plus=false, note=false)
  732:[52] ConstText(_value="c ") -> "c "[52]
  736:[68] AppendText(var[28], v1="c "[52])
  739:[52] ConstLong(val=2) -> 2[52]
  748:[60] ConstLong(val=4) -> 4[60]
  757:[68] ConstLong(val=6) -> 6[68]
  766:[76] RemLong(v1=4[60], v2=6[68]) -> 4[60]
  767:[68] MulLong(v1=2[52], v2=4[60]) -> 8[52]
  768:[60] ConstInt(val=8) -> 8[60]
  773:[64] ConvLongFromInt(v1=8[60]) -> 8[60]
  774:[68] GeLong(v1=8[52], v2=8[60]) -> true[52]
  775:[53] ConstInt(val=0) -> 0[53]
  780:[57] FormatBool(var[28], val=true[52], width=0[53], dir=-1, token=32)
  785:[52] ConstText(_value=" d") -> " d"[52]
  789:[68] AppendText(var[28], v1=" d"[52])
  792:[52] VarText(var[28]) -> "a  +2b12c true d"[52]
  795:[68] GenFreeStack(value=16, discard=24)
  799:[44] AppendText(var[4], v1="a  +2b12c true d"[28])
  802:[28] VarText(var[4]) -> "a  +2b12c true d"[28]
  805:[44] ConstText(_value="a  +2b12c true d") -> "a  +2b12c true d"[44]
  823:[60] EqText(v1="a  +2b12c true d"[28], v2="a  +2b12c true d"[44]) -> true[28]
  824:[29] GenGotoFalseWord(jump=830, if_false=true[28])
  827:[28] GenGotoWord(jump=896)
  896:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
