pub fn test() {
    test_value = {a=[];
b=[];
for c in "123ðŸ˜ŠðŸ™ƒðŸ˜‹8" {
    a += [c];
    b += [c#index]
};
"{a} indexes:{b}"};
    assert(
        test_value == "[\"1\",\"2\",\"3\",\"ðŸ˜Š\",\"ðŸ™ƒ\",\"ðŸ˜‹\",\"8\"] indexes:[1,2,3,7,11,15,16]",
        "Test failed {test_value} != \"[\"1\",\"2\",\"3\",\"ðŸ˜Š\",\"ðŸ™ƒ\",\"ðŸ˜‹\",\"8\"] indexes:[1,2,3,7,11,15,16]\""
    );
}
Type 15:vector<integer>[4]:Vector(0)

Type 16:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn test() {#1 block
  __ref_2:ref(main_vector<integer>) = null;
  __ref_1:ref(main_vector<text>) = null;
  __work_3:text = "";
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    a:vector<text["c"]>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 14i32);
      _vec_1:vector<text["c"]>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _vec_1;
    }#3:vector<text["c"]>["__ref_1"];
    b:vector<integer>["__ref_2"] = {#4 vector
      OpDatabase(__ref_2, 16i32);
      _vec_2:vector<integer>["__ref_2"] = OpGetField(__ref_2, 4i32, 65535i32);
      OpSetInt(__ref_2, 4i32, 0i32);
      _vec_2;
    }#4:vector<integer>["__ref_2"];
    {#5 for
      c#index:integer = 0i32;
      loop {#6 for loop
        c:text = {#7 for text next
          __work_1:text = OpGetTextSub("123ðŸ˜ŠðŸ™ƒðŸ˜‹8", c#index, -2147483648i32);
          c#index:integer = OpAddInt(c#index, OpLengthText(__work_1));
          __work_1;
        }#7:text;
        if OpNot(OpConvBoolFromText(c)) break(0) else null;
        {#8 block
          {#9 vector
            _elm_3:ref(boolean)["a"] = OpNewRecord(a, 7i32, 65535i32);
            OpSetText(_elm_3, 0i32, c);
            OpFinishRecord(a, _elm_3, 7i32, 65535i32);
          }#9;
          {#10 vector
            _elm_4:ref(boolean)["b"] = OpNewRecord(b, 15i32, 65535i32);
            OpSetInt(_elm_4, 0i32, c#index);
            OpFinishRecord(b, _elm_4, 15i32, 65535i32);
          }#10;
        }#8;
      }#6;
    }#5;
    {#11 formatting string
      __work_2:text = "";
      OpFormatDatabase(__work_2, a, 7i32, false);
      OpAppendText(__work_2, " indexes:");
      OpFormatDatabase(__work_2, b, 15i32, false);
      __work_2;
    }#11:text;
  }#2:text;
  if OpEqText(test_value, "["1","2","3","ðŸ˜Š","ðŸ™ƒ","ðŸ˜‹","8"] indexes:[1,2,3,7,11,15,16]") null else OpPanic({#12 formatting string
    __work_3:text = "Test failed ";
    OpFormatText(__work_3, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_3, " != "["1","2","3","ðŸ˜Š","ðŸ™ƒ","ðŸ˜‹","8"] indexes:[1,2,3,7,11,15,16]"");
    __work_3;
  }#12:text);
}#1

byte-code for iter:test() [1067]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_2[4]:ref(main_vector<integer>) in 1
   1[16]: ConvRefFromNull() -> ref(reference) var=__ref_1[16]:ref(main_vector<text>) in 1
   2[28]: Text() var=__work_3[28]:text in 1
   3[52]: Text() var=__work_2[52]:text in 1
   4[76]: Text() var=__work_1[76]:text in 1
   5[100]: Text() var=test_value[100]:text in 1
   6[124]: Database(var[16], db_tp=14) type=main_vector<text>[8]:{vector:vector<text>[4]}[14] var=a[124]:vector<text["c"]>["__ref_1"] in 2
  11[124]: VarRef(var[16]) -> ref(reference) type=main_vector<text>[8]:{vector:vector<text>[4]}[14] var=__ref_1[16]:ref(main_vector<text>) in 1
  14[136]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  17[136]: VarRef(var[16]) -> ref(reference) type=main_vector<text>[8]:{vector:vector<text>[4]}[14] var=__ref_1[16]:ref(main_vector<text>) in 1
  20[148]: ConstInt(val=0) -> integer
  25[152]: SetInt(v1: ref(reference), fld=4, val: integer)
  28[136]: VarVector(var[124]) -> vector type=vector<text>[4]:Vector(5)[7] var=_vec_1[124]:vector<text["c"]>["__ref_1"] in 3
  31[148]: FreeStack(value=12, discard=24) type=vector<text>[4]:Vector(5)[7]
  35[136]: Database(var[4], db_tp=16) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[16] var=b[136]:vector<integer>["__ref_2"] in 2
  40[136]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[16] var=__ref_2[4]:ref(main_vector<integer>) in 1
  43[148]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  46[148]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[16] var=__ref_2[4]:ref(main_vector<integer>) in 1
  49[160]: ConstInt(val=0) -> integer
  54[164]: SetInt(v1: ref(reference), fld=4, val: integer)
  57[148]: VarVector(var[136]) -> vector type=vector<integer>[4]:Vector(0)[15] var=_vec_2[136]:vector<integer>["__ref_2"] in 4
  60[160]: FreeStack(value=12, discard=24) type=vector<text>[4]:Vector(5)[7]
  64[148]: ConstInt(val=0) -> integer var=c#index[148]:integer in 5
  69[152]: Text() var=c[152]:text in 6
  70[176]: ClearText(var[76]) var=__work_1[76]:text in 1
  73[176]: ConstText(_value="123ðŸ˜ŠðŸ™ƒðŸ˜‹8") -> text
  91[192]: VarInt(var[148]) -> integer var=c#index[148]:integer in 5
  94[196]: ConstInt(val=-2147483648) -> integer
  99[200]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 100[192]: AppendText(var[76], v1: text)
 103[176]: VarInt(var[148]) -> integer var=c#index[148]:integer in 5
 106[180]: VarText(var[76]) -> text var=__work_1[76]:text in 1
 109[196]: LengthText(v1: text) -> integer
 110[184]: AddInt(v1: integer, v2: integer) -> integer
 111[180]: PutInt(var[148], value: integer)
 114[176]: VarText(var[76]) -> text var=__work_1[76]:text in 1
 117[192]: AppendText(var[152], v1: text)
 120[176]: VarText(var[152]) -> text var=c[152]:text in 6
 123[192]: ConvBoolFromText(v1: text) -> boolean
 124[177]: Not(v1: boolean) -> boolean
 125[177]: GotoFalseWord(jump=138, if_false: boolean)
 128[176]: FreeText(var[152])
 131[176]: FreeStack(value=0, discard=24)
 135[152]: GotoWord(jump=212)
 138[176]: VarVector(var[124]) -> vector type=vector<text>[4]:Vector(5)[7] var=a[124]:vector<text["c"]>["__ref_1"] in 2
 141[188]: NewRecord(data: ref(reference), parent_tp=7, fld=65535) -> ref(reference)
 146[188]: VarRef(var[176]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_3[176]:ref(boolean)["a"] in 9
 149[200]: VarText(var[152]) -> text var=c[152]:text in 6
 152[216]: SetText(v1: ref(reference), fld=0, val: text)
 155[188]: VarVector(var[124]) -> vector type=vector<text>[4]:Vector(5)[7] var=a[124]:vector<text["c"]>["__ref_1"] in 2
 158[200]: VarRef(var[176]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_3[176]:ref(boolean)["a"] in 9
 161[212]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=7, fld=65535)
 166[188]: FreeStack(value=0, discard=12)
 170[176]: VarVector(var[136]) -> vector type=vector<integer>[4]:Vector(0)[15] var=b[136]:vector<integer>["__ref_2"] in 2
 173[188]: NewRecord(data: ref(reference), parent_tp=15, fld=65535) -> ref(reference)
 178[188]: VarRef(var[176]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_4[176]:ref(boolean)["b"] in 10
 181[200]: VarInt(var[148]) -> integer var=c#index[148]:integer in 5
 184[204]: SetInt(v1: ref(reference), fld=0, val: integer)
 187[188]: VarVector(var[136]) -> vector type=vector<integer>[4]:Vector(0)[15] var=b[136]:vector<integer>["__ref_2"] in 2
 190[200]: VarRef(var[176]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_4[176]:ref(boolean)["b"] in 10
 193[212]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=65535)
 198[188]: FreeStack(value=0, discard=12)
 202[176]: FreeText(var[152])
 205[176]: FreeStack(value=0, discard=24)
 209[152]: GotoWord(jump=69)
 212[152]: FreeStack(value=0, discard=4)
 216[148]: ClearText(var[52]) var=__work_2[52]:text in 1
 219[148]: ConstText(_value="") -> text
 221[164]: AppendText(var[52], v1: text)
 224[148]: VarVector(var[124]) -> vector type=vector<text>[4]:Vector(5)[7] var=a[124]:vector<text["c"]>["__ref_1"] in 2
 227[160]: FormatDatabase(var[52], val: ref(reference), db_tp=7, pretty=false)
 233[148]: ConstText(_value=" indexes:") -> text
 244[164]: AppendText(var[52], v1: text)
 247[148]: VarVector(var[136]) -> vector type=vector<integer>[4]:Vector(0)[15] var=b[136]:vector<integer>["__ref_2"] in 2
 250[160]: FormatDatabase(var[52], val: ref(reference), db_tp=15, pretty=false)
 256[148]: VarText(var[52]) -> text var=__work_2[52]:text in 1
 259[164]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 263[140]: AppendText(var[100], v1: text)
 266[124]: VarText(var[100]) -> text var=test_value[100]:text in 1
 269[140]: ConstText(_value="["1","2","3","ðŸ˜Š","ðŸ™ƒ","ðŸ˜‹","8"] indexes:[1,2,3,7,11,15,16]") -> text
 336[156]: EqText(v1: text, v2: text) -> boolean
 337[125]: GotoFalseWord(jump=343, if_false: boolean)
 340[124]: GotoWord(jump=456)
 343[124]: ClearText(var[28]) var=__work_3[28]:text in 1
 346[124]: ConstText(_value="Test failed ") -> text
 360[140]: AppendText(var[28], v1: text)
 363[124]: VarText(var[100]) -> text var=test_value[100]:text in 1
 366[140]: ConstInt(val=0) -> integer
 371[144]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 376[124]: ConstText(_value=" != "["1","2","3","ðŸ˜Š","ðŸ™ƒ","ðŸ˜‹","8"] indexes:[1,2,3,7,11,15,16]"") -> text
 449[140]: AppendText(var[28], v1: text)
 452[124]: VarText(var[28]) -> text var=__work_3[28]:text in 1
 455[140]: Panic(message: text)
 456[124]: FreeText(var[100])
 459[124]: FreeText(var[76])
 462[124]: FreeText(var[52])
 465[124]: FreeText(var[28])
 468[124]: VarRef(var[16]) -> ref(reference) type=main_vector<text>[8]:{vector:vector<text>[4]}[14] var=__ref_1[16]:ref(main_vector<text>) in 1
 471[136]: FreeRef(v1: ref(reference))
 472[124]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[16] var=__ref_2[4]:ref(main_vector<integer>) in 1
 475[136]: FreeRef(v1: ref(reference))
 476[124]: Return(ret=0, value=0, discard=124)

