pub fn test() {
    test_value = {a = [];
for v in 1..4 { a += [ v * 10 ] };
"{a}"};
    assert(
        test_value == "[10,20,30]",
        "Test failed {test_value} != \"[10,20,30]\""
    );
}
Type 12:vector<integer>[4]:Vector(0)

Type 13:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    a:vector<integer>#[] = {#3 vector
      _db_3:main_vector<integer> = OpDatabase(1i32, 13i32);
      _vec_2:vector<integer>#[] = OpGetField(_db_3, 4i32, 65535i32);
      OpSetInt(_db_3, 4i32, 0i32);
      _vec_2;
    }#3:vector<integer>#[];
    {#4 for
      v#index:integer = OpConvIntFromNull();
      loop {#5 for loop
        v:integer = {#6 for next
          v#index:integer = if OpNot(OpConvBoolFromInt(v#index)) 1i32 else OpAddInt(v#index, 1i32);
          if OpGeInt(v#index, 4i32) break(0) else null;
          v#index;
        }#6:integer;
        {#7 block
          {#8 vector
            _elm_4:boolean = OpNewRecord(a, 12i32, 65535i32);
            OpSetInt(_elm_4, 0i32, OpMulInt(v, 10i32));
            OpFinishRecord(a, _elm_4, 12i32, 65535i32);
          }#8;
        }#7;
      }#5;
    }#4;
    {#9 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, a, 12i32, false);
      __work_1;
    }#9:text;
  }#2:text;
  if OpEqText(test_value, "[10,20,30]") null else OpPanic({#10 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[10,20,30]"");
    __work_2;
  }#10:text);
}#1

byte-code for empty_vector:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Text()
 694[52]: Text()
 695[76]: Database(size=1, db_tp=13) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 700[88]: VarRef(var[76]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 703[100]: GetField(v1: reference, fld=4) -> reference type=Unknown type(65535)[65535]
 706[100]: VarRef(var[76]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 709[112]: ConstInt(val=0) -> integer
 714[116]: SetInt(v1: reference, fld=4, val: integer)
 717[100]: VarVector(var[88]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 720[112]: FreeStack(value=12, discard=36) type=Variable[12]:{name:text[4], value:text[8]}[6]
 724[88]: ConvIntFromNull() -> integer
 725[92]: VarInt(var[88]) -> integer
 728[96]: ConvBoolFromInt(v1: integer) -> boolean
 729[93]: Not(v1: boolean) -> boolean
 730[93]: GotoFalseWord(jump=741, if_false: boolean)
 733[92]: ConstInt(val=1) -> integer
 738[96]: GotoWord(jump=750)
 741[92]: VarInt(var[88]) -> integer
 744[96]: ConstInt(val=1) -> integer
 749[100]: AddInt(v1: integer, v2: integer) -> integer
 750[96]: PutInt(var[88], value: integer)
 753[92]: VarInt(var[88]) -> integer
 756[96]: ConstInt(val=4) -> integer
 761[100]: GeInt(v1: integer, v2: integer) -> boolean
 762[93]: GotoFalseWord(jump=768, if_false: boolean)
 765[92]: GotoWord(jump=816)
 768[92]: VarInt(var[88]) -> integer
 771[96]: VarVector(var[76]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 774[108]: NewRecord(data: reference, parent_tp=12, fld=65535) -> reference
 779[108]: VarRef(var[96]) -> reference type=boolean[1]:Base[4]
 782[120]: VarInt(var[92]) -> integer
 785[124]: ConstInt(val=10) -> integer
 790[128]: MulInt(v1: integer, v2: integer) -> integer
 791[124]: SetInt(v1: reference, fld=0, val: integer)
 794[108]: VarVector(var[76]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 797[120]: VarRef(var[96]) -> reference type=boolean[1]:Base[4]
 800[132]: FinishRecord(data: reference, rec: reference, parent_tp=12, fld=65535)
 805[108]: FreeStack(value=0, discard=12)
 809[96]: FreeStack(value=0, discard=4)
 813[92]: GotoWord(jump=725)
 816[92]: FreeStack(value=0, discard=4)
 820[88]: ClearText(var[28])
 823[88]: ConstText(_value="") -> text
 825[104]: AppendText(var[28], v1: text)
 828[88]: VarVector(var[76]) -> vector[] type=vector<integer>[4]:Vector(0)[12]
 831[100]: FormatDatabase(var[28], val: reference, db_tp=12, pretty=false)
 837[88]: VarText(var[28]) -> text
 840[104]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 844[92]: AppendText(var[52], v1: text)
 847[76]: VarText(var[52]) -> text
 850[92]: ConstText(_value="[10,20,30]") -> text
 862[108]: EqText(v1: text, v2: text) -> boolean
 863[77]: GotoFalseWord(jump=869, if_false: boolean)
 866[76]: GotoWord(jump=927)
 869[76]: ClearText(var[4])
 872[76]: ConstText(_value="Test failed ") -> text
 886[92]: AppendText(var[4], v1: text)
 889[76]: VarText(var[52]) -> text
 892[92]: ConstInt(val=0) -> integer
 897[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 902[76]: ConstText(_value=" != "[10,20,30]"") -> text
 920[92]: AppendText(var[4], v1: text)
 923[76]: VarText(var[4]) -> text
 926[92]: Panic(message: text)
 927[76]: Return(ret=0, value=0, discard=76)

Execute test:
  692:[8] Text()
  693:[32] Text()
  694:[56] Text()
  695:[80] Database(size=1, db_tp=13) -> ref(1,1,0)={}[80]
  700:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  703:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)[92]
  706:[104] VarRef(var[80]) -> ref(1,1,0)={}[104]
  709:[116] ConstInt(val=0) -> 0[116]
  714:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  717:[104] VarVector(var[92]) -> ref(1,1,4)=[][104]
  720:[116] FreeStack(value=12, discard=36)
  724:[92] ConvIntFromNull() -> -2147483648[92]
  725:[96] VarInt(var[92]) -> -2147483648[96]
  728:[100] ConvBoolFromInt(v1=-2147483648[96]) -> false[96]
  729:[97] Not(v1=false[96]) -> true[96]
  730:[97] GotoFalseWord(jump=741, if_false=true[96])
  733:[96] ConstInt(val=1) -> 1[96]
  738:[100] GotoWord(jump=750)
  750:[100] PutInt(var[92], value=1[96])
  753:[96] VarInt(var[92]) -> 1[96]
  756:[100] ConstInt(val=4) -> 4[100]
  761:[104] GeInt(v1=1[96], v2=4[100]) -> false[96]
  762:[97] GotoFalseWord(jump=768, if_false=false[96])
  768:[96] VarInt(var[92]) -> 1[96]
  771:[100] VarVector(var[80]) -> ref(1,1,4)=[][100]
  774:[112] NewRecord(data=ref(1,1,4)[100], parent_tp=12, fld=65535) -> ref(1,2,8)[100]
  779:[112] VarRef(var[100]) -> ref(1,2,8)=false[112]
  782:[124] VarInt(var[96]) -> 1[124]
  785:[128] ConstInt(val=10) -> 10[128]
  790:[132] MulInt(v1=1[124], v2=10[128]) -> 10[124]
  791:[128] SetInt(v1=ref(1,2,8)[112], fld=0, val=10[124])
  794:[112] VarVector(var[80]) -> ref(1,1,4)=[10][112]
  797:[124] VarRef(var[100]) -> ref(1,2,8)=true[124]
  800:[136] FinishRecord(data=ref(1,1,4)[112], rec=ref(1,2,8)[124], parent_tp=12, fld=65535)
  805:[112] FreeStack(value=0, discard=12)
  809:[100] FreeStack(value=0, discard=4)
  813:[96] GotoWord(jump=725)
  725:[96] VarInt(var[92]) -> 1[96]
  728:[100] ConvBoolFromInt(v1=1[96]) -> true[96]
  729:[97] Not(v1=true[96]) -> false[96]
  730:[97] GotoFalseWord(jump=741, if_false=false[96])
  741:[96] VarInt(var[92]) -> 1[96]
  744:[100] ConstInt(val=1) -> 1[100]
  749:[104] AddInt(v1=1[96], v2=1[100]) -> 2[96]
  750:[100] PutInt(var[92], value=2[96])
  753:[96] VarInt(var[92]) -> 2[96]
  756:[100] ConstInt(val=4) -> 4[100]
  761:[104] GeInt(v1=2[96], v2=4[100]) -> false[96]
  762:[97] GotoFalseWord(jump=768, if_false=false[96])
  768:[96] VarInt(var[92]) -> 2[96]
  771:[100] VarVector(var[80]) -> ref(1,1,4)=[10][100]
  774:[112] NewRecord(data=ref(1,1,4)[100], parent_tp=12, fld=65535) -> ref(1,2,12)[100]
  779:[112] VarRef(var[100]) -> ref(1,2,12)=false[112]
  782:[124] VarInt(var[96]) -> 2[124]
  785:[128] ConstInt(val=10) -> 10[128]
  790:[132] MulInt(v1=2[124], v2=10[128]) -> 20[124]
  791:[128] SetInt(v1=ref(1,2,12)[112], fld=0, val=20[124])
  794:[112] VarVector(var[80]) -> ref(1,1,4)=[10,20][112]
  797:[124] VarRef(var[100]) -> ref(1,2,12)=true[124]
  800:[136] FinishRecord(data=ref(1,1,4)[112], rec=ref(1,2,12)[124], parent_tp=12, fld=65535)
  805:[112] FreeStack(value=0, discard=12)
  809:[100] FreeStack(value=0, discard=4)
  813:[96] GotoWord(jump=725)
  725:[96] VarInt(var[92]) -> 2[96]
  728:[100] ConvBoolFromInt(v1=2[96]) -> true[96]
  729:[97] Not(v1=true[96]) -> false[96]
  730:[97] GotoFalseWord(jump=741, if_false=false[96])
  741:[96] VarInt(var[92]) -> 2[96]
  744:[100] ConstInt(val=1) -> 1[100]
  749:[104] AddInt(v1=2[96], v2=1[100]) -> 3[96]
  750:[100] PutInt(var[92], value=3[96])
  753:[96] VarInt(var[92]) -> 3[96]
  756:[100] ConstInt(val=4) -> 4[100]
  761:[104] GeInt(v1=3[96], v2=4[100]) -> false[96]
  762:[97] GotoFalseWord(jump=768, if_false=false[96])
  768:[96] VarInt(var[92]) -> 3[96]
  771:[100] VarVector(var[80]) -> ref(1,1,4)=[10,20][100]
  774:[112] NewRecord(data=ref(1,1,4)[100], parent_tp=12, fld=65535) -> ref(1,2,16)[100]
  779:[112] VarRef(var[100]) -> ref(1,2,16)=false[112]
  782:[124] VarInt(var[96]) -> 3[124]
  785:[128] ConstInt(val=10) -> 10[128]
  790:[132] MulInt(v1=3[124], v2=10[128]) -> 30[124]
  791:[128] SetInt(v1=ref(1,2,16)[112], fld=0, val=30[124])
  794:[112] VarVector(var[80]) -> ref(1,1,4)=[10,20,30][112]
  797:[124] VarRef(var[100]) -> ref(1,2,16)=true[124]
  800:[136] FinishRecord(data=ref(1,1,4)[112], rec=ref(1,2,16)[124], parent_tp=12, fld=65535)
  805:[112] FreeStack(value=0, discard=12)
  809:[100] FreeStack(value=0, discard=4)
  813:[96] GotoWord(jump=725)
  725:[96] VarInt(var[92]) -> 3[96]
  728:[100] ConvBoolFromInt(v1=3[96]) -> true[96]
  729:[97] Not(v1=true[96]) -> false[96]
  730:[97] GotoFalseWord(jump=741, if_false=false[96])
  741:[96] VarInt(var[92]) -> 3[96]
  744:[100] ConstInt(val=1) -> 1[100]
  749:[104] AddInt(v1=3[96], v2=1[100]) -> 4[96]
  750:[100] PutInt(var[92], value=4[96])
  753:[96] VarInt(var[92]) -> 4[96]
  756:[100] ConstInt(val=4) -> 4[100]
  761:[104] GeInt(v1=4[96], v2=4[100]) -> true[96]
  762:[97] GotoFalseWord(jump=768, if_false=true[96])
  765:[96] GotoWord(jump=816)
  816:[96] FreeStack(value=0, discard=4)
  820:[92] ClearText(var[32])
  823:[92] ConstText(_value="") -> ""[92]
  825:[108] AppendText(var[32], v1=""[92])
  828:[92] VarVector(var[80]) -> ref(1,1,4)=[10,20,30][92]
  831:[104] FormatDatabase(var[32], val=ref(1,1,4)[92], db_tp=12, pretty=false)
  837:[92] VarText(var[32]) -> "[10,20,30]"[92]
  840:[108] FreeStack(value=16, discard=28)
  844:[96] AppendText(var[56], v1="[10,20,30]"[80])
  847:[80] VarText(var[56]) -> "[10,20,30]"[80]
  850:[96] ConstText(_value="[10,20,30]") -> "[10,20,30]"[96]
  862:[112] EqText(v1="[10,20,30]"[80], v2="[10,20,30]"[96]) -> true[80]
  863:[81] GotoFalseWord(jump=869, if_false=true[80])
  866:[80] GotoWord(jump=927)
  927:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
