pub fn test() {
    test_value = {a = [];
for v in 1..4 { a += [ v * 10 ] };
"{a}"};
    assert(
        test_value == "[10,20,30]",
        "Test failed {test_value} != \"[10,20,30]\""
    );
}
Type 11:vector<integer>[4]:Vector(0)

Type 12:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    a:vector<integer>#[] = {#3 vector
      _db_3:main_vector<integer> = OpDatabase(1i32, 12i32);
      _vec_2:vector<integer>#[] = OpGetField(_db_3, 4i32, 65535i32);
      OpSetInt(_db_3, 4i32, 0i32);
      _vec_2;
    }#3:vector<integer>#[];
    {#4 for
      v#index:integer = OpConvIntFromNull();
      loop {#5 for loop
        v:integer = {#6 for next
          v#index:integer = if OpNot(OpConvBoolFromInt(v#index)) 1i32 else OpAddInt(v#index, 1i32);
          if OpGeInt(v#index, 4i32) break(0) else null;
          v#index;
        }#6:integer;
        {#7 block
          {#8 vector
            _elm_4:boolean = OpNewRecord(a, 11i32, 65535i32);
            OpSetInt(_elm_4, 0i32, OpMulInt(v, 10i32));
            OpFinishRecord(a, _elm_4, 11i32, 65535i32);
          }#8;
        }#7;
      }#5;
    }#4;
    {#9 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, a, 11i32, false);
      __work_1;
    }#9:text;
  }#2:text;
  if OpEqText(test_value, "[10,20,30]") null else OpPanic({#10 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[10,20,30]"");
    __work_2;
  }#10:text);
}#1

byte-code for empty_vector:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Text()
 684[52]: Text()
 685[76]: Database(size=1, db_tp=12) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[12]
 690[88]: VarRef(var[76]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[12]
 693[100]: GetField(v1: reference, fld=4) -> reference type=Unknown type(65535)[65535]
 696[100]: VarRef(var[76]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[12]
 699[112]: ConstInt(val=0) -> integer
 704[116]: SetInt(v1: reference, fld=4, val: integer)
 707[100]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 710[112]: FreeStack(value=12, discard=24) type=Pixel[3]:{r:byte[0], g:byte[1], b:byte[2]}[6]
 714[88]: ConvIntFromNull() -> integer
 715[92]: VarInt(var[88]) -> integer
 718[96]: ConvBoolFromInt(v1: integer) -> boolean
 719[93]: Not(v1: boolean) -> boolean
 720[93]: GotoFalseWord(jump=731, if_false: boolean)
 723[92]: ConstInt(val=1) -> integer
 728[96]: GotoWord(jump=740)
 731[92]: VarInt(var[88]) -> integer
 734[96]: ConstInt(val=1) -> integer
 739[100]: AddInt(v1: integer, v2: integer) -> integer
 740[96]: PutInt(var[88], value: integer)
 743[92]: VarInt(var[88]) -> integer
 746[96]: ConstInt(val=4) -> integer
 751[100]: GeInt(v1: integer, v2: integer) -> boolean
 752[93]: GotoFalseWord(jump=758, if_false: boolean)
 755[92]: GotoWord(jump=806)
 758[92]: VarInt(var[88]) -> integer
 761[96]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 764[108]: NewRecord(data: reference, parent_tp=11, fld=65535) -> reference
 769[108]: VarRef(var[96]) -> reference type=boolean[1]:Base[4]
 772[120]: VarInt(var[92]) -> integer
 775[124]: ConstInt(val=10) -> integer
 780[128]: MulInt(v1: integer, v2: integer) -> integer
 781[124]: SetInt(v1: reference, fld=0, val: integer)
 784[108]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 787[120]: VarRef(var[96]) -> reference type=boolean[1]:Base[4]
 790[132]: FinishRecord(data: reference, rec: reference, parent_tp=11, fld=65535)
 795[108]: FreeStack(value=0, discard=12)
 799[96]: FreeStack(value=0, discard=4)
 803[92]: GotoWord(jump=715)
 806[92]: FreeStack(value=0, discard=4)
 810[88]: ClearText(var[28])
 813[88]: ConstText(_value="") -> text
 815[104]: AppendText(var[28], v1: text)
 818[88]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 821[100]: FormatDatabase(var[28], val: reference, db_tp=11, pretty=false)
 827[88]: VarText(var[28]) -> text
 830[104]: FreeStack(value=16, discard=12) type=text[4]:Base[5]
 834[92]: AppendText(var[52], v1: text)
 837[76]: VarText(var[52]) -> text
 840[92]: ConstText(_value="[10,20,30]") -> text
 852[108]: EqText(v1: text, v2: text) -> boolean
 853[77]: GotoFalseWord(jump=859, if_false: boolean)
 856[76]: GotoWord(jump=917)
 859[76]: ClearText(var[4])
 862[76]: ConstText(_value="Test failed ") -> text
 876[92]: AppendText(var[4], v1: text)
 879[76]: VarText(var[52]) -> text
 882[92]: ConstInt(val=0) -> integer
 887[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 892[76]: ConstText(_value=" != "[10,20,30]"") -> text
 910[92]: AppendText(var[4], v1: text)
 913[76]: VarText(var[4]) -> text
 916[92]: Panic(message: text)
 917[76]: Return(ret=0, value=0, discard=76)

Execute test:
  682:[8] Text()
  683:[32] Text()
  684:[56] Text()
  685:[80] Database(size=1, db_tp=12) -> ref(1,1,0)={}[80]
  690:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  693:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)[92]
  696:[104] VarRef(var[80]) -> ref(1,1,0)={}[104]
  699:[116] ConstInt(val=0) -> 0[116]
  704:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  707:[104] VarVector(var[92]) -> ref(1,1,4)[104]
  710:[116] FreeStack(value=12, discard=24)
  714:[92] ConvIntFromNull() -> -2147483648[92]
  715:[96] VarInt(var[92]) -> -2147483648[96]
  718:[100] ConvBoolFromInt(v1=-2147483648[96]) -> false[96]
  719:[97] Not(v1=false[96]) -> true[96]
  720:[97] GotoFalseWord(jump=731, if_false=true[96])
  723:[96] ConstInt(val=1) -> 1[96]
  728:[100] GotoWord(jump=740)
  740:[100] PutInt(var[92], value=1[96])
  743:[96] VarInt(var[92]) -> 1[96]
  746:[100] ConstInt(val=4) -> 4[100]
  751:[104] GeInt(v1=1[96], v2=4[100]) -> false[96]
  752:[97] GotoFalseWord(jump=758, if_false=false[96])
  758:[96] VarInt(var[92]) -> 1[96]
  761:[100] VarVector(var[80]) -> ref(1,1,4)[100]
  764:[112] NewRecord(data=ref(1,1,4)[100], parent_tp=11, fld=65535) -> ref(1,2,8)[100]
  769:[112] VarRef(var[100]) -> ref(1,2,8)=false[112]
  772:[124] VarInt(var[96]) -> 1[124]
  775:[128] ConstInt(val=10) -> 10[128]
  780:[132] MulInt(v1=1[124], v2=10[128]) -> 10[124]
  781:[128] SetInt(v1=ref(1,2,8)[112], fld=0, val=10[124])
  784:[112] VarVector(var[80]) -> ref(1,1,4)[112]
  787:[124] VarRef(var[100]) -> ref(1,2,8)=true[124]
  790:[136] FinishRecord(data=ref(1,1,4)[112], rec=ref(1,2,8)[124], parent_tp=11, fld=65535)
  795:[112] FreeStack(value=0, discard=12)
  799:[100] FreeStack(value=0, discard=4)
  803:[96] GotoWord(jump=715)
  715:[96] VarInt(var[92]) -> 1[96]
  718:[100] ConvBoolFromInt(v1=1[96]) -> true[96]
  719:[97] Not(v1=true[96]) -> false[96]
  720:[97] GotoFalseWord(jump=731, if_false=false[96])
  731:[96] VarInt(var[92]) -> 1[96]
  734:[100] ConstInt(val=1) -> 1[100]
  739:[104] AddInt(v1=1[96], v2=1[100]) -> 2[96]
  740:[100] PutInt(var[92], value=2[96])
  743:[96] VarInt(var[92]) -> 2[96]
  746:[100] ConstInt(val=4) -> 4[100]
  751:[104] GeInt(v1=2[96], v2=4[100]) -> false[96]
  752:[97] GotoFalseWord(jump=758, if_false=false[96])
  758:[96] VarInt(var[92]) -> 2[96]
  761:[100] VarVector(var[80]) -> ref(1,1,4)[100]
  764:[112] NewRecord(data=ref(1,1,4)[100], parent_tp=11, fld=65535) -> ref(1,2,12)[100]
  769:[112] VarRef(var[100]) -> ref(1,2,12)=false[112]
  772:[124] VarInt(var[96]) -> 2[124]
  775:[128] ConstInt(val=10) -> 10[128]
  780:[132] MulInt(v1=2[124], v2=10[128]) -> 20[124]
  781:[128] SetInt(v1=ref(1,2,12)[112], fld=0, val=20[124])
  784:[112] VarVector(var[80]) -> ref(1,1,4)[112]
  787:[124] VarRef(var[100]) -> ref(1,2,12)=true[124]
  790:[136] FinishRecord(data=ref(1,1,4)[112], rec=ref(1,2,12)[124], parent_tp=11, fld=65535)
  795:[112] FreeStack(value=0, discard=12)
  799:[100] FreeStack(value=0, discard=4)
  803:[96] GotoWord(jump=715)
  715:[96] VarInt(var[92]) -> 2[96]
  718:[100] ConvBoolFromInt(v1=2[96]) -> true[96]
  719:[97] Not(v1=true[96]) -> false[96]
  720:[97] GotoFalseWord(jump=731, if_false=false[96])
  731:[96] VarInt(var[92]) -> 2[96]
  734:[100] ConstInt(val=1) -> 1[100]
  739:[104] AddInt(v1=2[96], v2=1[100]) -> 3[96]
  740:[100] PutInt(var[92], value=3[96])
  743:[96] VarInt(var[92]) -> 3[96]
  746:[100] ConstInt(val=4) -> 4[100]
  751:[104] GeInt(v1=3[96], v2=4[100]) -> false[96]
  752:[97] GotoFalseWord(jump=758, if_false=false[96])
  758:[96] VarInt(var[92]) -> 3[96]
  761:[100] VarVector(var[80]) -> ref(1,1,4)[100]
  764:[112] NewRecord(data=ref(1,1,4)[100], parent_tp=11, fld=65535) -> ref(1,2,16)[100]
  769:[112] VarRef(var[100]) -> ref(1,2,16)=false[112]
  772:[124] VarInt(var[96]) -> 3[124]
  775:[128] ConstInt(val=10) -> 10[128]
  780:[132] MulInt(v1=3[124], v2=10[128]) -> 30[124]
  781:[128] SetInt(v1=ref(1,2,16)[112], fld=0, val=30[124])
  784:[112] VarVector(var[80]) -> ref(1,1,4)[112]
  787:[124] VarRef(var[100]) -> ref(1,2,16)=true[124]
  790:[136] FinishRecord(data=ref(1,1,4)[112], rec=ref(1,2,16)[124], parent_tp=11, fld=65535)
  795:[112] FreeStack(value=0, discard=12)
  799:[100] FreeStack(value=0, discard=4)
  803:[96] GotoWord(jump=715)
  715:[96] VarInt(var[92]) -> 3[96]
  718:[100] ConvBoolFromInt(v1=3[96]) -> true[96]
  719:[97] Not(v1=true[96]) -> false[96]
  720:[97] GotoFalseWord(jump=731, if_false=false[96])
  731:[96] VarInt(var[92]) -> 3[96]
  734:[100] ConstInt(val=1) -> 1[100]
  739:[104] AddInt(v1=3[96], v2=1[100]) -> 4[96]
  740:[100] PutInt(var[92], value=4[96])
  743:[96] VarInt(var[92]) -> 4[96]
  746:[100] ConstInt(val=4) -> 4[100]
  751:[104] GeInt(v1=4[96], v2=4[100]) -> true[96]
  752:[97] GotoFalseWord(jump=758, if_false=true[96])
  755:[96] GotoWord(jump=806)
  806:[96] FreeStack(value=0, discard=4)
  810:[92] ClearText(var[32])
  813:[92] ConstText(_value="") -> ""[92]
  815:[108] AppendText(var[32], v1=""[92])
  818:[92] VarVector(var[80]) -> ref(1,1,4)[92]
  821:[104] FormatDatabase(var[32], val=ref(1,1,4)[92], db_tp=11, pretty=false)
  827:[92] VarText(var[32]) -> "[10,20,30]"[92]
  830:[108] FreeStack(value=16, discard=12)
  834:[96] AppendText(var[56], v1="[10,20,30]"[80])
  837:[80] VarText(var[56]) -> "[10,20,30]"[80]
  840:[96] ConstText(_value="[10,20,30]") -> "[10,20,30]"[96]
  852:[112] EqText(v1="[10,20,30]"[80], v2="[10,20,30]"[96]) -> true[80]
  853:[81] GotoFalseWord(jump=859, if_false=true[80])
  856:[80] GotoWord(jump=917)
  917:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
