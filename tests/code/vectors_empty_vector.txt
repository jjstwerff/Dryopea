pub fn test() {
    test_value = {a = [];
for v in 1..4 { a += [ v * 10 ] };
"{a}"};
    assert(
        test_value == "[10,20,30]",
        "Test failed {test_value} != \"[10,20,30]\""
    );
}
Type 17:vector<integer>[4]:Vector(0)

Type 18:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn test() {#block(1):void
  __ref_1(1):ref(main_vector<integer>) = null;
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text = {#block(2):text
    OpDatabase(__ref_1(1), 18i32);
    a(2):vector<integer>["__ref_1"] = OpGetField(__ref_1(1), 4i32, 17i32);
    OpSetInt(__ref_1(1), 4i32, 0i32);
    {#For block(3):void
      v#index(3):integer = OpConvIntFromNull();
      loop {#For loop_4
        v(4):integer = {#Iter range(5):integer
          v#index(3):integer = if OpNot(OpConvBoolFromInt(v#index(3))) 1i32 else OpAddInt(v#index(3), 1i32);
          if OpGeInt(v#index(3), 4i32) break(0) else null;
          v#index(3);
        }#Iter range(5):integer;
        {#block(6):void
          _elm_1(6):ref(boolean)["a"] = OpNewRecord(a(2), 17i32, 65535i32);
          OpSetInt(_elm_1(6), 0i32, OpMulInt(v(4), 10i32));
          OpFinishRecord(a(2), _elm_1(6), 17i32, 65535i32);
        }#block(6):void;
      }#For loop_4;
    }#For block(3):void;
    {#Formatted string(7):text
      __work_1(1):text = "";
      OpFormatDatabase(__work_1(1), a(2), 17i32, false);
      __work_1(1);
    }#Formatted string(7):text;
  }#block(2):text;
  if OpEqText(test_value(1), "[10,20,30]") null else OpPanic({#Formatted string(8):text
    __work_2(1):text = "Test failed ";
    OpFormatText(__work_2(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_2(1), " != "[10,20,30]"");
    __work_2(1);
  }#Formatted string(8):text);
  OpFreeText(test_value(1));
  OpFreeRef(__ref_1(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for empty_vector:test() [1119]
   0[4]: return-address
   0[8]: ConvRefFromNull() -> ref(reference) var=__ref_1[8]:ref(main_vector<integer>)
   1[20]: Text() var=__work_2[20]:text
   2[44]: Text() var=__work_1[44]:text
   3[68]: Text() var=test_value[68]:text
   4[92]: Database(var[8], db_tp=18) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18]
   9[92]: VarRef(var[8]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[8]:ref(main_vector<integer>)
  12[104]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=vector<integer>[4]:Vector(0)[17]
  15[104]: VarRef(var[8]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[8]:ref(main_vector<integer>)
  18[116]: ConstInt(val=0) -> integer
  23[120]: SetInt(v1: ref(reference), fld=4, val: integer)
  26[104]: ConvIntFromNull() -> integer var=v#index[104]:integer
  27[108]: VarInt(var[104]) -> integer var=v#index[104]:integer
  30[112]: ConvBoolFromInt(v1: integer) -> boolean
  31[109]: Not(v1: boolean) -> boolean
  32[109]: GotoFalseWord(jump=43, if_false: boolean)
  35[108]: ConstInt(val=1) -> integer
  40[112]: GotoWord(jump=52)
  43[108]: VarInt(var[104]) -> integer var=v#index[104]:integer
  46[112]: ConstInt(val=1) -> integer
  51[116]: AddInt(v1: integer, v2: integer) -> integer
  52[112]: PutInt(var[104], value: integer)
  55[108]: VarInt(var[104]) -> integer var=v#index[104]:integer
  58[112]: ConstInt(val=4) -> integer
  63[116]: GeInt(v1: integer, v2: integer) -> boolean
  64[109]: GotoFalseWord(jump=70, if_false: boolean)
  67[108]: GotoWord(jump=118)
  70[108]: VarInt(var[104]) -> integer var=v#index[104]:integer
  73[112]: VarVector(var[92]) -> vector type=vector<integer>[4]:Vector(0)[17] var=a[92]:vector<integer>["__ref_1"]
  76[124]: NewRecord(data: ref(reference), parent_tp=17, fld=65535) -> ref(reference)
  81[124]: VarRef(var[112]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[112]:ref(boolean)["a"]
  84[136]: VarInt(var[108]) -> integer var=v[108]:integer
  87[140]: ConstInt(val=10) -> integer
  92[144]: MulInt(v1: integer, v2: integer) -> integer
  93[140]: SetInt(v1: ref(reference), fld=0, val: integer)
  96[124]: VarVector(var[92]) -> vector type=vector<integer>[4]:Vector(0)[17] var=a[92]:vector<integer>["__ref_1"]
  99[136]: VarRef(var[112]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[112]:ref(boolean)["a"]
 102[148]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=65535)
 107[124]: FreeStack(value=0, discard=12)
 111[112]: FreeStack(value=0, discard=4)
 115[108]: GotoWord(jump=27)
 118[108]: FreeStack(value=0, discard=4)
 122[104]: ClearText(var[44]) var=__work_1[44]:text
 125[104]: ConstText(_value="") -> text
 127[120]: AppendText(var[44], v1: text)
 130[104]: VarVector(var[92]) -> vector type=vector<integer>[4]:Vector(0)[17] var=a[92]:vector<integer>["__ref_1"]
 133[116]: FormatDatabase(var[44], val: ref(reference), db_tp=17, pretty=false)
 139[104]: VarText(var[44]) -> text var=__work_1[44]:text
 142[120]: FreeStack(value=16, discard=28)
 146[108]: AppendText(var[68], v1: text)
 149[92]: VarText(var[68]) -> text var=test_value[68]:text
 152[108]: ConstText(_value="[10,20,30]") -> text
 164[124]: EqText(v1: text, v2: text) -> boolean
 165[93]: GotoFalseWord(jump=171, if_false: boolean)
 168[92]: GotoWord(jump=229)
 171[92]: ClearText(var[20]) var=__work_2[20]:text
 174[92]: ConstText(_value="Test failed ") -> text
 188[108]: AppendText(var[20], v1: text)
 191[92]: VarText(var[68]) -> text var=test_value[68]:text
 194[108]: ConstInt(val=0) -> integer
 199[112]: FormatText(var[20], val: text, width: integer, dir=-1, token=32)
 204[92]: ConstText(_value=" != "[10,20,30]"") -> text
 222[108]: AppendText(var[20], v1: text)
 225[92]: VarText(var[20]) -> text var=__work_2[20]:text
 228[108]: Panic(message: text)
 229[92]: FreeText(var[68])
 232[92]: VarRef(var[8]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[8]:ref(main_vector<integer>)
 235[104]: FreeRef(v1: ref(reference))
 236[92]: FreeText(var[44])
 239[92]: FreeText(var[20])
 242[92]: Return(ret=0, value=0, discard=88)

Execute test:
    0:[8] ConvRefFromNull() -> ref(1,0,0)[8]
    1:[20] Text()
    2:[44] Text()
    3:[68] Text()
    4:[92] Database(var[8], db_tp=18)
    9:[92] VarRef(var[8]) -> ref(1,1,0)={}[92]
   12:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[][92]
   15:[104] VarRef(var[8]) -> ref(1,1,0)={}[104]
   18:[116] ConstInt(val=0) -> 0[116]
   23:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
   26:[104] ConvIntFromNull() -> -2147483648[104]
   27:[108] VarInt(var[104]) -> -2147483648[108]
   30:[112] ConvBoolFromInt(v1=-2147483648[108]) -> false[108]
   31:[109] Not(v1=false[108]) -> true[108]
   32:[109] GotoFalseWord(jump=43, if_false=true[108])
   35:[108] ConstInt(val=1) -> 1[108]
   40:[112] GotoWord(jump=52)
   52:[112] PutInt(var[104], value=1[108])
   55:[108] VarInt(var[104]) -> 1[108]
   58:[112] ConstInt(val=4) -> 4[112]
   63:[116] GeInt(v1=1[108], v2=4[112]) -> false[108]
   64:[109] GotoFalseWord(jump=70, if_false=false[108])
   70:[108] VarInt(var[104]) -> 1[108]
   73:[112] VarVector(var[92]) -> ref(1,1,4)=[][112]
   76:[124] NewRecord(data=ref(1,1,4)[112], parent_tp=17, fld=65535) -> ref(1,9,8)[112]
   81:[124] VarRef(var[112]) -> ref(1,9,8)=false[124]
   84:[136] VarInt(var[108]) -> 1[136]
   87:[140] ConstInt(val=10) -> 10[140]
   92:[144] MulInt(v1=1[136], v2=10[140]) -> 10[136]
   93:[140] SetInt(v1=ref(1,9,8)[124], fld=0, val=10[136])
   96:[124] VarVector(var[92]) -> ref(1,1,4)=[10][124]
   99:[136] VarRef(var[112]) -> ref(1,9,8)=true[136]
  102:[148] FinishRecord(data=ref(1,1,4)[124], rec=ref(1,9,8)[136], parent_tp=17, fld=65535)
  107:[124] FreeStack(value=0, discard=12)
  111:[112] FreeStack(value=0, discard=4)
  115:[108] GotoWord(jump=27)
   27:[108] VarInt(var[104]) -> 1[108]
   30:[112] ConvBoolFromInt(v1=1[108]) -> true[108]
   31:[109] Not(v1=true[108]) -> false[108]
   32:[109] GotoFalseWord(jump=43, if_false=false[108])
   43:[108] VarInt(var[104]) -> 1[108]
   46:[112] ConstInt(val=1) -> 1[112]
   51:[116] AddInt(v1=1[108], v2=1[112]) -> 2[108]
   52:[112] PutInt(var[104], value=2[108])
   55:[108] VarInt(var[104]) -> 2[108]
   58:[112] ConstInt(val=4) -> 4[112]
   63:[116] GeInt(v1=2[108], v2=4[112]) -> false[108]
   64:[109] GotoFalseWord(jump=70, if_false=false[108])
   70:[108] VarInt(var[104]) -> 2[108]
   73:[112] VarVector(var[92]) -> ref(1,1,4)=[10][112]
   76:[124] NewRecord(data=ref(1,1,4)[112], parent_tp=17, fld=65535) -> ref(1,9,12)[112]
   81:[124] VarRef(var[112]) -> ref(1,9,12)=false[124]
   84:[136] VarInt(var[108]) -> 2[136]
   87:[140] ConstInt(val=10) -> 10[140]
   92:[144] MulInt(v1=2[136], v2=10[140]) -> 20[136]
   93:[140] SetInt(v1=ref(1,9,12)[124], fld=0, val=20[136])
   96:[124] VarVector(var[92]) -> ref(1,1,4)=[10,20][124]
   99:[136] VarRef(var[112]) -> ref(1,9,12)=true[136]
  102:[148] FinishRecord(data=ref(1,1,4)[124], rec=ref(1,9,12)[136], parent_tp=17, fld=65535)
  107:[124] FreeStack(value=0, discard=12)
  111:[112] FreeStack(value=0, discard=4)
  115:[108] GotoWord(jump=27)
   27:[108] VarInt(var[104]) -> 2[108]
   30:[112] ConvBoolFromInt(v1=2[108]) -> true[108]
   31:[109] Not(v1=true[108]) -> false[108]
   32:[109] GotoFalseWord(jump=43, if_false=false[108])
   43:[108] VarInt(var[104]) -> 2[108]
   46:[112] ConstInt(val=1) -> 1[112]
   51:[116] AddInt(v1=2[108], v2=1[112]) -> 3[108]
   52:[112] PutInt(var[104], value=3[108])
   55:[108] VarInt(var[104]) -> 3[108]
   58:[112] ConstInt(val=4) -> 4[112]
   63:[116] GeInt(v1=3[108], v2=4[112]) -> false[108]
   64:[109] GotoFalseWord(jump=70, if_false=false[108])
   70:[108] VarInt(var[104]) -> 3[108]
   73:[112] VarVector(var[92]) -> ref(1,1,4)=[10,20][112]
   76:[124] NewRecord(data=ref(1,1,4)[112], parent_tp=17, fld=65535) -> ref(1,9,16)[112]
   81:[124] VarRef(var[112]) -> ref(1,9,16)=false[124]
   84:[136] VarInt(var[108]) -> 3[136]
   87:[140] ConstInt(val=10) -> 10[140]
   92:[144] MulInt(v1=3[136], v2=10[140]) -> 30[136]
   93:[140] SetInt(v1=ref(1,9,16)[124], fld=0, val=30[136])
   96:[124] VarVector(var[92]) -> ref(1,1,4)=[10,20,30][124]
   99:[136] VarRef(var[112]) -> ref(1,9,16)=true[136]
  102:[148] FinishRecord(data=ref(1,1,4)[124], rec=ref(1,9,16)[136], parent_tp=17, fld=65535)
  107:[124] FreeStack(value=0, discard=12)
  111:[112] FreeStack(value=0, discard=4)
  115:[108] GotoWord(jump=27)
   27:[108] VarInt(var[104]) -> 3[108]
   30:[112] ConvBoolFromInt(v1=3[108]) -> true[108]
   31:[109] Not(v1=true[108]) -> false[108]
   32:[109] GotoFalseWord(jump=43, if_false=false[108])
   43:[108] VarInt(var[104]) -> 3[108]
   46:[112] ConstInt(val=1) -> 1[112]
   51:[116] AddInt(v1=3[108], v2=1[112]) -> 4[108]
   52:[112] PutInt(var[104], value=4[108])
   55:[108] VarInt(var[104]) -> 4[108]
   58:[112] ConstInt(val=4) -> 4[112]
   63:[116] GeInt(v1=4[108], v2=4[112]) -> true[108]
   64:[109] GotoFalseWord(jump=70, if_false=true[108])
   67:[108] GotoWord(jump=118)
  118:[108] FreeStack(value=0, discard=4)
  122:[104] ClearText(var[44])
  125:[104] ConstText(_value="") -> ""[104]
  127:[120] AppendText(var[44], v1=""[104])
  130:[104] VarVector(var[92]) -> ref(1,1,4)=[10,20,30][104]
  133:[116] FormatDatabase(var[44], val=ref(1,1,4)[104], db_tp=17, pretty=false)
  139:[104] VarText(var[44]) -> "[10,20,30]"[104]
  142:[120] FreeStack(value=16, discard=28)
  146:[108] AppendText(var[68], v1="[10,20,30]"[92])
  149:[92] VarText(var[68]) -> "[10,20,30]"[92]
  152:[108] ConstText(_value="[10,20,30]") -> "[10,20,30]"[108]
  164:[124] EqText(v1="[10,20,30]"[92], v2="[10,20,30]"[108]) -> true[92]
  165:[93] GotoFalseWord(jump=171, if_false=true[92])
  168:[92] GotoWord(jump=229)
  229:[92] FreeText(var[68])
  232:[92] VarRef(var[8]) -> ref(1,1,0)={vector:[10,20,30]}[92]
  235:[104] FreeRef(v1=ref(1,1,0)[92])
  236:[92] FreeText(var[44])
  239:[92] FreeText(var[20])
  242:[92] Return(ret=4294967295[4], value=0, discard=88)
Finished
