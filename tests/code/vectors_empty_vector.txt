Test code:
pub fn test() {
    test_value = {a = [];
for v in 1..4 { a += [ v * 10 ] };
"{a}"};
    assert(
        test_value == "[10,20,30]",
        "Test failed {test_value} != \"[10,20,30]\""
    );
}

Type 13:main_vector<integer>[8]:
    vector:vector<integer>[4]

Type 14:vector<integer>[4]:Vector(0)

fn test {
  let __work_8 = "";
  let __work_9 = "";
  let test_value = {
    let a = {
      let db_15 = OpDatabase(1i32, 13i32);
      let vec_14 = OpGetField(db_15, 4i32, 14i32);
      OpSetInt(db_15, 4i32, 0i32);
      vec_14;
    };
    {
      let v#index = OpConvIntFromNull();
      loop {
        let v = {
          v#index = if OpNot(OpConvBoolFromInt(v#index)) {1i32} else {OpAddInt(v#index, 1i32)};
          if OpGeInt(v#index, 4i32) {break(0)} else {null};
          v#index;
        };
        {
          {
            let vec_17 = a;
            let elm_16 = OpNewRecord(vec_17, 14i32, 65535i32);
            OpSetInt(elm_16, 0i32, OpMulInt(v, 10i32));
            OpFinishRecord(vec_17, elm_16, 14i32, 65535i32);
          };
        };
      };
    };
    {
      OpClearText(__work_8);
      OpAppendText(__work_8, "");
      OpFormatDatabase(__work_8, a, 14i32, false);
      __work_8;
    };
  };
  if OpEqText(test_value, "[10,20,30]") {null} else {OpGenPanic({
    OpClearText(__work_9);
    OpAppendText(__work_9, "Test failed ");
    OpFormatText(__work_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_9, " != "[10,20,30]"");
    __work_9;
  })};
}

byte-code for empty_vector:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: Text()
 675[52]: ConstText(_value="") -> text(false)
 677[68]: AppendText(var[28], v1: text(false))
 680[52]: Text()
 681[76]: Database(size=1, db_tp=13) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 686[88]: VarRef(var[76]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 689[100]: GetField(v1: reference, fld=4) -> reference type=vector<integer>[4]:Vector(0)[14]
 692[100]: VarRef(var[76]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 695[112]: ConstInt(val=0) -> integer
 700[116]: SetInt(v1: reference, fld=4, val: integer)
 703[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14]
 706[112]: GenFreeStack(value=12, discard=24)
 710[88]: ConvIntFromNull() -> integer
 711[92]: VarInt(var[88]) -> integer
 714[96]: ConvBoolFromInt(v1: integer) -> boolean
 715[93]: Not(v1: boolean) -> boolean
 716[93]: GenGotoFalseWord(jump=727, if_false: boolean)
 719[92]: ConstInt(val=1) -> integer
 724[96]: GenGotoWord(jump=736)
 727[92]: VarInt(var[88]) -> integer
 730[96]: ConstInt(val=1) -> integer
 735[100]: AddInt(v1: integer, v2: integer) -> integer
 736[96]: PutInt(var[88], value: integer)
 739[92]: VarInt(var[88]) -> integer
 742[96]: ConstInt(val=4) -> integer
 747[100]: GeInt(v1: integer, v2: integer) -> boolean
 748[93]: GenGotoFalseWord(jump=754, if_false: boolean)
 751[92]: GenGotoWord(jump=805)
 754[92]: VarInt(var[88]) -> integer
 757[96]: VarVector(var[76]) -> vector type=vector<integer>[4]:Vector(0)[14]
 760[108]: VarVector(var[96]) -> vector type=vector<integer>[4]:Vector(0)[14]
 763[120]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 768[120]: VarRef(var[108]) -> reference type=boolean[1]:Base[4]
 771[132]: VarInt(var[92]) -> integer
 774[136]: ConstInt(val=10) -> integer
 779[140]: MulInt(v1: integer, v2: integer) -> integer
 780[136]: SetInt(v1: reference, fld=0, val: integer)
 783[120]: VarVector(var[96]) -> vector type=vector<integer>[4]:Vector(0)[14]
 786[132]: VarRef(var[108]) -> reference type=boolean[1]:Base[4]
 789[144]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 794[120]: GenFreeStack(value=0, discard=24)
 798[96]: GenFreeStack(value=0, discard=4)
 802[92]: GenGotoWord(jump=711)
 805[92]: GenFreeStack(value=0, discard=4)
 809[88]: ClearText(var[4])
 812[88]: ConstText(_value="") -> text(false)
 814[104]: AppendText(var[4], v1: text(false))
 817[88]: VarVector(var[76]) -> vector type=vector<integer>[4]:Vector(0)[14]
 820[100]: FormatDatabase(var[4], val: reference, db_tp=14, pretty=false)
 826[88]: VarText(var[4]) -> text(false)
 829[104]: GenFreeStack(value=16, discard=12)
 833[92]: AppendText(var[52], v1: text(false))
 836[76]: VarText(var[52]) -> text(false)
 839[92]: ConstText(_value="[10,20,30]") -> text(false)
 851[108]: EqText(v1: text(false), v2: text(false)) -> boolean
 852[77]: GenGotoFalseWord(jump=858, if_false: boolean)
 855[76]: GenGotoWord(jump=916)
 858[76]: ClearText(var[28])
 861[76]: ConstText(_value="Test failed ") -> text(false)
 875[92]: AppendText(var[28], v1: text(false))
 878[76]: VarText(var[52]) -> text(false)
 881[92]: ConstInt(val=0) -> integer
 886[96]: FormatText(var[28], val: text(false), width: integer, dir=-1, token=32)
 891[76]: ConstText(_value=" != "[10,20,30]"") -> text(false)
 909[92]: AppendText(var[28], v1: text(false))
 912[76]: VarText(var[28]) -> text(false)
 915[92]: GenPanic(message: text(false))
 916[76]: GenReturn(ret=0, value=0, discard=76)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] Text()
  675:[56] ConstText(_value="") -> ""[56]
  677:[72] AppendText(var[32], v1=""[56])
  680:[56] Text()
  681:[80] Database(size=1, db_tp=13) -> ref(1,1,0)={}[80]
  686:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  689:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[][92]
  692:[104] VarRef(var[80]) -> ref(1,1,0)={}[104]
  695:[116] ConstInt(val=0) -> 0[116]
  700:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  703:[104] VarVector(var[92]) -> ref(1,1,4)=[][104]
  706:[116] GenFreeStack(value=12, discard=24)
  710:[92] ConvIntFromNull() -> -2147483648[92]
  711:[96] VarInt(var[92]) -> -2147483648[96]
  714:[100] ConvBoolFromInt(v1=-2147483648[96]) -> false[96]
  715:[97] Not(v1=false[96]) -> true[96]
  716:[97] GenGotoFalseWord(jump=727, if_false=true[96])
  719:[96] ConstInt(val=1) -> 1[96]
  724:[100] GenGotoWord(jump=736)
  736:[100] PutInt(var[92], value=1[96])
  739:[96] VarInt(var[92]) -> 1[96]
  742:[100] ConstInt(val=4) -> 4[100]
  747:[104] GeInt(v1=1[96], v2=4[100]) -> false[96]
  748:[97] GenGotoFalseWord(jump=754, if_false=false[96])
  754:[96] VarInt(var[92]) -> 1[96]
  757:[100] VarVector(var[80]) -> ref(1,1,4)=[][100]
  760:[112] VarVector(var[100]) -> ref(1,1,4)=[][112]
  763:[124] NewRecord(data=ref(1,1,4)[112], parent_tp=14, fld=65535) -> ref(1,2,8)[112]
  768:[124] VarRef(var[112]) -> ref(1,2,8)=false[124]
  771:[136] VarInt(var[96]) -> 1[136]
  774:[140] ConstInt(val=10) -> 10[140]
  779:[144] MulInt(v1=1[136], v2=10[140]) -> 10[136]
  780:[140] SetInt(v1=ref(1,2,8)[124], fld=0, val=10[136])
  783:[124] VarVector(var[100]) -> ref(1,1,4)=[10][124]
  786:[136] VarRef(var[112]) -> ref(1,2,8)=true[136]
  789:[148] FinishRecord(data=ref(1,1,4)[124], rec=ref(1,2,8)[136], parent_tp=14, fld=65535)
  794:[124] GenFreeStack(value=0, discard=24)
  798:[100] GenFreeStack(value=0, discard=4)
  802:[96] GenGotoWord(jump=711)
  711:[96] VarInt(var[92]) -> 1[96]
  714:[100] ConvBoolFromInt(v1=1[96]) -> true[96]
  715:[97] Not(v1=true[96]) -> false[96]
  716:[97] GenGotoFalseWord(jump=727, if_false=false[96])
  727:[96] VarInt(var[92]) -> 1[96]
  730:[100] ConstInt(val=1) -> 1[100]
  735:[104] AddInt(v1=1[96], v2=1[100]) -> 2[96]
  736:[100] PutInt(var[92], value=2[96])
  739:[96] VarInt(var[92]) -> 2[96]
  742:[100] ConstInt(val=4) -> 4[100]
  747:[104] GeInt(v1=2[96], v2=4[100]) -> false[96]
  748:[97] GenGotoFalseWord(jump=754, if_false=false[96])
  754:[96] VarInt(var[92]) -> 2[96]
  757:[100] VarVector(var[80]) -> ref(1,1,4)=[10][100]
  760:[112] VarVector(var[100]) -> ref(1,1,4)=[10][112]
  763:[124] NewRecord(data=ref(1,1,4)[112], parent_tp=14, fld=65535) -> ref(1,2,12)[112]
  768:[124] VarRef(var[112]) -> ref(1,2,12)=false[124]
  771:[136] VarInt(var[96]) -> 2[136]
  774:[140] ConstInt(val=10) -> 10[140]
  779:[144] MulInt(v1=2[136], v2=10[140]) -> 20[136]
  780:[140] SetInt(v1=ref(1,2,12)[124], fld=0, val=20[136])
  783:[124] VarVector(var[100]) -> ref(1,1,4)=[10,20][124]
  786:[136] VarRef(var[112]) -> ref(1,2,12)=true[136]
  789:[148] FinishRecord(data=ref(1,1,4)[124], rec=ref(1,2,12)[136], parent_tp=14, fld=65535)
  794:[124] GenFreeStack(value=0, discard=24)
  798:[100] GenFreeStack(value=0, discard=4)
  802:[96] GenGotoWord(jump=711)
  711:[96] VarInt(var[92]) -> 2[96]
  714:[100] ConvBoolFromInt(v1=2[96]) -> true[96]
  715:[97] Not(v1=true[96]) -> false[96]
  716:[97] GenGotoFalseWord(jump=727, if_false=false[96])
  727:[96] VarInt(var[92]) -> 2[96]
  730:[100] ConstInt(val=1) -> 1[100]
  735:[104] AddInt(v1=2[96], v2=1[100]) -> 3[96]
  736:[100] PutInt(var[92], value=3[96])
  739:[96] VarInt(var[92]) -> 3[96]
  742:[100] ConstInt(val=4) -> 4[100]
  747:[104] GeInt(v1=3[96], v2=4[100]) -> false[96]
  748:[97] GenGotoFalseWord(jump=754, if_false=false[96])
  754:[96] VarInt(var[92]) -> 3[96]
  757:[100] VarVector(var[80]) -> ref(1,1,4)=[10,20][100]
  760:[112] VarVector(var[100]) -> ref(1,1,4)=[10,20][112]
  763:[124] NewRecord(data=ref(1,1,4)[112], parent_tp=14, fld=65535) -> ref(1,2,16)[112]
  768:[124] VarRef(var[112]) -> ref(1,2,16)=false[124]
  771:[136] VarInt(var[96]) -> 3[136]
  774:[140] ConstInt(val=10) -> 10[140]
  779:[144] MulInt(v1=3[136], v2=10[140]) -> 30[136]
  780:[140] SetInt(v1=ref(1,2,16)[124], fld=0, val=30[136])
  783:[124] VarVector(var[100]) -> ref(1,1,4)=[10,20,30][124]
  786:[136] VarRef(var[112]) -> ref(1,2,16)=true[136]
  789:[148] FinishRecord(data=ref(1,1,4)[124], rec=ref(1,2,16)[136], parent_tp=14, fld=65535)
  794:[124] GenFreeStack(value=0, discard=24)
  798:[100] GenFreeStack(value=0, discard=4)
  802:[96] GenGotoWord(jump=711)
  711:[96] VarInt(var[92]) -> 3[96]
  714:[100] ConvBoolFromInt(v1=3[96]) -> true[96]
  715:[97] Not(v1=true[96]) -> false[96]
  716:[97] GenGotoFalseWord(jump=727, if_false=false[96])
  727:[96] VarInt(var[92]) -> 3[96]
  730:[100] ConstInt(val=1) -> 1[100]
  735:[104] AddInt(v1=3[96], v2=1[100]) -> 4[96]
  736:[100] PutInt(var[92], value=4[96])
  739:[96] VarInt(var[92]) -> 4[96]
  742:[100] ConstInt(val=4) -> 4[100]
  747:[104] GeInt(v1=4[96], v2=4[100]) -> true[96]
  748:[97] GenGotoFalseWord(jump=754, if_false=true[96])
  751:[96] GenGotoWord(jump=805)
  805:[96] GenFreeStack(value=0, discard=4)
  809:[92] ClearText(var[8])
  812:[92] ConstText(_value="") -> ""[92]
  814:[108] AppendText(var[8], v1=""[92])
  817:[92] VarVector(var[80]) -> ref(1,1,4)=[10,20,30][92]
  820:[104] FormatDatabase(var[8], val=ref(1,1,4)[92], db_tp=14, pretty=false)
  826:[92] VarText(var[8]) -> "[10,20,30]"[92]
  829:[108] GenFreeStack(value=16, discard=12)
  833:[96] AppendText(var[56], v1="[10,20,30]"[80])
  836:[80] VarText(var[56]) -> "[10,20,30]"[80]
  839:[96] ConstText(_value="[10,20,30]") -> "[10,20,30]"[96]
  851:[112] EqText(v1="[10,20,30]"[80], v2="[10,20,30]"[96]) -> true[80]
  852:[81] GenGotoFalseWord(jump=858, if_false=true[80])
  855:[80] GenGotoWord(jump=916)
  916:[80] GenReturn(ret=4294967295[4], value=0, discard=76)
Finished
