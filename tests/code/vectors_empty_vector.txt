Test code:
pub fn test() {
    test_value = {a = [];
for v in 1..4 { a += [ v * 10 ] };
"{a}"};
    assert(
        test_value == "[10,20,30]",
        "Test failed {test_value} != \"[10,20,30]\""
    );
}

Type 13:main_vector<integer>[8]:
    vector:vector<integer>[4]

Type 14:vector<integer>[4]:Vector(0)

fn test {
  let test_value = {
    let a = {
      let db_17 = OpDatabase(1i32, 13i32);
      let vec_16 = OpGetField(db_17, 4i32, 14i32);
      OpSetInt(db_17, 4i32, 0i32);
      vec_16;
    };
    {
      let v#index = OpConvIntFromNull();
      loop {
        let v = {
          v#index = if OpNot(OpConvBoolFromInt(v#index)) {1i32} else {OpAddInt(v#index, 1i32)};
          if OpGeInt(v#index, 4i32) {break(0)} else {null};
          v#index;
        };
        {
          {
            let vec_19 = a;
            let elm_18 = OpNewRecord(vec_19, 14i32, 65535i32);
            OpSetInt(elm_18, 0i32, OpMulInt(v, 10i32));
            OpFinishRecord(vec_19, elm_18, 14i32, 65535i32);
          };
        };
      };
    };
    {
      let append_20 = "";
      OpFormatDatabase(append_20, a, 14i32, false);
      append_20;
    };
  };
  if OpEqText(test_value, "[10,20,30]") {null} else {OpGenPanic({
    let append_21 = "Test failed ";
    OpFormatText(append_21, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_21, " != "[10,20,30]"");
    append_21;
  })};
}

byte-code for empty_vector:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Database(size=1, db_tp=13) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 674[40]: VarRef(var[28]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 677[52]: GetField(v1: reference, fld=4) -> reference type=vector<integer>[4]:Vector(0)[14]
 680[52]: VarRef(var[28]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 683[64]: ConstInt(val=0) -> integer
 688[68]: SetInt(v1: reference, fld=4, val: integer)
 691[52]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14]
 694[64]: GenFreeStack(value=12, discard=24)
 698[40]: ConvIntFromNull() -> integer
 699[44]: VarInt(var[40]) -> integer
 702[48]: ConvBoolFromInt(v1: integer) -> boolean
 703[45]: Not(v1: boolean) -> boolean
 704[45]: GenGotoFalseWord(jump=715, if_false: boolean)
 707[44]: ConstInt(val=1) -> integer
 712[48]: GenGotoWord(jump=724)
 715[44]: VarInt(var[40]) -> integer
 718[48]: ConstInt(val=1) -> integer
 723[52]: AddInt(v1: integer, v2: integer) -> integer
 724[48]: PutInt(var[40], value: integer)
 727[44]: VarInt(var[40]) -> integer
 730[48]: ConstInt(val=4) -> integer
 735[52]: GeInt(v1: integer, v2: integer) -> boolean
 736[45]: GenGotoFalseWord(jump=742, if_false: boolean)
 739[44]: GenGotoWord(jump=793)
 742[44]: VarInt(var[40]) -> integer
 745[48]: VarVector(var[28]) -> vector type=vector<integer>[4]:Vector(0)[14]
 748[60]: VarVector(var[48]) -> vector type=vector<integer>[4]:Vector(0)[14]
 751[72]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 756[72]: VarRef(var[60]) -> reference type=boolean[1]:Base[4]
 759[84]: VarInt(var[44]) -> integer
 762[88]: ConstInt(val=10) -> integer
 767[92]: MulInt(v1: integer, v2: integer) -> integer
 768[88]: SetInt(v1: reference, fld=0, val: integer)
 771[72]: VarVector(var[48]) -> vector type=vector<integer>[4]:Vector(0)[14]
 774[84]: VarRef(var[60]) -> reference type=boolean[1]:Base[4]
 777[96]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 782[72]: GenFreeStack(value=0, discard=24)
 786[48]: GenFreeStack(value=0, discard=4)
 790[44]: GenGotoWord(jump=699)
 793[44]: GenFreeStack(value=0, discard=4)
 797[40]: Text()
 798[64]: ConstText(_value="") -> text
 800[80]: AppendText(var[40], v1: text)
 803[64]: VarVector(var[28]) -> vector type=vector<integer>[4]:Vector(0)[14]
 806[76]: FormatDatabase(var[40], val: reference, db_tp=14, pretty=false)
 812[64]: VarText(var[40]) -> text
 815[80]: GenFreeStack(value=16, discard=24)
 819[56]: GenFreeStack(value=16, discard=12)
 823[44]: AppendText(var[4], v1: text)
 826[28]: VarText(var[4]) -> text
 829[44]: ConstText(_value="[10,20,30]") -> text
 841[60]: EqText(v1: text, v2: text) -> boolean
 842[29]: GenGotoFalseWord(jump=848, if_false: boolean)
 845[28]: GenGotoWord(jump=908)
 848[28]: Text()
 849[52]: ConstText(_value="Test failed ") -> text
 863[68]: AppendText(var[28], v1: text)
 866[52]: VarText(var[4]) -> text
 869[68]: ConstInt(val=0) -> integer
 874[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 879[52]: ConstText(_value=" != "[10,20,30]"") -> text
 897[68]: AppendText(var[28], v1: text)
 900[52]: VarText(var[28]) -> text
 903[68]: GenFreeStack(value=16, discard=24)
 907[44]: GenPanic(message: text)
 908[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Database(size=1, db_tp=13) -> ref(1,1,0)={}[28]
  674:[40] VarRef(var[28]) -> ref(1,1,0)={}[40]
  677:[52] GetField(v1=ref(1,1,0)[40], fld=4) -> ref(1,1,4)=[][40]
  680:[52] VarRef(var[28]) -> ref(1,1,0)={}[52]
  683:[64] ConstInt(val=0) -> 0[64]
  688:[68] SetInt(v1=ref(1,1,0)[52], fld=4, val=0[64])
  691:[52] VarVector(var[40]) -> ref(1,1,4)=[][52]
  694:[64] GenFreeStack(value=12, discard=24)
  698:[40] ConvIntFromNull() -> -2147483648[40]
  699:[44] VarInt(var[40]) -> -2147483648[44]
  702:[48] ConvBoolFromInt(v1=-2147483648[44]) -> false[44]
  703:[45] Not(v1=false[44]) -> true[44]
  704:[45] GenGotoFalseWord(jump=715, if_false=true[44])
  707:[44] ConstInt(val=1) -> 1[44]
  712:[48] GenGotoWord(jump=724)
  724:[48] PutInt(var[40], value=1[44])
  727:[44] VarInt(var[40]) -> 1[44]
  730:[48] ConstInt(val=4) -> 4[48]
  735:[52] GeInt(v1=1[44], v2=4[48]) -> false[44]
  736:[45] GenGotoFalseWord(jump=742, if_false=false[44])
  742:[44] VarInt(var[40]) -> 1[44]
  745:[48] VarVector(var[28]) -> ref(1,1,4)=[][48]
  748:[60] VarVector(var[48]) -> ref(1,1,4)=[][60]
  751:[72] NewRecord(data=ref(1,1,4)[60], parent_tp=14, fld=65535) -> ref(1,2,8)[60]
  756:[72] VarRef(var[60]) -> ref(1,2,8)=false[72]
  759:[84] VarInt(var[44]) -> 1[84]
  762:[88] ConstInt(val=10) -> 10[88]
  767:[92] MulInt(v1=1[84], v2=10[88]) -> 10[84]
  768:[88] SetInt(v1=ref(1,2,8)[72], fld=0, val=10[84])
  771:[72] VarVector(var[48]) -> ref(1,1,4)=[10][72]
  774:[84] VarRef(var[60]) -> ref(1,2,8)=true[84]
  777:[96] FinishRecord(data=ref(1,1,4)[72], rec=ref(1,2,8)[84], parent_tp=14, fld=65535)
  782:[72] GenFreeStack(value=0, discard=24)
  786:[48] GenFreeStack(value=0, discard=4)
  790:[44] GenGotoWord(jump=699)
  699:[44] VarInt(var[40]) -> 1[44]
  702:[48] ConvBoolFromInt(v1=1[44]) -> true[44]
  703:[45] Not(v1=true[44]) -> false[44]
  704:[45] GenGotoFalseWord(jump=715, if_false=false[44])
  715:[44] VarInt(var[40]) -> 1[44]
  718:[48] ConstInt(val=1) -> 1[48]
  723:[52] AddInt(v1=1[44], v2=1[48]) -> 2[44]
  724:[48] PutInt(var[40], value=2[44])
  727:[44] VarInt(var[40]) -> 2[44]
  730:[48] ConstInt(val=4) -> 4[48]
  735:[52] GeInt(v1=2[44], v2=4[48]) -> false[44]
  736:[45] GenGotoFalseWord(jump=742, if_false=false[44])
  742:[44] VarInt(var[40]) -> 2[44]
  745:[48] VarVector(var[28]) -> ref(1,1,4)=[10][48]
  748:[60] VarVector(var[48]) -> ref(1,1,4)=[10][60]
  751:[72] NewRecord(data=ref(1,1,4)[60], parent_tp=14, fld=65535) -> ref(1,2,12)[60]
  756:[72] VarRef(var[60]) -> ref(1,2,12)=false[72]
  759:[84] VarInt(var[44]) -> 2[84]
  762:[88] ConstInt(val=10) -> 10[88]
  767:[92] MulInt(v1=2[84], v2=10[88]) -> 20[84]
  768:[88] SetInt(v1=ref(1,2,12)[72], fld=0, val=20[84])
  771:[72] VarVector(var[48]) -> ref(1,1,4)=[10,20][72]
  774:[84] VarRef(var[60]) -> ref(1,2,12)=true[84]
  777:[96] FinishRecord(data=ref(1,1,4)[72], rec=ref(1,2,12)[84], parent_tp=14, fld=65535)
  782:[72] GenFreeStack(value=0, discard=24)
  786:[48] GenFreeStack(value=0, discard=4)
  790:[44] GenGotoWord(jump=699)
  699:[44] VarInt(var[40]) -> 2[44]
  702:[48] ConvBoolFromInt(v1=2[44]) -> true[44]
  703:[45] Not(v1=true[44]) -> false[44]
  704:[45] GenGotoFalseWord(jump=715, if_false=false[44])
  715:[44] VarInt(var[40]) -> 2[44]
  718:[48] ConstInt(val=1) -> 1[48]
  723:[52] AddInt(v1=2[44], v2=1[48]) -> 3[44]
  724:[48] PutInt(var[40], value=3[44])
  727:[44] VarInt(var[40]) -> 3[44]
  730:[48] ConstInt(val=4) -> 4[48]
  735:[52] GeInt(v1=3[44], v2=4[48]) -> false[44]
  736:[45] GenGotoFalseWord(jump=742, if_false=false[44])
  742:[44] VarInt(var[40]) -> 3[44]
  745:[48] VarVector(var[28]) -> ref(1,1,4)=[10,20][48]
  748:[60] VarVector(var[48]) -> ref(1,1,4)=[10,20][60]
  751:[72] NewRecord(data=ref(1,1,4)[60], parent_tp=14, fld=65535) -> ref(1,2,16)[60]
  756:[72] VarRef(var[60]) -> ref(1,2,16)=false[72]
  759:[84] VarInt(var[44]) -> 3[84]
  762:[88] ConstInt(val=10) -> 10[88]
  767:[92] MulInt(v1=3[84], v2=10[88]) -> 30[84]
  768:[88] SetInt(v1=ref(1,2,16)[72], fld=0, val=30[84])
  771:[72] VarVector(var[48]) -> ref(1,1,4)=[10,20,30][72]
  774:[84] VarRef(var[60]) -> ref(1,2,16)=true[84]
  777:[96] FinishRecord(data=ref(1,1,4)[72], rec=ref(1,2,16)[84], parent_tp=14, fld=65535)
  782:[72] GenFreeStack(value=0, discard=24)
  786:[48] GenFreeStack(value=0, discard=4)
  790:[44] GenGotoWord(jump=699)
  699:[44] VarInt(var[40]) -> 3[44]
  702:[48] ConvBoolFromInt(v1=3[44]) -> true[44]
  703:[45] Not(v1=true[44]) -> false[44]
  704:[45] GenGotoFalseWord(jump=715, if_false=false[44])
  715:[44] VarInt(var[40]) -> 3[44]
  718:[48] ConstInt(val=1) -> 1[48]
  723:[52] AddInt(v1=3[44], v2=1[48]) -> 4[44]
  724:[48] PutInt(var[40], value=4[44])
  727:[44] VarInt(var[40]) -> 4[44]
  730:[48] ConstInt(val=4) -> 4[48]
  735:[52] GeInt(v1=4[44], v2=4[48]) -> true[44]
  736:[45] GenGotoFalseWord(jump=742, if_false=true[44])
  739:[44] GenGotoWord(jump=793)
  793:[44] GenFreeStack(value=0, discard=4)
  797:[40] Text()
  798:[64] ConstText(_value="") -> ""[64]
  800:[80] AppendText(var[40], v1=""[64])
  803:[64] VarVector(var[28]) -> ref(1,1,4)=[10,20,30][64]
  806:[76] FormatDatabase(var[40], val=ref(1,1,4)[64], db_tp=14, pretty=false)
  812:[64] VarText(var[40]) -> "[10,20,30]"[64]
  815:[80] GenFreeStack(value=16, discard=24)
  819:[56] GenFreeStack(value=16, discard=12)
  823:[44] AppendText(var[4], v1="[10,20,30]"[28])
  826:[28] VarText(var[4]) -> "[10,20,30]"[28]
  829:[44] ConstText(_value="[10,20,30]") -> "[10,20,30]"[44]
  841:[60] EqText(v1="[10,20,30]"[28], v2="[10,20,30]"[44]) -> true[28]
  842:[29] GenGotoFalseWord(jump=848, if_false=true[28])
  845:[28] GenGotoWord(jump=908)
  908:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
