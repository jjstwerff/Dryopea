pub fn test() {
    test_value = {"1{true:^7}2"};
    assert(
        test_value == "1 true  2",
        "Test failed {test_value} != \"1 true  2\""
    );
}
fn test {#1 block
  let __work_2 = "";
  let __work_1 = "";
  let test_value = {#2 block
    {#3 formatting string
      OpClearText(__work_1);
      OpAppendText(__work_1, "1");
      OpFormatBool(__work_1, true, 7i32, 0i32, 32i32);
      OpAppendText(__work_1, "2");
      __work_1;
    }#3;
  }#2;
  if OpEqText(test_value, "1 true  2") null else OpGenPanic({#4 formatting string
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1 true  2"");
    __work_2;
  }#4);
}#1

byte-code for format_boolean:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: Text()
 671[76]: ClearText(var[28])
 674[76]: ConstText(_value="1") -> text(false, [])
 677[92]: AppendText(var[28], v1: text(false, []))
 680[76]: ConstTrue() -> boolean
 681[77]: ConstInt(val=7) -> integer
 686[81]: FormatBool(var[28], val: boolean, width: integer, dir=0, token=32)
 691[76]: ConstText(_value="2") -> text(false, [])
 694[92]: AppendText(var[28], v1: text(false, []))
 697[76]: VarText(var[28]) -> text(false, [])
 700[92]: AppendText(var[52], v1: text(false, []))
 703[76]: VarText(var[52]) -> text(false, [])
 706[92]: ConstText(_value="1 true  2") -> text(false, [])
 717[108]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 718[77]: GenGotoFalseWord(jump=724, if_false: boolean)
 721[76]: GenGotoWord(jump=781)
 724[76]: ClearText(var[4])
 727[76]: ConstText(_value="Test failed ") -> text(false, [])
 741[92]: AppendText(var[4], v1: text(false, []))
 744[76]: VarText(var[52]) -> text(false, [])
 747[92]: ConstInt(val=0) -> integer
 752[96]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 757[76]: ConstText(_value=" != "1 true  2"") -> text(false, [])
 774[92]: AppendText(var[4], v1: text(false, []))
 777[76]: VarText(var[4]) -> text(false, [])
 780[92]: GenPanic(message: text(false, []))
 781[76]: GenReturn(ret=0, value=0, discard=76)

Execute test:
  668:[8] Text()
  669:[32] Text()
  670:[56] Text()
  671:[80] ClearText(var[32])
  674:[80] ConstText(_value="1") -> "1"[80]
  677:[96] AppendText(var[32], v1="1"[80])
  680:[80] ConstTrue() -> true[80]
  681:[81] ConstInt(val=7) -> 7[81]
  686:[85] FormatBool(var[32], val=true[80], width=7[81], dir=0, token=32)
  691:[80] ConstText(_value="2") -> "2"[80]
  694:[96] AppendText(var[32], v1="2"[80])
  697:[80] VarText(var[32]) -> "1 true  2"[80]
  700:[96] AppendText(var[56], v1="1 true  2"[80])
  703:[80] VarText(var[56]) -> "1 true  2"[80]
  706:[96] ConstText(_value="1 true  2") -> "1 true  2"[96]
  717:[112] EqText(v1="1 true  2"[80], v2="1 true  2"[96]) -> true[80]
  718:[81] GenGotoFalseWord(jump=724, if_false=true[80])
  721:[80] GenGotoWord(jump=781)
  781:[80] GenReturn(ret=4294967295[4], value=0, discard=76)
Finished
