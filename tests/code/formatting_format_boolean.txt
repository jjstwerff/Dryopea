pub fn test() {
    test_value = {"1{true:^7}2"};
    assert(
        test_value == "1 true  2",
        "Test failed {test_value} != \"1 true  2\""
    );
}
fn test() {#block_1:void
  __work_2:text(1) = "";
  __work_1:text(1) = "";
  test_value:text(1) = {#block_2:text
    {#Formatted string_3:text
      __work_1:text(1) = "1";
      OpFormatBool(__work_1, true, 7i32, 0i32, 32i32);
      OpAppendText(__work_1, "2");
      __work_1;
    }#Formatted string_3:text;
  }#block_2:text;
  if OpEqText(test_value, "1 true  2") null else OpPanic({#Formatted string_4:text
    __work_2:text(1) = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1 true  2"");
    __work_2;
  }#Formatted string_4:text);
  OpFreeText(test_value);
  OpFreeText(__work_1);
  OpFreeText(__work_2);
}#block_1:void

byte-code for format_boolean:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: Text() var=test_value[56]:text
   3[80]: ClearText(var[32]) var=__work_1[32]:text
   6[80]: ConstText(_value="1") -> text
   9[96]: AppendText(var[32], v1: text)
  12[80]: ConstTrue() -> boolean
  13[81]: ConstInt(val=7) -> integer
  18[85]: FormatBool(var[32], val: boolean, width: integer, dir=0, token=32)
  23[80]: ConstText(_value="2") -> text
  26[96]: AppendText(var[32], v1: text)
  29[80]: VarText(var[32]) -> text var=__work_1[32]:text
  32[96]: AppendText(var[56], v1: text)
  35[80]: VarText(var[56]) -> text var=test_value[56]:text
  38[96]: ConstText(_value="1 true  2") -> text
  49[112]: EqText(v1: text, v2: text) -> boolean
  50[81]: GotoFalseWord(jump=56, if_false: boolean)
  53[80]: GotoWord(jump=113)
  56[80]: ClearText(var[8]) var=__work_2[8]:text
  59[80]: ConstText(_value="Test failed ") -> text
  73[96]: AppendText(var[8], v1: text)
  76[80]: VarText(var[56]) -> text var=test_value[56]:text
  79[96]: ConstInt(val=0) -> integer
  84[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  89[80]: ConstText(_value=" != "1 true  2"") -> text
 106[96]: AppendText(var[8], v1: text)
 109[80]: VarText(var[8]) -> text var=__work_2[8]:text
 112[96]: Panic(message: text)
 113[80]: FreeText(var[56])
 116[80]: FreeText(var[32])
 119[80]: FreeText(var[8])
 122[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value="1") -> "1"[80]
    9:[96] AppendText(var[32], v1="1"[80])
   12:[80] ConstTrue() -> true[80]
   13:[81] ConstInt(val=7) -> 7[81]
   18:[85] FormatBool(var[32], val=true[80], width=7[81], dir=0, token=32)
   23:[80] ConstText(_value="2") -> "2"[80]
   26:[96] AppendText(var[32], v1="2"[80])
   29:[80] VarText(var[32]) -> "1 true  2"[80]
   32:[96] AppendText(var[56], v1="1 true  2"[80])
   35:[80] VarText(var[56]) -> "1 true  2"[80]
   38:[96] ConstText(_value="1 true  2") -> "1 true  2"[96]
   49:[112] EqText(v1="1 true  2"[80], v2="1 true  2"[96]) -> true[80]
   50:[81] GotoFalseWord(jump=1224, if_false=true[80])
   53:[80] GotoWord(jump=1281)
  113:[80] FreeText(var[56])
  116:[80] FreeText(var[32])
  119:[80] FreeText(var[8])
  122:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
