Test code:
pub fn test() {
    test_value = {round(PI * 1000.0)};
    assert(
        test_value == 3142,
        "Test failed {test_value} != 3142"
    );
}

fn test {
  let test_value = {
    _tp_float_round(OpMulFloat(OpMathPiFloat(), 1000f64));
  };
  if OpEqFloat(test_value, OpConvFloatFromInt(3142i32)) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatFloat(append_7, test_value, 0i32, 0i32);
    OpAppendText(append_7, " != 3142");
    append_7;
  })};
}

byte-code for constants:test()
 664[0]: return-address
 664[4]: MathPiFloat() -> float
 665[12]: ConstFloat(val=1000) -> float
 674[20]: MulFloat(v1: float, v2: float) -> float
 675[12]: GenCall(size=0, to=272)
 682[12]: VarFloat(var[4]) -> float
 685[20]: ConstInt(val=3142) -> integer
 690[24]: ConvFloatFromInt(v1: integer) -> float
 691[28]: EqFloat(v1: float, v2: float) -> boolean
 692[13]: GenGotoFalseWord(jump=698, if_false: boolean)
 695[12]: GenGotoWord(jump=753)
 698[12]: Text()
 699[36]: ConstText(_value="Test failed ") -> text
 713[52]: AppendText(var[12], v1: text)
 716[36]: VarFloat(var[4]) -> float
 719[44]: ConstInt(val=0) -> integer
 724[48]: ConstInt(val=0) -> integer
 729[52]: FormatFloat(var[12], val: float, width: integer, precision: integer)
 732[36]: ConstText(_value=" != 3142") -> text
 742[52]: AppendText(var[12], v1: text)
 745[36]: VarText(var[12]) -> text
 748[52]: GenFreeStack(value=16, discard=24)
 752[28]: GenPanic(message: text)
 753[12]: GenReturn(ret=0, value=0, discard=12)

Execute test:
  664:[4] MathPiFloat() -> 3.141592653589793[4]
  665:[12] ConstFloat(val=1000) -> 1000[12]
  674:[20] MulFloat(v1=3.141592653589793[4], v2=1000[12]) -> 3141.592653589793[4]
  675:[12] GenCall(size=0, to=272)
  272:[16] VarFloat(var[4]) -> 3141.592653589793[16]
  275:[24] MathRoundFloat(v1=3141.592653589793[16]) -> 3142[16]
  276:[24] GenReturn(ret=682[12], value=8, discard=20)
  682:[12] VarFloat(var[4]) -> 3142[12]
  685:[20] ConstInt(val=3142) -> 3142[20]
  690:[24] ConvFloatFromInt(v1=3142[20]) -> 3142[20]
  691:[28] EqFloat(v1=3142[12], v2=3142[20]) -> true[12]
  692:[13] GenGotoFalseWord(jump=698, if_false=true[12])
  695:[12] GenGotoWord(jump=753)
  753:[12] GenReturn(ret=4294967295[0], value=0, discard=12)
Finished
