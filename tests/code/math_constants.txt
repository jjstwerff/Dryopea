pub fn test() {
    test_value = {round(PI * 1000.0)};
    assert(
        test_value == 3142,
        "Test failed {test_value} != 3142"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_round(OpMulFloat(OpMathPiFloat(), 1000f64));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(3142i32)) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 3142");
    __work_1;
  }#3:text);
}#1

byte-code for constants:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: MathPiFloat() -> float var=test_value[28]:float in 1
   2[36]: ConstFloat(val=1000) -> float
  11[44]: MulFloat(v1: float, v2: float) -> float
  12[36]: Call(size=0, to=272)
  19[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
  22[44]: ConstInt(val=3142) -> integer
  27[48]: ConvFloatFromInt(v1: integer) -> float
  28[52]: EqFloat(v1: float, v2: float) -> boolean
  29[37]: GotoFalseWord(jump=35, if_false: boolean)
  32[36]: GotoWord(jump=88)
  35[36]: ClearText(var[4]) var=__work_1[4]:text in 1
  38[36]: ConstText(_value="Test failed ") -> text
  52[52]: AppendText(var[4], v1: text)
  55[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
  58[44]: ConstInt(val=0) -> integer
  63[48]: ConstInt(val=0) -> integer
  68[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
  71[36]: ConstText(_value=" != 3142") -> text
  81[52]: AppendText(var[4], v1: text)
  84[36]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  87[52]: Panic(message: text)
  88[36]: FreeText(var[4])
  91[36]: Return(ret=0, value=0, discard=36)

