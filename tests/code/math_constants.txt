pub fn test() {
    test_value = {round(PI * 1000.0)};
    assert(
        test_value == 3142,
        "Test failed {test_value} != 3142"
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    _tp_float_round(OpMulFloat(OpMathPiFloat(), 1000f64));
  }#2;
  if OpEqFloat(test_value, OpConvFloatFromInt(3142i32)) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 3142");
    __work_1;
  }#3);
}#1

byte-code for constants:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: MathPiFloat() -> float
 670[36]: ConstFloat(val=1000) -> float
 679[44]: MulFloat(v1: float, v2: float) -> float
 680[36]: GenCall(size=0, to=272)
 687[36]: VarFloat(var[28]) -> float
 690[44]: ConstInt(val=3142) -> integer
 695[48]: ConvFloatFromInt(v1: integer) -> float
 696[52]: EqFloat(v1: float, v2: float) -> boolean
 697[37]: GenGotoFalseWord(jump=703, if_false: boolean)
 700[36]: GenGotoWord(jump=756)
 703[36]: ClearText(var[4])
 706[36]: ConstText(_value="Test failed ") -> text(false, [])
 720[52]: AppendText(var[4], v1: text(false, []))
 723[36]: VarFloat(var[28]) -> float
 726[44]: ConstInt(val=0) -> integer
 731[48]: ConstInt(val=0) -> integer
 736[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 739[36]: ConstText(_value=" != 3142") -> text(false, [])
 749[52]: AppendText(var[4], v1: text(false, []))
 752[36]: VarText(var[4]) -> text(false, [])
 755[52]: GenPanic(message: text(false, []))
 756[36]: GenReturn(ret=0, value=0, discard=36)

Execute test:
  668:[8] Text()
  669:[32] MathPiFloat() -> 3.141592653589793[32]
  670:[40] ConstFloat(val=1000) -> 1000[40]
  679:[48] MulFloat(v1=3.141592653589793[32], v2=1000[40]) -> 3141.592653589793[32]
  680:[40] GenCall(size=0, to=272)
  272:[44] VarFloat(var[32]) -> 3141.592653589793[44]
  275:[52] MathRoundFloat(v1=3141.592653589793[44]) -> 3142[44]
  276:[52] GenReturn(ret=687[40], value=8, discard=20)
  687:[40] VarFloat(var[32]) -> 3142[40]
  690:[48] ConstInt(val=3142) -> 3142[48]
  695:[52] ConvFloatFromInt(v1=3142[48]) -> 3142[48]
  696:[56] EqFloat(v1=3142[40], v2=3142[48]) -> true[40]
  697:[41] GenGotoFalseWord(jump=703, if_false=true[40])
  700:[40] GenGotoWord(jump=756)
  756:[40] GenReturn(ret=4294967295[4], value=0, discard=36)
Finished
