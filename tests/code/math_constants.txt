pub fn test() {
    test_value = {round(PI * 1000.0)};
    assert(
        test_value == 3142,
        "Test failed {test_value} != 3142"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_round(OpMulFloat(OpMathPiFloat(), 1000f64));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(3142i32)) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 3142");
    __work_1;
  }#3:text);
}#1

byte-code for constants:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: MathPiFloat() -> float
 693[36]: ConstFloat(val=1000) -> float
 702[44]: MulFloat(v1: float, v2: float) -> float
 703[36]: Call(size=0, to=272)
 710[36]: VarFloat(var[28]) -> float
 713[44]: ConstInt(val=3142) -> integer
 718[48]: ConvFloatFromInt(v1: integer) -> float
 719[52]: EqFloat(v1: float, v2: float) -> boolean
 720[37]: GotoFalseWord(jump=726, if_false: boolean)
 723[36]: GotoWord(jump=779)
 726[36]: ClearText(var[4])
 729[36]: ConstText(_value="Test failed ") -> text
 743[52]: AppendText(var[4], v1: text)
 746[36]: VarFloat(var[28]) -> float
 749[44]: ConstInt(val=0) -> integer
 754[48]: ConstInt(val=0) -> integer
 759[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 762[36]: ConstText(_value=" != 3142") -> text
 772[52]: AppendText(var[4], v1: text)
 775[36]: VarText(var[4]) -> text
 778[52]: Panic(message: text)
 779[36]: FreeText(var[4])
 782[36]: Return(ret=0, value=0, discard=36)

Execute test:
  691:[8] Text()
  692:[32] MathPiFloat() -> 3.141592653589793[32]
  693:[40] ConstFloat(val=1000) -> 1000[40]
  702:[48] MulFloat(v1=3.141592653589793[32], v2=1000[40]) -> 3141.592653589793[32]
  703:[40] Call(size=0, to=272)
  272:[44] VarFloat(var[32]) -> 3141.592653589793[44]
  275:[52] MathRoundFloat(v1=3141.592653589793[44]) -> 3142[44]
  276:[52] Return(ret=710[40], value=8, discard=20) -> 3142[32]
  710:[40] VarFloat(var[32]) -> 3142[40]
  713:[48] ConstInt(val=3142) -> 3142[48]
  718:[52] ConvFloatFromInt(v1=3142[48]) -> 3142[48]
  719:[56] EqFloat(v1=3142[40], v2=3142[48]) -> true[40]
  720:[41] GotoFalseWord(jump=726, if_false=true[40])
  723:[40] GotoWord(jump=779)
  779:[40] FreeText(var[8])
  782:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
