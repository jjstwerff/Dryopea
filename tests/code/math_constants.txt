pub fn test() {
    test_value = {round(PI * 1000.0)};
    assert(
        test_value == 3142,
        "Test failed {test_value} != 3142"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_round(OpMulFloat(OpMathPiFloat(), 1000f64));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(3142i32)) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 3142");
    __work_1;
  }#3:text);
}#1

byte-code for constants:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: MathPiFloat() -> float var=test_value[28]:float in 1
 657[36]: ConstFloat(val=1000) -> float
 666[44]: MulFloat(v1: float, v2: float) -> float
 667[36]: Call(size=0, to=272)
 674[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
 677[44]: ConstInt(val=3142) -> integer
 682[48]: ConvFloatFromInt(v1: integer) -> float
 683[52]: EqFloat(v1: float, v2: float) -> boolean
 684[37]: GotoFalseWord(jump=690, if_false: boolean)
 687[36]: GotoWord(jump=743)
 690[36]: ClearText(var[4]) var=__work_1[4]:text in 1
 693[36]: ConstText(_value="Test failed ") -> text
 707[52]: AppendText(var[4], v1: text)
 710[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
 713[44]: ConstInt(val=0) -> integer
 718[48]: ConstInt(val=0) -> integer
 723[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 726[36]: ConstText(_value=" != 3142") -> text
 736[52]: AppendText(var[4], v1: text)
 739[36]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 742[52]: Panic(message: text)
 743[36]: FreeText(var[4])
 746[36]: Return(ret=0, value=0, discard=36)

Execute test:
  655:[8] Text()
  656:[32] MathPiFloat() -> 3.141592653589793[32]
  657:[40] ConstFloat(val=1000) -> 1000[40]
  666:[48] MulFloat(v1=3.141592653589793[32], v2=1000[40]) -> 3141.592653589793[32]
  667:[40] Call(size=0, to=272)
  272:[44] VarFloat(var[32]) -> 3141.592653589793[44]
  275:[52] MathRoundFloat(v1=3141.592653589793[44]) -> 3142[44]
  276:[52] Return(ret=674[40], value=8, discard=20) -> 3142[32]
  674:[40] VarFloat(var[32]) -> 3142[40]
  677:[48] ConstInt(val=3142) -> 3142[48]
  682:[52] ConvFloatFromInt(v1=3142[48]) -> 3142[48]
  683:[56] EqFloat(v1=3142[40], v2=3142[48]) -> true[40]
  684:[41] GotoFalseWord(jump=690, if_false=true[40])
  687:[40] GotoWord(jump=743)
  743:[40] FreeText(var[8])
  746:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
