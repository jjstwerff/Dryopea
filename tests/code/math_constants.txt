pub fn test() {
    test_value = {round(PI * 1000.0)};
    assert(
        test_value == 3142,
        "Test failed {test_value} != 3142"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_round(OpMulFloat(OpMathPiFloat(), 1000f64));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(3142i32)) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 3142");
    __work_1;
  }#3:text);
}#1

byte-code for constants:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: MathPiFloat() -> float
 684[36]: ConstFloat(val=1000) -> float
 693[44]: MulFloat(v1: float, v2: float) -> float
 694[36]: Call(size=0, to=272)
 701[36]: VarFloat(var[28]) -> float
 704[44]: ConstInt(val=3142) -> integer
 709[48]: ConvFloatFromInt(v1: integer) -> float
 710[52]: EqFloat(v1: float, v2: float) -> boolean
 711[37]: GotoFalseWord(jump=717, if_false: boolean)
 714[36]: GotoWord(jump=770)
 717[36]: ClearText(var[4])
 720[36]: ConstText(_value="Test failed ") -> text
 734[52]: AppendText(var[4], v1: text)
 737[36]: VarFloat(var[28]) -> float
 740[44]: ConstInt(val=0) -> integer
 745[48]: ConstInt(val=0) -> integer
 750[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 753[36]: ConstText(_value=" != 3142") -> text
 763[52]: AppendText(var[4], v1: text)
 766[36]: VarText(var[4]) -> text
 769[52]: Panic(message: text)
 770[36]: Return(ret=0, value=0, discard=36)

Execute test:
  682:[8] Text()
  683:[32] MathPiFloat() -> 3.141592653589793[32]
  684:[40] ConstFloat(val=1000) -> 1000[40]
  693:[48] MulFloat(v1=3.141592653589793[32], v2=1000[40]) -> 3141.592653589793[32]
  694:[40] Call(size=0, to=272)
  272:[44] VarFloat(var[32]) -> 3141.592653589793[44]
  275:[52] MathRoundFloat(v1=3141.592653589793[44]) -> 3142[44]
  276:[52] Return(ret=701[40], value=8, discard=20) -> 3142[32]
  701:[40] VarFloat(var[32]) -> 3142[40]
  704:[48] ConstInt(val=3142) -> 3142[48]
  709:[52] ConvFloatFromInt(v1=3142[48]) -> 3142[48]
  710:[56] EqFloat(v1=3142[40], v2=3142[48]) -> true[40]
  711:[41] GotoFalseWord(jump=717, if_false=true[40])
  714:[40] GotoWord(jump=770)
  770:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
