Test code:
pub fn test() {
    test_value = {round(PI * 1000.0)};
    assert(
        test_value == 3142,
        "Test failed {test_value} != 3142"
    );
}

fn test {
  let test_value = {
    _tp_float_round(OpMulFloat(OpMathPiFloat(), 1000f64));
  };
  if OpEqFloat(test_value, OpConvFloatFromInt(3142i32)) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatFloat(append_7, test_value, 0i32, 0i32);
    OpAppendText(append_7, " != 3142");
    append_7;
  })};
}

byte-code for constants:test()
 668[0]: return-address
 668[4]: MathPiFloat() -> float
 669[12]: ConstFloat(val=1000) -> float
 678[20]: MulFloat(v1: float, v2: float) -> float
 679[12]: GenCall(size=0, to=272)
 686[12]: VarFloat(var[4]) -> float
 689[20]: ConstInt(val=3142) -> integer
 694[24]: ConvFloatFromInt(v1: integer) -> float
 695[28]: EqFloat(v1: float, v2: float) -> boolean
 696[13]: GenGotoFalseWord(jump=702, if_false: boolean)
 699[12]: GenGotoWord(jump=757)
 702[12]: Text()
 703[36]: ConstText(_value="Test failed ") -> text
 717[52]: AppendText(var[12], v1: text)
 720[36]: VarFloat(var[4]) -> float
 723[44]: ConstInt(val=0) -> integer
 728[48]: ConstInt(val=0) -> integer
 733[52]: FormatFloat(var[12], val: float, width: integer, precision: integer)
 736[36]: ConstText(_value=" != 3142") -> text
 746[52]: AppendText(var[12], v1: text)
 749[36]: VarText(var[12]) -> text
 752[52]: GenFreeStack(value=16, discard=24)
 756[28]: GenPanic(message: text)
 757[12]: GenReturn(ret=0, value=0, discard=12)

Execute test:
  668:[4] MathPiFloat() -> 3.141592653589793[4]
  669:[12] ConstFloat(val=1000) -> 1000[12]
  678:[20] MulFloat(v1=3.141592653589793[4], v2=1000[12]) -> 3141.592653589793[4]
  679:[12] GenCall(size=0, to=272)
  272:[16] VarFloat(var[4]) -> 3141.592653589793[16]
  275:[24] MathRoundFloat(v1=3141.592653589793[16]) -> 3142[16]
  276:[24] GenReturn(ret=686[12], value=8, discard=20)
  686:[12] VarFloat(var[4]) -> 3142[12]
  689:[20] ConstInt(val=3142) -> 3142[20]
  694:[24] ConvFloatFromInt(v1=3142[20]) -> 3142[20]
  695:[28] EqFloat(v1=3142[12], v2=3142[20]) -> true[12]
  696:[13] GenGotoFalseWord(jump=702, if_false=true[12])
  699:[12] GenGotoWord(jump=757)
  757:[12] GenReturn(ret=4294967295[0], value=0, discard=12)
Finished
