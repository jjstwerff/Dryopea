pub fn test() {
    test_value = {a="12ðŸ˜ŠðŸ™ƒ45";a[1..7]};
    assert(
        test_value == "2ðŸ˜ŠðŸ™ƒ",
        "Test failed {test_value} != \"2ðŸ˜ŠðŸ™ƒ\""
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  a(1):text = "";
  test_value(1):text["a"] = {#block(2):text["a"]
    a(1):text = "12ðŸ˜ŠðŸ™ƒ45";
    OpGetTextSub(a(1), 1i32, 7i32);
  }#block(2):text["a"];
  if OpEqText(test_value(1), "2ðŸ˜ŠðŸ™ƒ") null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatText(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != "2ðŸ˜ŠðŸ™ƒ"");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(test_value(1));
  OpFreeText(a(1));
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for sub_utf8:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=a[32]:text
   2[56]: Text() var=test_value[56]:text["a"]
   3[80]: ClearText(var[32]) var=a[32]:text
   6[80]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
  20[96]: AppendText(var[32], v1: text)
  23[80]: VarText(var[32]) -> text var=a[32]:text
  26[96]: ConstInt(val=1) -> integer
  31[100]: ConstInt(val=7) -> integer
  36[104]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  37[96]: AppendText(var[56], v1: text)
  40[80]: VarText(var[56]) -> text var=test_value[56]:text["a"]
  43[96]: ConstText(_value="2ðŸ˜ŠðŸ™ƒ") -> text
  54[112]: EqText(v1: text, v2: text) -> boolean
  55[81]: GotoFalseWord(jump=61, if_false: boolean)
  58[80]: GotoWord(jump=118)
  61[80]: ClearText(var[8]) var=__work_1[8]:text
  64[80]: ConstText(_value="Test failed ") -> text
  78[96]: AppendText(var[8], v1: text)
  81[80]: VarText(var[56]) -> text var=test_value[56]:text["a"]
  84[96]: ConstInt(val=0) -> integer
  89[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  94[80]: ConstText(_value=" != "2ðŸ˜ŠðŸ™ƒ"") -> text
 111[96]: AppendText(var[8], v1: text)
 114[80]: VarText(var[8]) -> text var=__work_1[8]:text
 117[96]: Panic(message: text)
 118[80]: FreeText(var[56])
 121[80]: FreeText(var[32])
 124[80]: FreeText(var[8])
 127[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[80]
   20:[96] AppendText(var[32], v1="12ðŸ˜ŠðŸ™ƒ45"[80])
   23:[80] VarText(var[32]) -> "12ðŸ˜ŠðŸ™ƒ45"[80]
   26:[96] ConstInt(val=1) -> 1[96]
   31:[100] ConstInt(val=7) -> 7[100]
   36:[104] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[80], from=1[96], till=7[100]) -> "2ðŸ˜ŠðŸ™ƒ"[80]
   37:[96] AppendText(var[56], v1="2ðŸ˜ŠðŸ™ƒ"[80])
   40:[80] VarText(var[56]) -> "2ðŸ˜ŠðŸ™ƒ"[80]
   43:[96] ConstText(_value="2ðŸ˜ŠðŸ™ƒ") -> "2ðŸ˜ŠðŸ™ƒ"[96]
   54:[112] EqText(v1="2ðŸ˜ŠðŸ™ƒ"[80], v2="2ðŸ˜ŠðŸ™ƒ"[96]) -> true[80]
   55:[81] GotoFalseWord(jump=61, if_false=true[80])
   58:[80] GotoWord(jump=118)
  118:[80] FreeText(var[56])
  121:[80] FreeText(var[32])
  124:[80] FreeText(var[8])
  127:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
