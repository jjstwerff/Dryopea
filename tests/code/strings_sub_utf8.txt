Test code:
pub fn test() {
    test_value = {a="12ðŸ˜ŠðŸ™ƒ45";a[1..7]};
    assert(
        test_value == "2ðŸ˜ŠðŸ™ƒ",
        "Test failed {test_value} != \"2ðŸ˜ŠðŸ™ƒ\""
    );
}

fn test {
  let __work_3 = "";
  let test_value = {
    let a = "12ðŸ˜ŠðŸ™ƒ45";
    OpGetTextSub(a, 1i32, 7i32);
  };
  if OpEqText(test_value, "2ðŸ˜ŠðŸ™ƒ") {null} else {OpGenPanic({
    OpClearText(__work_3);
    OpAppendText(__work_3, "Test failed ");
    OpFormatText(__work_3, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_3, " != "2ðŸ˜ŠðŸ™ƒ"");
    __work_3;
  })};
}

byte-code for sub_utf8:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: Text()
 675[52]: Text()
 676[76]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text(false)
 690[92]: AppendText(var[52], v1: text(false))
 693[76]: VarText(var[52]) -> text(false)
 696[92]: ConstInt(val=1) -> integer
 701[96]: ConstInt(val=7) -> integer
 706[100]: GetTextSub(v1: text(false), from: integer, till: integer) -> text(false)
 707[92]: GenFreeStack(value=16, discard=24)
 711[68]: AppendText(var[28], v1: text(false))
 714[52]: VarText(var[28]) -> text(false)
 717[68]: ConstText(_value="2ðŸ˜ŠðŸ™ƒ") -> text(false)
 728[84]: EqText(v1: text(false), v2: text(false)) -> boolean
 729[53]: GenGotoFalseWord(jump=735, if_false: boolean)
 732[52]: GenGotoWord(jump=792)
 735[52]: ClearText(var[4])
 738[52]: ConstText(_value="Test failed ") -> text(false)
 752[68]: AppendText(var[4], v1: text(false))
 755[52]: VarText(var[28]) -> text(false)
 758[68]: ConstInt(val=0) -> integer
 763[72]: FormatText(var[4], val: text(false), width: integer, dir=-1, token=32)
 768[52]: ConstText(_value=" != "2ðŸ˜ŠðŸ™ƒ"") -> text(false)
 785[68]: AppendText(var[4], v1: text(false))
 788[52]: VarText(var[4]) -> text(false)
 791[68]: GenPanic(message: text(false))
 792[52]: GenReturn(ret=0, value=0, discard=52)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] Text()
  675:[56] Text()
  676:[80] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[80]
  690:[96] AppendText(var[56], v1="12ðŸ˜ŠðŸ™ƒ45"[80])
  693:[80] VarText(var[56]) -> "12ðŸ˜ŠðŸ™ƒ45"[80]
  696:[96] ConstInt(val=1) -> 1[96]
  701:[100] ConstInt(val=7) -> 7[100]
  706:[104] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[80], from=1[96], till=7[100]) -> "2ðŸ˜ŠðŸ™ƒ"[80]
  707:[96] GenFreeStack(value=16, discard=24)
  711:[72] AppendText(var[32], v1="2ðŸ˜ŠðŸ™ƒ"[56])
  714:[56] VarText(var[32]) -> "2ðŸ˜ŠðŸ™ƒ"[56]
  717:[72] ConstText(_value="2ðŸ˜ŠðŸ™ƒ") -> "2ðŸ˜ŠðŸ™ƒ"[72]
  728:[88] EqText(v1="2ðŸ˜ŠðŸ™ƒ"[56], v2="2ðŸ˜ŠðŸ™ƒ"[72]) -> true[56]
  729:[57] GenGotoFalseWord(jump=735, if_false=true[56])
  732:[56] GenGotoWord(jump=792)
  792:[56] GenReturn(ret=4294967295[4], value=0, discard=52)
Finished
