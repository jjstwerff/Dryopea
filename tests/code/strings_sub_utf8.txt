pub fn test() {
    test_value = {a="12ðŸ˜ŠðŸ™ƒ45";a[1..7]};
    assert(
        test_value == "2ðŸ˜ŠðŸ™ƒ",
        "Test failed {test_value} != \"2ðŸ˜ŠðŸ™ƒ\""
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    let a = "12ðŸ˜ŠðŸ™ƒ45";
    OpGetTextSub(a, 1i32, 7i32);
  }#2;
  if OpEqText(test_value, "2ðŸ˜ŠðŸ™ƒ") null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "2ðŸ˜ŠðŸ™ƒ"");
    __work_1;
  }#3);
}#1

byte-code for sub_utf8:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: Text()
 671[76]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text(false, [])
 685[92]: AppendText(var[52], v1: text(false, []))
 688[76]: VarText(var[52]) -> text(false, [])
 691[92]: ConstInt(val=1) -> integer
 696[96]: ConstInt(val=7) -> integer
 701[100]: GetTextSub(v1: text(false, []), from: integer, till: integer) -> text(false, [])
 702[92]: GenFreeStack(value=16, discard=24)
 706[68]: AppendText(var[28], v1: text(false, []))
 709[52]: VarText(var[28]) -> text(false, [])
 712[68]: ConstText(_value="2ðŸ˜ŠðŸ™ƒ") -> text(false, [])
 723[84]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 724[53]: GenGotoFalseWord(jump=730, if_false: boolean)
 727[52]: GenGotoWord(jump=787)
 730[52]: ClearText(var[4])
 733[52]: ConstText(_value="Test failed ") -> text(false, [])
 747[68]: AppendText(var[4], v1: text(false, []))
 750[52]: VarText(var[28]) -> text(false, [])
 753[68]: ConstInt(val=0) -> integer
 758[72]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 763[52]: ConstText(_value=" != "2ðŸ˜ŠðŸ™ƒ"") -> text(false, [])
 780[68]: AppendText(var[4], v1: text(false, []))
 783[52]: VarText(var[4]) -> text(false, [])
 786[68]: GenPanic(message: text(false, []))
 787[52]: GenReturn(ret=0, value=0, discard=52)

Execute test:
  668:[8] Text()
  669:[32] Text()
  670:[56] Text()
  671:[80] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[80]
  685:[96] AppendText(var[56], v1="12ðŸ˜ŠðŸ™ƒ45"[80])
  688:[80] VarText(var[56]) -> "12ðŸ˜ŠðŸ™ƒ45"[80]
  691:[96] ConstInt(val=1) -> 1[96]
  696:[100] ConstInt(val=7) -> 7[100]
  701:[104] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[80], from=1[96], till=7[100]) -> "2ðŸ˜ŠðŸ™ƒ"[80]
  702:[96] GenFreeStack(value=16, discard=24)
  706:[72] AppendText(var[32], v1="2ðŸ˜ŠðŸ™ƒ"[56])
  709:[56] VarText(var[32]) -> "2ðŸ˜ŠðŸ™ƒ"[56]
  712:[72] ConstText(_value="2ðŸ˜ŠðŸ™ƒ") -> "2ðŸ˜ŠðŸ™ƒ"[72]
  723:[88] EqText(v1="2ðŸ˜ŠðŸ™ƒ"[56], v2="2ðŸ˜ŠðŸ™ƒ"[72]) -> true[56]
  724:[57] GenGotoFalseWord(jump=730, if_false=true[56])
  727:[56] GenGotoWord(jump=787)
  787:[56] GenReturn(ret=4294967295[4], value=0, discard=52)
Finished
