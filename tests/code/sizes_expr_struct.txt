struct S {a: integer, b: long, c: En}
enum En {V1, V2}

pub fn test() {
    test_value = {sizeof(S)};
    assert(
        test_value == 17,
        "Test failed {test_value} != 17"
    );
}
Type 17:En[1]:Enum(["V1", "V2"])

Type 18:S[17]:
    a:integer[4]
    b:long[8]
    c:En[16]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    17i32;
  }#2:integer;
  if OpEqInt(test_value, 17i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 17");
    __work_1;
  }#3:text);
}#1

byte-code for expr_struct:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=17) -> integer var=test_value[28]:integer in 1
   6[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
   9[36]: ConstInt(val=17) -> integer
  14[40]: EqInt(v1: integer, v2: integer) -> boolean
  15[33]: GotoFalseWord(jump=21, if_false: boolean)
  18[32]: GotoWord(jump=71)
  21[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  24[32]: ConstText(_value="Test failed ") -> text
  38[48]: AppendText(var[4], v1: text)
  41[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  44[36]: ConstInt(val=0) -> integer
  49[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  56[32]: ConstText(_value=" != 17") -> text
  64[48]: AppendText(var[4], v1: text)
  67[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  70[48]: Panic(message: text)
  71[32]: FreeText(var[4])
  74[32]: Return(ret=0, value=0, discard=32)

