Test code:
struct S {a: integer, b: long, c: En}
enum En {V1, V2}

pub fn test() {
    test_value = {sizeof(S)};
    assert(
        test_value == 17,
        "Test failed {test_value} != 17"
    );
}

Type 13:En[1]:Enum(["V1", "V2"])

Type 14:S[17]:
    a:integer[4]
    b:long[8]
    c:En[16]

fn test {
  let test_value = {
    17i32;
  };
  if OpEqInt(test_value, 17i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 17");
    append_7;
  })};
}

byte-code for expr_struct:test()
 664[0]: return-address
 664[4]: ConstInt(val=17) -> integer
 669[8]: VarInt(var[4]) -> integer
 672[12]: ConstInt(val=17) -> integer
 677[16]: EqInt(v1: integer, v2: integer) -> boolean
 678[9]: GenGotoFalseWord(jump=684, if_false: boolean)
 681[8]: GenGotoWord(jump=736)
 684[8]: Text()
 685[32]: ConstText(_value="Test failed ") -> text
 699[48]: AppendText(var[8], v1: text)
 702[32]: VarInt(var[4]) -> integer
 705[36]: ConstInt(val=0) -> integer
 710[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 717[32]: ConstText(_value=" != 17") -> text
 725[48]: AppendText(var[8], v1: text)
 728[32]: VarText(var[8]) -> text
 731[48]: GenFreeStack(value=16, discard=24)
 735[24]: GenPanic(message: text)
 736[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] ConstInt(val=17) -> 17[4]
  669:[8] VarInt(var[4]) -> 17[8]
  672:[12] ConstInt(val=17) -> 17[12]
  677:[16] EqInt(v1=17[8], v2=17[12]) -> true[8]
  678:[9] GenGotoFalseWord(jump=684, if_false=true[8])
  681:[8] GenGotoWord(jump=736)
  736:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
