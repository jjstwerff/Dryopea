struct S {a: integer, b: long, c: En}
enum En {V1, V2}

pub fn test() {
    test_value = {sizeof(S)};
    assert(
        test_value == 17,
        "Test failed {test_value} != 17"
    );
}
Type 12:En[1]:Enum(["V1", "V2"])

Type 13:S[17]:
    a:integer[4]
    b:long[8]
    c:En[16]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    17i32;
  }#2:integer;
  if OpEqInt(test_value, 17i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 17");
    __work_1;
  }#3:text);
}#1

byte-code for expr_struct:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: ConstInt(val=17) -> integer var=test_value[28]:integer in 1
 661[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 664[36]: ConstInt(val=17) -> integer
 669[40]: EqInt(v1: integer, v2: integer) -> boolean
 670[33]: GotoFalseWord(jump=676, if_false: boolean)
 673[32]: GotoWord(jump=726)
 676[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 679[32]: ConstText(_value="Test failed ") -> text
 693[48]: AppendText(var[4], v1: text)
 696[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 699[36]: ConstInt(val=0) -> integer
 704[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 711[32]: ConstText(_value=" != 17") -> text
 719[48]: AppendText(var[4], v1: text)
 722[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 725[48]: Panic(message: text)
 726[32]: FreeText(var[4])
 729[32]: Return(ret=0, value=0, discard=32)

Execute test:
  655:[8] Text()
  656:[32] ConstInt(val=17) -> 17[32]
  661:[36] VarInt(var[32]) -> 17[36]
  664:[40] ConstInt(val=17) -> 17[40]
  669:[44] EqInt(v1=17[36], v2=17[40]) -> true[36]
  670:[37] GotoFalseWord(jump=676, if_false=true[36])
  673:[36] GotoWord(jump=726)
  726:[36] FreeText(var[8])
  729:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
