pub fn test() {
    test_value = {v = "someth" + "ing"; v.ends_with("thing")};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    let v = "";
    OpAppendText(v, "someth");
    OpAppendText(v, "ing");
    _tp_text_ends_with(v, "thing");
  }#2;
  if OpEqBool(test_value, true) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3);
}#1

byte-code for ends:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="someth") -> text(false, [])
 678[68]: AppendText(var[28], v1: text(false, []))
 681[52]: ConstText(_value="ing") -> text(false, [])
 686[68]: AppendText(var[28], v1: text(false, []))
 689[52]: VarText(var[28]) -> text(false, [])
 692[68]: ConstText(_value="thing") -> text(false, [])
 699[84]: StaticCall(_tp_text_ends_with)
 702[53]: GenFreeStack(value=1, discard=24)
 706[29]: VarBool(var[28]) -> boolean
 709[30]: ConstTrue() -> boolean
 710[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 711[30]: GenGotoFalseWord(jump=717, if_false: boolean)
 714[29]: GenGotoWord(jump=767)
 717[29]: ClearText(var[4])
 720[29]: ConstText(_value="Test failed ") -> text(false, [])
 734[45]: AppendText(var[4], v1: text(false, []))
 737[29]: VarBool(var[28]) -> boolean
 740[30]: ConstInt(val=0) -> integer
 745[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 750[29]: ConstText(_value=" != true") -> text(false, [])
 760[45]: AppendText(var[4], v1: text(false, []))
 763[29]: VarText(var[4]) -> text(false, [])
 766[45]: GenPanic(message: text(false, []))
 767[29]: GenReturn(ret=0, value=0, discard=29)

Execute test:
  668:[8] Text()
  669:[32] Text()
  670:[56] ConstText(_value="someth") -> "someth"[56]
  678:[72] AppendText(var[32], v1="someth"[56])
  681:[56] ConstText(_value="ing") -> "ing"[56]
  686:[72] AppendText(var[32], v1="ing"[56])
  689:[56] VarText(var[32]) -> "something"[56]
  692:[72] ConstText(_value="thing") -> "thing"[72]
  699:[88] StaticCall(call=3)
  702:[57] GenFreeStack(value=1, discard=24)
  706:[33] VarBool(var[32]) -> true[33]
  709:[34] ConstTrue() -> true[34]
  710:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
  711:[34] GenGotoFalseWord(jump=717, if_false=true[33])
  714:[33] GenGotoWord(jump=767)
  767:[33] GenReturn(ret=4294967295[4], value=0, discard=29)
Finished
