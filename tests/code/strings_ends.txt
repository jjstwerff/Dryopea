pub fn test() {
    test_value = {v = "someth" + "ing"; v.ends_with("thing")};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):boolean = {#block(2):boolean
    v(2):text["v"] = "";
    OpAppendText(v(2), "someth");
    OpAppendText(v(2), "ing");
    _tp_text_ends_with(v(2), "thing");
    OpFreeText(v(2));
  }#block(2):boolean;
  if OpEqBool(test_value(1), true) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatBool(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != true");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for ends:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=v[32]:text["v"]
   2[56]: ConstText(_value="someth") -> text
  10[72]: AppendText(var[32], v1: text)
  13[56]: ConstText(_value="ing") -> text
  18[72]: AppendText(var[32], v1: text)
  21[56]: VarText(var[32]) -> text var=v[32]:text["v"]
  24[72]: ConstText(_value="thing") -> text
  31[88]: StaticCall(_tp_text_ends_with)
  34[57]: FreeText(var[32])
  37[57]: FreeStack(value=1, discard=25)
  41[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  44[34]: ConstTrue() -> boolean
  45[35]: EqBool(v1: boolean, v2: boolean) -> boolean
  46[34]: GotoFalseWord(jump=52, if_false: boolean)
  49[33]: GotoWord(jump=102)
  52[33]: ClearText(var[8]) var=__work_1[8]:text
  55[33]: ConstText(_value="Test failed ") -> text
  69[49]: AppendText(var[8], v1: text)
  72[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  75[34]: ConstInt(val=0) -> integer
  80[38]: FormatBool(var[8], val: boolean, width: integer, dir=-1, token=32)
  85[33]: ConstText(_value=" != true") -> text
  95[49]: AppendText(var[8], v1: text)
  98[33]: VarText(var[8]) -> text var=__work_1[8]:text
 101[49]: Panic(message: text)
 102[33]: FreeText(var[8])
 105[33]: Return(ret=0, value=0, discard=29)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] ConstText(_value="someth") -> "someth"[56]
   10:[72] AppendText(var[32], v1="someth"[56])
   13:[56] ConstText(_value="ing") -> "ing"[56]
   18:[72] AppendText(var[32], v1="ing"[56])
   21:[56] VarText(var[32]) -> "something"[56]
   24:[72] ConstText(_value="thing") -> "thing"[72]
   31:[88] StaticCall(_tp_text_ends_with)
   34:[57] FreeText(var[32])
   37:[57] FreeStack(value=1, discard=25)
   41:[33] VarBool(var[32]) -> true[33]
   44:[34] ConstTrue() -> true[34]
   45:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
   46:[34] GotoFalseWord(jump=52, if_false=true[33])
   49:[33] GotoWord(jump=102)
  102:[33] FreeText(var[8])
  105:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
