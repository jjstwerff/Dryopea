pub fn test() {
    test_value = {v = "someth" + "ing"; v.ends_with("thing")};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    v:text = "someth";
    OpAppendText(v, "ing");
    _tp_text_ends_with(v, "thing");
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for ends:test()
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=v[28]:text in 2
   2[52]: ConstText(_value="someth") -> text
  10[68]: AppendText(var[28], v1: text)
  13[52]: ConstText(_value="ing") -> text
  18[68]: AppendText(var[28], v1: text)
  21[52]: VarText(var[28]) -> text var=v[28]:text in 2
  24[68]: ConstText(_value="thing") -> text
  31[84]: StaticCall(_tp_text_ends_with)
  34[53]: FreeText(var[28])
  37[53]: FreeStack(value=1, discard=25) type=boolean[1]:Base[4]
  41[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  44[30]: ConstTrue() -> boolean
  45[31]: EqBool(v1: boolean, v2: boolean) -> boolean
  46[30]: GotoFalseWord(jump=52, if_false: boolean)
  49[29]: GotoWord(jump=102)
  52[29]: ClearText(var[4]) var=__work_1[4]:text in 1
  55[29]: ConstText(_value="Test failed ") -> text
  69[45]: AppendText(var[4], v1: text)
  72[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  75[30]: ConstInt(val=0) -> integer
  80[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
  85[29]: ConstText(_value=" != true") -> text
  95[45]: AppendText(var[4], v1: text)
  98[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 101[45]: Panic(message: text)
 102[29]: FreeText(var[4])
 105[29]: Return(ret=0, value=0, discard=29)

