enum Val {A, B, C}

pub fn test() {
    test_value = {v=[A,A,B,B]; v[2] as integer};
    assert(
        test_value == 2,
        "Test failed {test_value} != 2"
    );
}
Type 17:Val[1]:Enum(["A", "B", "C"])

Type 18:main_vector<Val>[8]:
    vector:vector<Val>[4]

Type 19:vector<Val>[4]:Vector(17)

fn test() {#block(1):void
  __ref_1(1):ref(main_vector<Val>) = null;
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    OpDatabase(__ref_1(1), 18i32);
    v(2):vector<Val>["__ref_1"] = OpGetField(__ref_1(1), 4i32, 19i32);
    OpSetInt(__ref_1(1), 4i32, 0i32);
    _elm_1(2):ref(boolean)["v"] = OpNewRecord(v(2), 19i32, 65535i32);
    OpSetEnum(_elm_1(2), 0i32, 1u8(17));
    OpFinishRecord(v(2), _elm_1(2), 19i32, 65535i32);
    _elm_1(2):ref(boolean)["v"] = OpNewRecord(v(2), 19i32, 65535i32);
    OpSetEnum(_elm_1(2), 0i32, 1u8(17));
    OpFinishRecord(v(2), _elm_1(2), 19i32, 65535i32);
    _elm_1(2):ref(boolean)["v"] = OpNewRecord(v(2), 19i32, 65535i32);
    OpSetEnum(_elm_1(2), 0i32, 2u8(17));
    OpFinishRecord(v(2), _elm_1(2), 19i32, 65535i32);
    _elm_1(2):ref(boolean)["v"] = OpNewRecord(v(2), 19i32, 65535i32);
    OpSetEnum(_elm_1(2), 0i32, 2u8(17));
    OpFinishRecord(v(2), _elm_1(2), 19i32, 65535i32);
    OpCastIntFromEnum(OpGetEnum(OpGetVector(v(2), 1i32, 2i32), 0i32));
  }#block(2):integer;
  if OpEqInt(test_value(1), 2i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 2");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeRef(__ref_1(1));
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for enum_vector:test() [1119]
   0[4]: return-address
   0[8]: ConvRefFromNull() -> ref(reference) var=__ref_1[8]:ref(main_vector<Val>)
   1[20]: Text() var=__work_1[20]:text
   2[44]: Database(var[8], db_tp=18) type=main_vector<Val>[8]:{vector:vector<Val>[4]}[18] var=test_value[44]:integer
   7[44]: VarRef(var[8]) -> ref(reference) type=main_vector<Val>[8]:{vector:vector<Val>[4]}[18] var=__ref_1[8]:ref(main_vector<Val>)
  10[56]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=vector<Val>[4]:Vector(17)[19]
  13[56]: VarRef(var[8]) -> ref(reference) type=main_vector<Val>[8]:{vector:vector<Val>[4]}[18] var=__ref_1[8]:ref(main_vector<Val>)
  16[68]: ConstInt(val=0) -> integer
  21[72]: SetInt(v1: ref(reference), fld=4, val: integer)
  24[56]: VarVector(var[44]) -> vector type=vector<Val>[4]:Vector(17)[19] var=v[44]:vector<Val>["__ref_1"]
  27[68]: NewRecord(data: ref(reference), parent_tp=19, fld=65535) -> ref(reference)
  32[68]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
  35[80]: ConstEnum(val=1) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[17]
  37[81]: SetEnum(v1: ref(reference), fld=0, val: enumerate)
  40[68]: VarVector(var[44]) -> vector type=vector<Val>[4]:Vector(17)[19] var=v[44]:vector<Val>["__ref_1"]
  43[80]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
  46[92]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=65535)
  51[68]: VarVector(var[44]) -> vector type=vector<Val>[4]:Vector(17)[19] var=v[44]:vector<Val>["__ref_1"]
  54[80]: NewRecord(data: ref(reference), parent_tp=19, fld=65535) -> ref(reference)
  59[80]: PutRef(var[56], value: ref(reference))
  62[68]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
  65[80]: ConstEnum(val=1) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[17]
  67[81]: SetEnum(v1: ref(reference), fld=0, val: enumerate)
  70[68]: VarVector(var[44]) -> vector type=vector<Val>[4]:Vector(17)[19] var=v[44]:vector<Val>["__ref_1"]
  73[80]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
  76[92]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=65535)
  81[68]: VarVector(var[44]) -> vector type=vector<Val>[4]:Vector(17)[19] var=v[44]:vector<Val>["__ref_1"]
  84[80]: NewRecord(data: ref(reference), parent_tp=19, fld=65535) -> ref(reference)
  89[80]: PutRef(var[56], value: ref(reference))
  92[68]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
  95[80]: ConstEnum(val=2) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[17]
  97[81]: SetEnum(v1: ref(reference), fld=0, val: enumerate)
 100[68]: VarVector(var[44]) -> vector type=vector<Val>[4]:Vector(17)[19] var=v[44]:vector<Val>["__ref_1"]
 103[80]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
 106[92]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=65535)
 111[68]: VarVector(var[44]) -> vector type=vector<Val>[4]:Vector(17)[19] var=v[44]:vector<Val>["__ref_1"]
 114[80]: NewRecord(data: ref(reference), parent_tp=19, fld=65535) -> ref(reference)
 119[80]: PutRef(var[56], value: ref(reference))
 122[68]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
 125[80]: ConstEnum(val=2) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[17]
 127[81]: SetEnum(v1: ref(reference), fld=0, val: enumerate)
 130[68]: VarVector(var[44]) -> vector type=vector<Val>[4]:Vector(17)[19] var=v[44]:vector<Val>["__ref_1"]
 133[80]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
 136[92]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=65535)
 141[68]: VarVector(var[44]) -> vector type=vector<Val>[4]:Vector(17)[19] var=v[44]:vector<Val>["__ref_1"]
 144[80]: ConstInt(val=2) -> integer
 149[84]: GetVector(r: vector, size=1, index: integer) -> ref(reference) type=Val[1]:Enum(["A", "B", "C"])[17]
 152[80]: GetEnum(v1: ref(reference), fld=0) -> enumerate
 155[69]: CastIntFromEnum(v1: enumerate) -> integer
 156[72]: FreeStack(value=4, discard=28)
 160[48]: VarInt(var[44]) -> integer var=test_value[44]:integer
 163[52]: ConstInt(val=2) -> integer
 168[56]: EqInt(v1: integer, v2: integer) -> boolean
 169[49]: GotoFalseWord(jump=175, if_false: boolean)
 172[48]: GotoWord(jump=224)
 175[48]: ClearText(var[20]) var=__work_1[20]:text
 178[48]: ConstText(_value="Test failed ") -> text
 192[64]: AppendText(var[20], v1: text)
 195[48]: VarInt(var[44]) -> integer var=test_value[44]:integer
 198[52]: ConstInt(val=0) -> integer
 203[56]: FormatInt(var[20], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 210[48]: ConstText(_value=" != 2") -> text
 217[64]: AppendText(var[20], v1: text)
 220[48]: VarText(var[20]) -> text var=__work_1[20]:text
 223[64]: Panic(message: text)
 224[48]: VarRef(var[8]) -> ref(reference) type=main_vector<Val>[8]:{vector:vector<Val>[4]}[18] var=__ref_1[8]:ref(main_vector<Val>)
 227[60]: FreeRef(v1: ref(reference))
 228[48]: FreeText(var[20])
 231[48]: Return(ret=0, value=0, discard=44)

Execute test:
    0:[8] ConvRefFromNull() -> ref(1,0,0)[8]
    1:[20] Text()
    2:[44] Database(var[8], db_tp=18)
    7:[44] VarRef(var[8]) -> ref(1,1,0)={}[44]
   10:[56] GetField(v1=ref(1,1,0)[44], fld=4) -> ref(1,1,4)=[][44]
   13:[56] VarRef(var[8]) -> ref(1,1,0)={}[56]
   16:[68] ConstInt(val=0) -> 0[68]
   21:[72] SetInt(v1=ref(1,1,0)[56], fld=4, val=0[68])
   24:[56] VarVector(var[44]) -> ref(1,1,4)=[][56]
   27:[68] NewRecord(data=ref(1,1,4)[56], parent_tp=19, fld=65535) -> ref(1,9,8)[56]
   32:[68] VarRef(var[56]) -> ref(1,9,8)=false[68]
   35:[80] ConstEnum(val=1) -> A(1)[80]
   37:[81] SetEnum(v1=ref(1,9,8)[68], fld=0, val=1[80])
   40:[68] VarVector(var[44]) -> ref(1,1,4)=[A][68]
   43:[80] VarRef(var[56]) -> ref(1,9,8)=true[80]
   46:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,8)[80], parent_tp=19, fld=65535)
   51:[68] VarVector(var[44]) -> ref(1,1,4)=[A][68]
   54:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=19, fld=65535) -> ref(1,9,9)[68]
   59:[80] PutRef(var[56], value=ref(1,9,9)[68])
   62:[68] VarRef(var[56]) -> ref(1,9,9)=false[68]
   65:[80] ConstEnum(val=1) -> A(1)[80]
   67:[81] SetEnum(v1=ref(1,9,9)[68], fld=0, val=1[80])
   70:[68] VarVector(var[44]) -> ref(1,1,4)=[A,A][68]
   73:[80] VarRef(var[56]) -> ref(1,9,9)=true[80]
   76:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,9)[80], parent_tp=19, fld=65535)
   81:[68] VarVector(var[44]) -> ref(1,1,4)=[A,A][68]
   84:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=19, fld=65535) -> ref(1,9,10)[68]
   89:[80] PutRef(var[56], value=ref(1,9,10)[68])
   92:[68] VarRef(var[56]) -> ref(1,9,10)=false[68]
   95:[80] ConstEnum(val=2) -> B(2)[80]
   97:[81] SetEnum(v1=ref(1,9,10)[68], fld=0, val=2[80])
  100:[68] VarVector(var[44]) -> ref(1,1,4)=[A,A,B][68]
  103:[80] VarRef(var[56]) -> ref(1,9,10)=true[80]
  106:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,10)[80], parent_tp=19, fld=65535)
  111:[68] VarVector(var[44]) -> ref(1,1,4)=[A,A,B][68]
  114:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=19, fld=65535) -> ref(1,9,11)[68]
  119:[80] PutRef(var[56], value=ref(1,9,11)[68])
  122:[68] VarRef(var[56]) -> ref(1,9,11)=false[68]
  125:[80] ConstEnum(val=2) -> B(2)[80]
  127:[81] SetEnum(v1=ref(1,9,11)[68], fld=0, val=2[80])
  130:[68] VarVector(var[44]) -> ref(1,1,4)=[A,A,B,B][68]
  133:[80] VarRef(var[56]) -> ref(1,9,11)=true[80]
  136:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,11)[80], parent_tp=19, fld=65535)
  141:[68] VarVector(var[44]) -> ref(1,1,4)=[A,A,B,B][68]
  144:[80] ConstInt(val=2) -> 2[80]
  149:[84] GetVector(r=ref(1,1,4)[68], size=1, index=2[80]) -> ref(1,9,10)=B[68]
  152:[80] GetEnum(v1=ref(1,9,10)[68], fld=0) -> unknown(2)(2)[68]
  155:[69] CastIntFromEnum(v1=2[68]) -> 2[68]
  156:[72] FreeStack(value=4, discard=28)
  160:[48] VarInt(var[44]) -> 2[48]
  163:[52] ConstInt(val=2) -> 2[52]
  168:[56] EqInt(v1=2[48], v2=2[52]) -> true[48]
  169:[49] GotoFalseWord(jump=175, if_false=true[48])
  172:[48] GotoWord(jump=224)
  224:[48] VarRef(var[8]) -> ref(1,1,0)={vector:[A,A,B,B]}[48]
  227:[60] FreeRef(v1=ref(1,1,0)[48])
  228:[48] FreeText(var[20])
  231:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
