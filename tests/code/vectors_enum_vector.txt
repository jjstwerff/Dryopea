enum Val {A, B, C}

pub fn test() {
    test_value = {v=[A,A,B,B]; v[2] as integer};
    assert(
        test_value == 2,
        "Test failed {test_value} != 2"
    );
}
Type 14:Val[1]:Enum(["A", "B", "C"])

Type 15:main_vector<Val>[8]:
    vector:vector<Val>[4]

Type 16:vector<Val>[4]:Vector(14)

fn test() {#1 block
  __ref_1:ref(main_vector<Val>) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    v:vector<Val>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 15i32);
      _vec_1:vector<Val>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      OpSetEnum(_elm_2, 0i32, 1u8(14));
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      OpSetEnum(_elm_2, 0i32, 1u8(14));
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      OpSetEnum(_elm_2, 0i32, 2u8(14));
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      OpSetEnum(_elm_2, 0i32, 2u8(14));
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _vec_1;
    }#3:vector<Val>["__ref_1"];
    OpCastIntFromEnum(OpGetEnum(OpGetVector(v, 1i32, 2i32), 0i32));
  }#2:integer;
  if OpEqInt(test_value, 2i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 2");
    __work_1;
  }#4:text);
}#1

byte-code for enum_vector:test()
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<Val>) in 1
   1[16]: Text() var=__work_1[16]:text in 1
   2[40]: Database(var[4], db_tp=15) type=main_vector<Val>[8]:{vector:vector<Val>[4]}[15] var=v[40]:vector<Val>["__ref_1"] in 2
   7[40]: VarRef(var[4]) -> ref(reference) type=main_vector<Val>[8]:{vector:vector<Val>[4]}[15] var=__ref_1[4]:ref(main_vector<Val>) in 1
  10[52]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  13[52]: VarRef(var[4]) -> ref(reference) type=main_vector<Val>[8]:{vector:vector<Val>[4]}[15] var=__ref_1[4]:ref(main_vector<Val>) in 1
  16[64]: ConstInt(val=0) -> integer
  21[68]: SetInt(v1: ref(reference), fld=4, val: integer)
  24[52]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=_vec_1[40]:vector<Val>["__ref_1"] in 3
  27[64]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
  32[64]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
  35[76]: ConstEnum(val=1) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[14]
  37[77]: SetEnum(v1: ref(reference), fld=0, val: enumerate)
  40[64]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=_vec_1[40]:vector<Val>["__ref_1"] in 3
  43[76]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
  46[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
  51[64]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=_vec_1[40]:vector<Val>["__ref_1"] in 3
  54[76]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
  59[76]: PutRef(var[52], value: ref(reference))
  62[64]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
  65[76]: ConstEnum(val=1) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[14]
  67[77]: SetEnum(v1: ref(reference), fld=0, val: enumerate)
  70[64]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=_vec_1[40]:vector<Val>["__ref_1"] in 3
  73[76]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
  76[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
  81[64]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=_vec_1[40]:vector<Val>["__ref_1"] in 3
  84[76]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
  89[76]: PutRef(var[52], value: ref(reference))
  92[64]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
  95[76]: ConstEnum(val=2) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[14]
  97[77]: SetEnum(v1: ref(reference), fld=0, val: enumerate)
 100[64]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=_vec_1[40]:vector<Val>["__ref_1"] in 3
 103[76]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
 106[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
 111[64]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=_vec_1[40]:vector<Val>["__ref_1"] in 3
 114[76]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
 119[76]: PutRef(var[52], value: ref(reference))
 122[64]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
 125[76]: ConstEnum(val=2) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[14]
 127[77]: SetEnum(v1: ref(reference), fld=0, val: enumerate)
 130[64]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=_vec_1[40]:vector<Val>["__ref_1"] in 3
 133[76]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
 136[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
 141[64]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=_vec_1[40]:vector<Val>["__ref_1"] in 3
 144[76]: FreeStack(value=12, discard=36) type=vector<text>[4]:Vector(5)[6]
 148[52]: VarVector(var[40]) -> vector type=vector<Val>[4]:Vector(14)[16] var=v[40]:vector<Val>["__ref_1"] in 2
 151[64]: ConstInt(val=2) -> integer
 156[68]: GetVector(r: vector, size=1, index: integer) -> ref(reference) type=Val[1]:Enum(["A", "B", "C"])[14]
 159[64]: GetEnum(v1: ref(reference), fld=0) -> enumerate
 162[53]: CastIntFromEnum(v1: enumerate) -> integer
 163[56]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
 167[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 170[48]: ConstInt(val=2) -> integer
 175[52]: EqInt(v1: integer, v2: integer) -> boolean
 176[45]: GotoFalseWord(jump=182, if_false: boolean)
 179[44]: GotoWord(jump=231)
 182[44]: ClearText(var[16]) var=__work_1[16]:text in 1
 185[44]: ConstText(_value="Test failed ") -> text
 199[60]: AppendText(var[16], v1: text)
 202[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 205[48]: ConstInt(val=0) -> integer
 210[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 217[44]: ConstText(_value=" != 2") -> text
 224[60]: AppendText(var[16], v1: text)
 227[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 230[60]: Panic(message: text)
 231[44]: VarRef(var[4]) -> ref(reference) type=main_vector<Val>[8]:{vector:vector<Val>[4]}[15] var=__ref_1[4]:ref(main_vector<Val>) in 1
 234[56]: FreeRef(v1: ref(reference))
 235[44]: FreeText(var[16])
 238[44]: Return(ret=0, value=0, discard=44)

