enum Val {A, B, C}

pub fn test() {
    test_value = {v=[A,A,B,B]; v[2] as integer};
    assert(
        test_value == 2,
        "Test failed {test_value} != 2"
    );
}
Type 11:Val[1]:Enum(["A", "B", "C"])

Type 12:main_vector<Val>[8]:
    vector:vector<Val>[4]

Type 13:vector<Val>[4]:Vector(11)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    v:vector<Val>#[] = {#3 vector
      _db_3:main_vector<Val> = OpDatabase(1i32, 12i32);
      _vec_2:vector<Val>#[] = OpGetField(_db_3, 4i32, 65535i32);
      OpSetInt(_db_3, 4i32, 0i32);
      _elm_1:boolean = OpNewRecord(_vec_2, 13i32, 65535i32);
      OpSetEnum(_elm_1, 0i32, 1u8(11));
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1:boolean = OpNewRecord(_vec_2, 13i32, 65535i32);
      OpSetEnum(_elm_1, 0i32, 1u8(11));
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1:boolean = OpNewRecord(_vec_2, 13i32, 65535i32);
      OpSetEnum(_elm_1, 0i32, 2u8(11));
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1:boolean = OpNewRecord(_vec_2, 13i32, 65535i32);
      OpSetEnum(_elm_1, 0i32, 2u8(11));
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _vec_2;
    }#3:vector<Val>#[];
    OpCastIntFromEnum(OpGetEnum(OpGetVector(v, 1i32, 2i32), 0i32));
  }#2:integer;
  if OpEqInt(test_value, 2i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 2");
    __work_1;
  }#4:text);
}#1

byte-code for enum_vector:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Database(size=1, db_tp=12) -> reference type=main_vector<Val>[8]:{vector:vector<Val>[4]}[12]
 688[40]: VarRef(var[28]) -> reference type=main_vector<Val>[8]:{vector:vector<Val>[4]}[12]
 691[52]: GetField(v1: reference, fld=4) -> reference type=Unknown type(65535)[65535]
 694[52]: VarRef(var[28]) -> reference type=main_vector<Val>[8]:{vector:vector<Val>[4]}[12]
 697[64]: ConstInt(val=0) -> integer
 702[68]: SetInt(v1: reference, fld=4, val: integer)
 705[52]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 708[64]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 713[64]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 716[76]: ConstEnum(val=1) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[11]
 718[77]: SetEnum(v1: reference, fld=0, val: enumerate)
 721[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 724[76]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 727[88]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 732[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 735[76]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 740[76]: PutRef(var[52], value: reference)
 743[64]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 746[76]: ConstEnum(val=1) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[11]
 748[77]: SetEnum(v1: reference, fld=0, val: enumerate)
 751[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 754[76]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 757[88]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 762[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 765[76]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 770[76]: PutRef(var[52], value: reference)
 773[64]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 776[76]: ConstEnum(val=2) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[11]
 778[77]: SetEnum(v1: reference, fld=0, val: enumerate)
 781[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 784[76]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 787[88]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 792[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 795[76]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 800[76]: PutRef(var[52], value: reference)
 803[64]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 806[76]: ConstEnum(val=2) -> enumerate type=Val[1]:Enum(["A", "B", "C"])[11]
 808[77]: SetEnum(v1: reference, fld=0, val: enumerate)
 811[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 814[76]: VarRef(var[52]) -> reference type=boolean[1]:Base[4]
 817[88]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 822[64]: VarVector(var[40]) -> vector#[] type=Unknown type(65535)[65535]
 825[76]: FreeStack(value=12, discard=36) type=Pixel[3]:{r:byte[0], g:byte[1], b:byte[2]}[6]
 829[40]: VarVector(var[28]) -> vector#[] type=Unknown type(65535)[65535]
 832[52]: ConstInt(val=2) -> integer
 837[56]: GetVector(r: vector#[], size=1, index: integer) -> reference type=Val[1]:Enum(["A", "B", "C"])[11]
 840[52]: GetEnum(v1: reference, fld=0) -> enumerate
 843[41]: CastIntFromEnum(v1: enumerate) -> integer
 844[44]: FreeStack(value=4, discard=12) type=integer[4]:Base[0]
 848[32]: VarInt(var[28]) -> integer
 851[36]: ConstInt(val=2) -> integer
 856[40]: EqInt(v1: integer, v2: integer) -> boolean
 857[33]: GotoFalseWord(jump=863, if_false: boolean)
 860[32]: GotoWord(jump=912)
 863[32]: ClearText(var[4])
 866[32]: ConstText(_value="Test failed ") -> text
 880[48]: AppendText(var[4], v1: text)
 883[32]: VarInt(var[28]) -> integer
 886[36]: ConstInt(val=0) -> integer
 891[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 898[32]: ConstText(_value=" != 2") -> text
 905[48]: AppendText(var[4], v1: text)
 908[32]: VarText(var[4]) -> text
 911[48]: Panic(message: text)
 912[32]: Return(ret=0, value=0, discard=32)

Execute test:
  682:[8] Text()
  683:[32] Database(size=1, db_tp=12) -> ref(1,1,0)={}[32]
  688:[44] VarRef(var[32]) -> ref(1,1,0)={}[44]
  691:[56] GetField(v1=ref(1,1,0)[44], fld=4) -> ref(1,1,4)[44]
  694:[56] VarRef(var[32]) -> ref(1,1,0)={}[56]
  697:[68] ConstInt(val=0) -> 0[68]
  702:[72] SetInt(v1=ref(1,1,0)[56], fld=4, val=0[68])
  705:[56] VarVector(var[44]) -> ref(1,1,4)[56]
  708:[68] NewRecord(data=ref(1,1,4)[56], parent_tp=13, fld=65535) -> ref(1,2,8)[56]
  713:[68] VarRef(var[56]) -> ref(1,2,8)=false[68]
  716:[80] ConstEnum(val=1) -> A(1)[80]
  718:[81] SetEnum(v1=ref(1,2,8)[68], fld=0, val=1[80])
  721:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  724:[80] VarRef(var[56]) -> ref(1,2,8)=true[80]
  727:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,2,8)[80], parent_tp=13, fld=65535)
  732:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  735:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=13, fld=65535) -> ref(1,2,9)[68]
  740:[80] PutRef(var[56], value=ref(1,2,9)[68])
  743:[68] VarRef(var[56]) -> ref(1,2,9)=false[68]
  746:[80] ConstEnum(val=1) -> A(1)[80]
  748:[81] SetEnum(v1=ref(1,2,9)[68], fld=0, val=1[80])
  751:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  754:[80] VarRef(var[56]) -> ref(1,2,9)=true[80]
  757:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,2,9)[80], parent_tp=13, fld=65535)
  762:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  765:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=13, fld=65535) -> ref(1,2,10)[68]
  770:[80] PutRef(var[56], value=ref(1,2,10)[68])
  773:[68] VarRef(var[56]) -> ref(1,2,10)=false[68]
  776:[80] ConstEnum(val=2) -> B(2)[80]
  778:[81] SetEnum(v1=ref(1,2,10)[68], fld=0, val=2[80])
  781:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  784:[80] VarRef(var[56]) -> ref(1,2,10)=true[80]
  787:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,2,10)[80], parent_tp=13, fld=65535)
  792:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  795:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=13, fld=65535) -> ref(1,2,11)[68]
  800:[80] PutRef(var[56], value=ref(1,2,11)[68])
  803:[68] VarRef(var[56]) -> ref(1,2,11)=false[68]
  806:[80] ConstEnum(val=2) -> B(2)[80]
  808:[81] SetEnum(v1=ref(1,2,11)[68], fld=0, val=2[80])
  811:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  814:[80] VarRef(var[56]) -> ref(1,2,11)=true[80]
  817:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,2,11)[80], parent_tp=13, fld=65535)
  822:[68] VarVector(var[44]) -> ref(1,1,4)[68]
  825:[80] FreeStack(value=12, discard=36)
  829:[44] VarVector(var[32]) -> ref(1,1,4)[44]
  832:[56] ConstInt(val=2) -> 2[56]
  837:[60] GetVector(r=ref(1,1,4)=true[44], size=1, index=2[56]) -> ref(1,2,10)=B[44]
  840:[56] GetEnum(v1=ref(1,2,10)[44], fld=0) -> unknown(2)(2)[44]
  843:[45] CastIntFromEnum(v1=2[44]) -> 2[44]
  844:[48] FreeStack(value=4, discard=12)
  848:[36] VarInt(var[32]) -> 2[36]
  851:[40] ConstInt(val=2) -> 2[40]
  856:[44] EqInt(v1=2[36], v2=2[40]) -> true[36]
  857:[37] GotoFalseWord(jump=863, if_false=true[36])
  860:[36] GotoWord(jump=912)
  912:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
