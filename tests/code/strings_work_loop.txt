pub fn test() {
    test_value = {a = 0; for t in 1..4 { a += "0{t}0" as integer }; a};
    assert(
        test_value == 60,
        "Test failed {test_value} != 60"
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 0i32;
    {#3 for
      t#index:integer = OpConvIntFromNull();
      loop {#4 for loop
        t:integer = {#5 for next
          t#index:integer = if OpNot(OpConvBoolFromInt(t#index)) 1i32 else OpAddInt(t#index, 1i32);
          if OpGeInt(t#index, 4i32) break(0) else null;
          t#index;
        }#5:integer;
        {#6 block
          a:integer = OpAddInt(a, OpCastIntFromText({#7 formatting string
            __work_1:text = "0";
            OpFormatInt(__work_1, t, 10i32, 0i32, 32i32, false, false);
            OpAppendText(__work_1, "0");
            __work_1;
          }#7:text));
        }#6;
      }#4;
    }#3;
    a;
  }#2:integer;
  if OpEqInt(test_value, 60i32) null else OpPanic({#8 formatting string
    __work_2:text = "Test failed ";
    OpFormatInt(__work_2, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " != 60");
    __work_2;
  }#8:text);
}#1

byte-code for work_loop:test()
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: ConstInt(val=0) -> integer var=a[52]:integer in 2
   7[56]: ConvIntFromNull() -> integer var=t#index[56]:integer in 3
   8[60]: VarInt(var[56]) -> integer var=t#index[56]:integer in 3
  11[64]: ConvBoolFromInt(v1: integer) -> boolean
  12[61]: Not(v1: boolean) -> boolean
  13[61]: GotoFalseWord(jump=24, if_false: boolean)
  16[60]: ConstInt(val=1) -> integer
  21[64]: GotoWord(jump=33)
  24[60]: VarInt(var[56]) -> integer var=t#index[56]:integer in 3
  27[64]: ConstInt(val=1) -> integer
  32[68]: AddInt(v1: integer, v2: integer) -> integer
  33[64]: PutInt(var[56], value: integer)
  36[60]: VarInt(var[56]) -> integer var=t#index[56]:integer in 3
  39[64]: ConstInt(val=4) -> integer
  44[68]: GeInt(v1: integer, v2: integer) -> boolean
  45[61]: GotoFalseWord(jump=51, if_false: boolean)
  48[60]: GotoWord(jump=102)
  51[60]: VarInt(var[56]) -> integer var=t#index[56]:integer in 3
  54[64]: VarInt(var[52]) -> integer var=a[52]:integer in 2
  57[68]: ClearText(var[28]) var=__work_1[28]:text in 1
  60[68]: ConstText(_value="0") -> text
  63[84]: AppendText(var[28], v1: text)
  66[68]: VarInt(var[60]) -> integer var=t[60]:integer in 4
  69[72]: ConstInt(val=0) -> integer
  74[76]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  81[68]: ConstText(_value="0") -> text
  84[84]: AppendText(var[28], v1: text)
  87[68]: VarText(var[28]) -> text var=__work_1[28]:text in 1
  90[84]: CastIntFromText(v1: text) -> integer
  91[72]: AddInt(v1: integer, v2: integer) -> integer
  92[68]: PutInt(var[52], value: integer)
  95[64]: FreeStack(value=0, discard=4)
  99[60]: GotoWord(jump=8)
 102[60]: FreeStack(value=0, discard=4)
 106[56]: VarInt(var[52]) -> integer var=a[52]:integer in 2
 109[60]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 113[56]: VarInt(var[52]) -> integer var=test_value[52]:integer in 1
 116[60]: ConstInt(val=60) -> integer
 121[64]: EqInt(v1: integer, v2: integer) -> boolean
 122[57]: GotoFalseWord(jump=128, if_false: boolean)
 125[56]: GotoWord(jump=178)
 128[56]: ClearText(var[4]) var=__work_2[4]:text in 1
 131[56]: ConstText(_value="Test failed ") -> text
 145[72]: AppendText(var[4], v1: text)
 148[56]: VarInt(var[52]) -> integer var=test_value[52]:integer in 1
 151[60]: ConstInt(val=0) -> integer
 156[64]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 163[56]: ConstText(_value=" != 60") -> text
 171[72]: AppendText(var[4], v1: text)
 174[56]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 177[72]: Panic(message: text)
 178[56]: FreeText(var[28])
 181[56]: FreeText(var[4])
 184[56]: Return(ret=0, value=0, discard=56)

