pub fn test() {
    test_value = {a = 0; for t in 1..4 { a += "0{t}0" as integer }; a};
    assert(
        test_value == 60,
        "Test failed {test_value} != 60"
    );
}
fn test() {#block(1):void
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    a(2):integer = 0i32;
    {#For block(3):void
      t#index(3):integer = OpConvIntFromNull();
      loop {#For loop_4
        t(4):integer = {#Iter range(5):integer
          t#index(3):integer = if OpNot(OpConvBoolFromInt(t#index(3))) 1i32 else OpAddInt(t#index(3), 1i32);
          if OpGeInt(t#index(3), 4i32) break(0) else null;
          t#index(3);
        }#Iter range(5):integer;
        {#block(6):void
          a(2):integer = OpAddInt(a(2), OpCastIntFromText({#Formatted string(7):text
            __work_1(1):text = "0";
            OpFormatInt(__work_1(1), t(4), 10i32, 0i32, 32i32, false, false);
            OpAppendText(__work_1(1), "0");
            __work_1(1);
          }#Formatted string(7):text));
        }#block(6):void;
      }#For loop_4;
    }#For block(3):void;
    a(2);
  }#block(2):integer;
  if OpEqInt(test_value(1), 60i32) null else OpPanic({#Formatted string(8):text
    __work_2(1):text = "Test failed ";
    OpFormatInt(__work_2(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2(1), " != 60");
    __work_2(1);
  }#Formatted string(8):text);
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for work_loop:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: ConstInt(val=0) -> integer var=a[56]:integer
   7[60]: ConvIntFromNull() -> integer var=t#index[60]:integer
   8[64]: VarInt(var[60]) -> integer var=t#index[60]:integer
  11[68]: ConvBoolFromInt(v1: integer) -> boolean
  12[65]: Not(v1: boolean) -> boolean
  13[65]: GotoFalseWord(jump=24, if_false: boolean)
  16[64]: ConstInt(val=1) -> integer
  21[68]: GotoWord(jump=33)
  24[64]: VarInt(var[60]) -> integer var=t#index[60]:integer
  27[68]: ConstInt(val=1) -> integer
  32[72]: AddInt(v1: integer, v2: integer) -> integer
  33[68]: PutInt(var[60], value: integer)
  36[64]: VarInt(var[60]) -> integer var=t#index[60]:integer
  39[68]: ConstInt(val=4) -> integer
  44[72]: GeInt(v1: integer, v2: integer) -> boolean
  45[65]: GotoFalseWord(jump=51, if_false: boolean)
  48[64]: GotoWord(jump=102)
  51[64]: VarInt(var[60]) -> integer var=t#index[60]:integer
  54[68]: VarInt(var[56]) -> integer var=a[56]:integer
  57[72]: ClearText(var[32]) var=__work_1[32]:text
  60[72]: ConstText(_value="0") -> text
  63[88]: AppendText(var[32], v1: text)
  66[72]: VarInt(var[64]) -> integer var=t[64]:integer
  69[76]: ConstInt(val=0) -> integer
  74[80]: FormatInt(var[32], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  81[72]: ConstText(_value="0") -> text
  84[88]: AppendText(var[32], v1: text)
  87[72]: VarText(var[32]) -> text var=__work_1[32]:text
  90[88]: CastIntFromText(v1: text) -> integer
  91[76]: AddInt(v1: integer, v2: integer) -> integer
  92[72]: PutInt(var[56], value: integer)
  95[68]: FreeStack(value=0, discard=4)
  99[64]: GotoWord(jump=8)
 102[64]: FreeStack(value=0, discard=4)
 106[60]: VarInt(var[56]) -> integer var=a[56]:integer
 109[64]: FreeStack(value=4, discard=8)
 113[60]: VarInt(var[56]) -> integer var=test_value[56]:integer
 116[64]: ConstInt(val=60) -> integer
 121[68]: EqInt(v1: integer, v2: integer) -> boolean
 122[61]: GotoFalseWord(jump=128, if_false: boolean)
 125[60]: GotoWord(jump=178)
 128[60]: ClearText(var[8]) var=__work_2[8]:text
 131[60]: ConstText(_value="Test failed ") -> text
 145[76]: AppendText(var[8], v1: text)
 148[60]: VarInt(var[56]) -> integer var=test_value[56]:integer
 151[64]: ConstInt(val=0) -> integer
 156[68]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 163[60]: ConstText(_value=" != 60") -> text
 171[76]: AppendText(var[8], v1: text)
 174[60]: VarText(var[8]) -> text var=__work_2[8]:text
 177[76]: Panic(message: text)
 178[60]: FreeText(var[32])
 181[60]: FreeText(var[8])
 184[60]: Return(ret=0, value=0, discard=56)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] ConstInt(val=0) -> 0[56]
    7:[60] ConvIntFromNull() -> -2147483648[60]
    8:[64] VarInt(var[60]) -> -2147483648[64]
   11:[68] ConvBoolFromInt(v1=-2147483648[64]) -> false[64]
   12:[65] Not(v1=false[64]) -> true[64]
   13:[65] GotoFalseWord(jump=24, if_false=true[64])
   16:[64] ConstInt(val=1) -> 1[64]
   21:[68] GotoWord(jump=33)
   33:[68] PutInt(var[60], value=1[64])
   36:[64] VarInt(var[60]) -> 1[64]
   39:[68] ConstInt(val=4) -> 4[68]
   44:[72] GeInt(v1=1[64], v2=4[68]) -> false[64]
   45:[65] GotoFalseWord(jump=51, if_false=false[64])
   51:[64] VarInt(var[60]) -> 1[64]
   54:[68] VarInt(var[56]) -> 0[68]
   57:[72] ClearText(var[32])
   60:[72] ConstText(_value="0") -> "0"[72]
   63:[88] AppendText(var[32], v1="0"[72])
   66:[72] VarInt(var[64]) -> 1[72]
   69:[76] ConstInt(val=0) -> 0[76]
   74:[80] FormatInt(var[32], val=1[72], radix=10, width=0[76], token=32, plus=false, note=false)
   81:[72] ConstText(_value="0") -> "0"[72]
   84:[88] AppendText(var[32], v1="0"[72])
   87:[72] VarText(var[32]) -> "010"[72]
   90:[88] CastIntFromText(v1="010"[72]) -> 10[72]
   91:[76] AddInt(v1=0[68], v2=10[72]) -> 10[68]
   92:[72] PutInt(var[56], value=10[68])
   95:[68] FreeStack(value=0, discard=4)
   99:[64] GotoWord(jump=8)
    8:[64] VarInt(var[60]) -> 1[64]
   11:[68] ConvBoolFromInt(v1=1[64]) -> true[64]
   12:[65] Not(v1=true[64]) -> false[64]
   13:[65] GotoFalseWord(jump=24, if_false=false[64])
   24:[64] VarInt(var[60]) -> 1[64]
   27:[68] ConstInt(val=1) -> 1[68]
   32:[72] AddInt(v1=1[64], v2=1[68]) -> 2[64]
   33:[68] PutInt(var[60], value=2[64])
   36:[64] VarInt(var[60]) -> 2[64]
   39:[68] ConstInt(val=4) -> 4[68]
   44:[72] GeInt(v1=2[64], v2=4[68]) -> false[64]
   45:[65] GotoFalseWord(jump=51, if_false=false[64])
   51:[64] VarInt(var[60]) -> 2[64]
   54:[68] VarInt(var[56]) -> 10[68]
   57:[72] ClearText(var[32])
   60:[72] ConstText(_value="0") -> "0"[72]
   63:[88] AppendText(var[32], v1="0"[72])
   66:[72] VarInt(var[64]) -> 2[72]
   69:[76] ConstInt(val=0) -> 0[76]
   74:[80] FormatInt(var[32], val=2[72], radix=10, width=0[76], token=32, plus=false, note=false)
   81:[72] ConstText(_value="0") -> "0"[72]
   84:[88] AppendText(var[32], v1="0"[72])
   87:[72] VarText(var[32]) -> "020"[72]
   90:[88] CastIntFromText(v1="020"[72]) -> 20[72]
   91:[76] AddInt(v1=10[68], v2=20[72]) -> 30[68]
   92:[72] PutInt(var[56], value=30[68])
   95:[68] FreeStack(value=0, discard=4)
   99:[64] GotoWord(jump=8)
    8:[64] VarInt(var[60]) -> 2[64]
   11:[68] ConvBoolFromInt(v1=2[64]) -> true[64]
   12:[65] Not(v1=true[64]) -> false[64]
   13:[65] GotoFalseWord(jump=24, if_false=false[64])
   24:[64] VarInt(var[60]) -> 2[64]
   27:[68] ConstInt(val=1) -> 1[68]
   32:[72] AddInt(v1=2[64], v2=1[68]) -> 3[64]
   33:[68] PutInt(var[60], value=3[64])
   36:[64] VarInt(var[60]) -> 3[64]
   39:[68] ConstInt(val=4) -> 4[68]
   44:[72] GeInt(v1=3[64], v2=4[68]) -> false[64]
   45:[65] GotoFalseWord(jump=51, if_false=false[64])
   51:[64] VarInt(var[60]) -> 3[64]
   54:[68] VarInt(var[56]) -> 30[68]
   57:[72] ClearText(var[32])
   60:[72] ConstText(_value="0") -> "0"[72]
   63:[88] AppendText(var[32], v1="0"[72])
   66:[72] VarInt(var[64]) -> 3[72]
   69:[76] ConstInt(val=0) -> 0[76]
   74:[80] FormatInt(var[32], val=3[72], radix=10, width=0[76], token=32, plus=false, note=false)
   81:[72] ConstText(_value="0") -> "0"[72]
   84:[88] AppendText(var[32], v1="0"[72])
   87:[72] VarText(var[32]) -> "030"[72]
   90:[88] CastIntFromText(v1="030"[72]) -> 30[72]
   91:[76] AddInt(v1=30[68], v2=30[72]) -> 60[68]
   92:[72] PutInt(var[56], value=60[68])
   95:[68] FreeStack(value=0, discard=4)
   99:[64] GotoWord(jump=8)
    8:[64] VarInt(var[60]) -> 3[64]
   11:[68] ConvBoolFromInt(v1=3[64]) -> true[64]
   12:[65] Not(v1=true[64]) -> false[64]
   13:[65] GotoFalseWord(jump=24, if_false=false[64])
   24:[64] VarInt(var[60]) -> 3[64]
   27:[68] ConstInt(val=1) -> 1[68]
   32:[72] AddInt(v1=3[64], v2=1[68]) -> 4[64]
   33:[68] PutInt(var[60], value=4[64])
   36:[64] VarInt(var[60]) -> 4[64]
   39:[68] ConstInt(val=4) -> 4[68]
   44:[72] GeInt(v1=4[64], v2=4[68]) -> true[64]
   45:[65] GotoFalseWord(jump=51, if_false=true[64])
   48:[64] GotoWord(jump=102)
  102:[64] FreeStack(value=0, discard=4)
  106:[60] VarInt(var[56]) -> 60[60]
  109:[64] FreeStack(value=4, discard=8)
  113:[60] VarInt(var[56]) -> 60[60]
  116:[64] ConstInt(val=60) -> 60[64]
  121:[68] EqInt(v1=60[60], v2=60[64]) -> true[60]
  122:[61] GotoFalseWord(jump=128, if_false=true[60])
  125:[60] GotoWord(jump=178)
  178:[60] FreeText(var[32])
  181:[60] FreeText(var[8])
  184:[60] Return(ret=4294967295[4], value=0, discard=56)
Finished
