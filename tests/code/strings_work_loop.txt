pub fn test() {
    test_value = {a = 0; for t in 1..4 { a += "0{t}0" as integer }; a};
    assert(
        test_value == 60,
        "Test failed {test_value} != 60"
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 0i32;
    {#3 for
      t#index:integer = OpConvIntFromNull();
      loop {#4 for loop
        t:integer = {#5 for next
          t#index:integer = if OpNot(OpConvBoolFromInt(t#index)) 1i32 else OpAddInt(t#index, 1i32);
          if OpGeInt(t#index, 4i32) break(0) else null;
          t#index;
        }#5:integer;
        {#6 block
          a:integer = OpAddInt(a, OpCastIntFromText({#7 formatting string
            __work_1:text = "0";
            OpFormatInt(__work_1, t, 10i32, 0i32, 32i32, false, false);
            OpAppendText(__work_1, "0");
            __work_1;
          }#7:text));
        }#6;
      }#4;
    }#3;
    a;
  }#2:integer;
  if OpEqInt(test_value, 60i32) null else OpPanic({#8 formatting string
    __work_2:text = "Test failed ";
    OpFormatInt(__work_2, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " != 60");
    __work_2;
  }#8:text);
}#1

byte-code for work_loop:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Text()
 694[52]: ConstInt(val=0) -> integer
 699[56]: ConvIntFromNull() -> integer
 700[60]: VarInt(var[56]) -> integer
 703[64]: ConvBoolFromInt(v1: integer) -> boolean
 704[61]: Not(v1: boolean) -> boolean
 705[61]: GotoFalseWord(jump=716, if_false: boolean)
 708[60]: ConstInt(val=1) -> integer
 713[64]: GotoWord(jump=725)
 716[60]: VarInt(var[56]) -> integer
 719[64]: ConstInt(val=1) -> integer
 724[68]: AddInt(v1: integer, v2: integer) -> integer
 725[64]: PutInt(var[56], value: integer)
 728[60]: VarInt(var[56]) -> integer
 731[64]: ConstInt(val=4) -> integer
 736[68]: GeInt(v1: integer, v2: integer) -> boolean
 737[61]: GotoFalseWord(jump=743, if_false: boolean)
 740[60]: GotoWord(jump=794)
 743[60]: VarInt(var[56]) -> integer
 746[64]: VarInt(var[52]) -> integer
 749[68]: ClearText(var[28])
 752[68]: ConstText(_value="0") -> text
 755[84]: AppendText(var[28], v1: text)
 758[68]: VarInt(var[60]) -> integer
 761[72]: ConstInt(val=0) -> integer
 766[76]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 773[68]: ConstText(_value="0") -> text
 776[84]: AppendText(var[28], v1: text)
 779[68]: VarText(var[28]) -> text
 782[84]: CastIntFromText(v1: text) -> integer
 783[72]: AddInt(v1: integer, v2: integer) -> integer
 784[68]: PutInt(var[52], value: integer)
 787[64]: FreeStack(value=0, discard=4)
 791[60]: GotoWord(jump=700)
 794[60]: FreeStack(value=0, discard=4)
 798[56]: VarInt(var[52]) -> integer
 801[60]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 805[56]: VarInt(var[52]) -> integer
 808[60]: ConstInt(val=60) -> integer
 813[64]: EqInt(v1: integer, v2: integer) -> boolean
 814[57]: GotoFalseWord(jump=820, if_false: boolean)
 817[56]: GotoWord(jump=870)
 820[56]: ClearText(var[4])
 823[56]: ConstText(_value="Test failed ") -> text
 837[72]: AppendText(var[4], v1: text)
 840[56]: VarInt(var[52]) -> integer
 843[60]: ConstInt(val=0) -> integer
 848[64]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 855[56]: ConstText(_value=" != 60") -> text
 863[72]: AppendText(var[4], v1: text)
 866[56]: VarText(var[4]) -> text
 869[72]: Panic(message: text)
 870[56]: Return(ret=0, value=0, discard=56)

Execute test:
  692:[8] Text()
  693:[32] Text()
  694:[56] ConstInt(val=0) -> 0[56]
  699:[60] ConvIntFromNull() -> -2147483648[60]
  700:[64] VarInt(var[60]) -> -2147483648[64]
  703:[68] ConvBoolFromInt(v1=-2147483648[64]) -> false[64]
  704:[65] Not(v1=false[64]) -> true[64]
  705:[65] GotoFalseWord(jump=716, if_false=true[64])
  708:[64] ConstInt(val=1) -> 1[64]
  713:[68] GotoWord(jump=725)
  725:[68] PutInt(var[60], value=1[64])
  728:[64] VarInt(var[60]) -> 1[64]
  731:[68] ConstInt(val=4) -> 4[68]
  736:[72] GeInt(v1=1[64], v2=4[68]) -> false[64]
  737:[65] GotoFalseWord(jump=743, if_false=false[64])
  743:[64] VarInt(var[60]) -> 1[64]
  746:[68] VarInt(var[56]) -> 0[68]
  749:[72] ClearText(var[32])
  752:[72] ConstText(_value="0") -> "0"[72]
  755:[88] AppendText(var[32], v1="0"[72])
  758:[72] VarInt(var[64]) -> 1[72]
  761:[76] ConstInt(val=0) -> 0[76]
  766:[80] FormatInt(var[32], val=1[72], radix=10, width=0[76], token=32, plus=false, note=false)
  773:[72] ConstText(_value="0") -> "0"[72]
  776:[88] AppendText(var[32], v1="0"[72])
  779:[72] VarText(var[32]) -> "010"[72]
  782:[88] CastIntFromText(v1="010"[72]) -> 10[72]
  783:[76] AddInt(v1=0[68], v2=10[72]) -> 10[68]
  784:[72] PutInt(var[56], value=10[68])
  787:[68] FreeStack(value=0, discard=4)
  791:[64] GotoWord(jump=700)
  700:[64] VarInt(var[60]) -> 1[64]
  703:[68] ConvBoolFromInt(v1=1[64]) -> true[64]
  704:[65] Not(v1=true[64]) -> false[64]
  705:[65] GotoFalseWord(jump=716, if_false=false[64])
  716:[64] VarInt(var[60]) -> 1[64]
  719:[68] ConstInt(val=1) -> 1[68]
  724:[72] AddInt(v1=1[64], v2=1[68]) -> 2[64]
  725:[68] PutInt(var[60], value=2[64])
  728:[64] VarInt(var[60]) -> 2[64]
  731:[68] ConstInt(val=4) -> 4[68]
  736:[72] GeInt(v1=2[64], v2=4[68]) -> false[64]
  737:[65] GotoFalseWord(jump=743, if_false=false[64])
  743:[64] VarInt(var[60]) -> 2[64]
  746:[68] VarInt(var[56]) -> 10[68]
  749:[72] ClearText(var[32])
  752:[72] ConstText(_value="0") -> "0"[72]
  755:[88] AppendText(var[32], v1="0"[72])
  758:[72] VarInt(var[64]) -> 2[72]
  761:[76] ConstInt(val=0) -> 0[76]
  766:[80] FormatInt(var[32], val=2[72], radix=10, width=0[76], token=32, plus=false, note=false)
  773:[72] ConstText(_value="0") -> "0"[72]
  776:[88] AppendText(var[32], v1="0"[72])
  779:[72] VarText(var[32]) -> "020"[72]
  782:[88] CastIntFromText(v1="020"[72]) -> 20[72]
  783:[76] AddInt(v1=10[68], v2=20[72]) -> 30[68]
  784:[72] PutInt(var[56], value=30[68])
  787:[68] FreeStack(value=0, discard=4)
  791:[64] GotoWord(jump=700)
  700:[64] VarInt(var[60]) -> 2[64]
  703:[68] ConvBoolFromInt(v1=2[64]) -> true[64]
  704:[65] Not(v1=true[64]) -> false[64]
  705:[65] GotoFalseWord(jump=716, if_false=false[64])
  716:[64] VarInt(var[60]) -> 2[64]
  719:[68] ConstInt(val=1) -> 1[68]
  724:[72] AddInt(v1=2[64], v2=1[68]) -> 3[64]
  725:[68] PutInt(var[60], value=3[64])
  728:[64] VarInt(var[60]) -> 3[64]
  731:[68] ConstInt(val=4) -> 4[68]
  736:[72] GeInt(v1=3[64], v2=4[68]) -> false[64]
  737:[65] GotoFalseWord(jump=743, if_false=false[64])
  743:[64] VarInt(var[60]) -> 3[64]
  746:[68] VarInt(var[56]) -> 30[68]
  749:[72] ClearText(var[32])
  752:[72] ConstText(_value="0") -> "0"[72]
  755:[88] AppendText(var[32], v1="0"[72])
  758:[72] VarInt(var[64]) -> 3[72]
  761:[76] ConstInt(val=0) -> 0[76]
  766:[80] FormatInt(var[32], val=3[72], radix=10, width=0[76], token=32, plus=false, note=false)
  773:[72] ConstText(_value="0") -> "0"[72]
  776:[88] AppendText(var[32], v1="0"[72])
  779:[72] VarText(var[32]) -> "030"[72]
  782:[88] CastIntFromText(v1="030"[72]) -> 30[72]
  783:[76] AddInt(v1=30[68], v2=30[72]) -> 60[68]
  784:[72] PutInt(var[56], value=60[68])
  787:[68] FreeStack(value=0, discard=4)
  791:[64] GotoWord(jump=700)
  700:[64] VarInt(var[60]) -> 3[64]
  703:[68] ConvBoolFromInt(v1=3[64]) -> true[64]
  704:[65] Not(v1=true[64]) -> false[64]
  705:[65] GotoFalseWord(jump=716, if_false=false[64])
  716:[64] VarInt(var[60]) -> 3[64]
  719:[68] ConstInt(val=1) -> 1[68]
  724:[72] AddInt(v1=3[64], v2=1[68]) -> 4[64]
  725:[68] PutInt(var[60], value=4[64])
  728:[64] VarInt(var[60]) -> 4[64]
  731:[68] ConstInt(val=4) -> 4[68]
  736:[72] GeInt(v1=4[64], v2=4[68]) -> true[64]
  737:[65] GotoFalseWord(jump=743, if_false=true[64])
  740:[64] GotoWord(jump=794)
  794:[64] FreeStack(value=0, discard=4)
  798:[60] VarInt(var[56]) -> 60[60]
  801:[64] FreeStack(value=4, discard=8)
  805:[60] VarInt(var[56]) -> 60[60]
  808:[64] ConstInt(val=60) -> 60[64]
  813:[68] EqInt(v1=60[60], v2=60[64]) -> true[60]
  814:[61] GotoFalseWord(jump=820, if_false=true[60])
  817:[60] GotoWord(jump=870)
  870:[60] Return(ret=4294967295[4], value=0, discard=56)
Finished
