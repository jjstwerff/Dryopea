struct Data {
  num: integer,
  values: vector<integer>
}

fn add(r: &Data = null, val: integer) {
    if !r {
       r = Data { num: 0 };
    }
    r.num += val;
    r.values += [val];
}

pub fn test() {
    test_value = {v = Data { num: 1 }; add(v, 2); add(v, 3); "{v}"};
    assert(
        test_value == "{{num:6,values:[2,3]}}",
        "Test failed {test_value} != \"{{num:6,values:[2,3]}}\""
    );
}
Type 17:vector<integer>[4]:Vector(0)

Type 18:Data[12]:
    num:integer[4]
    values:vector<integer>[8]

fn add(r:&ref(Data), val:integer) {#1 block
  if OpNot(OpConvBoolFromRef(r)) {#2 block
    r:&ref(Data) = OpConvRefFromNull();
    OpDatabase(r, 18i32);
    OpSetInt(r, 4i32, 0i32);
    OpSetInt(r, 8i32, 0i32);
  }#2 else null;
  OpSetInt(r, 4i32, OpAddInt(OpGetInt(r, 4i32), val));
  _elm_1:ref(boolean)["r"] = OpNewRecord(r, 18i32, 1i32);
  OpSetInt(_elm_1, 0i32, val);
  OpFinishRecord(r, _elm_1, 18i32, 1i32);
}#1

byte-code for mutable_reference:add(r: &ref(Data)[0], val: integer[12]) [1176]
   0[16]: return-address
   0[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
   3[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
   6[32]: ConvBoolFromRef(val: ref(reference)) -> boolean
   7[21]: Not(v1: boolean) -> boolean
   8[21]: GotoFalseWord(jump=51, if_false: boolean)
  11[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  14[32]: ConvRefFromNull() -> ref(reference)
  15[44]: SetDbRef(r: ref(reference), fld=0, v1: ref(reference))
  18[20]: Database(var[0], db_tp=18) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18]
  23[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  26[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  29[32]: ConstInt(val=0) -> integer
  34[36]: SetInt(v1: ref(reference), fld=4, val: integer)
  37[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  40[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  43[32]: ConstInt(val=0) -> integer
  48[36]: SetInt(v1: ref(reference), fld=8, val: integer)
  51[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  54[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  57[32]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  60[44]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  63[44]: GetInt(v1: ref(reference), fld=4) -> integer
  66[36]: VarInt(var[12]) -> integer var=val[12]:integer in 0
  69[40]: AddInt(v1: integer, v2: integer) -> integer
  70[36]: SetInt(v1: ref(reference), fld=4, val: integer)
  73[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  76[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  79[32]: NewRecord(data: ref(reference), parent_tp=18, fld=1) -> ref(reference)
  84[32]: VarRef(var[20]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[20]:ref(boolean)["r"] in 1
  87[44]: VarInt(var[12]) -> integer var=val[12]:integer in 0
  90[48]: SetInt(v1: ref(reference), fld=0, val: integer)
  93[32]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  96[44]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  99[44]: VarRef(var[20]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[20]:ref(boolean)["r"] in 1
 102[56]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=1)
 107[32]: Return(ret=16, value=0, discard=32)

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    v:ref(Data)["v"] = OpConvRefFromNull();
    OpDatabase(v, 18i32);
    OpSetInt(v, 4i32, 1i32);
    OpSetInt(v, 8i32, 0i32);
    add(OpCreateRef(v), 2i32);
    add(OpCreateRef(v), 3i32);
    {#3 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 18i32, false);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "{num:6,values:[2,3]}") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "{num:6,values:[2,3]}"");
    __work_2;
  }#4:text);
}#1

byte-code for mutable_reference:test() [1289]
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: ConvRefFromNull() -> ref(reference) var=v[76]:ref(Data)["v"] in 2
   4[88]: Database(var[76], db_tp=18) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18]
   9[88]: VarRef(var[76]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18] var=v[76]:ref(Data)["v"] in 2
  12[100]: ConstInt(val=1) -> integer
  17[104]: SetInt(v1: ref(reference), fld=4, val: integer)
  20[88]: VarRef(var[76]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18] var=v[76]:ref(Data)["v"] in 2
  23[100]: ConstInt(val=0) -> integer
  28[104]: SetInt(v1: ref(reference), fld=8, val: integer)
  31[88]: CreateRef(var[76]) -> ref(reference)
  34[100]: ConstInt(val=2) -> integer
  39[104]: Call(size=0, to=1176)
  46[88]: CreateRef(var[76]) -> ref(reference)
  49[100]: ConstInt(val=3) -> integer
  54[104]: Call(size=0, to=1176)
  61[88]: ClearText(var[28]) var=__work_1[28]:text in 1
  64[88]: ConstText(_value="") -> text
  66[104]: AppendText(var[28], v1: text)
  69[88]: VarRef(var[76]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18] var=v[76]:ref(Data)["v"] in 2
  72[100]: FormatDatabase(var[28], val: ref(reference), db_tp=18, pretty=false)
  78[88]: VarText(var[28]) -> text var=__work_1[28]:text in 1
  81[104]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
  85[92]: AppendText(var[52], v1: text)
  88[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
  91[92]: ConstText(_value="{num:6,values:[2,3]}") -> text
 113[108]: EqText(v1: text, v2: text) -> boolean
 114[77]: GotoFalseWord(jump=120, if_false: boolean)
 117[76]: GotoWord(jump=188)
 120[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 123[76]: ConstText(_value="Test failed ") -> text
 137[92]: AppendText(var[4], v1: text)
 140[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 143[92]: ConstInt(val=0) -> integer
 148[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 153[76]: ConstText(_value=" != "{num:6,values:[2,3]}"") -> text
 181[92]: AppendText(var[4], v1: text)
 184[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 187[92]: Panic(message: text)
 188[76]: FreeText(var[52])
 191[76]: FreeText(var[28])
 194[76]: FreeText(var[4])
 197[76]: Return(ret=0, value=0, discard=76)

