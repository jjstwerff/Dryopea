struct Data {
  num: integer,
  values: vector<integer>
}

fn add(r: &Data = null, val: integer) {
    if !r {
       r = Data { num: 0 };
    }
    r.num += val;
    r.values += [val];
}

pub fn test() {
    test_value = {v = Data { num: 1 }; add(v, 2); add(v, 3); "{v}"};
    assert(
        test_value == "{{num:6,values:[2,3]}}",
        "Test failed {test_value} != \"{{num:6,values:[2,3]}}\""
    );
}
Type 17:vector<integer>[4]:Vector(0)

Type 18:Data[12]:
    num:integer[4]
    values:vector<integer>[8]

fn add(r:&ref(Data), val:integer) {#block(1):void
  if OpNot(OpConvBoolFromRef(r(0))) {#block(2):void
    OpDatabase(r(0), 18i32);
    OpSetInt(r(0), 4i32, 0i32);
    OpSetInt(r(0), 8i32, 0i32);
  }#block(2):void else null;
  OpSetInt(r(0), 4i32, OpAddInt(OpGetInt(r(0), 4i32), val(0)));
  _elm_1(1):ref(boolean)["r"] = OpNewRecord(r(0), 18i32, 1i32);
  OpSetInt(_elm_1(1), 0i32, val(0));
  OpFinishRecord(r(0), _elm_1(1), 18i32, 1i32);
}#block(1):void

byte-code for mutable_reference:add(r: &ref(Data)[4], val: integer[16]) [1119]
   0[20]: return-address
   0[24]: VarRef(var[4]) -> ref(reference) var=r[4]:&ref(Data)
   3[36]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
   6[36]: ConvBoolFromRef(val: ref(reference)) -> boolean
   7[25]: Not(v1: boolean) -> boolean
   8[25]: GotoFalseWord(jump=44, if_false: boolean)
  11[24]: Database(var[4], db_tp=18) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18]
  16[24]: VarRef(var[4]) -> ref(reference) var=r[4]:&ref(Data)
  19[36]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  22[36]: ConstInt(val=0) -> integer
  27[40]: SetInt(v1: ref(reference), fld=4, val: integer)
  30[24]: VarRef(var[4]) -> ref(reference) var=r[4]:&ref(Data)
  33[36]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  36[36]: ConstInt(val=0) -> integer
  41[40]: SetInt(v1: ref(reference), fld=8, val: integer)
  44[24]: VarRef(var[4]) -> ref(reference) var=r[4]:&ref(Data)
  47[36]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  50[36]: VarRef(var[4]) -> ref(reference) var=r[4]:&ref(Data)
  53[48]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  56[48]: GetInt(v1: ref(reference), fld=4) -> integer
  59[40]: VarInt(var[16]) -> integer var=val[16]:integer
  62[44]: AddInt(v1: integer, v2: integer) -> integer
  63[40]: SetInt(v1: ref(reference), fld=4, val: integer)
  66[24]: VarRef(var[4]) -> ref(reference) var=r[4]:&ref(Data)
  69[36]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  72[36]: NewRecord(data: ref(reference), parent_tp=18, fld=1) -> ref(reference)
  77[36]: VarRef(var[24]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[24]:ref(boolean)["r"]
  80[48]: VarInt(var[16]) -> integer var=val[16]:integer
  83[52]: SetInt(v1: ref(reference), fld=0, val: integer)
  86[36]: VarRef(var[4]) -> ref(reference) var=r[4]:&ref(Data)
  89[48]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  92[48]: VarRef(var[24]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[24]:ref(boolean)["r"]
  95[60]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=1)
 100[36]: Return(ret=16, value=0, discard=32)

fn test() {#block(1):void
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text = {#block(2):text
    v(2):ref(Data) = null;
    OpDatabase(v(2), 18i32);
    OpSetInt(v(2), 4i32, 1i32);
    OpSetInt(v(2), 8i32, 0i32);
    add(OpCreateRef(v(2)), 2i32);
    add(OpCreateRef(v(2)), 3i32);
    {#Formatted string(3):text
      __work_1(1):text = "";
      OpFormatDatabase(__work_1(1), v(2), 18i32, false);
      OpFreeRef(v(2));
      __work_1(1);
    }#Formatted string(3):text;
  }#block(2):text;
  if OpEqText(test_value(1), "{num:6,values:[2,3]}") null else OpPanic({#Formatted string(4):text
    __work_2(1):text = "Test failed ";
    OpFormatText(__work_2(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_2(1), " != "{num:6,values:[2,3]}"");
    __work_2(1);
  }#Formatted string(4):text);
  OpFreeText(test_value(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for mutable_reference:test() [1225]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: Text() var=test_value[56]:text
   3[80]: ConvRefFromNull() -> ref(reference) var=v[80]:ref(Data)
   4[92]: Database(var[80], db_tp=18) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18]
   9[92]: VarRef(var[80]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18] var=v[80]:ref(Data)
  12[104]: ConstInt(val=1) -> integer
  17[108]: SetInt(v1: ref(reference), fld=4, val: integer)
  20[92]: VarRef(var[80]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18] var=v[80]:ref(Data)
  23[104]: ConstInt(val=0) -> integer
  28[108]: SetInt(v1: ref(reference), fld=8, val: integer)
  31[92]: CreateRef(var[80]) -> ref(reference)
  34[104]: ConstInt(val=2) -> integer
  39[108]: Call(size=0, to=1119)
  46[92]: CreateRef(var[80]) -> ref(reference)
  49[104]: ConstInt(val=3) -> integer
  54[108]: Call(size=0, to=1119)
  61[92]: ClearText(var[32]) var=__work_1[32]:text
  64[92]: ConstText(_value="") -> text
  66[108]: AppendText(var[32], v1: text)
  69[92]: VarRef(var[80]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18] var=v[80]:ref(Data)
  72[104]: FormatDatabase(var[32], val: ref(reference), db_tp=18, pretty=false)
  78[92]: VarRef(var[80]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[18] var=v[80]:ref(Data)
  81[104]: FreeRef(v1: ref(reference))
  82[92]: VarText(var[32]) -> text var=__work_1[32]:text
  85[108]: FreeStack(value=16, discard=28)
  89[96]: AppendText(var[56], v1: text)
  92[80]: VarText(var[56]) -> text var=test_value[56]:text
  95[96]: ConstText(_value="{num:6,values:[2,3]}") -> text
 117[112]: EqText(v1: text, v2: text) -> boolean
 118[81]: GotoFalseWord(jump=124, if_false: boolean)
 121[80]: GotoWord(jump=192)
 124[80]: ClearText(var[8]) var=__work_2[8]:text
 127[80]: ConstText(_value="Test failed ") -> text
 141[96]: AppendText(var[8], v1: text)
 144[80]: VarText(var[56]) -> text var=test_value[56]:text
 147[96]: ConstInt(val=0) -> integer
 152[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
 157[80]: ConstText(_value=" != "{num:6,values:[2,3]}"") -> text
 185[96]: AppendText(var[8], v1: text)
 188[80]: VarText(var[8]) -> text var=__work_2[8]:text
 191[96]: Panic(message: text)
 192[80]: FreeText(var[56])
 195[80]: FreeText(var[32])
 198[80]: FreeText(var[8])
 201[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ConvRefFromNull() -> ref(1,0,0)[80]
    4:[92] Database(var[80], db_tp=18)
    9:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
   12:[104] ConstInt(val=1) -> 1[104]
   17:[108] SetInt(v1=ref(1,1,0)[92], fld=4, val=1[104])
   20:[92] VarRef(var[80]) -> ref(1,1,0)={num:1}[92]
   23:[104] ConstInt(val=0) -> 0[104]
   28:[108] SetInt(v1=ref(1,1,0)[92], fld=8, val=0[104])
   31:[92] CreateRef(var[80]) -> ref(0,1,80)[92]
   34:[104] ConstInt(val=2) -> 2[104]
   39:[108] Call(size=0, to=1119)
 1119:[112] VarRef(var[92]) -> ref(0,1,80)[112]
 1122:[124] GetDbRef(r=ref(0,1,80)[112], fld=0) -> ref(1,1,0)[112]
 1123:[124] Goto(jump=-16538)
 1125:[124] ConvBoolFromRef(val=ref(1,1,0)[112]) -> true[112]
 1126:[113] Not(v1=true[112]) -> false[112]
 1127:[113] GotoFalseWord(jump=1163, if_false=false[112])
 1163:[112] VarRef(var[92]) -> ref(0,1,80)[112]
 1166:[124] GetDbRef(r=ref(0,1,80)[112], fld=0) -> ref(1,1,0)[112]
 1167:[124] Goto(jump=-15470)
 1169:[124] VarRef(var[92]) -> ref(0,1,80)[124]
 1172:[136] GetDbRef(r=ref(0,1,80)[124], fld=0) -> ref(1,1,0)[124]
 1173:[136] Goto(jump=-13672)
 1175:[136] GetInt(v1=ref(1,1,0)[124], fld=4) -> 1[124]
 1178:[128] VarInt(var[104]) -> 2[128]
 1181:[132] AddInt(v1=1[124], v2=2[128]) -> 3[124]
 1182:[128] SetInt(v1=ref(1,1,0)[112], fld=4, val=3[124])
 1185:[112] VarRef(var[92]) -> ref(0,1,80)[112]
 1188:[124] GetDbRef(r=ref(0,1,80)[112], fld=0) -> ref(1,1,0)[112]
 1189:[124] Goto(jump=-7768)
 1191:[124] NewRecord(data=ref(1,1,0)[112], parent_tp=18, fld=1) -> ref(1,13,8)[112]
 1196:[124] VarRef(var[112]) -> ref(1,13,8)=false[124]
 1199:[136] VarInt(var[104]) -> 2[136]
 1202:[140] SetInt(v1=ref(1,13,8)[124], fld=0, val=2[136])
 1205:[124] VarRef(var[92]) -> ref(0,1,80)[124]
 1208:[136] GetDbRef(r=ref(0,1,80)[124], fld=0) -> ref(1,1,0)[124]
 1209:[136] Goto(jump=-15428)
 1211:[136] VarRef(var[112]) -> ref(1,13,8)=true[136]
 1214:[148] FinishRecord(data=ref(1,1,0)[124], rec=ref(1,13,8)[136], parent_tp=18, fld=1)
 1219:[124] Return(ret=1271[108], value=0, discard=32)
   46:[92] CreateRef(var[80]) -> ref(0,1,80)[92]
   49:[104] ConstInt(val=3) -> 3[104]
   54:[108] Call(size=0, to=1119)
 1119:[112] VarRef(var[92]) -> ref(0,1,80)[112]
 1122:[124] GetDbRef(r=ref(0,1,80)[112], fld=0) -> ref(1,1,0)[112]
 1123:[124] Goto(jump=-16538)
 1125:[124] ConvBoolFromRef(val=ref(1,1,0)[112]) -> true[112]
 1126:[113] Not(v1=true[112]) -> false[112]
 1127:[113] GotoFalseWord(jump=1163, if_false=false[112])
 1163:[112] VarRef(var[92]) -> ref(0,1,80)[112]
 1166:[124] GetDbRef(r=ref(0,1,80)[112], fld=0) -> ref(1,1,0)[112]
 1167:[124] Goto(jump=-15470)
 1169:[124] VarRef(var[92]) -> ref(0,1,80)[124]
 1172:[136] GetDbRef(r=ref(0,1,80)[124], fld=0) -> ref(1,1,0)[124]
 1173:[136] Goto(jump=-13672)
 1175:[136] GetInt(v1=ref(1,1,0)[124], fld=4) -> 3[124]
 1178:[128] VarInt(var[104]) -> 3[128]
 1181:[132] AddInt(v1=3[124], v2=3[128]) -> 6[124]
 1182:[128] SetInt(v1=ref(1,1,0)[112], fld=4, val=6[124])
 1185:[112] VarRef(var[92]) -> ref(0,1,80)[112]
 1188:[124] GetDbRef(r=ref(0,1,80)[112], fld=0) -> ref(1,1,0)[112]
 1189:[124] Goto(jump=-7768)
 1191:[124] NewRecord(data=ref(1,1,0)[112], parent_tp=18, fld=1) -> ref(1,13,12)[112]
 1196:[124] VarRef(var[112]) -> ref(1,13,12)=false[124]
 1199:[136] VarInt(var[104]) -> 3[136]
 1202:[140] SetInt(v1=ref(1,13,12)[124], fld=0, val=3[136])
 1205:[124] VarRef(var[92]) -> ref(0,1,80)[124]
 1208:[136] GetDbRef(r=ref(0,1,80)[124], fld=0) -> ref(1,1,0)[124]
 1209:[136] Goto(jump=-15428)
 1211:[136] VarRef(var[112]) -> ref(1,13,12)=true[136]
 1214:[148] FinishRecord(data=ref(1,1,0)[124], rec=ref(1,13,12)[136], parent_tp=18, fld=1)
 1219:[124] Return(ret=1286[108], value=0, discard=32)
   61:[92] ClearText(var[32])
   64:[92] ConstText(_value="") -> ""[92]
   66:[108] AppendText(var[32], v1=""[92])
   69:[92] VarRef(var[80]) -> ref(1,1,0)={num:6,values:[2,3]}[92]
   72:[104] FormatDatabase(var[32], val=ref(1,1,0)[92], db_tp=18, pretty=false)
   78:[92] VarRef(var[80]) -> ref(1,1,0)={num:6,values:[2,3]}[92]
   81:[104] FreeRef(v1=ref(1,1,0)[92])
   82:[92] VarText(var[32]) -> "{num:6,values:[2,3]}"[92]
   85:[108] FreeStack(value=16, discard=28)
   89:[96] AppendText(var[56], v1="{num:6,values:[2,3]}"[80])
   92:[80] VarText(var[56]) -> "{num:6,values:[2,3]}"[80]
   95:[96] ConstText(_value="{num:6,values:[2,3]}") -> "{num:6,values:[2,3]}"[96]
  117:[112] EqText(v1="{num:6,values:[2,3]}"[80], v2="{num:6,values:[2,3]}"[96]) -> true[80]
  118:[81] GotoFalseWord(jump=124, if_false=true[80])
  121:[80] GotoWord(jump=192)
  192:[80] FreeText(var[56])
  195:[80] FreeText(var[32])
  198:[80] FreeText(var[8])
  201:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
