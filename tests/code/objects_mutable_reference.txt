struct Data {
  num: integer,
  values: vector<integer>
}

fn add(r: &Data = null, val: integer) {
    if !r {
       r = Data { num: 0 };
    }
    r.num += val;
    r.values += [val];
}

pub fn test() {
    test_value = {v = Data { num: 1 }; add(v, 2); add(v, 3); "{v}"};
    assert(
        test_value == "{{num:6,values:[2,3]}}",
        "Test failed {test_value} != \"{{num:6,values:[2,3]}}\""
    );
}
Type 15:vector<integer>[4]:Vector(0)

Type 16:Data[12]:
    num:integer[4]
    values:vector<integer>[8]

fn add(r:&ref(Data), val:integer) {#1 block
  if OpNot(OpConvBoolFromRef(r)) {#2 block
    {#3 object
      OpDatabase(r, 16i32);
      OpSetInt(r, 4i32, 0i32);
      OpSetInt(r, 8i32, 0i32);
    }#3;
  }#2 else null;
  OpSetInt(r, 4i32, OpAddInt(OpGetInt(r, 4i32), val));
  {#4 vector
    _elm_1:ref(boolean)["r"] = OpNewRecord(r, 16i32, 1i32);
    OpSetInt(_elm_1, 0i32, val);
    OpFinishRecord(r, _elm_1, 16i32, 1i32);
  }#4;
}#1

byte-code for mutable_reference:add(r: &ref(Data)[0], val: integer[12]) [1082]
   0[16]: return-address
   0[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
   3[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
   6[32]: ConvBoolFromRef(val: ref(reference)) -> boolean
   7[21]: Not(v1: boolean) -> boolean
   8[21]: GotoFalseWord(jump=44, if_false: boolean)
  11[20]: Database(var[0], db_tp=16) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[16]
  16[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  19[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  22[32]: ConstInt(val=0) -> integer
  27[36]: SetInt(v1: ref(reference), fld=4, val: integer)
  30[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  33[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  36[32]: ConstInt(val=0) -> integer
  41[36]: SetInt(v1: ref(reference), fld=8, val: integer)
  44[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  47[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  50[32]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  53[44]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  56[44]: GetInt(v1: ref(reference), fld=4) -> integer
  59[36]: VarInt(var[12]) -> integer var=val[12]:integer in 0
  62[40]: AddInt(v1: integer, v2: integer) -> integer
  63[36]: SetInt(v1: ref(reference), fld=4, val: integer)
  66[20]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  69[32]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  72[32]: NewRecord(data: ref(reference), parent_tp=16, fld=1) -> ref(reference)
  77[32]: VarRef(var[20]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[20]:ref(boolean)["r"] in 4
  80[44]: VarInt(var[12]) -> integer var=val[12]:integer in 0
  83[48]: SetInt(v1: ref(reference), fld=0, val: integer)
  86[32]: VarRef(var[0]) -> ref(reference) var=r[0]:&ref(Data) in 0
  89[44]: GetDbRef(r: ref(reference), fld=0) -> ref(reference)
  92[44]: VarRef(var[20]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[20]:ref(boolean)["r"] in 4
  95[56]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=1)
 100[32]: FreeStack(value=0, discard=12)
 104[20]: Return(ret=16, value=0, discard=20)

fn test() {#1 block
  __ref_1:ref(Data) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    v:ref(Data)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 16i32);
      OpSetInt(__ref_1, 4i32, 1i32);
      OpSetInt(__ref_1, 8i32, 0i32);
      __ref_1;
    }#3:ref(Data)["__ref_1"];
    add(OpCreateRef(v), 2i32);
    add(OpCreateRef(v), 3i32);
    {#4 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 16i32, false);
      __work_1;
    }#4:text;
  }#2:text;
  if OpEqText(test_value, "{num:6,values:[2,3]}") null else OpPanic({#5 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "{num:6,values:[2,3]}"");
    __work_2;
  }#5:text);
}#1

byte-code for mutable_reference:test() [1192]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Data) in 1
   1[16]: Text() var=__work_2[16]:text in 1
   2[40]: Text() var=__work_1[40]:text in 1
   3[64]: Text() var=test_value[64]:text in 1
   4[88]: Database(var[4], db_tp=16) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[16] var=v[88]:ref(Data)["__ref_1"] in 2
   9[88]: VarRef(var[4]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[16] var=__ref_1[4]:ref(Data) in 1
  12[100]: ConstInt(val=1) -> integer
  17[104]: SetInt(v1: ref(reference), fld=4, val: integer)
  20[88]: VarRef(var[4]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[16] var=__ref_1[4]:ref(Data) in 1
  23[100]: ConstInt(val=0) -> integer
  28[104]: SetInt(v1: ref(reference), fld=8, val: integer)
  31[88]: VarRef(var[4]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[16] var=__ref_1[4]:ref(Data) in 1
  34[100]: CreateRef(var[88]) -> ref(reference)
  37[112]: ConstInt(val=2) -> integer
  42[116]: Call(size=0, to=1082)
  49[100]: CreateRef(var[88]) -> ref(reference)
  52[112]: ConstInt(val=3) -> integer
  57[116]: Call(size=0, to=1082)
  64[100]: ClearText(var[40]) var=__work_1[40]:text in 1
  67[100]: ConstText(_value="") -> text
  69[116]: AppendText(var[40], v1: text)
  72[100]: VarRef(var[88]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[16] var=v[88]:ref(Data)["__ref_1"] in 2
  75[112]: FormatDatabase(var[40], val: ref(reference), db_tp=16, pretty=false)
  81[100]: VarText(var[40]) -> text var=__work_1[40]:text in 1
  84[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
  88[104]: AppendText(var[64], v1: text)
  91[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
  94[104]: ConstText(_value="{num:6,values:[2,3]}") -> text
 116[120]: EqText(v1: text, v2: text) -> boolean
 117[89]: GotoFalseWord(jump=123, if_false: boolean)
 120[88]: GotoWord(jump=191)
 123[88]: ClearText(var[16]) var=__work_2[16]:text in 1
 126[88]: ConstText(_value="Test failed ") -> text
 140[104]: AppendText(var[16], v1: text)
 143[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 146[104]: ConstInt(val=0) -> integer
 151[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 156[88]: ConstText(_value=" != "{num:6,values:[2,3]}"") -> text
 184[104]: AppendText(var[16], v1: text)
 187[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
 190[104]: Panic(message: text)
 191[88]: FreeText(var[64])
 194[88]: FreeText(var[40])
 197[88]: FreeText(var[16])
 200[88]: VarRef(var[4]) -> ref(reference) type=Data[12]:{num:integer[4], values:vector<integer>[8]}[16] var=__ref_1[4]:ref(Data) in 1
 203[100]: FreeRef(v1: ref(reference))
 204[88]: Return(ret=0, value=0, discard=88)

