struct Data {
  byte: integer limit(0, 255) not null,
  val: integer limit(1, 256),
  signed: integer limit(-127, 127) default(1)
}

fn calc(self: Data) -> integer {
  self.val * 65536 + self.byte * 256 + self.signed
}


pub fn test() {
    test_value = {1};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
Type 14:Data[8]:
    byte:byte[7]
    val:byte<1,true>[6]
    signed:byte<-127,true>[5]

Type 15:byte<1,true>[1]:Byte(1, true)

Type 16:byte<-127,true>[1]:Byte(-127, true)

fn _tp_Data_calc(self:Data) -> integer {#1 block
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 6i32, 1i32), 65536i32), OpMulInt(OpGetByte(self, 7i32, 0i32), 256i32)), OpGetByte(self, 5i32, -127i32));
}#1:integer

byte-code for restrictions:_tp_Data_calc(self: ref(Data)[0]) [1073] -> integer
   0[12]: return-address
   0[16]: VarRef(var[0]) -> ref(reference) type=Data[8]:{byte:byte[7], val:byte<1,true>[6], signed:byte<-127,true>[5]}[14] var=self[0]:ref(Data) in 0
   3[28]: GetByte(v1: ref(reference), fld=6, min=1) -> integer
   8[20]: ConstInt(val=65536) -> integer
  13[24]: MulInt(v1: integer, v2: integer) -> integer
  14[20]: VarRef(var[0]) -> ref(reference) type=Data[8]:{byte:byte[7], val:byte<1,true>[6], signed:byte<-127,true>[5]}[14] var=self[0]:ref(Data) in 0
  17[32]: GetByte(v1: ref(reference), fld=7, min=0) -> integer
  22[24]: ConstInt(val=256) -> integer
  27[28]: MulInt(v1: integer, v2: integer) -> integer
  28[24]: AddInt(v1: integer, v2: integer) -> integer
  29[20]: VarRef(var[0]) -> ref(reference) type=Data[8]:{byte:byte[7], val:byte<1,true>[6], signed:byte<-127,true>[5]}[14] var=self[0]:ref(Data) in 0
  32[32]: GetByte(v1: ref(reference), fld=5, min=-127) -> integer
  37[24]: AddInt(v1: integer, v2: integer) -> integer
  38[20]: Return(ret=12, value=4, discard=20) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    1i32;
  }#2:integer;
  if OpEqInt(test_value, 1i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1");
    __work_1;
  }#3:text);
}#1

byte-code for restrictions:test() [1117]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=1) -> integer var=test_value[28]:integer in 1
   6[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
   9[36]: ConstInt(val=1) -> integer
  14[40]: EqInt(v1: integer, v2: integer) -> boolean
  15[33]: GotoFalseWord(jump=21, if_false: boolean)
  18[32]: GotoWord(jump=70)
  21[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  24[32]: ConstText(_value="Test failed ") -> text
  38[48]: AppendText(var[4], v1: text)
  41[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  44[36]: ConstInt(val=0) -> integer
  49[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  56[32]: ConstText(_value=" != 1") -> text
  63[48]: AppendText(var[4], v1: text)
  66[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  69[48]: Panic(message: text)
  70[32]: FreeText(var[4])
  73[32]: Return(ret=0, value=0, discard=32)

