struct Data {
  byte: integer limit(0, 255) not null,
  val: integer limit(1, 256),
  signed: integer limit(-127, 127) default(1)
}

fn calc(self: Data) -> integer {
  self.val * 65536 + self.byte * 256 + self.signed
}


pub fn test() {
    test_value = {1};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
Type 17:Data[8]:
    byte:byte[7]
    val:byte<1,true>[6]
    signed:byte<-127,true>[5]

Type 18:byte<1,true>[1]:Byte(1, true)

Type 19:byte<-127,true>[1]:Byte(-127, true)

fn _tp_Data_calc(self:Data) -> integer {#block_1:integer
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 6i32, 1i32), 65536i32), OpMulInt(OpGetByte(self, 7i32, 0i32), 256i32)), OpGetByte(self, 5i32, -127i32));
}#block_1:integer

byte-code for restrictions:_tp_Data_calc(self: ref(Data)[4]) [1168] -> integer
   0[16]: return-address
   0[20]: VarRef(var[4]) -> ref(reference) type=Data[8]:{byte:byte[7], val:byte<1,true>[6], signed:byte<-127,true>[5]}[17] var=self[4]:ref(Data)
   3[32]: GetByte(v1: ref(reference), fld=6, min=1) -> integer
   8[24]: ConstInt(val=65536) -> integer
  13[28]: MulInt(v1: integer, v2: integer) -> integer
  14[24]: VarRef(var[4]) -> ref(reference) type=Data[8]:{byte:byte[7], val:byte<1,true>[6], signed:byte<-127,true>[5]}[17] var=self[4]:ref(Data)
  17[36]: GetByte(v1: ref(reference), fld=7, min=0) -> integer
  22[28]: ConstInt(val=256) -> integer
  27[32]: MulInt(v1: integer, v2: integer) -> integer
  28[28]: AddInt(v1: integer, v2: integer) -> integer
  29[24]: VarRef(var[4]) -> ref(reference) type=Data[8]:{byte:byte[7], val:byte<1,true>[6], signed:byte<-127,true>[5]}[17] var=self[4]:ref(Data)
  32[36]: GetByte(v1: ref(reference), fld=5, min=-127) -> integer
  37[28]: AddInt(v1: integer, v2: integer) -> integer
  38[24]: Return(ret=12, value=4, discard=20) type=integer[4]:Base[0]

fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    1i32;
  }#block_2:integer;
  if OpEqInt(test_value, 1i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for restrictions:test() [1212]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=1) -> integer var=test_value[32]:integer
   6[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
   9[40]: ConstInt(val=1) -> integer
  14[44]: EqInt(v1: integer, v2: integer) -> boolean
  15[37]: GotoFalseWord(jump=21, if_false: boolean)
  18[36]: GotoWord(jump=70)
  21[36]: ClearText(var[8]) var=__work_1[8]:text
  24[36]: ConstText(_value="Test failed ") -> text
  38[52]: AppendText(var[8], v1: text)
  41[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  44[40]: ConstInt(val=0) -> integer
  49[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  56[36]: ConstText(_value=" != 1") -> text
  63[52]: AppendText(var[8], v1: text)
  66[36]: VarText(var[8]) -> text var=__work_1[8]:text
  69[52]: Panic(message: text)
  70[36]: FreeText(var[8])
  73[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=1) -> 1[32]
    6:[36] VarInt(var[32]) -> 1[36]
    9:[40] ConstInt(val=1) -> 1[40]
   14:[44] EqInt(v1=1[36], v2=1[40]) -> true[36]
   15:[37] GotoFalseWord(jump=1233, if_false=true[36])
   18:[36] GotoWord(jump=1282)
   70:[36] FreeText(var[8])
   73:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
