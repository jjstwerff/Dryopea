Test code:
struct Data {
  byte: integer limit(0, 255) not null,
  val: integer limit(1, 256) check(val > byte),
  signed: integer limit(-127, 127) default(1)
}

fn calc(self: Data) -> integer {
  self.val * 65536 + self.byte * 256 + self.signed
}


pub fn test() {
    test_value = {1};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}

Type 13:Data[8]:
    byte:byte[7]
    val:byte<1,true>[6]
    signed:byte<-127,true>[5]

Type 14:byte<1,true>[1]:Byte(1, true)

Type 15:byte<-127,true>[1]:Byte(-127, true)

fn _tp_Data_calc {
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 6i32, 1i32), 65536i32), OpMulInt(OpGetByte(self, 7i32, 0i32), 256i32)), OpGetByte(self, 5i32, -127i32));
}

byte-code for restrictions:_tp_Data_calc(self: Data[0]) -> integer
 668[12]: return-address
 668[16]: VarRef(var[0]) -> reference type=Data[8]:{byte:byte[7], val:byte<1,true>[6], signed:byte<-127,true>[5]}[13]
 671[28]: GetByte(v1: reference, fld=6, min=1) -> integer
 676[20]: ConstInt(val=65536) -> integer
 681[24]: MulInt(v1: integer, v2: integer) -> integer
 682[20]: VarRef(var[0]) -> reference type=Data[8]:{byte:byte[7], val:byte<1,true>[6], signed:byte<-127,true>[5]}[13]
 685[32]: GetByte(v1: reference, fld=7, min=0) -> integer
 690[24]: ConstInt(val=256) -> integer
 695[28]: MulInt(v1: integer, v2: integer) -> integer
 696[24]: AddInt(v1: integer, v2: integer) -> integer
 697[20]: VarRef(var[0]) -> reference type=Data[8]:{byte:byte[7], val:byte<1,true>[6], signed:byte<-127,true>[5]}[13]
 700[32]: GetByte(v1: reference, fld=5, min=-127) -> integer
 705[24]: AddInt(v1: integer, v2: integer) -> integer
 706[20]: GenReturn(ret=12, value=4, discard=20)

fn test {
  let test_value = {
    1i32;
  };
  if OpEqInt(test_value, 1i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 1");
    append_7;
  })};
}

byte-code for restrictions:test()
 712[0]: return-address
 712[4]: ConstInt(val=1) -> integer
 717[8]: VarInt(var[4]) -> integer
 720[12]: ConstInt(val=1) -> integer
 725[16]: EqInt(v1: integer, v2: integer) -> boolean
 726[9]: GenGotoFalseWord(jump=732, if_false: boolean)
 729[8]: GenGotoWord(jump=783)
 732[8]: Text()
 733[32]: ConstText(_value="Test failed ") -> text
 747[48]: AppendText(var[8], v1: text)
 750[32]: VarInt(var[4]) -> integer
 753[36]: ConstInt(val=0) -> integer
 758[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 765[32]: ConstText(_value=" != 1") -> text
 772[48]: AppendText(var[8], v1: text)
 775[32]: VarText(var[8]) -> text
 778[48]: GenFreeStack(value=16, discard=24)
 782[24]: GenPanic(message: text)
 783[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  712:[4] ConstInt(val=1) -> 1[4]
  717:[8] VarInt(var[4]) -> 1[8]
  720:[12] ConstInt(val=1) -> 1[12]
  725:[16] EqInt(v1=1[8], v2=1[12]) -> true[8]
  726:[9] GenGotoFalseWord(jump=732, if_false=true[8])
  729:[8] GenGotoWord(jump=783)
  783:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
