Test code:
pub fn test() {
    test_value = {b = 0; for a in 0..5 { b+=a }; b};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}

fn test {
  let test_value = {
    let b = 0i32;
    {
      let a#index = OpConvIntFromNull();
      loop {
        let a = {
          a#index = if OpNot(OpConvBoolFromInt(a#index)) {0i32} else {OpAddInt(a#index, 1i32)};
          if OpGeInt(a#index, 5i32) {break(0)} else {null};
          a#index;
        };
        {
          b = OpAddInt(b, a);
        };
      };
    };
    b;
  };
  if OpEqInt(test_value, 10i32) {null} else {OpGenPanic({
    let append_10 = "Test failed ";
    OpFormatInt(append_10, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_10, " != 10");
    append_10;
  })};
}

byte-code for for_loop:test()
 668[0]: return-address
 668[4]: ConstInt(val=0) -> integer
 673[8]: ConvIntFromNull() -> integer
 674[12]: VarInt(var[8]) -> integer
 677[16]: ConvBoolFromInt(v1: integer) -> boolean
 678[13]: Not(v1: boolean) -> boolean
 679[13]: GenGotoFalseWord(jump=690, if_false: boolean)
 682[12]: ConstInt(val=0) -> integer
 687[16]: GenGotoWord(jump=699)
 690[12]: VarInt(var[8]) -> integer
 693[16]: ConstInt(val=1) -> integer
 698[20]: AddInt(v1: integer, v2: integer) -> integer
 699[16]: PutInt(var[8], value: integer)
 702[12]: VarInt(var[8]) -> integer
 705[16]: ConstInt(val=5) -> integer
 710[20]: GeInt(v1: integer, v2: integer) -> boolean
 711[13]: GenGotoFalseWord(jump=717, if_false: boolean)
 714[12]: GenGotoWord(jump=737)
 717[12]: VarInt(var[8]) -> integer
 720[16]: VarInt(var[4]) -> integer
 723[20]: VarInt(var[12]) -> integer
 726[24]: AddInt(v1: integer, v2: integer) -> integer
 727[20]: PutInt(var[4], value: integer)
 730[16]: GenFreeStack(value=0, discard=4)
 734[12]: GenGotoWord(jump=674)
 737[12]: GenFreeStack(value=0, discard=4)
 741[8]: VarInt(var[4]) -> integer
 744[12]: GenFreeStack(value=4, discard=4)
 748[8]: VarInt(var[4]) -> integer
 751[12]: ConstInt(val=10) -> integer
 756[16]: EqInt(v1: integer, v2: integer) -> boolean
 757[9]: GenGotoFalseWord(jump=763, if_false: boolean)
 760[8]: GenGotoWord(jump=815)
 763[8]: Text()
 764[32]: ConstText(_value="Test failed ") -> text
 778[48]: AppendText(var[8], v1: text)
 781[32]: VarInt(var[4]) -> integer
 784[36]: ConstInt(val=0) -> integer
 789[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 796[32]: ConstText(_value=" != 10") -> text
 804[48]: AppendText(var[8], v1: text)
 807[32]: VarText(var[8]) -> text
 810[48]: GenFreeStack(value=16, discard=24)
 814[24]: GenPanic(message: text)
 815[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] ConstInt(val=0) -> 0[4]
  673:[8] ConvIntFromNull() -> -2147483648[8]
  674:[12] VarInt(var[8]) -> -2147483648[12]
  677:[16] ConvBoolFromInt(v1=-2147483648[12]) -> false[12]
  678:[13] Not(v1=false[12]) -> true[12]
  679:[13] GenGotoFalseWord(jump=690, if_false=true[12])
  682:[12] ConstInt(val=0) -> 0[12]
  687:[16] GenGotoWord(jump=699)
  699:[16] PutInt(var[8], value=0[12])
  702:[12] VarInt(var[8]) -> 0[12]
  705:[16] ConstInt(val=5) -> 5[16]
  710:[20] GeInt(v1=0[12], v2=5[16]) -> false[12]
  711:[13] GenGotoFalseWord(jump=717, if_false=false[12])
  717:[12] VarInt(var[8]) -> 0[12]
  720:[16] VarInt(var[4]) -> 0[16]
  723:[20] VarInt(var[12]) -> 0[20]
  726:[24] AddInt(v1=0[16], v2=0[20]) -> 0[16]
  727:[20] PutInt(var[4], value=0[16])
  730:[16] GenFreeStack(value=0, discard=4)
  734:[12] GenGotoWord(jump=674)
  674:[12] VarInt(var[8]) -> 0[12]
  677:[16] ConvBoolFromInt(v1=0[12]) -> true[12]
  678:[13] Not(v1=true[12]) -> false[12]
  679:[13] GenGotoFalseWord(jump=690, if_false=false[12])
  690:[12] VarInt(var[8]) -> 0[12]
  693:[16] ConstInt(val=1) -> 1[16]
  698:[20] AddInt(v1=0[12], v2=1[16]) -> 1[12]
  699:[16] PutInt(var[8], value=1[12])
  702:[12] VarInt(var[8]) -> 1[12]
  705:[16] ConstInt(val=5) -> 5[16]
  710:[20] GeInt(v1=1[12], v2=5[16]) -> false[12]
  711:[13] GenGotoFalseWord(jump=717, if_false=false[12])
  717:[12] VarInt(var[8]) -> 1[12]
  720:[16] VarInt(var[4]) -> 0[16]
  723:[20] VarInt(var[12]) -> 1[20]
  726:[24] AddInt(v1=0[16], v2=1[20]) -> 1[16]
  727:[20] PutInt(var[4], value=1[16])
  730:[16] GenFreeStack(value=0, discard=4)
  734:[12] GenGotoWord(jump=674)
  674:[12] VarInt(var[8]) -> 1[12]
  677:[16] ConvBoolFromInt(v1=1[12]) -> true[12]
  678:[13] Not(v1=true[12]) -> false[12]
  679:[13] GenGotoFalseWord(jump=690, if_false=false[12])
  690:[12] VarInt(var[8]) -> 1[12]
  693:[16] ConstInt(val=1) -> 1[16]
  698:[20] AddInt(v1=1[12], v2=1[16]) -> 2[12]
  699:[16] PutInt(var[8], value=2[12])
  702:[12] VarInt(var[8]) -> 2[12]
  705:[16] ConstInt(val=5) -> 5[16]
  710:[20] GeInt(v1=2[12], v2=5[16]) -> false[12]
  711:[13] GenGotoFalseWord(jump=717, if_false=false[12])
  717:[12] VarInt(var[8]) -> 2[12]
  720:[16] VarInt(var[4]) -> 1[16]
  723:[20] VarInt(var[12]) -> 2[20]
  726:[24] AddInt(v1=1[16], v2=2[20]) -> 3[16]
  727:[20] PutInt(var[4], value=3[16])
  730:[16] GenFreeStack(value=0, discard=4)
  734:[12] GenGotoWord(jump=674)
  674:[12] VarInt(var[8]) -> 2[12]
  677:[16] ConvBoolFromInt(v1=2[12]) -> true[12]
  678:[13] Not(v1=true[12]) -> false[12]
  679:[13] GenGotoFalseWord(jump=690, if_false=false[12])
  690:[12] VarInt(var[8]) -> 2[12]
  693:[16] ConstInt(val=1) -> 1[16]
  698:[20] AddInt(v1=2[12], v2=1[16]) -> 3[12]
  699:[16] PutInt(var[8], value=3[12])
  702:[12] VarInt(var[8]) -> 3[12]
  705:[16] ConstInt(val=5) -> 5[16]
  710:[20] GeInt(v1=3[12], v2=5[16]) -> false[12]
  711:[13] GenGotoFalseWord(jump=717, if_false=false[12])
  717:[12] VarInt(var[8]) -> 3[12]
  720:[16] VarInt(var[4]) -> 3[16]
  723:[20] VarInt(var[12]) -> 3[20]
  726:[24] AddInt(v1=3[16], v2=3[20]) -> 6[16]
  727:[20] PutInt(var[4], value=6[16])
  730:[16] GenFreeStack(value=0, discard=4)
  734:[12] GenGotoWord(jump=674)
  674:[12] VarInt(var[8]) -> 3[12]
  677:[16] ConvBoolFromInt(v1=3[12]) -> true[12]
  678:[13] Not(v1=true[12]) -> false[12]
  679:[13] GenGotoFalseWord(jump=690, if_false=false[12])
  690:[12] VarInt(var[8]) -> 3[12]
  693:[16] ConstInt(val=1) -> 1[16]
  698:[20] AddInt(v1=3[12], v2=1[16]) -> 4[12]
  699:[16] PutInt(var[8], value=4[12])
  702:[12] VarInt(var[8]) -> 4[12]
  705:[16] ConstInt(val=5) -> 5[16]
  710:[20] GeInt(v1=4[12], v2=5[16]) -> false[12]
  711:[13] GenGotoFalseWord(jump=717, if_false=false[12])
  717:[12] VarInt(var[8]) -> 4[12]
  720:[16] VarInt(var[4]) -> 6[16]
  723:[20] VarInt(var[12]) -> 4[20]
  726:[24] AddInt(v1=6[16], v2=4[20]) -> 10[16]
  727:[20] PutInt(var[4], value=10[16])
  730:[16] GenFreeStack(value=0, discard=4)
  734:[12] GenGotoWord(jump=674)
  674:[12] VarInt(var[8]) -> 4[12]
  677:[16] ConvBoolFromInt(v1=4[12]) -> true[12]
  678:[13] Not(v1=true[12]) -> false[12]
  679:[13] GenGotoFalseWord(jump=690, if_false=false[12])
  690:[12] VarInt(var[8]) -> 4[12]
  693:[16] ConstInt(val=1) -> 1[16]
  698:[20] AddInt(v1=4[12], v2=1[16]) -> 5[12]
  699:[16] PutInt(var[8], value=5[12])
  702:[12] VarInt(var[8]) -> 5[12]
  705:[16] ConstInt(val=5) -> 5[16]
  710:[20] GeInt(v1=5[12], v2=5[16]) -> true[12]
  711:[13] GenGotoFalseWord(jump=717, if_false=true[12])
  714:[12] GenGotoWord(jump=737)
  737:[12] GenFreeStack(value=0, discard=4)
  741:[8] VarInt(var[4]) -> 10[8]
  744:[12] GenFreeStack(value=4, discard=4)
  748:[8] VarInt(var[4]) -> 10[8]
  751:[12] ConstInt(val=10) -> 10[12]
  756:[16] EqInt(v1=10[8], v2=10[12]) -> true[8]
  757:[9] GenGotoFalseWord(jump=763, if_false=true[8])
  760:[8] GenGotoWord(jump=815)
  815:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
