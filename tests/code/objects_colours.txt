struct Point {
  r: integer limit(0, 255) not null,
  g: integer limit(0, 255) not null,
  b: integer limit(0, 255) not null
}

fn value(self: Point) -> integer {
  self.r * 0x10000 + self.g * 0x100 + self.b
}

pub fn test() {
    test_value = {  points = [ Point { r:128, b:128 }, Point { b:255 } ];
  "size:{sizeof(Point)} purple:{points[0]} value:{points[0].value():x} blue:{points[1]}"};
    assert(
        test_value == "size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}",
        "Test failed {test_value} != \"size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}\""
    );
}
Type 11:Point[3]:
    r:byte[0]
    g:byte[1]
    b:byte[2]

Type 12:main_vector<Point>[8]:
    vector:vector<Point>[4]

Type 13:vector<Point>[4]:Vector(11)

fn _tp_Point_value(self:Point) -> integer {#1 block
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 0i32, 0i32), 65536i32), OpMulInt(OpGetByte(self, 1i32, 0i32), 256i32)), OpGetByte(self, 2i32, 0i32));
}#1:integer

byte-code for colours:_tp_Point_value(self: Point[0]) -> integer
 675[12]: return-address
 675[16]: VarRef(var[0]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 678[28]: GetByte(v1: reference, fld=0, min=0) -> integer
 683[20]: ConstInt(val=65536) -> integer
 688[24]: MulInt(v1: integer, v2: integer) -> integer
 689[20]: VarRef(var[0]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 692[32]: GetByte(v1: reference, fld=1, min=0) -> integer
 697[24]: ConstInt(val=256) -> integer
 702[28]: MulInt(v1: integer, v2: integer) -> integer
 703[24]: AddInt(v1: integer, v2: integer) -> integer
 704[20]: VarRef(var[0]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 707[32]: GetByte(v1: reference, fld=2, min=0) -> integer
 712[24]: AddInt(v1: integer, v2: integer) -> integer
 713[20]: Return(ret=12, value=4, discard=20) type=integer[4]:Base[0]

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    points:vector<Point>#[] = {#3 vector
      _db_3:main_vector<Point> = OpDatabase(3i32, 12i32);
      _vec_2:vector<Point>#[] = OpGetField(_db_3, 4i32, 65535i32);
      OpSetInt(_db_3, 4i32, 0i32);
      _elm_1:Point = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#4 object
        OpSetByte(_elm_1, 0i32, 0i32, 128i32);
        OpSetByte(_elm_1, 2i32, 0i32, 128i32);
        OpSetByte(_elm_1, 1i32, 0i32, 0i32);
      }#4;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _elm_1:Point = OpNewRecord(_vec_2, 13i32, 65535i32);
      {#5 object
        OpSetByte(_elm_1, 2i32, 0i32, 255i32);
        OpSetByte(_elm_1, 0i32, 0i32, 0i32);
        OpSetByte(_elm_1, 1i32, 0i32, 0i32);
      }#5;
      OpFinishRecord(_vec_2, _elm_1, 13i32, 65535i32);
      _vec_2;
    }#3:vector<Point>#[];
    {#6 formatting string
      __work_1:text = "size:";
      OpFormatInt(__work_1, 3i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " purple:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 0i32), 11i32, false);
      OpAppendText(__work_1, " value:");
      OpFormatInt(__work_1, _tp_Point_value(OpGetVector(points, 3i32, 0i32)), 16i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " blue:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 1i32), 11i32, false);
      __work_1;
    }#6:text;
  }#2:text;
  if OpEqText(test_value, "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") null else OpPanic({#7 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"");
    __work_2;
  }#7:text);
}#1

byte-code for colours:test()
 719[0]: return-address
 719[4]: Text()
 720[28]: Text()
 721[52]: Text()
 722[76]: Database(size=3, db_tp=12) -> reference type=main_vector<Point>[8]:{vector:vector<Point>[4]}[12]
 727[88]: VarRef(var[76]) -> reference type=main_vector<Point>[8]:{vector:vector<Point>[4]}[12]
 730[100]: GetField(v1: reference, fld=4) -> reference type=Unknown type(65535)[65535]
 733[100]: VarRef(var[76]) -> reference type=main_vector<Point>[8]:{vector:vector<Point>[4]}[12]
 736[112]: ConstInt(val=0) -> integer
 741[116]: SetInt(v1: reference, fld=4, val: integer)
 744[100]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 747[112]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 752[112]: VarRef(var[100]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 755[124]: ConstInt(val=128) -> integer
 760[128]: SetByte(v1: reference, fld=0, min=0, val: integer)
 765[112]: VarRef(var[100]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 768[124]: ConstInt(val=128) -> integer
 773[128]: SetByte(v1: reference, fld=2, min=0, val: integer)
 778[112]: VarRef(var[100]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 781[124]: ConstInt(val=0) -> integer
 786[128]: SetByte(v1: reference, fld=1, min=0, val: integer)
 791[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 794[124]: VarRef(var[100]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 797[136]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 802[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 805[124]: NewRecord(data: reference, parent_tp=13, fld=65535) -> reference
 810[124]: PutRef(var[100], value: reference)
 813[112]: VarRef(var[100]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 816[124]: ConstInt(val=255) -> integer
 821[128]: SetByte(v1: reference, fld=2, min=0, val: integer)
 826[112]: VarRef(var[100]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 829[124]: ConstInt(val=0) -> integer
 834[128]: SetByte(v1: reference, fld=0, min=0, val: integer)
 839[112]: VarRef(var[100]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 842[124]: ConstInt(val=0) -> integer
 847[128]: SetByte(v1: reference, fld=1, min=0, val: integer)
 852[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 855[124]: VarRef(var[100]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 858[136]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=65535)
 863[112]: VarVector(var[88]) -> vector#[] type=Unknown type(65535)[65535]
 866[124]: FreeStack(value=12, discard=36) type=Pixel[3]:{r:byte[0], g:byte[1], b:byte[2]}[6]
 870[88]: ClearText(var[28])
 873[88]: ConstText(_value="size:") -> text
 880[104]: AppendText(var[28], v1: text)
 883[88]: ConstInt(val=3) -> integer
 888[92]: ConstInt(val=0) -> integer
 893[96]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 900[88]: ConstText(_value=" purple:") -> text
 910[104]: AppendText(var[28], v1: text)
 913[88]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 916[100]: ConstInt(val=0) -> integer
 921[104]: GetVector(r: vector#[], size=3, index: integer) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 924[100]: FormatDatabase(var[28], val: reference, db_tp=11, pretty=false)
 930[88]: ConstText(_value=" value:") -> text
 939[104]: AppendText(var[28], v1: text)
 942[88]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 945[100]: ConstInt(val=0) -> integer
 950[104]: GetVector(r: vector#[], size=3, index: integer) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 953[100]: Call(size=0, to=675)
 960[92]: ConstInt(val=0) -> integer
 965[96]: FormatInt(var[28], val: integer, radix=16, width: integer, token=32, plus=false, note=false)
 972[88]: ConstText(_value=" blue:") -> text
 980[104]: AppendText(var[28], v1: text)
 983[88]: VarVector(var[76]) -> vector#[] type=Unknown type(65535)[65535]
 986[100]: ConstInt(val=1) -> integer
 991[104]: GetVector(r: vector#[], size=3, index: integer) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[11]
 994[100]: FormatDatabase(var[28], val: reference, db_tp=11, pretty=false)
1000[88]: VarText(var[28]) -> text
1003[104]: FreeStack(value=16, discard=12) type=text[4]:Base[5]
1007[92]: AppendText(var[52], v1: text)
1010[76]: VarText(var[52]) -> text
1013[92]: ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> text
1080[108]: EqText(v1: text, v2: text) -> boolean
1081[77]: GotoFalseWord(jump=1087, if_false: boolean)
1084[76]: GotoWord(jump=1200)
1087[76]: ClearText(var[4])
1090[76]: ConstText(_value="Test failed ") -> text
1104[92]: AppendText(var[4], v1: text)
1107[76]: VarText(var[52]) -> text
1110[92]: ConstInt(val=0) -> integer
1115[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
1120[76]: ConstText(_value=" != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"") -> text
1193[92]: AppendText(var[4], v1: text)
1196[76]: VarText(var[4]) -> text
1199[92]: Panic(message: text)
1200[76]: Return(ret=0, value=0, discard=76)

Execute test:
  719:[8] Text()
  720:[32] Text()
  721:[56] Text()
  722:[80] Database(size=3, db_tp=12) -> ref(1,1,0)={}[80]
  727:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  730:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)[92]
  733:[104] VarRef(var[80]) -> ref(1,1,0)={}[104]
  736:[116] ConstInt(val=0) -> 0[116]
  741:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  744:[104] VarVector(var[92]) -> ref(1,1,4)[104]
  747:[116] NewRecord(data=ref(1,1,4)[104], parent_tp=13, fld=65535) -> ref(1,4,8)[104]
  752:[116] VarRef(var[104]) -> ref(1,4,8)={r:0,g:0,b:0}[116]
  755:[128] ConstInt(val=128) -> 128[128]
  760:[132] SetByte(v1=ref(1,4,8)[116], fld=0, min=0, val=128[128])
  765:[116] VarRef(var[104]) -> ref(1,4,8)={r:128,g:0,b:0}[116]
  768:[128] ConstInt(val=128) -> 128[128]
  773:[132] SetByte(v1=ref(1,4,8)[116], fld=2, min=0, val=128[128])
  778:[116] VarRef(var[104]) -> ref(1,4,8)={r:128,g:0,b:128}[116]
  781:[128] ConstInt(val=0) -> 0[128]
  786:[132] SetByte(v1=ref(1,4,8)[116], fld=1, min=0, val=0[128])
  791:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  794:[128] VarRef(var[104]) -> ref(1,4,8)={r:128,g:0,b:128}[128]
  797:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,4,8)[128], parent_tp=13, fld=65535)
  802:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  805:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=13, fld=65535) -> ref(1,4,11)[116]
  810:[128] PutRef(var[104], value=ref(1,4,11)[116])
  813:[116] VarRef(var[104]) -> ref(1,4,11)={r:0,g:0,b:0}[116]
  816:[128] ConstInt(val=255) -> 255[128]
  821:[132] SetByte(v1=ref(1,4,11)[116], fld=2, min=0, val=255[128])
  826:[116] VarRef(var[104]) -> ref(1,4,11)={r:0,g:0,b:255}[116]
  829:[128] ConstInt(val=0) -> 0[128]
  834:[132] SetByte(v1=ref(1,4,11)[116], fld=0, min=0, val=0[128])
  839:[116] VarRef(var[104]) -> ref(1,4,11)={r:0,g:0,b:255}[116]
  842:[128] ConstInt(val=0) -> 0[128]
  847:[132] SetByte(v1=ref(1,4,11)[116], fld=1, min=0, val=0[128])
  852:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  855:[128] VarRef(var[104]) -> ref(1,4,11)={r:0,g:0,b:255}[128]
  858:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,4,11)[128], parent_tp=13, fld=65535)
  863:[116] VarVector(var[92]) -> ref(1,1,4)[116]
  866:[128] FreeStack(value=12, discard=36)
  870:[92] ClearText(var[32])
  873:[92] ConstText(_value="size:") -> "size:"[92]
  880:[108] AppendText(var[32], v1="size:"[92])
  883:[92] ConstInt(val=3) -> 3[92]
  888:[96] ConstInt(val=0) -> 0[96]
  893:[100] FormatInt(var[32], val=3[92], radix=10, width=0[96], token=32, plus=false, note=false)
  900:[92] ConstText(_value=" purple:") -> " purple:"[92]
  910:[108] AppendText(var[32], v1=" purple:"[92])
  913:[92] VarVector(var[80]) -> ref(1,1,4)[92]
  916:[104] ConstInt(val=0) -> 0[104]
  921:[108] GetVector(r=ref(1,1,4)=true[92], size=3, index=0[104]) -> ref(1,4,8)={r:128,g:0,b:128}[92]
  924:[104] FormatDatabase(var[32], val=ref(1,4,8)[92], db_tp=11, pretty=false)
  930:[92] ConstText(_value=" value:") -> " value:"[92]
  939:[108] AppendText(var[32], v1=" value:"[92])
  942:[92] VarVector(var[80]) -> ref(1,1,4)[92]
  945:[104] ConstInt(val=0) -> 0[104]
  950:[108] GetVector(r=ref(1,1,4)=true[92], size=3, index=0[104]) -> ref(1,4,8)={r:128,g:0,b:128}[92]
  953:[104] Call(size=0, to=675)
  675:[108] VarRef(var[92]) -> ref(1,4,8)={r:128,g:0,b:128}[108]
  678:[120] GetByte(v1=ref(1,4,8)[108], fld=0, min=0) -> 128[108]
  683:[112] ConstInt(val=65536) -> 65536[112]
  688:[116] MulInt(v1=128[108], v2=65536[112]) -> 8388608[108]
  689:[112] VarRef(var[92]) -> ref(1,4,8)={r:128,g:0,b:128}[112]
  692:[124] GetByte(v1=ref(1,4,8)[112], fld=1, min=0) -> 0[112]
  697:[116] ConstInt(val=256) -> 256[116]
  702:[120] MulInt(v1=0[112], v2=256[116]) -> 0[112]
  703:[116] AddInt(v1=8388608[108], v2=0[112]) -> 8388608[108]
  704:[112] VarRef(var[92]) -> ref(1,4,8)={r:128,g:0,b:128}[112]
  707:[124] GetByte(v1=ref(1,4,8)[112], fld=2, min=0) -> 128[112]
  712:[116] AddInt(v1=8388608[108], v2=128[112]) -> 8388736[108]
  713:[112] Return(ret=960[104], value=4, discard=20) -> 8388736[92]
  960:[96] ConstInt(val=0) -> 0[96]
  965:[100] FormatInt(var[32], val=8388736[92], radix=16, width=0[96], token=32, plus=false, note=false)
  972:[92] ConstText(_value=" blue:") -> " blue:"[92]
  980:[108] AppendText(var[32], v1=" blue:"[92])
  983:[92] VarVector(var[80]) -> ref(1,1,4)[92]
  986:[104] ConstInt(val=1) -> 1[104]
  991:[108] GetVector(r=ref(1,1,4)=true[92], size=3, index=1[104]) -> ref(1,4,11)={r:0,g:0,b:255}[92]
  994:[104] FormatDatabase(var[32], val=ref(1,4,11)[92], db_tp=11, pretty=false)
 1000:[92] VarText(var[32]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92]
 1003:[108] FreeStack(value=16, discard=12)
 1007:[96] AppendText(var[56], v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[80])
 1010:[80] VarText(var[56]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[80]
 1013:[96] ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[96]
 1080:[112] EqText(v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[80], v2="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[96]) -> true[80]
 1081:[81] GotoFalseWord(jump=1087, if_false=true[80])
 1084:[80] GotoWord(jump=1200)
 1200:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
