struct Point {
  r: integer limit(0, 255) not null,
  g: integer limit(0, 255) not null,
  b: integer limit(0, 255) not null
}

fn value(self: Point) -> integer {
  self.r * 0x10000 + self.g * 0x100 + self.b
}

pub fn test() {
    test_value = {  points = [ Point { r:128, b:128 }, Point { b:255 } ];
  "size:{sizeof(Point)} purple:{points[0]} value:{points[0].value():x} blue:{points[1]}"};
    assert(
        test_value == "size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}",
        "Test failed {test_value} != \"size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}\""
    );
}
Type 14:Point[3]:
    r:byte[0]
    g:byte[1]
    b:byte[2]

Type 15:main_vector<Point>[8]:
    vector:vector<Point>[4]

Type 16:vector<Point>[4]:Vector(14)

fn _tp_Point_value(self:Point) -> integer {#1 block
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 0i32, 0i32), 65536i32), OpMulInt(OpGetByte(self, 1i32, 0i32), 256i32)), OpGetByte(self, 2i32, 0i32));
}#1:integer

byte-code for colours:_tp_Point_value(self: ref(Point)[0]) [1073] -> integer
   0[12]: return-address
   0[16]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=self[0]:ref(Point) in 0
   3[28]: GetByte(v1: ref(reference), fld=0, min=0) -> integer
   8[20]: ConstInt(val=65536) -> integer
  13[24]: MulInt(v1: integer, v2: integer) -> integer
  14[20]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=self[0]:ref(Point) in 0
  17[32]: GetByte(v1: ref(reference), fld=1, min=0) -> integer
  22[24]: ConstInt(val=256) -> integer
  27[28]: MulInt(v1: integer, v2: integer) -> integer
  28[24]: AddInt(v1: integer, v2: integer) -> integer
  29[20]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=self[0]:ref(Point) in 0
  32[32]: GetByte(v1: ref(reference), fld=2, min=0) -> integer
  37[24]: AddInt(v1: integer, v2: integer) -> integer
  38[20]: Return(ret=12, value=4, discard=20) type=integer[4]:Base[0]

fn test() {#1 block
  __ref_1:ref(main_vector<Point>) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    points:vector<ref(Point)["_elm_2"]>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 15i32);
      _vec_1:vector<ref(Point)["_elm_2"]>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(Point)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      {#4 object
        OpSetByte(_elm_2, 0i32, 0i32, 128i32);
        OpSetByte(_elm_2, 2i32, 0i32, 128i32);
        OpSetByte(_elm_2, 1i32, 0i32, 0i32);
      }#4;
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _elm_2:ref(Point)["__ref_1"] = OpNewRecord(_vec_1, 16i32, 65535i32);
      {#5 object
        OpSetByte(_elm_2, 2i32, 0i32, 255i32);
        OpSetByte(_elm_2, 0i32, 0i32, 0i32);
        OpSetByte(_elm_2, 1i32, 0i32, 0i32);
      }#5;
      OpFinishRecord(_vec_1, _elm_2, 16i32, 65535i32);
      _vec_1;
    }#3:vector<ref(Point)["_elm_2"]>["__ref_1"];
    {#6 formatting string
      __work_1:text = "size:";
      OpFormatInt(__work_1, 3i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " purple:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 0i32), 14i32, false);
      OpAppendText(__work_1, " value:");
      OpFormatInt(__work_1, _tp_Point_value(OpGetVector(points, 3i32, 0i32)), 16i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " blue:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 1i32), 14i32, false);
      __work_1;
    }#6:text;
  }#2:text;
  if OpEqText(test_value, "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") null else OpPanic({#7 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"");
    __work_2;
  }#7:text);
}#1

byte-code for colours:test() [1117]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<Point>) in 1
   1[16]: Text() var=__work_2[16]:text in 1
   2[40]: Text() var=__work_1[40]:text in 1
   3[64]: Text() var=test_value[64]:text in 1
   4[88]: Database(var[4], db_tp=15) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[15] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
   9[88]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[15] var=__ref_1[4]:ref(main_vector<Point>) in 1
  12[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  15[100]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[15] var=__ref_1[4]:ref(main_vector<Point>) in 1
  18[112]: ConstInt(val=0) -> integer
  23[116]: SetInt(v1: ref(reference), fld=4, val: integer)
  26[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
  29[112]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
  34[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
  37[124]: ConstInt(val=128) -> integer
  42[128]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
  47[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
  50[124]: ConstInt(val=128) -> integer
  55[128]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
  60[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
  63[124]: ConstInt(val=0) -> integer
  68[128]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
  73[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
  76[124]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
  79[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
  84[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
  87[124]: NewRecord(data: ref(reference), parent_tp=16, fld=65535) -> ref(reference)
  92[124]: PutRef(var[100], value: ref(reference))
  95[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
  98[124]: ConstInt(val=255) -> integer
 103[128]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
 108[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 111[124]: ConstInt(val=0) -> integer
 116[128]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
 121[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 124[124]: ConstInt(val=0) -> integer
 129[128]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
 134[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 137[124]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 140[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=65535)
 145[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(14)[16] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 148[124]: FreeStack(value=12, discard=36) type=vector<text>[4]:Vector(5)[6]
 152[100]: ClearText(var[40]) var=__work_1[40]:text in 1
 155[100]: ConstText(_value="size:") -> text
 162[116]: AppendText(var[40], v1: text)
 165[100]: ConstInt(val=3) -> integer
 170[104]: ConstInt(val=0) -> integer
 175[108]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 182[100]: ConstText(_value=" purple:") -> text
 192[116]: AppendText(var[40], v1: text)
 195[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(14)[16] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 198[112]: ConstInt(val=0) -> integer
 203[116]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14]
 206[112]: FormatDatabase(var[40], val: ref(reference), db_tp=14, pretty=false)
 212[100]: ConstText(_value=" value:") -> text
 221[116]: AppendText(var[40], v1: text)
 224[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(14)[16] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 227[112]: ConstInt(val=0) -> integer
 232[116]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14]
 235[112]: Call(size=0, to=1073)
 242[104]: ConstInt(val=0) -> integer
 247[108]: FormatInt(var[40], val: integer, radix=16, width: integer, token=32, plus=false, note=false)
 254[100]: ConstText(_value=" blue:") -> text
 262[116]: AppendText(var[40], v1: text)
 265[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(14)[16] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 268[112]: ConstInt(val=1) -> integer
 273[116]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[14]
 276[112]: FormatDatabase(var[40], val: ref(reference), db_tp=14, pretty=false)
 282[100]: VarText(var[40]) -> text var=__work_1[40]:text in 1
 285[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 289[104]: AppendText(var[64], v1: text)
 292[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 295[104]: ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> text
 362[120]: EqText(v1: text, v2: text) -> boolean
 363[89]: GotoFalseWord(jump=369, if_false: boolean)
 366[88]: GotoWord(jump=482)
 369[88]: ClearText(var[16]) var=__work_2[16]:text in 1
 372[88]: ConstText(_value="Test failed ") -> text
 386[104]: AppendText(var[16], v1: text)
 389[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 392[104]: ConstInt(val=0) -> integer
 397[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 402[88]: ConstText(_value=" != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"") -> text
 475[104]: AppendText(var[16], v1: text)
 478[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
 481[104]: Panic(message: text)
 482[88]: FreeText(var[64])
 485[88]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[15] var=__ref_1[4]:ref(main_vector<Point>) in 1
 488[100]: FreeRef(v1: ref(reference))
 489[88]: FreeText(var[40])
 492[88]: FreeText(var[16])
 495[88]: Return(ret=0, value=0, discard=88)

