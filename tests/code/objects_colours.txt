struct Point {
  r: integer limit(0, 255) not null,
  g: integer limit(0, 255) not null,
  b: integer limit(0, 255) not null
}

fn value(self: Point) -> integer {
  self.r * 0x10000 + self.g * 0x100 + self.b
}

pub fn test() {
    test_value = {  points = [ Point { r:128, b:128 }, Point { b:255 } ];
  "size:{sizeof(Point)} purple:{points[0]} value:{points[0].value():x} blue:{points[1]}"};
    assert(
        test_value == "size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}",
        "Test failed {test_value} != \"size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}\""
    );
}
Type 12:Point[3]:
    r:byte[0]
    g:byte[1]
    b:byte[2]

Type 13:main_vector<Point>[8]:
    vector:vector<Point>[4]

Type 14:vector<Point>[4]:Vector(12)

fn _tp_Point_value(self:Point) -> integer {#1 block
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 0i32, 0i32), 65536i32), OpMulInt(OpGetByte(self, 1i32, 0i32), 256i32)), OpGetByte(self, 2i32, 0i32));
}#1:integer

byte-code for colours:_tp_Point_value(self: ref(Point)[0]) -> integer
 645[12]: return-address
 645[16]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=self[0]:ref(Point) in 0
 648[28]: GetByte(v1: ref(reference), fld=0, min=0) -> integer
 653[20]: ConstInt(val=65536) -> integer
 658[24]: MulInt(v1: integer, v2: integer) -> integer
 659[20]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=self[0]:ref(Point) in 0
 662[32]: GetByte(v1: ref(reference), fld=1, min=0) -> integer
 667[24]: ConstInt(val=256) -> integer
 672[28]: MulInt(v1: integer, v2: integer) -> integer
 673[24]: AddInt(v1: integer, v2: integer) -> integer
 674[20]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=self[0]:ref(Point) in 0
 677[32]: GetByte(v1: ref(reference), fld=2, min=0) -> integer
 682[24]: AddInt(v1: integer, v2: integer) -> integer
 683[20]: Return(ret=12, value=4, discard=20) type=integer[4]:Base[0]

fn test() {#1 block
  __ref_1:ref(main_vector<Point>) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    points:vector<ref(Point)["_elm_2"]>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 13i32);
      _vec_1:vector<ref(Point)["_elm_2"]>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(Point)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      {#4 object
        OpSetByte(_elm_2, 0i32, 0i32, 128i32);
        OpSetByte(_elm_2, 2i32, 0i32, 128i32);
        OpSetByte(_elm_2, 1i32, 0i32, 0i32);
      }#4;
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(Point)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      {#5 object
        OpSetByte(_elm_2, 2i32, 0i32, 255i32);
        OpSetByte(_elm_2, 0i32, 0i32, 0i32);
        OpSetByte(_elm_2, 1i32, 0i32, 0i32);
      }#5;
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _vec_1;
    }#3:vector<ref(Point)["_elm_2"]>["__ref_1"];
    {#6 formatting string
      __work_1:text = "size:";
      OpFormatInt(__work_1, 3i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " purple:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 0i32), 12i32, false);
      OpAppendText(__work_1, " value:");
      OpFormatInt(__work_1, _tp_Point_value(OpGetVector(points, 3i32, 0i32)), 16i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " blue:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 1i32), 12i32, false);
      __work_1;
    }#6:text;
  }#2:text;
  if OpEqText(test_value, "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") null else OpPanic({#7 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"");
    __work_2;
  }#7:text);
}#1

byte-code for colours:test()
 689[0]: return-address
 689[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<Point>) in 1
 690[16]: Text() var=__work_2[16]:text in 1
 691[40]: Text() var=__work_1[40]:text in 1
 692[64]: Text() var=test_value[64]:text in 1
 693[88]: Database(var[4], db_tp=13) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[13] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 698[88]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[13] var=__ref_1[4]:ref(main_vector<Point>) in 1
 701[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
 704[100]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[13] var=__ref_1[4]:ref(main_vector<Point>) in 1
 707[112]: ConstInt(val=0) -> integer
 712[116]: SetInt(v1: ref(reference), fld=4, val: integer)
 715[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 718[112]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 723[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 726[124]: ConstInt(val=128) -> integer
 731[128]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
 736[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 739[124]: ConstInt(val=128) -> integer
 744[128]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
 749[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 752[124]: ConstInt(val=0) -> integer
 757[128]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
 762[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 765[124]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 768[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 773[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 776[124]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 781[124]: PutRef(var[100], value: ref(reference))
 784[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 787[124]: ConstInt(val=255) -> integer
 792[128]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
 797[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 800[124]: ConstInt(val=0) -> integer
 805[128]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
 810[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 813[124]: ConstInt(val=0) -> integer
 818[128]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
 823[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 826[124]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 829[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 834[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 837[124]: FreeStack(value=12, discard=36) type=Variable[12]:{name:text[4], value:text[8]}[6]
 841[100]: ClearText(var[40]) var=__work_1[40]:text in 1
 844[100]: ConstText(_value="size:") -> text
 851[116]: AppendText(var[40], v1: text)
 854[100]: ConstInt(val=3) -> integer
 859[104]: ConstInt(val=0) -> integer
 864[108]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 871[100]: ConstText(_value=" purple:") -> text
 881[116]: AppendText(var[40], v1: text)
 884[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 887[112]: ConstInt(val=0) -> integer
 892[116]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12]
 895[112]: FormatDatabase(var[40], val: ref(reference), db_tp=12, pretty=false)
 901[100]: ConstText(_value=" value:") -> text
 910[116]: AppendText(var[40], v1: text)
 913[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 916[112]: ConstInt(val=0) -> integer
 921[116]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12]
 924[112]: Call(size=0, to=645)
 931[104]: ConstInt(val=0) -> integer
 936[108]: FormatInt(var[40], val: integer, radix=16, width: integer, token=32, plus=false, note=false)
 943[100]: ConstText(_value=" blue:") -> text
 951[116]: AppendText(var[40], v1: text)
 954[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 957[112]: ConstInt(val=1) -> integer
 962[116]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12]
 965[112]: FormatDatabase(var[40], val: ref(reference), db_tp=12, pretty=false)
 971[100]: VarText(var[40]) -> text var=__work_1[40]:text in 1
 974[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 978[104]: AppendText(var[64], v1: text)
 981[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 984[104]: ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> text
1051[120]: EqText(v1: text, v2: text) -> boolean
1052[89]: GotoFalseWord(jump=1058, if_false: boolean)
1055[88]: GotoWord(jump=1171)
1058[88]: ClearText(var[16]) var=__work_2[16]:text in 1
1061[88]: ConstText(_value="Test failed ") -> text
1075[104]: AppendText(var[16], v1: text)
1078[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
1081[104]: ConstInt(val=0) -> integer
1086[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
1091[88]: ConstText(_value=" != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"") -> text
1164[104]: AppendText(var[16], v1: text)
1167[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
1170[104]: Panic(message: text)
1171[88]: FreeText(var[64])
1174[88]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[13] var=__ref_1[4]:ref(main_vector<Point>) in 1
1177[100]: FreeRef(v1: ref(reference))
1178[88]: FreeText(var[40])
1181[88]: FreeText(var[16])
1184[88]: Return(ret=0, value=0, discard=88)

Execute test:
  689:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  690:[20] Text()
  691:[44] Text()
  692:[68] Text()
  693:[92] Database(var[8], db_tp=13)
  698:[92] VarRef(var[8]) -> ref(1,1,0)={}[92]
  701:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)[92]
  704:[104] VarRef(var[8]) -> ref(1,1,0)={}[104]
  707:[116] ConstInt(val=0) -> 0[116]
  712:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  715:[104] VarVector(var[92]) -> ref(1,1,4)=[][104]
  718:[116] NewRecord(data=ref(1,1,4)[104], parent_tp=14, fld=65535) -> ref(1,9,8)[104]
  723:[116] VarRef(var[104]) -> ref(1,9,8)={r:0,g:0,b:0}[116]
  726:[128] ConstInt(val=128) -> 128[128]
  731:[132] SetByte(v1=ref(1,9,8)[116], fld=0, min=0, val=128[128])
  736:[116] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:0}[116]
  739:[128] ConstInt(val=128) -> 128[128]
  744:[132] SetByte(v1=ref(1,9,8)[116], fld=2, min=0, val=128[128])
  749:[116] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[116]
  752:[128] ConstInt(val=0) -> 0[128]
  757:[132] SetByte(v1=ref(1,9,8)[116], fld=1, min=0, val=0[128])
  762:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128}][116]
  765:[128] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[128]
  768:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,8)[128], parent_tp=14, fld=65535)
  773:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128}][116]
  776:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=14, fld=65535) -> ref(1,9,11)[116]
  781:[128] PutRef(var[104], value=ref(1,9,11)[116])
  784:[116] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:0}[116]
  787:[128] ConstInt(val=255) -> 255[128]
  792:[132] SetByte(v1=ref(1,9,11)[116], fld=2, min=0, val=255[128])
  797:[116] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:255}[116]
  800:[128] ConstInt(val=0) -> 0[128]
  805:[132] SetByte(v1=ref(1,9,11)[116], fld=0, min=0, val=0[128])
  810:[116] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:255}[116]
  813:[128] ConstInt(val=0) -> 0[128]
  818:[132] SetByte(v1=ref(1,9,11)[116], fld=1, min=0, val=0[128])
  823:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][116]
  826:[128] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:255}[128]
  829:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,11)[128], parent_tp=14, fld=65535)
  834:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][116]
  837:[128] FreeStack(value=12, discard=36)
  841:[104] ClearText(var[44])
  844:[104] ConstText(_value="size:") -> "size:"[104]
  851:[120] AppendText(var[44], v1="size:"[104])
  854:[104] ConstInt(val=3) -> 3[104]
  859:[108] ConstInt(val=0) -> 0[108]
  864:[112] FormatInt(var[44], val=3[104], radix=10, width=0[108], token=32, plus=false, note=false)
  871:[104] ConstText(_value=" purple:") -> " purple:"[104]
  881:[120] AppendText(var[44], v1=" purple:"[104])
  884:[104] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][104]
  887:[116] ConstInt(val=0) -> 0[116]
  892:[120] GetVector(r=ref(1,1,4)=true[104], size=3, index=0[116]) -> ref(1,9,8)={r:128,g:0,b:128}[104]
  895:[116] FormatDatabase(var[44], val=ref(1,9,8)[104], db_tp=12, pretty=false)
  901:[104] ConstText(_value=" value:") -> " value:"[104]
  910:[120] AppendText(var[44], v1=" value:"[104])
  913:[104] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][104]
  916:[116] ConstInt(val=0) -> 0[116]
  921:[120] GetVector(r=ref(1,1,4)=true[104], size=3, index=0[116]) -> ref(1,9,8)={r:128,g:0,b:128}[104]
  924:[116] Call(size=0, to=645)
  645:[120] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[120]
  648:[132] GetByte(v1=ref(1,9,8)[120], fld=0, min=0) -> 128[120]
  653:[124] ConstInt(val=65536) -> 65536[124]
  658:[128] MulInt(v1=128[120], v2=65536[124]) -> 8388608[120]
  659:[124] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[124]
  662:[136] GetByte(v1=ref(1,9,8)[124], fld=1, min=0) -> 0[124]
  667:[128] ConstInt(val=256) -> 256[128]
  672:[132] MulInt(v1=0[124], v2=256[128]) -> 0[124]
  673:[128] AddInt(v1=8388608[120], v2=0[124]) -> 8388608[120]
  674:[124] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[124]
  677:[136] GetByte(v1=ref(1,9,8)[124], fld=2, min=0) -> 128[124]
  682:[128] AddInt(v1=8388608[120], v2=128[124]) -> 8388736[120]
  683:[124] Return(ret=931[116], value=4, discard=20) -> 8388736[104]
  931:[108] ConstInt(val=0) -> 0[108]
  936:[112] FormatInt(var[44], val=8388736[104], radix=16, width=0[108], token=32, plus=false, note=false)
  943:[104] ConstText(_value=" blue:") -> " blue:"[104]
  951:[120] AppendText(var[44], v1=" blue:"[104])
  954:[104] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][104]
  957:[116] ConstInt(val=1) -> 1[116]
  962:[120] GetVector(r=ref(1,1,4)=true[104], size=3, index=1[116]) -> ref(1,9,11)={r:0,g:0,b:255}[104]
  965:[116] FormatDatabase(var[44], val=ref(1,9,11)[104], db_tp=12, pretty=false)
  971:[104] VarText(var[44]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[104]
  974:[120] FreeStack(value=16, discard=28)
  978:[108] AppendText(var[68], v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92])
  981:[92] VarText(var[68]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92]
  984:[108] ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[108]
 1051:[124] EqText(v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92], v2="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[108]) -> true[92]
 1052:[93] GotoFalseWord(jump=1058, if_false=true[92])
 1055:[92] GotoWord(jump=1171)
 1171:[92] FreeText(var[68])
 1174:[92] VarRef(var[8]) -> ref(1,1,0)={vector:[{r:128,g:0,b:128},{r:0,g:0,b:255}]}[92]
 1177:[104] FreeRef(v1=ref(1,1,0)[92])
 1178:[92] FreeText(var[44])
 1181:[92] FreeText(var[20])
 1184:[92] Return(ret=4294967295[4], value=0, discard=88)
Finished
