struct Point {
  r: integer limit(0, 255) not null,
  g: integer limit(0, 255) not null,
  b: integer limit(0, 255) not null
}

fn value(self: Point) -> integer {
  self.r * 0x10000 + self.g * 0x100 + self.b
}

pub fn test() {
    test_value = {  points = [ Point { r:128, b:128 }, Point { b:255 } ];
  "size:{sizeof(Point)} purple:{points[0]} value:{points[0].value():x} blue:{points[1]}"};
    assert(
        test_value == "size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}",
        "Test failed {test_value} != \"size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}\""
    );
}
Type 17:Point[3]:
    r:byte[0]
    g:byte[1]
    b:byte[2]

Type 18:main_vector<Point>[8]:
    vector:vector<Point>[4]

Type 19:vector<Point>[4]:Vector(17)

fn _tp_Point_value(self:Point) -> integer {#block(1):integer
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self(0), 0i32, 0i32), 65536i32), OpMulInt(OpGetByte(self(0), 1i32, 0i32), 256i32)), OpGetByte(self(0), 2i32, 0i32));
}#block(1):integer

byte-code for colours:_tp_Point_value(self: ref(Point)[4]) [1119] -> integer
   0[16]: return-address
   0[20]: VarRef(var[4]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=self[4]:ref(Point)
   3[32]: GetByte(v1: ref(reference), fld=0, min=0) -> integer
   8[24]: ConstInt(val=65536) -> integer
  13[28]: MulInt(v1: integer, v2: integer) -> integer
  14[24]: VarRef(var[4]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=self[4]:ref(Point)
  17[36]: GetByte(v1: ref(reference), fld=1, min=0) -> integer
  22[28]: ConstInt(val=256) -> integer
  27[32]: MulInt(v1: integer, v2: integer) -> integer
  28[28]: AddInt(v1: integer, v2: integer) -> integer
  29[24]: VarRef(var[4]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=self[4]:ref(Point)
  32[36]: GetByte(v1: ref(reference), fld=2, min=0) -> integer
  37[28]: AddInt(v1: integer, v2: integer) -> integer
  38[24]: Return(ret=12, value=4, discard=20) type=integer[4]:Base[0]

fn test() {#block(1):void
  __ref_1(1):ref(main_vector<Point>) = null;
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text = {#block(2):text
    OpDatabase(__ref_1(1), 18i32);
    points(2):vector<ref(Point)>["__ref_1"] = OpGetField(__ref_1(1), 4i32, 19i32);
    OpSetInt(__ref_1(1), 4i32, 0i32);
    _elm_1(2):ref(Point)["points"] = OpNewRecord(points(2), 19i32, 65535i32);
    OpSetByte(_elm_1(2), 0i32, 0i32, 128i32);
    OpSetByte(_elm_1(2), 2i32, 0i32, 128i32);
    OpSetByte(_elm_1(2), 1i32, 0i32, 0i32);
    OpFinishRecord(points(2), _elm_1(2), 19i32, 65535i32);
    _elm_1(2):ref(Point)["points"] = OpNewRecord(points(2), 19i32, 65535i32);
    OpSetByte(_elm_1(2), 2i32, 0i32, 255i32);
    OpSetByte(_elm_1(2), 0i32, 0i32, 0i32);
    OpSetByte(_elm_1(2), 1i32, 0i32, 0i32);
    OpFinishRecord(points(2), _elm_1(2), 19i32, 65535i32);
    {#Formatted string(3):text
      __work_1(1):text = "size:";
      OpFormatInt(__work_1(1), 3i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1(1), " purple:");
      OpFormatDatabase(__work_1(1), OpGetVector(points(2), 3i32, 0i32), 17i32, false);
      OpAppendText(__work_1(1), " value:");
      OpFormatInt(__work_1(1), _tp_Point_value(OpGetVector(points(2), 3i32, 0i32)), 16i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1(1), " blue:");
      OpFormatDatabase(__work_1(1), OpGetVector(points(2), 3i32, 1i32), 17i32, false);
      __work_1(1);
    }#Formatted string(3):text;
  }#block(2):text;
  if OpEqText(test_value(1), "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") null else OpPanic({#Formatted string(4):text
    __work_2(1):text = "Test failed ";
    OpFormatText(__work_2(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_2(1), " != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"");
    __work_2(1);
  }#Formatted string(4):text);
  OpFreeText(test_value(1));
  OpFreeRef(__ref_1(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for colours:test() [1163]
   0[4]: return-address
   0[8]: ConvRefFromNull() -> ref(reference) var=__ref_1[8]:ref(main_vector<Point>)
   1[20]: Text() var=__work_2[20]:text
   2[44]: Text() var=__work_1[44]:text
   3[68]: Text() var=test_value[68]:text
   4[92]: Database(var[8], db_tp=18) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18]
   9[92]: VarRef(var[8]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18] var=__ref_1[8]:ref(main_vector<Point>)
  12[104]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=vector<Point>[4]:Vector(17)[19]
  15[104]: VarRef(var[8]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18] var=__ref_1[8]:ref(main_vector<Point>)
  18[116]: ConstInt(val=0) -> integer
  23[120]: SetInt(v1: ref(reference), fld=4, val: integer)
  26[104]: VarVector(var[92]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[92]:vector<ref(Point)>["__ref_1"]
  29[116]: NewRecord(data: ref(reference), parent_tp=19, fld=65535) -> ref(reference)
  34[116]: VarRef(var[104]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[104]:ref(Point)["points"]
  37[128]: ConstInt(val=128) -> integer
  42[132]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
  47[116]: VarRef(var[104]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[104]:ref(Point)["points"]
  50[128]: ConstInt(val=128) -> integer
  55[132]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
  60[116]: VarRef(var[104]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[104]:ref(Point)["points"]
  63[128]: ConstInt(val=0) -> integer
  68[132]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
  73[116]: VarVector(var[92]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[92]:vector<ref(Point)>["__ref_1"]
  76[128]: VarRef(var[104]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[104]:ref(Point)["points"]
  79[140]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=65535)
  84[116]: VarVector(var[92]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[92]:vector<ref(Point)>["__ref_1"]
  87[128]: NewRecord(data: ref(reference), parent_tp=19, fld=65535) -> ref(reference)
  92[128]: PutRef(var[104], value: ref(reference))
  95[116]: VarRef(var[104]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[104]:ref(Point)["points"]
  98[128]: ConstInt(val=255) -> integer
 103[132]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
 108[116]: VarRef(var[104]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[104]:ref(Point)["points"]
 111[128]: ConstInt(val=0) -> integer
 116[132]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
 121[116]: VarRef(var[104]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[104]:ref(Point)["points"]
 124[128]: ConstInt(val=0) -> integer
 129[132]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
 134[116]: VarVector(var[92]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[92]:vector<ref(Point)>["__ref_1"]
 137[128]: VarRef(var[104]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[104]:ref(Point)["points"]
 140[140]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=65535)
 145[116]: ClearText(var[44]) var=__work_1[44]:text
 148[116]: ConstText(_value="size:") -> text
 155[132]: AppendText(var[44], v1: text)
 158[116]: ConstInt(val=3) -> integer
 163[120]: ConstInt(val=0) -> integer
 168[124]: FormatInt(var[44], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 175[116]: ConstText(_value=" purple:") -> text
 185[132]: AppendText(var[44], v1: text)
 188[116]: VarVector(var[92]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[92]:vector<ref(Point)>["__ref_1"]
 191[128]: ConstInt(val=0) -> integer
 196[132]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17]
 199[128]: FormatDatabase(var[44], val: ref(reference), db_tp=17, pretty=false)
 205[116]: ConstText(_value=" value:") -> text
 214[132]: AppendText(var[44], v1: text)
 217[116]: VarVector(var[92]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[92]:vector<ref(Point)>["__ref_1"]
 220[128]: ConstInt(val=0) -> integer
 225[132]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17]
 228[128]: Call(size=0, to=1119)
 235[120]: ConstInt(val=0) -> integer
 240[124]: FormatInt(var[44], val: integer, radix=16, width: integer, token=32, plus=false, note=false)
 247[116]: ConstText(_value=" blue:") -> text
 255[132]: AppendText(var[44], v1: text)
 258[116]: VarVector(var[92]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[92]:vector<ref(Point)>["__ref_1"]
 261[128]: ConstInt(val=1) -> integer
 266[132]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17]
 269[128]: FormatDatabase(var[44], val: ref(reference), db_tp=17, pretty=false)
 275[116]: VarText(var[44]) -> text var=__work_1[44]:text
 278[132]: FreeStack(value=16, discard=40)
 282[108]: AppendText(var[68], v1: text)
 285[92]: VarText(var[68]) -> text var=test_value[68]:text
 288[108]: ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> text
 355[124]: EqText(v1: text, v2: text) -> boolean
 356[93]: GotoFalseWord(jump=362, if_false: boolean)
 359[92]: GotoWord(jump=475)
 362[92]: ClearText(var[20]) var=__work_2[20]:text
 365[92]: ConstText(_value="Test failed ") -> text
 379[108]: AppendText(var[20], v1: text)
 382[92]: VarText(var[68]) -> text var=test_value[68]:text
 385[108]: ConstInt(val=0) -> integer
 390[112]: FormatText(var[20], val: text, width: integer, dir=-1, token=32)
 395[92]: ConstText(_value=" != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"") -> text
 468[108]: AppendText(var[20], v1: text)
 471[92]: VarText(var[20]) -> text var=__work_2[20]:text
 474[108]: Panic(message: text)
 475[92]: FreeText(var[68])
 478[92]: VarRef(var[8]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18] var=__ref_1[8]:ref(main_vector<Point>)
 481[104]: FreeRef(v1: ref(reference))
 482[92]: FreeText(var[44])
 485[92]: FreeText(var[20])
 488[92]: Return(ret=0, value=0, discard=88)

Execute test:
    0:[8] ConvRefFromNull() -> ref(1,0,0)[8]
    1:[20] Text()
    2:[44] Text()
    3:[68] Text()
    4:[92] Database(var[8], db_tp=18)
    9:[92] VarRef(var[8]) -> ref(1,1,0)={}[92]
   12:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[][92]
   15:[104] VarRef(var[8]) -> ref(1,1,0)={}[104]
   18:[116] ConstInt(val=0) -> 0[116]
   23:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
   26:[104] VarVector(var[92]) -> ref(1,1,4)=[][104]
   29:[116] NewRecord(data=ref(1,1,4)[104], parent_tp=19, fld=65535) -> ref(1,9,8)[104]
   34:[116] VarRef(var[104]) -> ref(1,9,8)={r:0,g:0,b:0}[116]
   37:[128] ConstInt(val=128) -> 128[128]
   42:[132] SetByte(v1=ref(1,9,8)[116], fld=0, min=0, val=128[128])
   47:[116] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:0}[116]
   50:[128] ConstInt(val=128) -> 128[128]
   55:[132] SetByte(v1=ref(1,9,8)[116], fld=2, min=0, val=128[128])
   60:[116] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[116]
   63:[128] ConstInt(val=0) -> 0[128]
   68:[132] SetByte(v1=ref(1,9,8)[116], fld=1, min=0, val=0[128])
   73:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128}][116]
   76:[128] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[128]
   79:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,8)[128], parent_tp=19, fld=65535)
   84:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128}][116]
   87:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=19, fld=65535) -> ref(1,9,11)[116]
   92:[128] PutRef(var[104], value=ref(1,9,11)[116])
   95:[116] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:0}[116]
   98:[128] ConstInt(val=255) -> 255[128]
  103:[132] SetByte(v1=ref(1,9,11)[116], fld=2, min=0, val=255[128])
  108:[116] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:255}[116]
  111:[128] ConstInt(val=0) -> 0[128]
  116:[132] SetByte(v1=ref(1,9,11)[116], fld=0, min=0, val=0[128])
  121:[116] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:255}[116]
  124:[128] ConstInt(val=0) -> 0[128]
  129:[132] SetByte(v1=ref(1,9,11)[116], fld=1, min=0, val=0[128])
  134:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][116]
  137:[128] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:255}[128]
  140:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,11)[128], parent_tp=19, fld=65535)
  145:[116] ClearText(var[44])
  148:[116] ConstText(_value="size:") -> "size:"[116]
  155:[132] AppendText(var[44], v1="size:"[116])
  158:[116] ConstInt(val=3) -> 3[116]
  163:[120] ConstInt(val=0) -> 0[120]
  168:[124] FormatInt(var[44], val=3[116], radix=10, width=0[120], token=32, plus=false, note=false)
  175:[116] ConstText(_value=" purple:") -> " purple:"[116]
  185:[132] AppendText(var[44], v1=" purple:"[116])
  188:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][116]
  191:[128] ConstInt(val=0) -> 0[128]
  196:[132] GetVector(r=ref(1,1,4)[116], size=3, index=0[128]) -> ref(1,9,8)={r:128,g:0,b:128}[116]
  199:[128] FormatDatabase(var[44], val=ref(1,9,8)[116], db_tp=17, pretty=false)
  205:[116] ConstText(_value=" value:") -> " value:"[116]
  214:[132] AppendText(var[44], v1=" value:"[116])
  217:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][116]
  220:[128] ConstInt(val=0) -> 0[128]
  225:[132] GetVector(r=ref(1,1,4)[116], size=3, index=0[128]) -> ref(1,9,8)={r:128,g:0,b:128}[116]
  228:[128] Call(size=0, to=1119)
 1119:[132] VarRef(var[116]) -> ref(1,9,8)={r:128,g:0,b:128}[132]
 1122:[144] GetByte(v1=ref(1,9,8)[132], fld=0, min=0) -> 128[132]
 1127:[136] ConstInt(val=65536) -> 65536[136]
 1132:[140] MulInt(v1=128[132], v2=65536[136]) -> 8388608[132]
 1133:[136] VarRef(var[116]) -> ref(1,9,8)={r:128,g:0,b:128}[136]
 1136:[148] GetByte(v1=ref(1,9,8)[136], fld=1, min=0) -> 0[136]
 1141:[140] ConstInt(val=256) -> 256[140]
 1146:[144] MulInt(v1=0[136], v2=256[140]) -> 0[136]
 1147:[140] AddInt(v1=8388608[132], v2=0[136]) -> 8388608[132]
 1148:[136] VarRef(var[116]) -> ref(1,9,8)={r:128,g:0,b:128}[136]
 1151:[148] GetByte(v1=ref(1,9,8)[136], fld=2, min=0) -> 128[136]
 1156:[140] AddInt(v1=8388608[132], v2=128[136]) -> 8388736[132]
 1157:[136] Return(ret=1398[128], value=4, discard=20) -> 8388736[116]
  235:[120] ConstInt(val=0) -> 0[120]
  240:[124] FormatInt(var[44], val=8388736[116], radix=16, width=0[120], token=32, plus=false, note=false)
  247:[116] ConstText(_value=" blue:") -> " blue:"[116]
  255:[132] AppendText(var[44], v1=" blue:"[116])
  258:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][116]
  261:[128] ConstInt(val=1) -> 1[128]
  266:[132] GetVector(r=ref(1,1,4)[116], size=3, index=1[128]) -> ref(1,9,11)={r:0,g:0,b:255}[116]
  269:[128] FormatDatabase(var[44], val=ref(1,9,11)[116], db_tp=17, pretty=false)
  275:[116] VarText(var[44]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[116]
  278:[132] FreeStack(value=16, discard=40)
  282:[108] AppendText(var[68], v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92])
  285:[92] VarText(var[68]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92]
  288:[108] ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[108]
  355:[124] EqText(v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92], v2="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[108]) -> true[92]
  356:[93] GotoFalseWord(jump=362, if_false=true[92])
  359:[92] GotoWord(jump=475)
  475:[92] FreeText(var[68])
  478:[92] VarRef(var[8]) -> ref(1,1,0)={vector:[{r:128,g:0,b:128},{r:0,g:0,b:255}]}[92]
  481:[104] FreeRef(v1=ref(1,1,0)[92])
  482:[92] FreeText(var[44])
  485:[92] FreeText(var[20])
  488:[92] Return(ret=4294967295[4], value=0, discard=88)
Finished
