struct Point {
  r: integer limit(0, 255) not null,
  g: integer limit(0, 255) not null,
  b: integer limit(0, 255) not null
}

fn value(self: Point) -> integer {
  self.r * 0x10000 + self.g * 0x100 + self.b
}

pub fn test() {
    test_value = {  points = [ Point { r:128, b:128 }, Point { b:255 } ];
  "size:{sizeof(Point)} purple:{points[0]} value:{points[0].value():x} blue:{points[1]}"};
    assert(
        test_value == "size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}",
        "Test failed {test_value} != \"size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}\""
    );
}
Type 17:Point[3]:
    r:byte[0]
    g:byte[1]
    b:byte[2]

Type 18:main_vector<Point>[8]:
    vector:vector<Point>[4]

Type 19:vector<Point>[4]:Vector(17)

fn _tp_Point_value(self:Point) -> integer {#1 block
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 0i32, 0i32), 65536i32), OpMulInt(OpGetByte(self, 1i32, 0i32), 256i32)), OpGetByte(self, 2i32, 0i32));
}#1:integer

byte-code for colours:_tp_Point_value(self: ref(Point)[0]) [1176] -> integer
   0[12]: return-address
   0[16]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=self[0]:ref(Point) in 0
   3[28]: GetByte(v1: ref(reference), fld=0, min=0) -> integer
   8[20]: ConstInt(val=65536) -> integer
  13[24]: MulInt(v1: integer, v2: integer) -> integer
  14[20]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=self[0]:ref(Point) in 0
  17[32]: GetByte(v1: ref(reference), fld=1, min=0) -> integer
  22[24]: ConstInt(val=256) -> integer
  27[28]: MulInt(v1: integer, v2: integer) -> integer
  28[24]: AddInt(v1: integer, v2: integer) -> integer
  29[20]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=self[0]:ref(Point) in 0
  32[32]: GetByte(v1: ref(reference), fld=2, min=0) -> integer
  37[24]: AddInt(v1: integer, v2: integer) -> integer
  38[20]: Return(ret=12, value=4, discard=20) type=integer[4]:Base[0]

fn test() {#1 block
  __ref_2:ref(main_vector<Point>) = null;
  __ref_1:ref(main_vector<Point>) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    OpDatabase(__ref_2, 18i32);
    points:vector<ref(Point)["_elm_1"]>["__ref_2"] = OpGetField(__ref_2, 4i32, 65535i32);
    OpSetInt(__ref_2, 4i32, 0i32);
    OpDatabase(__ref_1, 18i32);
    points:vector<ref(Point)["_elm_1"]>["__ref_2"] = OpGetField(__ref_1, 4i32, 65535i32);
    OpSetInt(__ref_1, 4i32, 0i32);
    _elm_1:ref(Point)["__ref_1"] = OpNewRecord(points, 19i32, 65535i32);
    OpSetByte(_elm_1, 0i32, 0i32, 128i32);
    OpSetByte(_elm_1, 2i32, 0i32, 128i32);
    OpSetByte(_elm_1, 1i32, 0i32, 0i32);
    OpFinishRecord(points, _elm_1, 19i32, 65535i32);
    _elm_1:ref(Point)["__ref_1"] = OpNewRecord(points, 19i32, 65535i32);
    OpSetByte(_elm_1, 2i32, 0i32, 255i32);
    OpSetByte(_elm_1, 0i32, 0i32, 0i32);
    OpSetByte(_elm_1, 1i32, 0i32, 0i32);
    OpFinishRecord(points, _elm_1, 19i32, 65535i32);
    {#3 formatting string
      __work_1:text = "size:";
      OpFormatInt(__work_1, 3i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " purple:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 0i32), 17i32, false);
      OpAppendText(__work_1, " value:");
      OpFormatInt(__work_1, _tp_Point_value(OpGetVector(points, 3i32, 0i32)), 16i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " blue:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 1i32), 17i32, false);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"");
    __work_2;
  }#4:text);
}#1

byte-code for colours:test() [1220]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_2[4]:ref(main_vector<Point>) in 1
   1[16]: ConvRefFromNull() -> ref(reference) var=__ref_1[16]:ref(main_vector<Point>) in 1
   2[28]: Text() var=__work_2[28]:text in 1
   3[52]: Text() var=__work_1[52]:text in 1
   4[76]: Text() var=test_value[76]:text in 1
   5[100]: Database(var[4], db_tp=18) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18]
  10[100]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18] var=__ref_2[4]:ref(main_vector<Point>) in 1
  13[112]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  16[112]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18] var=__ref_2[4]:ref(main_vector<Point>) in 1
  19[124]: ConstInt(val=0) -> integer
  24[128]: SetInt(v1: ref(reference), fld=4, val: integer)
  27[112]: Database(var[16], db_tp=18) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18]
  32[112]: VarRef(var[16]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18] var=__ref_1[16]:ref(main_vector<Point>) in 1
  35[124]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  38[124]: PutRef(var[100], value: ref(reference))
  41[112]: VarRef(var[16]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18] var=__ref_1[16]:ref(main_vector<Point>) in 1
  44[124]: ConstInt(val=0) -> integer
  49[128]: SetInt(v1: ref(reference), fld=4, val: integer)
  52[112]: VarVector(var[100]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[100]:vector<ref(Point)["_elm_1"]>["__ref_2"] in 2
  55[124]: NewRecord(data: ref(reference), parent_tp=19, fld=65535) -> ref(reference)
  60[124]: VarRef(var[112]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[112]:ref(Point)["__ref_1"] in 2
  63[136]: ConstInt(val=128) -> integer
  68[140]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
  73[124]: VarRef(var[112]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[112]:ref(Point)["__ref_1"] in 2
  76[136]: ConstInt(val=128) -> integer
  81[140]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
  86[124]: VarRef(var[112]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[112]:ref(Point)["__ref_1"] in 2
  89[136]: ConstInt(val=0) -> integer
  94[140]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
  99[124]: VarVector(var[100]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[100]:vector<ref(Point)["_elm_1"]>["__ref_2"] in 2
 102[136]: VarRef(var[112]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[112]:ref(Point)["__ref_1"] in 2
 105[148]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=65535)
 110[124]: VarVector(var[100]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[100]:vector<ref(Point)["_elm_1"]>["__ref_2"] in 2
 113[136]: NewRecord(data: ref(reference), parent_tp=19, fld=65535) -> ref(reference)
 118[136]: PutRef(var[112], value: ref(reference))
 121[124]: VarRef(var[112]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[112]:ref(Point)["__ref_1"] in 2
 124[136]: ConstInt(val=255) -> integer
 129[140]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
 134[124]: VarRef(var[112]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[112]:ref(Point)["__ref_1"] in 2
 137[136]: ConstInt(val=0) -> integer
 142[140]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
 147[124]: VarRef(var[112]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[112]:ref(Point)["__ref_1"] in 2
 150[136]: ConstInt(val=0) -> integer
 155[140]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
 160[124]: VarVector(var[100]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[100]:vector<ref(Point)["_elm_1"]>["__ref_2"] in 2
 163[136]: VarRef(var[112]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17] var=_elm_1[112]:ref(Point)["__ref_1"] in 2
 166[148]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=65535)
 171[124]: ClearText(var[52]) var=__work_1[52]:text in 1
 174[124]: ConstText(_value="size:") -> text
 181[140]: AppendText(var[52], v1: text)
 184[124]: ConstInt(val=3) -> integer
 189[128]: ConstInt(val=0) -> integer
 194[132]: FormatInt(var[52], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 201[124]: ConstText(_value=" purple:") -> text
 211[140]: AppendText(var[52], v1: text)
 214[124]: VarVector(var[100]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[100]:vector<ref(Point)["_elm_1"]>["__ref_2"] in 2
 217[136]: ConstInt(val=0) -> integer
 222[140]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17]
 225[136]: FormatDatabase(var[52], val: ref(reference), db_tp=17, pretty=false)
 231[124]: ConstText(_value=" value:") -> text
 240[140]: AppendText(var[52], v1: text)
 243[124]: VarVector(var[100]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[100]:vector<ref(Point)["_elm_1"]>["__ref_2"] in 2
 246[136]: ConstInt(val=0) -> integer
 251[140]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17]
 254[136]: Call(size=0, to=1176)
 261[128]: ConstInt(val=0) -> integer
 266[132]: FormatInt(var[52], val: integer, radix=16, width: integer, token=32, plus=false, note=false)
 273[124]: ConstText(_value=" blue:") -> text
 281[140]: AppendText(var[52], v1: text)
 284[124]: VarVector(var[100]) -> vector type=vector<Point>[4]:Vector(17)[19] var=points[100]:vector<ref(Point)["_elm_1"]>["__ref_2"] in 2
 287[136]: ConstInt(val=1) -> integer
 292[140]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[17]
 295[136]: FormatDatabase(var[52], val: ref(reference), db_tp=17, pretty=false)
 301[124]: VarText(var[52]) -> text var=__work_1[52]:text in 1
 304[140]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 308[116]: AppendText(var[76], v1: text)
 311[100]: VarText(var[76]) -> text var=test_value[76]:text in 1
 314[116]: ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> text
 381[132]: EqText(v1: text, v2: text) -> boolean
 382[101]: GotoFalseWord(jump=388, if_false: boolean)
 385[100]: GotoWord(jump=501)
 388[100]: ClearText(var[28]) var=__work_2[28]:text in 1
 391[100]: ConstText(_value="Test failed ") -> text
 405[116]: AppendText(var[28], v1: text)
 408[100]: VarText(var[76]) -> text var=test_value[76]:text in 1
 411[116]: ConstInt(val=0) -> integer
 416[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 421[100]: ConstText(_value=" != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"") -> text
 494[116]: AppendText(var[28], v1: text)
 497[100]: VarText(var[28]) -> text var=__work_2[28]:text in 1
 500[116]: Panic(message: text)
 501[100]: FreeText(var[76])
 504[100]: VarRef(var[16]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18] var=__ref_1[16]:ref(main_vector<Point>) in 1
 507[112]: FreeRef(v1: ref(reference))
 508[100]: FreeText(var[52])
 511[100]: FreeText(var[28])
 514[100]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[18] var=__ref_2[4]:ref(main_vector<Point>) in 1
 517[112]: FreeRef(v1: ref(reference))
 518[100]: Return(ret=0, value=0, discard=100)

