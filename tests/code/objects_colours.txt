Test code:
struct Point {
  r: integer limit(0, 255) not null,
  g: integer limit(0, 255) not null,
  b: integer limit(0, 255) not null
}

fn value(self: Point) -> integer {
  self.r * 0x10000 + self.g * 0x100 + self.b
}

pub fn test() {
    test_value = {  points = [ Point { r:128, b:128 }, Point { b:255 } ];
  "size:{sizeof(Point)} purple:{points[0]} value:{points[0].value():x} blue:{points[1]}"};
    assert(
        test_value == "size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}",
        "Test failed {test_value} != \"size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}\""
    );
}

Type 13:Point[3]:
    r:byte[0]
    g:byte[1]
    b:byte[2]

Type 14:main_vector<Point>[8]:
    vector:vector<Point>[4]

Type 15:vector<Point>[4]:Vector(13)

fn _tp_Point_value {
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 0i32, 0i32), 65536i32), OpMulInt(OpGetByte(self, 1i32, 0i32), 256i32)), OpGetByte(self, 2i32, 0i32));
}

byte-code for colours:_tp_Point_value(self: Point[0]) -> integer
 668[12]: return-address
 668[16]: VarRef(var[0]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 671[28]: GetByte(v1: reference, fld=0, min=0) -> integer
 676[20]: ConstInt(val=65536) -> integer
 681[24]: MulInt(v1: integer, v2: integer) -> integer
 682[20]: VarRef(var[0]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 685[32]: GetByte(v1: reference, fld=1, min=0) -> integer
 690[24]: ConstInt(val=256) -> integer
 695[28]: MulInt(v1: integer, v2: integer) -> integer
 696[24]: AddInt(v1: integer, v2: integer) -> integer
 697[20]: VarRef(var[0]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 700[32]: GetByte(v1: reference, fld=2, min=0) -> integer
 705[24]: AddInt(v1: integer, v2: integer) -> integer
 706[20]: GenReturn(ret=12, value=4, discard=20)

fn test {
  let test_value = {
    let points = {
      let db_14 = OpDatabase(3i32, 14i32);
      let vec_13 = OpGetField(db_14, 4i32, 15i32);
      OpSetInt(db_14, 4i32, 0i32);
      let elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetByte(elm_12, 0i32, 0i32, 128i32);
      OpSetByte(elm_12, 2i32, 0i32, 128i32);
      OpSetByte(elm_12, 1i32, 0i32, 0i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      elm_12 = OpNewRecord(vec_13, 15i32, 65535i32);
      OpSetByte(elm_12, 2i32, 0i32, 255i32);
      OpSetByte(elm_12, 0i32, 0i32, 0i32);
      OpSetByte(elm_12, 1i32, 0i32, 0i32);
      OpFinishRecord(vec_13, elm_12, 15i32, 65535i32);
      vec_13;
    };
    {
      let append_15 = "size:";
      OpFormatInt(append_15, 3i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(append_15, " purple:");
      OpFormatDatabase(append_15, OpGetVector(points, 3i32, 0i32), 13i32, false);
      OpAppendText(append_15, " value:");
      OpFormatInt(append_15, _tp_Point_value(OpGetVector(points, 3i32, 0i32)), 16i32, 0i32, 32i32, false, false);
      OpAppendText(append_15, " blue:");
      OpFormatDatabase(append_15, OpGetVector(points, 3i32, 1i32), 13i32, false);
      append_15;
    };
  };
  if OpEqText(test_value, "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") {null} else {OpGenPanic({
    let append_16 = "Test failed ";
    OpFormatText(append_16, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_16, " != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"");
    append_16;
  })};
}

byte-code for colours:test()
 712[0]: return-address
 712[4]: Text()
 713[28]: Database(size=3, db_tp=14) -> reference type=main_vector<Point>[8]:{vector:vector<Point>[4]}[14]
 718[40]: VarRef(var[28]) -> reference type=main_vector<Point>[8]:{vector:vector<Point>[4]}[14]
 721[52]: GetField(v1: reference, fld=4) -> reference type=vector<Point>[4]:Vector(13)[15]
 724[52]: VarRef(var[28]) -> reference type=main_vector<Point>[8]:{vector:vector<Point>[4]}[14]
 727[64]: ConstInt(val=0) -> integer
 732[68]: SetInt(v1: reference, fld=4, val: integer)
 735[52]: VarVector(var[40]) -> vector type=vector<Point>[4]:Vector(13)[15]
 738[64]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 743[64]: VarRef(var[52]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 746[76]: ConstInt(val=128) -> integer
 751[80]: SetByte(v1: reference, fld=0, min=0, val: integer)
 756[64]: VarRef(var[52]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 759[76]: ConstInt(val=128) -> integer
 764[80]: SetByte(v1: reference, fld=2, min=0, val: integer)
 769[64]: VarRef(var[52]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 772[76]: ConstInt(val=0) -> integer
 777[80]: SetByte(v1: reference, fld=1, min=0, val: integer)
 782[64]: VarVector(var[40]) -> vector type=vector<Point>[4]:Vector(13)[15]
 785[76]: VarRef(var[52]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 788[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 793[64]: VarVector(var[40]) -> vector type=vector<Point>[4]:Vector(13)[15]
 796[76]: NewRecord(data: reference, parent_tp=15, fld=65535) -> reference
 801[76]: PutRef(var[52], value: reference)
 804[64]: VarRef(var[52]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 807[76]: ConstInt(val=255) -> integer
 812[80]: SetByte(v1: reference, fld=2, min=0, val: integer)
 817[64]: VarRef(var[52]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 820[76]: ConstInt(val=0) -> integer
 825[80]: SetByte(v1: reference, fld=0, min=0, val: integer)
 830[64]: VarRef(var[52]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 833[76]: ConstInt(val=0) -> integer
 838[80]: SetByte(v1: reference, fld=1, min=0, val: integer)
 843[64]: VarVector(var[40]) -> vector type=vector<Point>[4]:Vector(13)[15]
 846[76]: VarRef(var[52]) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 849[88]: FinishRecord(data: reference, rec: reference, parent_tp=15, fld=65535)
 854[64]: VarVector(var[40]) -> vector type=vector<Point>[4]:Vector(13)[15]
 857[76]: GenFreeStack(value=12, discard=36)
 861[40]: Text()
 862[64]: ConstText(_value="size:") -> text
 869[80]: AppendText(var[40], v1: text)
 872[64]: ConstInt(val=3) -> integer
 877[68]: ConstInt(val=0) -> integer
 882[72]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 889[64]: ConstText(_value=" purple:") -> text
 899[80]: AppendText(var[40], v1: text)
 902[64]: VarVector(var[28]) -> vector type=vector<Point>[4]:Vector(13)[15]
 905[76]: ConstInt(val=0) -> integer
 910[80]: GetVector(r: vector, size=3, index: integer) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 913[76]: FormatDatabase(var[40], val: reference, db_tp=13, pretty=false)
 919[64]: ConstText(_value=" value:") -> text
 928[80]: AppendText(var[40], v1: text)
 931[64]: VarVector(var[28]) -> vector type=vector<Point>[4]:Vector(13)[15]
 934[76]: ConstInt(val=0) -> integer
 939[80]: GetVector(r: vector, size=3, index: integer) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 942[76]: GenCall(size=0, to=668)
 949[68]: ConstInt(val=0) -> integer
 954[72]: FormatInt(var[40], val: integer, radix=16, width: integer, token=32, plus=false, note=false)
 961[64]: ConstText(_value=" blue:") -> text
 969[80]: AppendText(var[40], v1: text)
 972[64]: VarVector(var[28]) -> vector type=vector<Point>[4]:Vector(13)[15]
 975[76]: ConstInt(val=1) -> integer
 980[80]: GetVector(r: vector, size=3, index: integer) -> reference type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[13]
 983[76]: FormatDatabase(var[40], val: reference, db_tp=13, pretty=false)
 989[64]: VarText(var[40]) -> text
 992[80]: GenFreeStack(value=16, discard=24)
 996[56]: GenFreeStack(value=16, discard=12)
1000[44]: AppendText(var[4], v1: text)
1003[28]: VarText(var[4]) -> text
1006[44]: ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> text
1073[60]: EqText(v1: text, v2: text) -> boolean
1074[29]: GenGotoFalseWord(jump=1080, if_false: boolean)
1077[28]: GenGotoWord(jump=1195)
1080[28]: Text()
1081[52]: ConstText(_value="Test failed ") -> text
1095[68]: AppendText(var[28], v1: text)
1098[52]: VarText(var[4]) -> text
1101[68]: ConstInt(val=0) -> integer
1106[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
1111[52]: ConstText(_value=" != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"") -> text
1184[68]: AppendText(var[28], v1: text)
1187[52]: VarText(var[28]) -> text
1190[68]: GenFreeStack(value=16, discard=24)
1194[44]: GenPanic(message: text)
1195[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  712:[4] Text()
  713:[28] Database(size=3, db_tp=14) -> ref(1,1,0)={}[28]
  718:[40] VarRef(var[28]) -> ref(1,1,0)={}[40]
  721:[52] GetField(v1=ref(1,1,0)[40], fld=4) -> ref(1,1,4)=[][40]
  724:[52] VarRef(var[28]) -> ref(1,1,0)={}[52]
  727:[64] ConstInt(val=0) -> 0[64]
  732:[68] SetInt(v1=ref(1,1,0)[52], fld=4, val=0[64])
  735:[52] VarVector(var[40]) -> ref(1,1,4)=[][52]
  738:[64] NewRecord(data=ref(1,1,4)[52], parent_tp=15, fld=65535) -> ref(1,4,8)[52]
  743:[64] VarRef(var[52]) -> ref(1,4,8)={r:0,g:0,b:0}[64]
  746:[76] ConstInt(val=128) -> 128[76]
  751:[80] SetByte(v1=ref(1,4,8)[64], fld=0, min=0, val=128[76])
  756:[64] VarRef(var[52]) -> ref(1,4,8)={r:128,g:0,b:0}[64]
  759:[76] ConstInt(val=128) -> 128[76]
  764:[80] SetByte(v1=ref(1,4,8)[64], fld=2, min=0, val=128[76])
  769:[64] VarRef(var[52]) -> ref(1,4,8)={r:128,g:0,b:128}[64]
  772:[76] ConstInt(val=0) -> 0[76]
  777:[80] SetByte(v1=ref(1,4,8)[64], fld=1, min=0, val=0[76])
  782:[64] VarVector(var[40]) -> ref(1,1,4)=[{r:128,g:0,b:128}][64]
  785:[76] VarRef(var[52]) -> ref(1,4,8)={r:128,g:0,b:128}[76]
  788:[88] FinishRecord(data=ref(1,1,4)[64], rec=ref(1,4,8)[76], parent_tp=15, fld=65535)
  793:[64] VarVector(var[40]) -> ref(1,1,4)=[{r:128,g:0,b:128}][64]
  796:[76] NewRecord(data=ref(1,1,4)[64], parent_tp=15, fld=65535) -> ref(1,4,11)[64]
  801:[76] PutRef(var[52], value=ref(1,4,11)[64])
  804:[64] VarRef(var[52]) -> ref(1,4,11)={r:0,g:0,b:0}[64]
  807:[76] ConstInt(val=255) -> 255[76]
  812:[80] SetByte(v1=ref(1,4,11)[64], fld=2, min=0, val=255[76])
  817:[64] VarRef(var[52]) -> ref(1,4,11)={r:0,g:0,b:255}[64]
  820:[76] ConstInt(val=0) -> 0[76]
  825:[80] SetByte(v1=ref(1,4,11)[64], fld=0, min=0, val=0[76])
  830:[64] VarRef(var[52]) -> ref(1,4,11)={r:0,g:0,b:255}[64]
  833:[76] ConstInt(val=0) -> 0[76]
  838:[80] SetByte(v1=ref(1,4,11)[64], fld=1, min=0, val=0[76])
  843:[64] VarVector(var[40]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][64]
  846:[76] VarRef(var[52]) -> ref(1,4,11)={r:0,g:0,b:255}[76]
  849:[88] FinishRecord(data=ref(1,1,4)[64], rec=ref(1,4,11)[76], parent_tp=15, fld=65535)
  854:[64] VarVector(var[40]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][64]
  857:[76] GenFreeStack(value=12, discard=36)
  861:[40] Text()
  862:[64] ConstText(_value="size:") -> "size:"[64]
  869:[80] AppendText(var[40], v1="size:"[64])
  872:[64] ConstInt(val=3) -> 3[64]
  877:[68] ConstInt(val=0) -> 0[68]
  882:[72] FormatInt(var[40], val=3[64], radix=10, width=0[68], token=32, plus=false, note=false)
  889:[64] ConstText(_value=" purple:") -> " purple:"[64]
  899:[80] AppendText(var[40], v1=" purple:"[64])
  902:[64] VarVector(var[28]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][64]
  905:[76] ConstInt(val=0) -> 0[76]
  910:[80] GetVector(r=ref(1,1,4)=true[64], size=3, index=0[76]) -> ref(1,4,8)={r:128,g:0,b:128}[64]
  913:[76] FormatDatabase(var[40], val=ref(1,4,8)[64], db_tp=13, pretty=false)
  919:[64] ConstText(_value=" value:") -> " value:"[64]
  928:[80] AppendText(var[40], v1=" value:"[64])
  931:[64] VarVector(var[28]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][64]
  934:[76] ConstInt(val=0) -> 0[76]
  939:[80] GetVector(r=ref(1,1,4)=true[64], size=3, index=0[76]) -> ref(1,4,8)={r:128,g:0,b:128}[64]
  942:[76] GenCall(size=0, to=668)
  668:[80] VarRef(var[64]) -> ref(1,4,8)={r:128,g:0,b:128}[80]
  671:[92] GetByte(v1=ref(1,4,8)[80], fld=0, min=0) -> 128[80]
  676:[84] ConstInt(val=65536) -> 65536[84]
  681:[88] MulInt(v1=128[80], v2=65536[84]) -> 8388608[80]
  682:[84] VarRef(var[64]) -> ref(1,4,8)={r:128,g:0,b:128}[84]
  685:[96] GetByte(v1=ref(1,4,8)[84], fld=1, min=0) -> 0[84]
  690:[88] ConstInt(val=256) -> 256[88]
  695:[92] MulInt(v1=0[84], v2=256[88]) -> 0[84]
  696:[88] AddInt(v1=8388608[80], v2=0[84]) -> 8388608[80]
  697:[84] VarRef(var[64]) -> ref(1,4,8)={r:128,g:0,b:128}[84]
  700:[96] GetByte(v1=ref(1,4,8)[84], fld=2, min=0) -> 128[84]
  705:[88] AddInt(v1=8388608[80], v2=128[84]) -> 8388736[80]
  706:[84] GenReturn(ret=949[76], value=4, discard=20)
  949:[68] ConstInt(val=0) -> 0[68]
  954:[72] FormatInt(var[40], val=8388736[64], radix=16, width=0[68], token=32, plus=false, note=false)
  961:[64] ConstText(_value=" blue:") -> " blue:"[64]
  969:[80] AppendText(var[40], v1=" blue:"[64])
  972:[64] VarVector(var[28]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][64]
  975:[76] ConstInt(val=1) -> 1[76]
  980:[80] GetVector(r=ref(1,1,4)=true[64], size=3, index=1[76]) -> ref(1,4,11)={r:0,g:0,b:255}[64]
  983:[76] FormatDatabase(var[40], val=ref(1,4,11)[64], db_tp=13, pretty=false)
  989:[64] VarText(var[40]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[64]
  992:[80] GenFreeStack(value=16, discard=24)
  996:[56] GenFreeStack(value=16, discard=12)
 1000:[44] AppendText(var[4], v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[28])
 1003:[28] VarText(var[4]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[28]
 1006:[44] ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[44]
 1073:[60] EqText(v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[28], v2="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[44]) -> true[28]
 1074:[29] GenGotoFalseWord(jump=1080, if_false=true[28])
 1077:[28] GenGotoWord(jump=1195)
 1195:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
