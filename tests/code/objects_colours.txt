struct Point {
  r: integer limit(0, 255) not null,
  g: integer limit(0, 255) not null,
  b: integer limit(0, 255) not null
}

fn value(self: Point) -> integer {
  self.r * 0x10000 + self.g * 0x100 + self.b
}

pub fn test() {
    test_value = {  points = [ Point { r:128, b:128 }, Point { b:255 } ];
  "size:{sizeof(Point)} purple:{points[0]} value:{points[0].value():x} blue:{points[1]}"};
    assert(
        test_value == "size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}",
        "Test failed {test_value} != \"size:3 purple:{{r:128,g:0,b:128}} value:800080 blue:{{r:0,g:0,b:255}}\""
    );
}
Type 12:Point[3]:
    r:byte[0]
    g:byte[1]
    b:byte[2]

Type 13:main_vector<Point>[8]:
    vector:vector<Point>[4]

Type 14:vector<Point>[4]:Vector(12)

fn _tp_Point_value(self:Point) -> integer {#1 block
  OpAddInt(OpAddInt(OpMulInt(OpGetByte(self, 0i32, 0i32), 65536i32), OpMulInt(OpGetByte(self, 1i32, 0i32), 256i32)), OpGetByte(self, 2i32, 0i32));
}#1:integer

byte-code for colours:_tp_Point_value(self: ref(Point)[0]) -> integer
 655[12]: return-address
 655[16]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=self[0]:ref(Point) in 0
 658[28]: GetByte(v1: ref(reference), fld=0, min=0) -> integer
 663[20]: ConstInt(val=65536) -> integer
 668[24]: MulInt(v1: integer, v2: integer) -> integer
 669[20]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=self[0]:ref(Point) in 0
 672[32]: GetByte(v1: ref(reference), fld=1, min=0) -> integer
 677[24]: ConstInt(val=256) -> integer
 682[28]: MulInt(v1: integer, v2: integer) -> integer
 683[24]: AddInt(v1: integer, v2: integer) -> integer
 684[20]: VarRef(var[0]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=self[0]:ref(Point) in 0
 687[32]: GetByte(v1: ref(reference), fld=2, min=0) -> integer
 692[24]: AddInt(v1: integer, v2: integer) -> integer
 693[20]: Return(ret=12, value=4, discard=20) type=integer[4]:Base[0]

fn test() {#1 block
  __ref_1:ref(main_vector<Point>) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    points:vector<ref(Point)["_elm_2"]>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 13i32);
      _vec_1:vector<ref(Point)["_elm_2"]>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(Point)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      {#4 object
        OpSetByte(_elm_2, 0i32, 0i32, 128i32);
        OpSetByte(_elm_2, 2i32, 0i32, 128i32);
        OpSetByte(_elm_2, 1i32, 0i32, 0i32);
      }#4;
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(Point)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      {#5 object
        OpSetByte(_elm_2, 2i32, 0i32, 255i32);
        OpSetByte(_elm_2, 0i32, 0i32, 0i32);
        OpSetByte(_elm_2, 1i32, 0i32, 0i32);
      }#5;
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _vec_1;
    }#3:vector<ref(Point)["_elm_2"]>["__ref_1"];
    {#6 formatting string
      __work_1:text = "size:";
      OpFormatInt(__work_1, 3i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " purple:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 0i32), 12i32, false);
      OpAppendText(__work_1, " value:");
      OpFormatInt(__work_1, _tp_Point_value(OpGetVector(points, 3i32, 0i32)), 16i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " blue:");
      OpFormatDatabase(__work_1, OpGetVector(points, 3i32, 1i32), 12i32, false);
      __work_1;
    }#6:text;
  }#2:text;
  if OpEqText(test_value, "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") null else OpPanic({#7 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"");
    __work_2;
  }#7:text);
}#1

byte-code for colours:test()
 699[0]: return-address
 699[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<Point>) in 1
 700[16]: Text() var=__work_2[16]:text in 1
 701[40]: Text() var=__work_1[40]:text in 1
 702[64]: Text() var=test_value[64]:text in 1
 703[88]: Database(var[4], db_tp=13) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[13] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 708[88]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[13] var=__ref_1[4]:ref(main_vector<Point>) in 1
 711[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
 714[100]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[13] var=__ref_1[4]:ref(main_vector<Point>) in 1
 717[112]: ConstInt(val=0) -> integer
 722[116]: SetInt(v1: ref(reference), fld=4, val: integer)
 725[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 728[112]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 733[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 736[124]: ConstInt(val=128) -> integer
 741[128]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
 746[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 749[124]: ConstInt(val=128) -> integer
 754[128]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
 759[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 762[124]: ConstInt(val=0) -> integer
 767[128]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
 772[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 775[124]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 778[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 783[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 786[124]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 791[124]: PutRef(var[100], value: ref(reference))
 794[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 797[124]: ConstInt(val=255) -> integer
 802[128]: SetByte(v1: ref(reference), fld=2, min=0, val: integer)
 807[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 810[124]: ConstInt(val=0) -> integer
 815[128]: SetByte(v1: ref(reference), fld=0, min=0, val: integer)
 820[112]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 823[124]: ConstInt(val=0) -> integer
 828[128]: SetByte(v1: ref(reference), fld=1, min=0, val: integer)
 833[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 836[124]: VarRef(var[100]) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12] var=_elm_2[100]:ref(Point)["__ref_1"] in 3
 839[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 844[112]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=_vec_1[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 3
 847[124]: FreeStack(value=12, discard=36) type=Variable[12]:{name:text[4], value:text[8]}[6]
 851[100]: ClearText(var[40]) var=__work_1[40]:text in 1
 854[100]: ConstText(_value="size:") -> text
 861[116]: AppendText(var[40], v1: text)
 864[100]: ConstInt(val=3) -> integer
 869[104]: ConstInt(val=0) -> integer
 874[108]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 881[100]: ConstText(_value=" purple:") -> text
 891[116]: AppendText(var[40], v1: text)
 894[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 897[112]: ConstInt(val=0) -> integer
 902[116]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12]
 905[112]: FormatDatabase(var[40], val: ref(reference), db_tp=12, pretty=false)
 911[100]: ConstText(_value=" value:") -> text
 920[116]: AppendText(var[40], v1: text)
 923[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 926[112]: ConstInt(val=0) -> integer
 931[116]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12]
 934[112]: Call(size=0, to=655)
 941[104]: ConstInt(val=0) -> integer
 946[108]: FormatInt(var[40], val: integer, radix=16, width: integer, token=32, plus=false, note=false)
 953[100]: ConstText(_value=" blue:") -> text
 961[116]: AppendText(var[40], v1: text)
 964[100]: VarVector(var[88]) -> vector type=vector<Point>[4]:Vector(12)[14] var=points[88]:vector<ref(Point)["_elm_2"]>["__ref_1"] in 2
 967[112]: ConstInt(val=1) -> integer
 972[116]: GetVector(r: vector, size=3, index: integer) -> ref(reference) type=Point[3]:{r:byte[0], g:byte[1], b:byte[2]}[12]
 975[112]: FormatDatabase(var[40], val: ref(reference), db_tp=12, pretty=false)
 981[100]: VarText(var[40]) -> text var=__work_1[40]:text in 1
 984[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 988[104]: AppendText(var[64], v1: text)
 991[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 994[104]: ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> text
1061[120]: EqText(v1: text, v2: text) -> boolean
1062[89]: GotoFalseWord(jump=1068, if_false: boolean)
1065[88]: GotoWord(jump=1181)
1068[88]: ClearText(var[16]) var=__work_2[16]:text in 1
1071[88]: ConstText(_value="Test failed ") -> text
1085[104]: AppendText(var[16], v1: text)
1088[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
1091[104]: ConstInt(val=0) -> integer
1096[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
1101[88]: ConstText(_value=" != "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"") -> text
1174[104]: AppendText(var[16], v1: text)
1177[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
1180[104]: Panic(message: text)
1181[88]: FreeText(var[64])
1184[88]: VarRef(var[4]) -> ref(reference) type=main_vector<Point>[8]:{vector:vector<Point>[4]}[13] var=__ref_1[4]:ref(main_vector<Point>) in 1
1187[100]: FreeRef(v1: ref(reference))
1188[88]: FreeText(var[40])
1191[88]: FreeText(var[16])
1194[88]: Return(ret=0, value=0, discard=88)

Execute test:
  699:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  700:[20] Text()
  701:[44] Text()
  702:[68] Text()
  703:[92] Database(var[8], db_tp=13)
  708:[92] VarRef(var[8]) -> ref(1,1,0)={}[92]
  711:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)[92]
  714:[104] VarRef(var[8]) -> ref(1,1,0)={}[104]
  717:[116] ConstInt(val=0) -> 0[116]
  722:[120] SetInt(v1=ref(1,1,0)[104], fld=4, val=0[116])
  725:[104] VarVector(var[92]) -> ref(1,1,4)=[][104]
  728:[116] NewRecord(data=ref(1,1,4)[104], parent_tp=14, fld=65535) -> ref(1,9,8)[104]
  733:[116] VarRef(var[104]) -> ref(1,9,8)={r:0,g:0,b:0}[116]
  736:[128] ConstInt(val=128) -> 128[128]
  741:[132] SetByte(v1=ref(1,9,8)[116], fld=0, min=0, val=128[128])
  746:[116] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:0}[116]
  749:[128] ConstInt(val=128) -> 128[128]
  754:[132] SetByte(v1=ref(1,9,8)[116], fld=2, min=0, val=128[128])
  759:[116] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[116]
  762:[128] ConstInt(val=0) -> 0[128]
  767:[132] SetByte(v1=ref(1,9,8)[116], fld=1, min=0, val=0[128])
  772:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128}][116]
  775:[128] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[128]
  778:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,8)[128], parent_tp=14, fld=65535)
  783:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128}][116]
  786:[128] NewRecord(data=ref(1,1,4)[116], parent_tp=14, fld=65535) -> ref(1,9,11)[116]
  791:[128] PutRef(var[104], value=ref(1,9,11)[116])
  794:[116] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:0}[116]
  797:[128] ConstInt(val=255) -> 255[128]
  802:[132] SetByte(v1=ref(1,9,11)[116], fld=2, min=0, val=255[128])
  807:[116] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:255}[116]
  810:[128] ConstInt(val=0) -> 0[128]
  815:[132] SetByte(v1=ref(1,9,11)[116], fld=0, min=0, val=0[128])
  820:[116] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:255}[116]
  823:[128] ConstInt(val=0) -> 0[128]
  828:[132] SetByte(v1=ref(1,9,11)[116], fld=1, min=0, val=0[128])
  833:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][116]
  836:[128] VarRef(var[104]) -> ref(1,9,11)={r:0,g:0,b:255}[128]
  839:[140] FinishRecord(data=ref(1,1,4)[116], rec=ref(1,9,11)[128], parent_tp=14, fld=65535)
  844:[116] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][116]
  847:[128] FreeStack(value=12, discard=36)
  851:[104] ClearText(var[44])
  854:[104] ConstText(_value="size:") -> "size:"[104]
  861:[120] AppendText(var[44], v1="size:"[104])
  864:[104] ConstInt(val=3) -> 3[104]
  869:[108] ConstInt(val=0) -> 0[108]
  874:[112] FormatInt(var[44], val=3[104], radix=10, width=0[108], token=32, plus=false, note=false)
  881:[104] ConstText(_value=" purple:") -> " purple:"[104]
  891:[120] AppendText(var[44], v1=" purple:"[104])
  894:[104] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][104]
  897:[116] ConstInt(val=0) -> 0[116]
  902:[120] GetVector(r=ref(1,1,4)=true[104], size=3, index=0[116]) -> ref(1,9,8)={r:128,g:0,b:128}[104]
  905:[116] FormatDatabase(var[44], val=ref(1,9,8)[104], db_tp=12, pretty=false)
  911:[104] ConstText(_value=" value:") -> " value:"[104]
  920:[120] AppendText(var[44], v1=" value:"[104])
  923:[104] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][104]
  926:[116] ConstInt(val=0) -> 0[116]
  931:[120] GetVector(r=ref(1,1,4)=true[104], size=3, index=0[116]) -> ref(1,9,8)={r:128,g:0,b:128}[104]
  934:[116] Call(size=0, to=655)
  655:[120] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[120]
  658:[132] GetByte(v1=ref(1,9,8)[120], fld=0, min=0) -> 128[120]
  663:[124] ConstInt(val=65536) -> 65536[124]
  668:[128] MulInt(v1=128[120], v2=65536[124]) -> 8388608[120]
  669:[124] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[124]
  672:[136] GetByte(v1=ref(1,9,8)[124], fld=1, min=0) -> 0[124]
  677:[128] ConstInt(val=256) -> 256[128]
  682:[132] MulInt(v1=0[124], v2=256[128]) -> 0[124]
  683:[128] AddInt(v1=8388608[120], v2=0[124]) -> 8388608[120]
  684:[124] VarRef(var[104]) -> ref(1,9,8)={r:128,g:0,b:128}[124]
  687:[136] GetByte(v1=ref(1,9,8)[124], fld=2, min=0) -> 128[124]
  692:[128] AddInt(v1=8388608[120], v2=128[124]) -> 8388736[120]
  693:[124] Return(ret=941[116], value=4, discard=20) -> 8388736[104]
  941:[108] ConstInt(val=0) -> 0[108]
  946:[112] FormatInt(var[44], val=8388736[104], radix=16, width=0[108], token=32, plus=false, note=false)
  953:[104] ConstText(_value=" blue:") -> " blue:"[104]
  961:[120] AppendText(var[44], v1=" blue:"[104])
  964:[104] VarVector(var[92]) -> ref(1,1,4)=[{r:128,g:0,b:128},{r:0,g:0,b:255}][104]
  967:[116] ConstInt(val=1) -> 1[116]
  972:[120] GetVector(r=ref(1,1,4)=true[104], size=3, index=1[116]) -> ref(1,9,11)={r:0,g:0,b:255}[104]
  975:[116] FormatDatabase(var[44], val=ref(1,9,11)[104], db_tp=12, pretty=false)
  981:[104] VarText(var[44]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[104]
  984:[120] FreeStack(value=16, discard=28)
  988:[108] AppendText(var[68], v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92])
  991:[92] VarText(var[68]) -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92]
  994:[108] ConstText(_value="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}") -> "size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[108]
 1061:[124] EqText(v1="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[92], v2="size:3 purple:{r:128,g:0,b:128} value:800080 blue:{r:0,g:0,b:255}"[108]) -> true[92]
 1062:[93] GotoFalseWord(jump=1068, if_false=true[92])
 1065:[92] GotoWord(jump=1181)
 1181:[92] FreeText(var[68])
 1184:[92] VarRef(var[8]) -> ref(1,1,0)={vector:[{r:128,g:0,b:128},{r:0,g:0,b:255}]}[92]
 1187:[104] FreeRef(v1=ref(1,1,0)[92])
 1188:[92] FreeText(var[44])
 1191:[92] FreeText(var[20])
 1194:[92] Return(ret=4294967295[4], value=0, discard=88)
Finished
