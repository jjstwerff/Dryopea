struct Elm {nr: integer, key: text, value: integer}
struct Db {map: index<Elm[nr,-key]>}

pub fn test() {
    test_value = {db=Db {map: [
  Elm {nr: 101, key: "One", value: 1},
  Elm {nr: 92, key: "Two", value: 2},
  Elm {nr: 83, key: "Three", value: 3},
  Elm {nr: 83, key: "Four", value: 4},
  Elm {nr: 83, key: "Five", value: 5},
  Elm {nr: 63, key: "Six", value: 6},
]};
sum = 0;
for v in db.map[83..92,"Two"] {
  sum = sum * 10 + v.value;
};
sum};
    assert(
        test_value == 345,
        "Test failed {test_value} != 345"
    );
}
Type 12:Elm[25]:
    nr:integer[4]
    key:text[8]
    value:integer[12]
    #left_1:integer[16]
    #right_1:integer[20]
    #color_1:boolean[24]

Type 13:Db[8]:
    map:index<Elm[nr,-key]>[4]

Type 14:index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ]

Type 15:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    db:Db["_val_1"] = {#3 object
      _val_1:Db = OpDatabase(8i32, 13i32);
      OpSetInt(_val_1, 4i32, 0i32);
      {#4 vector
        _elm_2:Elm = OpNewRecord(_val_1, 13i32, 0i32);
        {#5 object
          OpSetInt(_elm_2, 4i32, 101i32);
          OpSetText(_elm_2, 8i32, "One");
          OpSetInt(_elm_2, 12i32, 1i32);
        }#5;
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2:Elm = OpNewRecord(_val_1, 13i32, 0i32);
        {#6 object
          OpSetInt(_elm_2, 4i32, 92i32);
          OpSetText(_elm_2, 8i32, "Two");
          OpSetInt(_elm_2, 12i32, 2i32);
        }#6;
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2:Elm = OpNewRecord(_val_1, 13i32, 0i32);
        {#7 object
          OpSetInt(_elm_2, 4i32, 83i32);
          OpSetText(_elm_2, 8i32, "Three");
          OpSetInt(_elm_2, 12i32, 3i32);
        }#7;
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2:Elm = OpNewRecord(_val_1, 13i32, 0i32);
        {#8 object
          OpSetInt(_elm_2, 4i32, 83i32);
          OpSetText(_elm_2, 8i32, "Four");
          OpSetInt(_elm_2, 12i32, 4i32);
        }#8;
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2:Elm = OpNewRecord(_val_1, 13i32, 0i32);
        {#9 object
          OpSetInt(_elm_2, 4i32, 83i32);
          OpSetText(_elm_2, 8i32, "Five");
          OpSetInt(_elm_2, 12i32, 5i32);
        }#9;
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2:Elm = OpNewRecord(_val_1, 13i32, 0i32);
        {#10 object
          OpSetInt(_elm_2, 4i32, 63i32);
          OpSetText(_elm_2, 8i32, "Six");
          OpSetInt(_elm_2, 12i32, 6i32);
        }#10;
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
      }#4;
      _val_1;
    }#3:Db["_val_1"];
    sum:integer = 0i32;
    {#11 for
      _iter_3:long = OpIterate(OpGetField(db, 4i32, 14i32), 1i32, 16i32, &[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], 1i32, 83i32, 2i32, 92i32, "Two");
      loop {#12 for loop
        v:Elm = {#13 for next
          OpStep(_iter_3, OpGetField(db, 4i32, 14i32), 1i32, 16i32);
        }#13:Elm;
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#14 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 12i32));
        }#14;
      }#12;
    }#11;
    sum;
  }#2:integer;
  if OpEqInt(test_value, 345i32) null else OpPanic({#15 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 345");
    __work_1;
  }#15:text);
}#1

byte-code for index_iterator:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Database(size=8, db_tp=13) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 698[40]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 701[52]: ConstInt(val=0) -> integer
 706[56]: SetInt(v1: reference, fld=4, val: integer)
 709[40]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 712[52]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 717[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 720[64]: ConstInt(val=101) -> integer
 725[68]: SetInt(v1: reference, fld=4, val: integer)
 728[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 731[64]: ConstText(_value="One") -> text
 736[80]: SetText(v1: reference, fld=8, val: text)
 739[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 742[64]: ConstInt(val=1) -> integer
 747[68]: SetInt(v1: reference, fld=12, val: integer)
 750[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 753[64]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 756[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 761[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 764[64]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 769[64]: PutRef(var[40], value: reference)
 772[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 775[64]: ConstInt(val=92) -> integer
 780[68]: SetInt(v1: reference, fld=4, val: integer)
 783[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 786[64]: ConstText(_value="Two") -> text
 791[80]: SetText(v1: reference, fld=8, val: text)
 794[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 797[64]: ConstInt(val=2) -> integer
 802[68]: SetInt(v1: reference, fld=12, val: integer)
 805[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 808[64]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 811[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 816[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 819[64]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 824[64]: PutRef(var[40], value: reference)
 827[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 830[64]: ConstInt(val=83) -> integer
 835[68]: SetInt(v1: reference, fld=4, val: integer)
 838[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 841[64]: ConstText(_value="Three") -> text
 848[80]: SetText(v1: reference, fld=8, val: text)
 851[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 854[64]: ConstInt(val=3) -> integer
 859[68]: SetInt(v1: reference, fld=12, val: integer)
 862[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 865[64]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 868[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 873[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 876[64]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 881[64]: PutRef(var[40], value: reference)
 884[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 887[64]: ConstInt(val=83) -> integer
 892[68]: SetInt(v1: reference, fld=4, val: integer)
 895[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 898[64]: ConstText(_value="Four") -> text
 904[80]: SetText(v1: reference, fld=8, val: text)
 907[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 910[64]: ConstInt(val=4) -> integer
 915[68]: SetInt(v1: reference, fld=12, val: integer)
 918[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 921[64]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 924[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 929[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 932[64]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 937[64]: PutRef(var[40], value: reference)
 940[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 943[64]: ConstInt(val=83) -> integer
 948[68]: SetInt(v1: reference, fld=4, val: integer)
 951[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 954[64]: ConstText(_value="Five") -> text
 960[80]: SetText(v1: reference, fld=8, val: text)
 963[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 966[64]: ConstInt(val=5) -> integer
 971[68]: SetInt(v1: reference, fld=12, val: integer)
 974[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 977[64]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 980[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 985[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
 988[64]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 993[64]: PutRef(var[40], value: reference)
 996[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
 999[64]: ConstInt(val=63) -> integer
1004[68]: SetInt(v1: reference, fld=4, val: integer)
1007[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
1010[64]: ConstText(_value="Six") -> text
1015[80]: SetText(v1: reference, fld=8, val: text)
1018[52]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
1021[64]: ConstInt(val=6) -> integer
1026[68]: SetInt(v1: reference, fld=12, val: integer)
1029[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
1032[64]: VarRef(var[40]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
1035[76]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
1040[52]: FreeStack(value=0, discard=12)
1044[40]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
1047[52]: FreeStack(value=12, discard=24) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
1051[40]: ConstInt(val=0) -> integer
1056[44]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
1059[56]: GetField(v1: reference, fld=4) -> reference type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1062[56]: ConstInt(val=83) -> integer
1067[60]: ConstText(_value="Two") -> text
1072[76]: ConstInt(val=92) -> integer
1077[80]: Iterate(data: reference, on=1, arg=16, keys=[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], from_key=1, till_key=83) -> long
1090[52]: VarRef(var[28]) -> reference type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13]
1093[64]: GetField(v1: reference, fld=4) -> reference type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1096[64]: Step(state_var=20, data: reference, on=1, arg=16) -> reference
1102[64]: VarRef(var[52]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
1105[76]: ConvBoolFromRef(val: reference) -> boolean
1106[65]: Not(v1: boolean) -> boolean
1107[65]: GotoFalseWord(jump=1117, if_false: boolean)
1110[64]: FreeStack(value=0, discard=12)
1114[52]: GotoWord(jump=1143)
1117[64]: VarInt(var[40]) -> integer
1120[68]: ConstInt(val=10) -> integer
1125[72]: MulInt(v1: integer, v2: integer) -> integer
1126[68]: VarRef(var[52]) -> reference type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12]
1129[80]: GetInt(v1: reference, fld=12) -> integer
1132[72]: AddInt(v1: integer, v2: integer) -> integer
1133[68]: PutInt(var[40], value: integer)
1136[64]: FreeStack(value=0, discard=12)
1140[52]: GotoWord(jump=1090)
1143[52]: FreeStack(value=0, discard=8)
1147[44]: VarInt(var[40]) -> integer
1150[48]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
1154[32]: VarInt(var[28]) -> integer
1157[36]: ConstInt(val=345) -> integer
1162[40]: EqInt(v1: integer, v2: integer) -> boolean
1163[33]: GotoFalseWord(jump=1169, if_false: boolean)
1166[32]: GotoWord(jump=1220)
1169[32]: ClearText(var[4])
1172[32]: ConstText(_value="Test failed ") -> text
1186[48]: AppendText(var[4], v1: text)
1189[32]: VarInt(var[28]) -> integer
1192[36]: ConstInt(val=0) -> integer
1197[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1204[32]: ConstText(_value=" != 345") -> text
1213[48]: AppendText(var[4], v1: text)
1216[32]: VarText(var[4]) -> text
1219[48]: Panic(message: text)
1220[32]: FreeText(var[4])
1223[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] Database(size=8, db_tp=13) -> ref(1,1,0)={map:[]}[32]
  698:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
  701:[56] ConstInt(val=0) -> 0[56]
  706:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  709:[44] VarRef(var[32]) -> ref(1,1,0)={map:[]}[44]
  712:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=13, fld=0) -> ref(1,9,0)[44]
  717:[56] VarRef(var[44]) -> ref(1,9,0)={}[56]
  720:[68] ConstInt(val=101) -> 101[68]
  725:[72] SetInt(v1=ref(1,9,0)[56], fld=4, val=101[68])
  728:[56] VarRef(var[44]) -> ref(1,9,0)={nr:101}[56]
  731:[68] ConstText(_value="One") -> "One"[68]
  736:[84] SetText(v1=ref(1,9,0)[56], fld=8, val="One"[68])
  739:[56] VarRef(var[44]) -> ref(1,9,0)={nr:101,key:"One"}[56]
  742:[68] ConstInt(val=1) -> 1[68]
  747:[72] SetInt(v1=ref(1,9,0)[56], fld=12, val=1[68])
  750:[56] VarRef(var[32]) -> ref(1,1,0)={map:[]}[56]
  753:[68] VarRef(var[44]) -> ref(1,9,0)={nr:101,key:"One",value:1}[68]
  756:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,0)[68], parent_tp=13, fld=0)
  761:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[56]
  764:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,15,0)[56]
  769:[68] PutRef(var[44], value=ref(1,15,0)[56])
  772:[56] VarRef(var[44]) -> ref(1,15,0)={}[56]
  775:[68] ConstInt(val=92) -> 92[68]
  780:[72] SetInt(v1=ref(1,15,0)[56], fld=4, val=92[68])
  783:[56] VarRef(var[44]) -> ref(1,15,0)={nr:92}[56]
  786:[68] ConstText(_value="Two") -> "Two"[68]
  791:[84] SetText(v1=ref(1,15,0)[56], fld=8, val="Two"[68])
  794:[56] VarRef(var[44]) -> ref(1,15,0)={nr:92,key:"Two"}[56]
  797:[68] ConstInt(val=2) -> 2[68]
  802:[72] SetInt(v1=ref(1,15,0)[56], fld=12, val=2[68])
  805:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[56]
  808:[68] VarRef(var[44]) -> ref(1,15,0)={nr:92,key:"Two",value:2}[68]
  811:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,15,0)[68], parent_tp=13, fld=0)
  816:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  819:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,21,0)[56]
  824:[68] PutRef(var[44], value=ref(1,21,0)[56])
  827:[56] VarRef(var[44]) -> ref(1,21,0)={}[56]
  830:[68] ConstInt(val=83) -> 83[68]
  835:[72] SetInt(v1=ref(1,21,0)[56], fld=4, val=83[68])
  838:[56] VarRef(var[44]) -> ref(1,21,0)={nr:83}[56]
  841:[68] ConstText(_value="Three") -> "Three"[68]
  848:[84] SetText(v1=ref(1,21,0)[56], fld=8, val="Three"[68])
  851:[56] VarRef(var[44]) -> ref(1,21,0)={nr:83,key:"Three"}[56]
  854:[68] ConstInt(val=3) -> 3[68]
  859:[72] SetInt(v1=ref(1,21,0)[56], fld=12, val=3[68])
  862:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  865:[68] VarRef(var[44]) -> ref(1,21,0)={nr:83,key:"Three",value:3}[68]
  868:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,21,0)[68], parent_tp=13, fld=0)
  873:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  876:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,27,0)[56]
  881:[68] PutRef(var[44], value=ref(1,27,0)[56])
  884:[56] VarRef(var[44]) -> ref(1,27,0)={}[56]
  887:[68] ConstInt(val=83) -> 83[68]
  892:[72] SetInt(v1=ref(1,27,0)[56], fld=4, val=83[68])
  895:[56] VarRef(var[44]) -> ref(1,27,0)={nr:83}[56]
  898:[68] ConstText(_value="Four") -> "Four"[68]
  904:[84] SetText(v1=ref(1,27,0)[56], fld=8, val="Four"[68])
  907:[56] VarRef(var[44]) -> ref(1,27,0)={nr:83,key:"Four"}[56]
  910:[68] ConstInt(val=4) -> 4[68]
  915:[72] SetInt(v1=ref(1,27,0)[56], fld=12, val=4[68])
  918:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  921:[68] VarRef(var[44]) -> ref(1,27,0)={nr:83,key:"Four",value:4}[68]
  924:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,27,0)[68], parent_tp=13, fld=0)
  929:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  932:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,33,0)[56]
  937:[68] PutRef(var[44], value=ref(1,33,0)[56])
  940:[56] VarRef(var[44]) -> ref(1,33,0)={}[56]
  943:[68] ConstInt(val=83) -> 83[68]
  948:[72] SetInt(v1=ref(1,33,0)[56], fld=4, val=83[68])
  951:[56] VarRef(var[44]) -> ref(1,33,0)={nr:83}[56]
  954:[68] ConstText(_value="Five") -> "Five"[68]
  960:[84] SetText(v1=ref(1,33,0)[56], fld=8, val="Five"[68])
  963:[56] VarRef(var[44]) -> ref(1,33,0)={nr:83,key:"Five"}[56]
  966:[68] ConstInt(val=5) -> 5[68]
  971:[72] SetInt(v1=ref(1,33,0)[56], fld=12, val=5[68])
  974:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  977:[68] VarRef(var[44]) -> ref(1,33,0)={nr:83,key:"Five",value:5}[68]
  980:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,33,0)[68], parent_tp=13, fld=0)
  985:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  988:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,39,0)[56]
  993:[68] PutRef(var[44], value=ref(1,39,0)[56])
  996:[56] VarRef(var[44]) -> ref(1,39,0)={}[56]
  999:[68] ConstInt(val=63) -> 63[68]
 1004:[72] SetInt(v1=ref(1,39,0)[56], fld=4, val=63[68])
 1007:[56] VarRef(var[44]) -> ref(1,39,0)={nr:63}[56]
 1010:[68] ConstText(_value="Six") -> "Six"[68]
 1015:[84] SetText(v1=ref(1,39,0)[56], fld=8, val="Six"[68])
 1018:[56] VarRef(var[44]) -> ref(1,39,0)={nr:63,key:"Six"}[56]
 1021:[68] ConstInt(val=6) -> 6[68]
 1026:[72] SetInt(v1=ref(1,39,0)[56], fld=12, val=6[68])
 1029:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
 1032:[68] VarRef(var[44]) -> ref(1,39,0)={nr:63,key:"Six",value:6}[68]
 1035:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,39,0)[68], parent_tp=13, fld=0)
 1040:[56] FreeStack(value=0, discard=12)
 1044:[44] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[44]
 1047:[56] FreeStack(value=12, discard=24)
 1051:[44] ConstInt(val=0) -> 0[44]
 1056:[48] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[48]
 1059:[60] GetField(v1=ref(1,1,0)[48], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][48]
 1062:[60] ConstInt(val=83) -> 83[60]
 1067:[64] ConstText(_value="Two") -> "Two"[64]
 1072:[80] ConstInt(val=92) -> 92[80]
 1077:[84] Iterate(data=ref(92,3,0)[72], on=1, arg=16, keys=[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], from_key=1, till_key=83) -> 141733920807[48]
 1090:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
 1093:[68] GetField(v1=ref(1,1,0)[56], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][56]
 1096:[68] Step(state_var=20, data=ref(1,1,4)[56], on=1, arg=16) -> ref(1,21,0)[56]
 1102:[68] VarRef(var[56]) -> ref(1,21,0)={nr:83,key:"Three",value:3}[68]
 1105:[80] ConvBoolFromRef(val=ref(1,21,0)[68]) -> true[68]
 1106:[69] Not(v1=true[68]) -> false[68]
 1107:[69] GotoFalseWord(jump=1117, if_false=false[68])
 1117:[68] VarInt(var[44]) -> 0[68]
 1120:[72] ConstInt(val=10) -> 10[72]
 1125:[76] MulInt(v1=0[68], v2=10[72]) -> 0[68]
 1126:[72] VarRef(var[56]) -> ref(1,21,0)={nr:83,key:"Three",value:3}[72]
 1129:[84] GetInt(v1=ref(1,21,0)[72], fld=12) -> 3[72]
 1132:[76] AddInt(v1=0[68], v2=3[72]) -> 3[68]
 1133:[72] PutInt(var[44], value=3[68])
 1136:[68] FreeStack(value=0, discard=12)
 1140:[56] GotoWord(jump=1090)
 1090:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
 1093:[68] GetField(v1=ref(1,1,0)[56], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][56]
 1096:[68] Step(state_var=20, data=ref(1,1,4)[56], on=1, arg=16) -> ref(1,27,0)[56]
 1102:[68] VarRef(var[56]) -> ref(1,27,0)={nr:83,key:"Four",value:4}[68]
 1105:[80] ConvBoolFromRef(val=ref(1,27,0)[68]) -> true[68]
 1106:[69] Not(v1=true[68]) -> false[68]
 1107:[69] GotoFalseWord(jump=1117, if_false=false[68])
 1117:[68] VarInt(var[44]) -> 3[68]
 1120:[72] ConstInt(val=10) -> 10[72]
 1125:[76] MulInt(v1=3[68], v2=10[72]) -> 30[68]
 1126:[72] VarRef(var[56]) -> ref(1,27,0)={nr:83,key:"Four",value:4}[72]
 1129:[84] GetInt(v1=ref(1,27,0)[72], fld=12) -> 4[72]
 1132:[76] AddInt(v1=30[68], v2=4[72]) -> 34[68]
 1133:[72] PutInt(var[44], value=34[68])
 1136:[68] FreeStack(value=0, discard=12)
 1140:[56] GotoWord(jump=1090)
 1090:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
 1093:[68] GetField(v1=ref(1,1,0)[56], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][56]
 1096:[68] Step(state_var=20, data=ref(1,1,4)[56], on=1, arg=16) -> ref(1,33,0)[56]
 1102:[68] VarRef(var[56]) -> ref(1,33,0)={nr:83,key:"Five",value:5}[68]
 1105:[80] ConvBoolFromRef(val=ref(1,33,0)[68]) -> true[68]
 1106:[69] Not(v1=true[68]) -> false[68]
 1107:[69] GotoFalseWord(jump=1117, if_false=false[68])
 1117:[68] VarInt(var[44]) -> 34[68]
 1120:[72] ConstInt(val=10) -> 10[72]
 1125:[76] MulInt(v1=34[68], v2=10[72]) -> 340[68]
 1126:[72] VarRef(var[56]) -> ref(1,33,0)={nr:83,key:"Five",value:5}[72]
 1129:[84] GetInt(v1=ref(1,33,0)[72], fld=12) -> 5[72]
 1132:[76] AddInt(v1=340[68], v2=5[72]) -> 345[68]
 1133:[72] PutInt(var[44], value=345[68])
 1136:[68] FreeStack(value=0, discard=12)
 1140:[56] GotoWord(jump=1090)
 1090:[56] VarRef(var[32]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
 1093:[68] GetField(v1=ref(1,1,0)[56], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][56]
 1096:[68] Step(state_var=20, data=ref(1,1,4)[56], on=1, arg=16) -> ref(1,0,0)[56]
 1102:[68] VarRef(var[56]) -> ref(1,0,0)={}[68]
 1105:[80] ConvBoolFromRef(val=ref(1,0,0)[68]) -> false[68]
 1106:[69] Not(v1=false[68]) -> true[68]
 1107:[69] GotoFalseWord(jump=1117, if_false=true[68])
 1110:[68] FreeStack(value=0, discard=12)
 1114:[56] GotoWord(jump=1143)
 1143:[56] FreeStack(value=0, discard=8)
 1147:[48] VarInt(var[44]) -> 345[48]
 1150:[52] FreeStack(value=4, discard=20)
 1154:[36] VarInt(var[32]) -> 345[36]
 1157:[40] ConstInt(val=345) -> 345[40]
 1162:[44] EqInt(v1=345[36], v2=345[40]) -> true[36]
 1163:[37] GotoFalseWord(jump=1169, if_false=true[36])
 1166:[36] GotoWord(jump=1220)
 1220:[36] FreeText(var[8])
 1223:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
