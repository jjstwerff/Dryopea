struct Elm {nr: integer, key: text, value: integer}
struct Db {map: index<Elm[nr,-key]>}

pub fn test() {
    test_value = {db=Db {map: [
  Elm {nr: 101, key: "One", value: 1},
  Elm {nr: 92, key: "Two", value: 2},
  Elm {nr: 83, key: "Three", value: 3},
  Elm {nr: 83, key: "Four", value: 4},
  Elm {nr: 83, key: "Five", value: 5},
  Elm {nr: 63, key: "Six", value: 6},
]};
assert(db.map[101,"One"].value == 1 , "Missing element");
sum = 0;
for v in db.map[83..92,"Two"] {
  sum = sum * 10 + v.value;
};
assert(!db.map[12,""], "No element");
assert(!db.map[83,"One"], "No element");
sum};
    assert(
        test_value == 345,
        "Test failed {test_value} != 345"
    );
}
Type 12:Elm[25]:
    nr:integer[4]
    key:text[8]
    value:integer[12]
    #left_1:integer[16]
    #right_1:integer[20]
    #color_1:boolean[24]

Type 13:Db[8]:
    map:index<Elm[nr,-key]>[4]

Type 14:index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ]

Type 15:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __ref_1:ref(Db) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    db:ref(Db)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 13i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      {#4 vector
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#5 object
          OpSetInt(_elm_1, 4i32, 101i32);
          OpSetText(_elm_1, 8i32, "One");
          OpSetInt(_elm_1, 12i32, 1i32);
        }#5;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#6 object
          OpSetInt(_elm_1, 4i32, 92i32);
          OpSetText(_elm_1, 8i32, "Two");
          OpSetInt(_elm_1, 12i32, 2i32);
        }#6;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#7 object
          OpSetInt(_elm_1, 4i32, 83i32);
          OpSetText(_elm_1, 8i32, "Three");
          OpSetInt(_elm_1, 12i32, 3i32);
        }#7;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#8 object
          OpSetInt(_elm_1, 4i32, 83i32);
          OpSetText(_elm_1, 8i32, "Four");
          OpSetInt(_elm_1, 12i32, 4i32);
        }#8;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#9 object
          OpSetInt(_elm_1, 4i32, 83i32);
          OpSetText(_elm_1, 8i32, "Five");
          OpSetInt(_elm_1, 12i32, 5i32);
        }#9;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#10 object
          OpSetInt(_elm_1, 4i32, 63i32);
          OpSetText(_elm_1, 8i32, "Six");
          OpSetInt(_elm_1, 12i32, 6i32);
        }#10;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
      }#4;
      __ref_1;
    }#3:ref(Db)["__ref_1"];
    if OpEqInt(OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 101i32, "One"), 12i32), 1i32) null else OpPanic("Missing element");
    sum:integer = 0i32;
    {#11 for
      _iter_2:long = OpIterate(OpGetField(db, 4i32, 14i32), 1i32, 16i32, &[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], 1i32, 83i32, 2i32, 92i32, "Two");
      loop {#12 for loop
        v:ref(Elm)["db"] = {#13 for next
          OpStep(_iter_2, OpGetField(db, 4i32, 14i32), 1i32, 16i32);
        }#13:ref(Elm)["db"];
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#14 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 12i32));
        }#14;
      }#12;
    }#11;
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 12i32, ""))) null else OpPanic("No element");
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 83i32, "One"))) null else OpPanic("No element");
    sum;
  }#2:integer;
  if OpEqInt(test_value, 345i32) null else OpPanic({#15 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 345");
    __work_1;
  }#15:text);
}#1

byte-code for index_iterator:test()
 655[0]: return-address
 655[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Db) in 1
 656[16]: Text() var=__work_1[16]:text in 1
 657[40]: Database(var[4], db_tp=13) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 662[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 665[52]: ConstInt(val=0) -> integer
 670[56]: SetInt(v1: ref(reference), fld=4, val: integer)
 673[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 676[52]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 681[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 684[64]: ConstInt(val=101) -> integer
 689[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 692[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 695[64]: ConstText(_value="One") -> text
 700[80]: SetText(v1: ref(reference), fld=8, val: text)
 703[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 706[64]: ConstInt(val=1) -> integer
 711[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 714[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 717[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 720[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 725[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 728[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 733[64]: PutRef(var[40], value: ref(reference))
 736[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 739[64]: ConstInt(val=92) -> integer
 744[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 747[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 750[64]: ConstText(_value="Two") -> text
 755[80]: SetText(v1: ref(reference), fld=8, val: text)
 758[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 761[64]: ConstInt(val=2) -> integer
 766[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 769[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 772[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 775[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 780[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 783[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 788[64]: PutRef(var[40], value: ref(reference))
 791[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 794[64]: ConstInt(val=83) -> integer
 799[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 802[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 805[64]: ConstText(_value="Three") -> text
 812[80]: SetText(v1: ref(reference), fld=8, val: text)
 815[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 818[64]: ConstInt(val=3) -> integer
 823[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 826[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 829[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 832[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 837[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 840[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 845[64]: PutRef(var[40], value: ref(reference))
 848[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 851[64]: ConstInt(val=83) -> integer
 856[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 859[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 862[64]: ConstText(_value="Four") -> text
 868[80]: SetText(v1: ref(reference), fld=8, val: text)
 871[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 874[64]: ConstInt(val=4) -> integer
 879[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 882[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 885[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 888[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 893[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 896[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 901[64]: PutRef(var[40], value: ref(reference))
 904[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 907[64]: ConstInt(val=83) -> integer
 912[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 915[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 918[64]: ConstText(_value="Five") -> text
 924[80]: SetText(v1: ref(reference), fld=8, val: text)
 927[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 930[64]: ConstInt(val=5) -> integer
 935[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 938[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 941[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 944[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 949[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 952[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 957[64]: PutRef(var[40], value: ref(reference))
 960[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 963[64]: ConstInt(val=63) -> integer
 968[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 971[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 974[64]: ConstText(_value="Six") -> text
 979[80]: SetText(v1: ref(reference), fld=8, val: text)
 982[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 985[64]: ConstInt(val=6) -> integer
 990[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 993[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 996[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 999[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
1004[52]: FreeStack(value=0, discard=12)
1008[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1011[52]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1014[64]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1017[64]: ConstText(_value="One") -> text
1022[80]: ConstInt(val=101) -> integer
1027[84]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1031[64]: GetInt(v1: ref(reference), fld=12) -> integer
1034[56]: ConstInt(val=1) -> integer
1039[60]: EqInt(v1: integer, v2: integer) -> boolean
1040[53]: GotoFalseWord(jump=1046, if_false: boolean)
1043[52]: GotoWord(jump=1064)
1046[52]: ConstText(_value="Missing element") -> text
1063[68]: Panic(message: text)
1064[52]: ConstInt(val=0) -> integer var=sum[52]:integer in 2
1069[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1072[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1075[68]: ConstInt(val=83) -> integer
1080[72]: ConstText(_value="Two") -> text
1085[88]: ConstInt(val=92) -> integer
1090[92]: Iterate(data: ref(reference), on=1, arg=16, keys=[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], from_key=1, till_key=83) -> long
1103[64]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1106[76]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1109[76]: Step(state_var=20, data: ref(reference), on=1, arg=16) -> ref(reference)
1115[76]: VarRef(var[64]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=v[64]:ref(Elm)["db"] in 12
1118[88]: ConvBoolFromRef(val: ref(reference)) -> boolean
1119[77]: Not(v1: boolean) -> boolean
1120[77]: GotoFalseWord(jump=1130, if_false: boolean)
1123[76]: FreeStack(value=0, discard=12)
1127[64]: GotoWord(jump=1156)
1130[76]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
1133[80]: ConstInt(val=10) -> integer
1138[84]: MulInt(v1: integer, v2: integer) -> integer
1139[80]: VarRef(var[64]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=v[64]:ref(Elm)["db"] in 12
1142[92]: GetInt(v1: ref(reference), fld=12) -> integer
1145[84]: AddInt(v1: integer, v2: integer) -> integer
1146[80]: PutInt(var[52], value: integer)
1149[76]: FreeStack(value=0, discard=12)
1153[64]: GotoWord(jump=1103)
1156[64]: FreeStack(value=0, discard=8)
1160[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1163[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1166[68]: ConstText(_value="") -> text
1168[84]: ConstInt(val=12) -> integer
1173[88]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1177[68]: ConvBoolFromRef(val: ref(reference)) -> boolean
1178[57]: Not(v1: boolean) -> boolean
1179[57]: GotoFalseWord(jump=1185, if_false: boolean)
1182[56]: GotoWord(jump=1198)
1185[56]: ConstText(_value="No element") -> text
1197[72]: Panic(message: text)
1198[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1201[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1204[68]: ConstText(_value="One") -> text
1209[84]: ConstInt(val=83) -> integer
1214[88]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1218[68]: ConvBoolFromRef(val: ref(reference)) -> boolean
1219[57]: Not(v1: boolean) -> boolean
1220[57]: GotoFalseWord(jump=1226, if_false: boolean)
1223[56]: GotoWord(jump=1239)
1226[56]: ConstText(_value="No element") -> text
1238[72]: Panic(message: text)
1239[56]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
1242[60]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
1246[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
1249[48]: ConstInt(val=345) -> integer
1254[52]: EqInt(v1: integer, v2: integer) -> boolean
1255[45]: GotoFalseWord(jump=1261, if_false: boolean)
1258[44]: GotoWord(jump=1312)
1261[44]: ClearText(var[16]) var=__work_1[16]:text in 1
1264[44]: ConstText(_value="Test failed ") -> text
1278[60]: AppendText(var[16], v1: text)
1281[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
1284[48]: ConstInt(val=0) -> integer
1289[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1296[44]: ConstText(_value=" != 345") -> text
1305[60]: AppendText(var[16], v1: text)
1308[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
1311[60]: Panic(message: text)
1312[44]: FreeText(var[16])
1315[44]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1318[56]: FreeRef(v1: ref(reference))
1319[44]: Return(ret=0, value=0, discard=44)

Execute test:
  655:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  656:[20] Text()
  657:[44] Database(var[8], db_tp=13)
  662:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  665:[56] ConstInt(val=0) -> 0[56]
  670:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  673:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  676:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=13, fld=0) -> ref(1,9,0)[44]
  681:[56] VarRef(var[44]) -> ref(1,9,0)={}[56]
  684:[68] ConstInt(val=101) -> 101[68]
  689:[72] SetInt(v1=ref(1,9,0)[56], fld=4, val=101[68])
  692:[56] VarRef(var[44]) -> ref(1,9,0)={nr:101}[56]
  695:[68] ConstText(_value="One") -> "One"[68]
  700:[84] SetText(v1=ref(1,9,0)[56], fld=8, val="One"[68])
  703:[56] VarRef(var[44]) -> ref(1,9,0)={nr:101,key:"One"}[56]
  706:[68] ConstInt(val=1) -> 1[68]
  711:[72] SetInt(v1=ref(1,9,0)[56], fld=12, val=1[68])
  714:[56] VarRef(var[8]) -> ref(1,1,0)={map:[]}[56]
  717:[68] VarRef(var[44]) -> ref(1,9,0)={nr:101,key:"One",value:1}[68]
  720:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,0)[68], parent_tp=13, fld=0)
  725:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[56]
  728:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,15,0)[56]
  733:[68] PutRef(var[44], value=ref(1,15,0)[56])
  736:[56] VarRef(var[44]) -> ref(1,15,0)={}[56]
  739:[68] ConstInt(val=92) -> 92[68]
  744:[72] SetInt(v1=ref(1,15,0)[56], fld=4, val=92[68])
  747:[56] VarRef(var[44]) -> ref(1,15,0)={nr:92}[56]
  750:[68] ConstText(_value="Two") -> "Two"[68]
  755:[84] SetText(v1=ref(1,15,0)[56], fld=8, val="Two"[68])
  758:[56] VarRef(var[44]) -> ref(1,15,0)={nr:92,key:"Two"}[56]
  761:[68] ConstInt(val=2) -> 2[68]
  766:[72] SetInt(v1=ref(1,15,0)[56], fld=12, val=2[68])
  769:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[56]
  772:[68] VarRef(var[44]) -> ref(1,15,0)={nr:92,key:"Two",value:2}[68]
  775:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,15,0)[68], parent_tp=13, fld=0)
  780:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  783:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,21,0)[56]
  788:[68] PutRef(var[44], value=ref(1,21,0)[56])
  791:[56] VarRef(var[44]) -> ref(1,21,0)={}[56]
  794:[68] ConstInt(val=83) -> 83[68]
  799:[72] SetInt(v1=ref(1,21,0)[56], fld=4, val=83[68])
  802:[56] VarRef(var[44]) -> ref(1,21,0)={nr:83}[56]
  805:[68] ConstText(_value="Three") -> "Three"[68]
  812:[84] SetText(v1=ref(1,21,0)[56], fld=8, val="Three"[68])
  815:[56] VarRef(var[44]) -> ref(1,21,0)={nr:83,key:"Three"}[56]
  818:[68] ConstInt(val=3) -> 3[68]
  823:[72] SetInt(v1=ref(1,21,0)[56], fld=12, val=3[68])
  826:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  829:[68] VarRef(var[44]) -> ref(1,21,0)={nr:83,key:"Three",value:3}[68]
  832:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,21,0)[68], parent_tp=13, fld=0)
  837:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  840:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,27,0)[56]
  845:[68] PutRef(var[44], value=ref(1,27,0)[56])
  848:[56] VarRef(var[44]) -> ref(1,27,0)={}[56]
  851:[68] ConstInt(val=83) -> 83[68]
  856:[72] SetInt(v1=ref(1,27,0)[56], fld=4, val=83[68])
  859:[56] VarRef(var[44]) -> ref(1,27,0)={nr:83}[56]
  862:[68] ConstText(_value="Four") -> "Four"[68]
  868:[84] SetText(v1=ref(1,27,0)[56], fld=8, val="Four"[68])
  871:[56] VarRef(var[44]) -> ref(1,27,0)={nr:83,key:"Four"}[56]
  874:[68] ConstInt(val=4) -> 4[68]
  879:[72] SetInt(v1=ref(1,27,0)[56], fld=12, val=4[68])
  882:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  885:[68] VarRef(var[44]) -> ref(1,27,0)={nr:83,key:"Four",value:4}[68]
  888:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,27,0)[68], parent_tp=13, fld=0)
  893:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  896:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,33,0)[56]
  901:[68] PutRef(var[44], value=ref(1,33,0)[56])
  904:[56] VarRef(var[44]) -> ref(1,33,0)={}[56]
  907:[68] ConstInt(val=83) -> 83[68]
  912:[72] SetInt(v1=ref(1,33,0)[56], fld=4, val=83[68])
  915:[56] VarRef(var[44]) -> ref(1,33,0)={nr:83}[56]
  918:[68] ConstText(_value="Five") -> "Five"[68]
  924:[84] SetText(v1=ref(1,33,0)[56], fld=8, val="Five"[68])
  927:[56] VarRef(var[44]) -> ref(1,33,0)={nr:83,key:"Five"}[56]
  930:[68] ConstInt(val=5) -> 5[68]
  935:[72] SetInt(v1=ref(1,33,0)[56], fld=12, val=5[68])
  938:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  941:[68] VarRef(var[44]) -> ref(1,33,0)={nr:83,key:"Five",value:5}[68]
  944:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,33,0)[68], parent_tp=13, fld=0)
  949:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  952:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,39,0)[56]
  957:[68] PutRef(var[44], value=ref(1,39,0)[56])
  960:[56] VarRef(var[44]) -> ref(1,39,0)={}[56]
  963:[68] ConstInt(val=63) -> 63[68]
  968:[72] SetInt(v1=ref(1,39,0)[56], fld=4, val=63[68])
  971:[56] VarRef(var[44]) -> ref(1,39,0)={nr:63}[56]
  974:[68] ConstText(_value="Six") -> "Six"[68]
  979:[84] SetText(v1=ref(1,39,0)[56], fld=8, val="Six"[68])
  982:[56] VarRef(var[44]) -> ref(1,39,0)={nr:63,key:"Six"}[56]
  985:[68] ConstInt(val=6) -> 6[68]
  990:[72] SetInt(v1=ref(1,39,0)[56], fld=12, val=6[68])
  993:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  996:[68] VarRef(var[44]) -> ref(1,39,0)={nr:63,key:"Six",value:6}[68]
  999:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,39,0)[68], parent_tp=13, fld=0)
 1004:[56] FreeStack(value=0, discard=12)
 1008:[44] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[44]
 1011:[56] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
 1014:[68] GetField(v1=ref(1,1,0)[56], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][56]
 1017:[68] ConstText(_value="One") -> "One"[68]
 1022:[84] ConstInt(val=101) -> 101[84]
 1027:[88] GetRecord(data=ref(1,1,4)[56], db_tp=14, no_keys=2, key1=101[84], key2="One"[68]) -> ref(1,9,0)[56]
 1031:[68] GetInt(v1=ref(1,9,0)[56], fld=12) -> 1[56]
 1034:[60] ConstInt(val=1) -> 1[60]
 1039:[64] EqInt(v1=1[56], v2=1[60]) -> true[56]
 1040:[57] GotoFalseWord(jump=1046, if_false=true[56])
 1043:[56] GotoWord(jump=1064)
 1064:[56] ConstInt(val=0) -> 0[56]
 1069:[60] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[60]
 1072:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][60]
 1075:[72] ConstInt(val=83) -> 83[72]
 1080:[76] ConstText(_value="Two") -> "Two"[76]
 1085:[92] ConstInt(val=92) -> 92[92]
 1090:[96] Iterate(data=ref(92,3,0)[84], on=1, arg=16, keys=[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], from_key=1, till_key=83) -> 141733920807[60]
 1103:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[68]
 1106:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][68]
 1109:[80] Step(state_var=20, data=ref(1,1,4)[68], on=1, arg=16) -> ref(1,21,0)[68]
 1115:[80] VarRef(var[68]) -> ref(1,21,0)={nr:83,key:"Three",value:3}[80]
 1118:[92] ConvBoolFromRef(val=ref(1,21,0)[80]) -> true[80]
 1119:[81] Not(v1=true[80]) -> false[80]
 1120:[81] GotoFalseWord(jump=1130, if_false=false[80])
 1130:[80] VarInt(var[56]) -> 0[80]
 1133:[84] ConstInt(val=10) -> 10[84]
 1138:[88] MulInt(v1=0[80], v2=10[84]) -> 0[80]
 1139:[84] VarRef(var[68]) -> ref(1,21,0)={nr:83,key:"Three",value:3}[84]
 1142:[96] GetInt(v1=ref(1,21,0)[84], fld=12) -> 3[84]
 1145:[88] AddInt(v1=0[80], v2=3[84]) -> 3[80]
 1146:[84] PutInt(var[56], value=3[80])
 1149:[80] FreeStack(value=0, discard=12)
 1153:[68] GotoWord(jump=1103)
 1103:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[68]
 1106:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][68]
 1109:[80] Step(state_var=20, data=ref(1,1,4)[68], on=1, arg=16) -> ref(1,27,0)[68]
 1115:[80] VarRef(var[68]) -> ref(1,27,0)={nr:83,key:"Four",value:4}[80]
 1118:[92] ConvBoolFromRef(val=ref(1,27,0)[80]) -> true[80]
 1119:[81] Not(v1=true[80]) -> false[80]
 1120:[81] GotoFalseWord(jump=1130, if_false=false[80])
 1130:[80] VarInt(var[56]) -> 3[80]
 1133:[84] ConstInt(val=10) -> 10[84]
 1138:[88] MulInt(v1=3[80], v2=10[84]) -> 30[80]
 1139:[84] VarRef(var[68]) -> ref(1,27,0)={nr:83,key:"Four",value:4}[84]
 1142:[96] GetInt(v1=ref(1,27,0)[84], fld=12) -> 4[84]
 1145:[88] AddInt(v1=30[80], v2=4[84]) -> 34[80]
 1146:[84] PutInt(var[56], value=34[80])
 1149:[80] FreeStack(value=0, discard=12)
 1153:[68] GotoWord(jump=1103)
 1103:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[68]
 1106:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][68]
 1109:[80] Step(state_var=20, data=ref(1,1,4)[68], on=1, arg=16) -> ref(1,33,0)[68]
 1115:[80] VarRef(var[68]) -> ref(1,33,0)={nr:83,key:"Five",value:5}[80]
 1118:[92] ConvBoolFromRef(val=ref(1,33,0)[80]) -> true[80]
 1119:[81] Not(v1=true[80]) -> false[80]
 1120:[81] GotoFalseWord(jump=1130, if_false=false[80])
 1130:[80] VarInt(var[56]) -> 34[80]
 1133:[84] ConstInt(val=10) -> 10[84]
 1138:[88] MulInt(v1=34[80], v2=10[84]) -> 340[80]
 1139:[84] VarRef(var[68]) -> ref(1,33,0)={nr:83,key:"Five",value:5}[84]
 1142:[96] GetInt(v1=ref(1,33,0)[84], fld=12) -> 5[84]
 1145:[88] AddInt(v1=340[80], v2=5[84]) -> 345[80]
 1146:[84] PutInt(var[56], value=345[80])
 1149:[80] FreeStack(value=0, discard=12)
 1153:[68] GotoWord(jump=1103)
 1103:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[68]
 1106:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][68]
 1109:[80] Step(state_var=20, data=ref(1,1,4)[68], on=1, arg=16) -> ref(1,0,0)[68]
 1115:[80] VarRef(var[68]) -> ref(1,0,0)=null[80]
 1118:[92] ConvBoolFromRef(val=ref(1,0,0)[80]) -> false[80]
 1119:[81] Not(v1=false[80]) -> true[80]
 1120:[81] GotoFalseWord(jump=1130, if_false=true[80])
 1123:[80] FreeStack(value=0, discard=12)
 1127:[68] GotoWord(jump=1156)
 1156:[68] FreeStack(value=0, discard=8)
 1160:[60] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[60]
 1163:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][60]
 1166:[72] ConstText(_value="") -> ""[72]
 1168:[88] ConstInt(val=12) -> 12[88]
 1173:[92] GetRecord(data=ref(1,1,4)[60], db_tp=14, no_keys=2, key1=12[88], key2=""[72]) -> ref(1,0,0)[60]
 1177:[72] ConvBoolFromRef(val=ref(1,0,0)[60]) -> false[60]
 1178:[61] Not(v1=false[60]) -> true[60]
 1179:[61] GotoFalseWord(jump=1185, if_false=true[60])
 1182:[60] GotoWord(jump=1198)
 1198:[60] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[60]
 1201:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][60]
 1204:[72] ConstText(_value="One") -> "One"[72]
 1209:[88] ConstInt(val=83) -> 83[88]
 1214:[92] GetRecord(data=ref(1,1,4)[60], db_tp=14, no_keys=2, key1=83[88], key2="One"[72]) -> ref(1,0,0)[60]
 1218:[72] ConvBoolFromRef(val=ref(1,0,0)[60]) -> false[60]
 1219:[61] Not(v1=false[60]) -> true[60]
 1220:[61] GotoFalseWord(jump=1226, if_false=true[60])
 1223:[60] GotoWord(jump=1239)
 1239:[60] VarInt(var[56]) -> 345[60]
 1242:[64] FreeStack(value=4, discard=20)
 1246:[48] VarInt(var[44]) -> 345[48]
 1249:[52] ConstInt(val=345) -> 345[52]
 1254:[56] EqInt(v1=345[48], v2=345[52]) -> true[48]
 1255:[49] GotoFalseWord(jump=1261, if_false=true[48])
 1258:[48] GotoWord(jump=1312)
 1312:[48] FreeText(var[20])
 1315:[48] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[48]
 1318:[60] FreeRef(v1=ref(1,1,0)[48])
 1319:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
