struct Elm {nr: integer, key: text, value: integer}
struct Db {map: index<Elm[nr,-key]>}

pub fn test() {
    test_value = {db=Db {map: [
  Elm {nr: 101, key: "One", value: 1},
  Elm {nr: 92, key: "Two", value: 2},
  Elm {nr: 83, key: "Three", value: 3},
  Elm {nr: 83, key: "Four", value: 4},
  Elm {nr: 83, key: "Five", value: 5},
  Elm {nr: 63, key: "Six", value: 6},
]};
assert(db.map[101,"One"].value == 1 , "Missing element");
sum = 0;
for v in db.map[83..92,"Two"] {
  sum = sum * 10 + v.value;
};
assert(!db.map[12,""], "No element");
assert(!db.map[83,"One"], "No element");
sum};
    assert(
        test_value == 345,
        "Test failed {test_value} != 345"
    );
}
Type 15:Elm[25]:
    nr:integer[4]
    key:text[8]
    value:integer[12]
    #left_1:integer[16]
    #right_1:integer[20]
    #color_1:boolean[24]

Type 16:Db[8]:
    map:index<Elm[nr,-key]>[4]

Type 17:index<Elm[nr,-key]>[4]:Index(15, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ]

Type 18:vector<Elm>[4]:Vector(15)

fn test() {#1 block
  __ref_1:ref(Db) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    db:ref(Db)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 16i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      {#4 vector
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 16i32, 0i32);
        {#5 object
          OpSetInt(_elm_1, 4i32, 101i32);
          OpSetText(_elm_1, 8i32, "One");
          OpSetInt(_elm_1, 12i32, 1i32);
        }#5;
        OpFinishRecord(__ref_1, _elm_1, 16i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 16i32, 0i32);
        {#6 object
          OpSetInt(_elm_1, 4i32, 92i32);
          OpSetText(_elm_1, 8i32, "Two");
          OpSetInt(_elm_1, 12i32, 2i32);
        }#6;
        OpFinishRecord(__ref_1, _elm_1, 16i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 16i32, 0i32);
        {#7 object
          OpSetInt(_elm_1, 4i32, 83i32);
          OpSetText(_elm_1, 8i32, "Three");
          OpSetInt(_elm_1, 12i32, 3i32);
        }#7;
        OpFinishRecord(__ref_1, _elm_1, 16i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 16i32, 0i32);
        {#8 object
          OpSetInt(_elm_1, 4i32, 83i32);
          OpSetText(_elm_1, 8i32, "Four");
          OpSetInt(_elm_1, 12i32, 4i32);
        }#8;
        OpFinishRecord(__ref_1, _elm_1, 16i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 16i32, 0i32);
        {#9 object
          OpSetInt(_elm_1, 4i32, 83i32);
          OpSetText(_elm_1, 8i32, "Five");
          OpSetInt(_elm_1, 12i32, 5i32);
        }#9;
        OpFinishRecord(__ref_1, _elm_1, 16i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 16i32, 0i32);
        {#10 object
          OpSetInt(_elm_1, 4i32, 63i32);
          OpSetText(_elm_1, 8i32, "Six");
          OpSetInt(_elm_1, 12i32, 6i32);
        }#10;
        OpFinishRecord(__ref_1, _elm_1, 16i32, 0i32);
      }#4;
      __ref_1;
    }#3:ref(Db)["__ref_1"];
    if OpEqInt(OpGetInt(OpGetRecord(OpGetField(db, 4i32, 17i32), 17i32, 2i32, 101i32, "One"), 12i32), 1i32) null else OpPanic("Missing element");
    sum:integer = 0i32;
    {#11 for
      _iter_2:long = OpIterate(OpGetField(db, 4i32, 17i32), 1i32, 16i32, &[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], 1i32, 83i32, 2i32, 92i32, "Two");
      loop {#12 for loop
        v:ref(Elm)["db"] = {#13 for next
          OpStep(_iter_2, OpGetField(db, 4i32, 17i32), 1i32, 16i32);
        }#13:ref(Elm)["db"];
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#14 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 12i32));
        }#14;
      }#12;
    }#11;
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(db, 4i32, 17i32), 17i32, 2i32, 12i32, ""))) null else OpPanic("No element");
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(db, 4i32, 17i32), 17i32, 2i32, 83i32, "One"))) null else OpPanic("No element");
    sum;
  }#2:integer;
  if OpEqInt(test_value, 345i32) null else OpPanic({#15 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 345");
    __work_1;
  }#15:text);
}#1

byte-code for index_iterator:test() [1073]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Db) in 1
   1[16]: Text() var=__work_1[16]:text in 1
   2[40]: Database(var[4], db_tp=16) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=db[40]:ref(Db)["__ref_1"] in 2
   7[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
  10[52]: ConstInt(val=0) -> integer
  15[56]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
  21[52]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
  26[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
  29[64]: ConstInt(val=101) -> integer
  34[68]: SetInt(v1: ref(reference), fld=4, val: integer)
  37[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
  40[64]: ConstText(_value="One") -> text
  45[80]: SetText(v1: ref(reference), fld=8, val: text)
  48[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
  51[64]: ConstInt(val=1) -> integer
  56[68]: SetInt(v1: ref(reference), fld=12, val: integer)
  59[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
  62[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
  65[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
  70[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
  73[64]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
  78[64]: PutRef(var[40], value: ref(reference))
  81[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
  84[64]: ConstInt(val=92) -> integer
  89[68]: SetInt(v1: ref(reference), fld=4, val: integer)
  92[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
  95[64]: ConstText(_value="Two") -> text
 100[80]: SetText(v1: ref(reference), fld=8, val: text)
 103[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 106[64]: ConstInt(val=2) -> integer
 111[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 114[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 117[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 120[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
 125[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 128[64]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
 133[64]: PutRef(var[40], value: ref(reference))
 136[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 139[64]: ConstInt(val=83) -> integer
 144[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 147[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 150[64]: ConstText(_value="Three") -> text
 157[80]: SetText(v1: ref(reference), fld=8, val: text)
 160[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 163[64]: ConstInt(val=3) -> integer
 168[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 171[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 174[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 177[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
 182[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 185[64]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
 190[64]: PutRef(var[40], value: ref(reference))
 193[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 196[64]: ConstInt(val=83) -> integer
 201[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 204[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 207[64]: ConstText(_value="Four") -> text
 213[80]: SetText(v1: ref(reference), fld=8, val: text)
 216[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 219[64]: ConstInt(val=4) -> integer
 224[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 227[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 230[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 233[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
 238[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 241[64]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
 246[64]: PutRef(var[40], value: ref(reference))
 249[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 252[64]: ConstInt(val=83) -> integer
 257[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 260[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 263[64]: ConstText(_value="Five") -> text
 269[80]: SetText(v1: ref(reference), fld=8, val: text)
 272[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 275[64]: ConstInt(val=5) -> integer
 280[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 283[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 286[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 289[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
 294[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 297[64]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
 302[64]: PutRef(var[40], value: ref(reference))
 305[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 308[64]: ConstInt(val=63) -> integer
 313[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 316[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 319[64]: ConstText(_value="Six") -> text
 324[80]: SetText(v1: ref(reference), fld=8, val: text)
 327[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 330[64]: ConstInt(val=6) -> integer
 335[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 338[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 341[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 344[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
 349[52]: FreeStack(value=0, discard=12)
 353[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 356[52]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=db[40]:ref(Db)["__ref_1"] in 2
 359[64]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(15, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][17]
 362[64]: ConstText(_value="One") -> text
 367[80]: ConstInt(val=101) -> integer
 372[84]: GetRecord(data: ref(reference), db_tp=17, no_keys=2) -> ref(reference)
 376[64]: GetInt(v1: ref(reference), fld=12) -> integer
 379[56]: ConstInt(val=1) -> integer
 384[60]: EqInt(v1: integer, v2: integer) -> boolean
 385[53]: GotoFalseWord(jump=391, if_false: boolean)
 388[52]: GotoWord(jump=409)
 391[52]: ConstText(_value="Missing element") -> text
 408[68]: Panic(message: text)
 409[52]: ConstInt(val=0) -> integer var=sum[52]:integer in 2
 414[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=db[40]:ref(Db)["__ref_1"] in 2
 417[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(15, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][17]
 420[68]: ConstInt(val=83) -> integer
 425[72]: ConstText(_value="Two") -> text
 430[88]: ConstInt(val=92) -> integer
 435[92]: Iterate(data: ref(reference), on=1, arg=16, keys=[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], from_key=1, till_key=83) -> long
 448[64]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=db[40]:ref(Db)["__ref_1"] in 2
 451[76]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(15, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][17]
 454[76]: Step(state_var=20, data: ref(reference), on=1, arg=16) -> ref(reference)
 460[76]: VarRef(var[64]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=v[64]:ref(Elm)["db"] in 12
 463[88]: ConvBoolFromRef(val: ref(reference)) -> boolean
 464[77]: Not(v1: boolean) -> boolean
 465[77]: GotoFalseWord(jump=475, if_false: boolean)
 468[76]: FreeStack(value=0, discard=12)
 472[64]: GotoWord(jump=501)
 475[76]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
 478[80]: ConstInt(val=10) -> integer
 483[84]: MulInt(v1: integer, v2: integer) -> integer
 484[80]: VarRef(var[64]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[15] var=v[64]:ref(Elm)["db"] in 12
 487[92]: GetInt(v1: ref(reference), fld=12) -> integer
 490[84]: AddInt(v1: integer, v2: integer) -> integer
 491[80]: PutInt(var[52], value: integer)
 494[76]: FreeStack(value=0, discard=12)
 498[64]: GotoWord(jump=448)
 501[64]: FreeStack(value=0, discard=8)
 505[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=db[40]:ref(Db)["__ref_1"] in 2
 508[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(15, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][17]
 511[68]: ConstText(_value="") -> text
 513[84]: ConstInt(val=12) -> integer
 518[88]: GetRecord(data: ref(reference), db_tp=17, no_keys=2) -> ref(reference)
 522[68]: ConvBoolFromRef(val: ref(reference)) -> boolean
 523[57]: Not(v1: boolean) -> boolean
 524[57]: GotoFalseWord(jump=530, if_false: boolean)
 527[56]: GotoWord(jump=543)
 530[56]: ConstText(_value="No element") -> text
 542[72]: Panic(message: text)
 543[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=db[40]:ref(Db)["__ref_1"] in 2
 546[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(15, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][17]
 549[68]: ConstText(_value="One") -> text
 554[84]: ConstInt(val=83) -> integer
 559[88]: GetRecord(data: ref(reference), db_tp=17, no_keys=2) -> ref(reference)
 563[68]: ConvBoolFromRef(val: ref(reference)) -> boolean
 564[57]: Not(v1: boolean) -> boolean
 565[57]: GotoFalseWord(jump=571, if_false: boolean)
 568[56]: GotoWord(jump=584)
 571[56]: ConstText(_value="No element") -> text
 583[72]: Panic(message: text)
 584[56]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
 587[60]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
 591[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 594[48]: ConstInt(val=345) -> integer
 599[52]: EqInt(v1: integer, v2: integer) -> boolean
 600[45]: GotoFalseWord(jump=606, if_false: boolean)
 603[44]: GotoWord(jump=657)
 606[44]: ClearText(var[16]) var=__work_1[16]:text in 1
 609[44]: ConstText(_value="Test failed ") -> text
 623[60]: AppendText(var[16], v1: text)
 626[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 629[48]: ConstInt(val=0) -> integer
 634[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 641[44]: ConstText(_value=" != 345") -> text
 650[60]: AppendText(var[16], v1: text)
 653[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 656[60]: Panic(message: text)
 657[44]: FreeText(var[16])
 660[44]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[16] var=__ref_1[4]:ref(Db) in 1
 663[56]: FreeRef(v1: ref(reference))
 664[44]: Return(ret=0, value=0, discard=44)

