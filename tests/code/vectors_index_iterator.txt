struct Elm {nr: integer, key: text, value: integer}
struct Db {map: index<Elm[nr,-key]>}

pub fn test() {
    test_value = {db=Db {map: [
  Elm {nr: 101, key: "One", value: 1},
  Elm {nr: 92, key: "Two", value: 2},
  Elm {nr: 83, key: "Three", value: 3},
  Elm {nr: 83, key: "Four", value: 4},
  Elm {nr: 83, key: "Five", value: 5},
  Elm {nr: 63, key: "Six", value: 6},
]};
assert(db.map[101,"One"].value == 1 , "Missing element");
sum = 0;
for v in db.map[83..92,"Two"] {
  sum = sum * 10 + v.value;
};
assert(!db.map[12,""], "No element");
assert(!db.map[83,"One"], "No element");
sum};
    assert(
        test_value == 345,
        "Test failed {test_value} != 345"
    );
}
Type 12:Elm[25]:
    nr:integer[4]
    key:text[8]
    value:integer[12]
    #left_1:integer[16]
    #right_1:integer[20]
    #color_1:boolean[24]

Type 13:Db[8]:
    map:index<Elm[nr,-key]>[4]

Type 14:index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ]

Type 15:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __ref_1:ref(Db) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    db:ref(Db)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 13i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      {#4 vector
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#5 object
          OpSetInt(_elm_1, 4i32, 101i32);
          OpSetText(_elm_1, 8i32, "One");
          OpSetInt(_elm_1, 12i32, 1i32);
        }#5;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#6 object
          OpSetInt(_elm_1, 4i32, 92i32);
          OpSetText(_elm_1, 8i32, "Two");
          OpSetInt(_elm_1, 12i32, 2i32);
        }#6;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#7 object
          OpSetInt(_elm_1, 4i32, 83i32);
          OpSetText(_elm_1, 8i32, "Three");
          OpSetInt(_elm_1, 12i32, 3i32);
        }#7;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#8 object
          OpSetInt(_elm_1, 4i32, 83i32);
          OpSetText(_elm_1, 8i32, "Four");
          OpSetInt(_elm_1, 12i32, 4i32);
        }#8;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#9 object
          OpSetInt(_elm_1, 4i32, 83i32);
          OpSetText(_elm_1, 8i32, "Five");
          OpSetInt(_elm_1, 12i32, 5i32);
        }#9;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#10 object
          OpSetInt(_elm_1, 4i32, 63i32);
          OpSetText(_elm_1, 8i32, "Six");
          OpSetInt(_elm_1, 12i32, 6i32);
        }#10;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
      }#4;
      __ref_1;
    }#3:ref(Db)["__ref_1"];
    if OpEqInt(OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 101i32, "One"), 12i32), 1i32) null else OpPanic("Missing element");
    sum:integer = 0i32;
    {#11 for
      _iter_2:long = OpIterate(OpGetField(db, 4i32, 14i32), 1i32, 16i32, &[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], 1i32, 83i32, 2i32, 92i32, "Two");
      loop {#12 for loop
        v:ref(Elm)["db"] = {#13 for next
          OpStep(_iter_2, OpGetField(db, 4i32, 14i32), 1i32, 16i32);
        }#13:ref(Elm)["db"];
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#14 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 12i32));
        }#14;
      }#12;
    }#11;
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 12i32, ""))) null else OpPanic("No element");
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 83i32, "One"))) null else OpPanic("No element");
    sum;
  }#2:integer;
  if OpEqInt(test_value, 345i32) null else OpPanic({#15 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 345");
    __work_1;
  }#15:text);
}#1

byte-code for index_iterator:test()
 645[0]: return-address
 645[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Db) in 1
 646[16]: Text() var=__work_1[16]:text in 1
 647[40]: Database(var[4], db_tp=13) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
 652[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 655[52]: ConstInt(val=0) -> integer
 660[56]: SetInt(v1: ref(reference), fld=4, val: integer)
 663[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 666[52]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 671[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 674[64]: ConstInt(val=101) -> integer
 679[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 682[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 685[64]: ConstText(_value="One") -> text
 690[80]: SetText(v1: ref(reference), fld=8, val: text)
 693[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 696[64]: ConstInt(val=1) -> integer
 701[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 704[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 707[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 710[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 715[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 718[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 723[64]: PutRef(var[40], value: ref(reference))
 726[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 729[64]: ConstInt(val=92) -> integer
 734[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 737[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 740[64]: ConstText(_value="Two") -> text
 745[80]: SetText(v1: ref(reference), fld=8, val: text)
 748[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 751[64]: ConstInt(val=2) -> integer
 756[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 759[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 762[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 765[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 770[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 773[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 778[64]: PutRef(var[40], value: ref(reference))
 781[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 784[64]: ConstInt(val=83) -> integer
 789[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 792[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 795[64]: ConstText(_value="Three") -> text
 802[80]: SetText(v1: ref(reference), fld=8, val: text)
 805[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 808[64]: ConstInt(val=3) -> integer
 813[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 816[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 819[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 822[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 827[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 830[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 835[64]: PutRef(var[40], value: ref(reference))
 838[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 841[64]: ConstInt(val=83) -> integer
 846[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 849[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 852[64]: ConstText(_value="Four") -> text
 858[80]: SetText(v1: ref(reference), fld=8, val: text)
 861[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 864[64]: ConstInt(val=4) -> integer
 869[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 872[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 875[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 878[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 883[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 886[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 891[64]: PutRef(var[40], value: ref(reference))
 894[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 897[64]: ConstInt(val=83) -> integer
 902[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 905[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 908[64]: ConstText(_value="Five") -> text
 914[80]: SetText(v1: ref(reference), fld=8, val: text)
 917[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 920[64]: ConstInt(val=5) -> integer
 925[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 928[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 931[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 934[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 939[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 942[64]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 947[64]: PutRef(var[40], value: ref(reference))
 950[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 953[64]: ConstInt(val=63) -> integer
 958[68]: SetInt(v1: ref(reference), fld=4, val: integer)
 961[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 964[64]: ConstText(_value="Six") -> text
 969[80]: SetText(v1: ref(reference), fld=8, val: text)
 972[52]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 975[64]: ConstInt(val=6) -> integer
 980[68]: SetInt(v1: ref(reference), fld=12, val: integer)
 983[52]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 986[64]: VarRef(var[40]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=_elm_1[40]:ref(Elm)["__ref_1"] in 4
 989[76]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 994[52]: FreeStack(value=0, discard=12)
 998[40]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1001[52]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1004[64]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1007[64]: ConstText(_value="One") -> text
1012[80]: ConstInt(val=101) -> integer
1017[84]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1021[64]: GetInt(v1: ref(reference), fld=12) -> integer
1024[56]: ConstInt(val=1) -> integer
1029[60]: EqInt(v1: integer, v2: integer) -> boolean
1030[53]: GotoFalseWord(jump=1036, if_false: boolean)
1033[52]: GotoWord(jump=1054)
1036[52]: ConstText(_value="Missing element") -> text
1053[68]: Panic(message: text)
1054[52]: ConstInt(val=0) -> integer var=sum[52]:integer in 2
1059[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1062[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1065[68]: ConstInt(val=83) -> integer
1070[72]: ConstText(_value="Two") -> text
1075[88]: ConstInt(val=92) -> integer
1080[92]: Iterate(data: ref(reference), on=1, arg=16, keys=[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], from_key=1, till_key=83) -> long
1093[64]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1096[76]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1099[76]: Step(state_var=20, data: ref(reference), on=1, arg=16) -> ref(reference)
1105[76]: VarRef(var[64]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=v[64]:ref(Elm)["db"] in 12
1108[88]: ConvBoolFromRef(val: ref(reference)) -> boolean
1109[77]: Not(v1: boolean) -> boolean
1110[77]: GotoFalseWord(jump=1120, if_false: boolean)
1113[76]: FreeStack(value=0, discard=12)
1117[64]: GotoWord(jump=1146)
1120[76]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
1123[80]: ConstInt(val=10) -> integer
1128[84]: MulInt(v1: integer, v2: integer) -> integer
1129[80]: VarRef(var[64]) -> ref(reference) type=Elm[25]:{nr:integer[4], key:text[8], value:integer[12], #left_1:integer[16], #right_1:integer[20], #color_1:boolean[24]}[12] var=v[64]:ref(Elm)["db"] in 12
1132[92]: GetInt(v1: ref(reference), fld=12) -> integer
1135[84]: AddInt(v1: integer, v2: integer) -> integer
1136[80]: PutInt(var[52], value: integer)
1139[76]: FreeStack(value=0, discard=12)
1143[64]: GotoWord(jump=1093)
1146[64]: FreeStack(value=0, discard=8)
1150[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1153[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1156[68]: ConstText(_value="") -> text
1158[84]: ConstInt(val=12) -> integer
1163[88]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1167[68]: ConvBoolFromRef(val: ref(reference)) -> boolean
1168[57]: Not(v1: boolean) -> boolean
1169[57]: GotoFalseWord(jump=1175, if_false: boolean)
1172[56]: GotoWord(jump=1188)
1175[56]: ConstText(_value="No element") -> text
1187[72]: Panic(message: text)
1188[56]: VarRef(var[40]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=db[40]:ref(Db)["__ref_1"] in 2
1191[68]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=index<Elm[nr,-key]>[4]:Index(12, [(0, true), (1, false)], 3) keys [tp:1 desc:false field:4, tp:6 desc:true field:8, ][14]
1194[68]: ConstText(_value="One") -> text
1199[84]: ConstInt(val=83) -> integer
1204[88]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1208[68]: ConvBoolFromRef(val: ref(reference)) -> boolean
1209[57]: Not(v1: boolean) -> boolean
1210[57]: GotoFalseWord(jump=1216, if_false: boolean)
1213[56]: GotoWord(jump=1229)
1216[56]: ConstText(_value="No element") -> text
1228[72]: Panic(message: text)
1229[56]: VarInt(var[52]) -> integer var=sum[52]:integer in 2
1232[60]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
1236[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
1239[48]: ConstInt(val=345) -> integer
1244[52]: EqInt(v1: integer, v2: integer) -> boolean
1245[45]: GotoFalseWord(jump=1251, if_false: boolean)
1248[44]: GotoWord(jump=1302)
1251[44]: ClearText(var[16]) var=__work_1[16]:text in 1
1254[44]: ConstText(_value="Test failed ") -> text
1268[60]: AppendText(var[16], v1: text)
1271[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
1274[48]: ConstInt(val=0) -> integer
1279[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1286[44]: ConstText(_value=" != 345") -> text
1295[60]: AppendText(var[16], v1: text)
1298[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
1301[60]: Panic(message: text)
1302[44]: FreeText(var[16])
1305[44]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:index<Elm[nr,-key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1308[56]: FreeRef(v1: ref(reference))
1309[44]: Return(ret=0, value=0, discard=44)

Execute test:
  645:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  646:[20] Text()
  647:[44] Database(var[8], db_tp=13)
  652:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  655:[56] ConstInt(val=0) -> 0[56]
  660:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  663:[44] VarRef(var[8]) -> ref(1,1,0)={map:[]}[44]
  666:[56] NewRecord(data=ref(1,1,0)[44], parent_tp=13, fld=0) -> ref(1,9,0)[44]
  671:[56] VarRef(var[44]) -> ref(1,9,0)={}[56]
  674:[68] ConstInt(val=101) -> 101[68]
  679:[72] SetInt(v1=ref(1,9,0)[56], fld=4, val=101[68])
  682:[56] VarRef(var[44]) -> ref(1,9,0)={nr:101}[56]
  685:[68] ConstText(_value="One") -> "One"[68]
  690:[84] SetText(v1=ref(1,9,0)[56], fld=8, val="One"[68])
  693:[56] VarRef(var[44]) -> ref(1,9,0)={nr:101,key:"One"}[56]
  696:[68] ConstInt(val=1) -> 1[68]
  701:[72] SetInt(v1=ref(1,9,0)[56], fld=12, val=1[68])
  704:[56] VarRef(var[8]) -> ref(1,1,0)={map:[]}[56]
  707:[68] VarRef(var[44]) -> ref(1,9,0)={nr:101,key:"One",value:1}[68]
  710:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,9,0)[68], parent_tp=13, fld=0)
  715:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[56]
  718:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,15,0)[56]
  723:[68] PutRef(var[44], value=ref(1,15,0)[56])
  726:[56] VarRef(var[44]) -> ref(1,15,0)={}[56]
  729:[68] ConstInt(val=92) -> 92[68]
  734:[72] SetInt(v1=ref(1,15,0)[56], fld=4, val=92[68])
  737:[56] VarRef(var[44]) -> ref(1,15,0)={nr:92}[56]
  740:[68] ConstText(_value="Two") -> "Two"[68]
  745:[84] SetText(v1=ref(1,15,0)[56], fld=8, val="Two"[68])
  748:[56] VarRef(var[44]) -> ref(1,15,0)={nr:92,key:"Two"}[56]
  751:[68] ConstInt(val=2) -> 2[68]
  756:[72] SetInt(v1=ref(1,15,0)[56], fld=12, val=2[68])
  759:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[56]
  762:[68] VarRef(var[44]) -> ref(1,15,0)={nr:92,key:"Two",value:2}[68]
  765:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,15,0)[68], parent_tp=13, fld=0)
  770:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  773:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,21,0)[56]
  778:[68] PutRef(var[44], value=ref(1,21,0)[56])
  781:[56] VarRef(var[44]) -> ref(1,21,0)={}[56]
  784:[68] ConstInt(val=83) -> 83[68]
  789:[72] SetInt(v1=ref(1,21,0)[56], fld=4, val=83[68])
  792:[56] VarRef(var[44]) -> ref(1,21,0)={nr:83}[56]
  795:[68] ConstText(_value="Three") -> "Three"[68]
  802:[84] SetText(v1=ref(1,21,0)[56], fld=8, val="Three"[68])
  805:[56] VarRef(var[44]) -> ref(1,21,0)={nr:83,key:"Three"}[56]
  808:[68] ConstInt(val=3) -> 3[68]
  813:[72] SetInt(v1=ref(1,21,0)[56], fld=12, val=3[68])
  816:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  819:[68] VarRef(var[44]) -> ref(1,21,0)={nr:83,key:"Three",value:3}[68]
  822:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,21,0)[68], parent_tp=13, fld=0)
  827:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  830:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,27,0)[56]
  835:[68] PutRef(var[44], value=ref(1,27,0)[56])
  838:[56] VarRef(var[44]) -> ref(1,27,0)={}[56]
  841:[68] ConstInt(val=83) -> 83[68]
  846:[72] SetInt(v1=ref(1,27,0)[56], fld=4, val=83[68])
  849:[56] VarRef(var[44]) -> ref(1,27,0)={nr:83}[56]
  852:[68] ConstText(_value="Four") -> "Four"[68]
  858:[84] SetText(v1=ref(1,27,0)[56], fld=8, val="Four"[68])
  861:[56] VarRef(var[44]) -> ref(1,27,0)={nr:83,key:"Four"}[56]
  864:[68] ConstInt(val=4) -> 4[68]
  869:[72] SetInt(v1=ref(1,27,0)[56], fld=12, val=4[68])
  872:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  875:[68] VarRef(var[44]) -> ref(1,27,0)={nr:83,key:"Four",value:4}[68]
  878:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,27,0)[68], parent_tp=13, fld=0)
  883:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  886:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,33,0)[56]
  891:[68] PutRef(var[44], value=ref(1,33,0)[56])
  894:[56] VarRef(var[44]) -> ref(1,33,0)={}[56]
  897:[68] ConstInt(val=83) -> 83[68]
  902:[72] SetInt(v1=ref(1,33,0)[56], fld=4, val=83[68])
  905:[56] VarRef(var[44]) -> ref(1,33,0)={nr:83}[56]
  908:[68] ConstText(_value="Five") -> "Five"[68]
  914:[84] SetText(v1=ref(1,33,0)[56], fld=8, val="Five"[68])
  917:[56] VarRef(var[44]) -> ref(1,33,0)={nr:83,key:"Five"}[56]
  920:[68] ConstInt(val=5) -> 5[68]
  925:[72] SetInt(v1=ref(1,33,0)[56], fld=12, val=5[68])
  928:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  931:[68] VarRef(var[44]) -> ref(1,33,0)={nr:83,key:"Five",value:5}[68]
  934:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,33,0)[68], parent_tp=13, fld=0)
  939:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  942:[68] NewRecord(data=ref(1,1,0)[56], parent_tp=13, fld=0) -> ref(1,39,0)[56]
  947:[68] PutRef(var[44], value=ref(1,39,0)[56])
  950:[56] VarRef(var[44]) -> ref(1,39,0)={}[56]
  953:[68] ConstInt(val=63) -> 63[68]
  958:[72] SetInt(v1=ref(1,39,0)[56], fld=4, val=63[68])
  961:[56] VarRef(var[44]) -> ref(1,39,0)={nr:63}[56]
  964:[68] ConstText(_value="Six") -> "Six"[68]
  969:[84] SetText(v1=ref(1,39,0)[56], fld=8, val="Six"[68])
  972:[56] VarRef(var[44]) -> ref(1,39,0)={nr:63,key:"Six"}[56]
  975:[68] ConstInt(val=6) -> 6[68]
  980:[72] SetInt(v1=ref(1,39,0)[56], fld=12, val=6[68])
  983:[56] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
  986:[68] VarRef(var[44]) -> ref(1,39,0)={nr:63,key:"Six",value:6}[68]
  989:[80] FinishRecord(data=ref(1,1,0)[56], rec=ref(1,39,0)[68], parent_tp=13, fld=0)
  994:[56] FreeStack(value=0, discard=12)
  998:[44] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[44]
 1001:[56] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[56]
 1004:[68] GetField(v1=ref(1,1,0)[56], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][56]
 1007:[68] ConstText(_value="One") -> "One"[68]
 1012:[84] ConstInt(val=101) -> 101[84]
 1017:[88] GetRecord(data=ref(1,1,4)[56], db_tp=14, no_keys=2, key1=101[84], key2="One"[68]) -> ref(1,9,0)[56]
 1021:[68] GetInt(v1=ref(1,9,0)[56], fld=12) -> 1[56]
 1024:[60] ConstInt(val=1) -> 1[60]
 1029:[64] EqInt(v1=1[56], v2=1[60]) -> true[56]
 1030:[57] GotoFalseWord(jump=1036, if_false=true[56])
 1033:[56] GotoWord(jump=1054)
 1054:[56] ConstInt(val=0) -> 0[56]
 1059:[60] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[60]
 1062:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][60]
 1065:[72] ConstInt(val=83) -> 83[72]
 1070:[76] ConstText(_value="Two") -> "Two"[76]
 1075:[92] ConstInt(val=92) -> 92[92]
 1080:[96] Iterate(data=ref(92,3,0)[84], on=1, arg=16, keys=[Key { type_nr: 1, position: 4 }, Key { type_nr: -6, position: 8 }], from_key=1, till_key=83) -> 141733920807[60]
 1093:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[68]
 1096:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][68]
 1099:[80] Step(state_var=20, data=ref(1,1,4)[68], on=1, arg=16) -> ref(1,21,0)[68]
 1105:[80] VarRef(var[68]) -> ref(1,21,0)={nr:83,key:"Three",value:3}[80]
 1108:[92] ConvBoolFromRef(val=ref(1,21,0)[80]) -> true[80]
 1109:[81] Not(v1=true[80]) -> false[80]
 1110:[81] GotoFalseWord(jump=1120, if_false=false[80])
 1120:[80] VarInt(var[56]) -> 0[80]
 1123:[84] ConstInt(val=10) -> 10[84]
 1128:[88] MulInt(v1=0[80], v2=10[84]) -> 0[80]
 1129:[84] VarRef(var[68]) -> ref(1,21,0)={nr:83,key:"Three",value:3}[84]
 1132:[96] GetInt(v1=ref(1,21,0)[84], fld=12) -> 3[84]
 1135:[88] AddInt(v1=0[80], v2=3[84]) -> 3[80]
 1136:[84] PutInt(var[56], value=3[80])
 1139:[80] FreeStack(value=0, discard=12)
 1143:[68] GotoWord(jump=1093)
 1093:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[68]
 1096:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][68]
 1099:[80] Step(state_var=20, data=ref(1,1,4)[68], on=1, arg=16) -> ref(1,27,0)[68]
 1105:[80] VarRef(var[68]) -> ref(1,27,0)={nr:83,key:"Four",value:4}[80]
 1108:[92] ConvBoolFromRef(val=ref(1,27,0)[80]) -> true[80]
 1109:[81] Not(v1=true[80]) -> false[80]
 1110:[81] GotoFalseWord(jump=1120, if_false=false[80])
 1120:[80] VarInt(var[56]) -> 3[80]
 1123:[84] ConstInt(val=10) -> 10[84]
 1128:[88] MulInt(v1=3[80], v2=10[84]) -> 30[80]
 1129:[84] VarRef(var[68]) -> ref(1,27,0)={nr:83,key:"Four",value:4}[84]
 1132:[96] GetInt(v1=ref(1,27,0)[84], fld=12) -> 4[84]
 1135:[88] AddInt(v1=30[80], v2=4[84]) -> 34[80]
 1136:[84] PutInt(var[56], value=34[80])
 1139:[80] FreeStack(value=0, discard=12)
 1143:[68] GotoWord(jump=1093)
 1093:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[68]
 1096:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][68]
 1099:[80] Step(state_var=20, data=ref(1,1,4)[68], on=1, arg=16) -> ref(1,33,0)[68]
 1105:[80] VarRef(var[68]) -> ref(1,33,0)={nr:83,key:"Five",value:5}[80]
 1108:[92] ConvBoolFromRef(val=ref(1,33,0)[80]) -> true[80]
 1109:[81] Not(v1=true[80]) -> false[80]
 1110:[81] GotoFalseWord(jump=1120, if_false=false[80])
 1120:[80] VarInt(var[56]) -> 34[80]
 1123:[84] ConstInt(val=10) -> 10[84]
 1128:[88] MulInt(v1=34[80], v2=10[84]) -> 340[80]
 1129:[84] VarRef(var[68]) -> ref(1,33,0)={nr:83,key:"Five",value:5}[84]
 1132:[96] GetInt(v1=ref(1,33,0)[84], fld=12) -> 5[84]
 1135:[88] AddInt(v1=340[80], v2=5[84]) -> 345[80]
 1136:[84] PutInt(var[56], value=345[80])
 1139:[80] FreeStack(value=0, discard=12)
 1143:[68] GotoWord(jump=1093)
 1093:[68] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[68]
 1096:[80] GetField(v1=ref(1,1,0)[68], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][68]
 1099:[80] Step(state_var=20, data=ref(1,1,4)[68], on=1, arg=16) -> ref(1,0,0)[68]
 1105:[80] VarRef(var[68]) -> ref(1,0,0)=null[80]
 1108:[92] ConvBoolFromRef(val=ref(1,0,0)[80]) -> false[80]
 1109:[81] Not(v1=false[80]) -> true[80]
 1110:[81] GotoFalseWord(jump=1120, if_false=true[80])
 1113:[80] FreeStack(value=0, discard=12)
 1117:[68] GotoWord(jump=1146)
 1146:[68] FreeStack(value=0, discard=8)
 1150:[60] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[60]
 1153:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][60]
 1156:[72] ConstText(_value="") -> ""[72]
 1158:[88] ConstInt(val=12) -> 12[88]
 1163:[92] GetRecord(data=ref(1,1,4)[60], db_tp=14, no_keys=2, key1=12[88], key2=""[72]) -> ref(1,0,0)[60]
 1167:[72] ConvBoolFromRef(val=ref(1,0,0)[60]) -> false[60]
 1168:[61] Not(v1=false[60]) -> true[60]
 1169:[61] GotoFalseWord(jump=1175, if_false=true[60])
 1172:[60] GotoWord(jump=1188)
 1188:[60] VarRef(var[44]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[60]
 1191:[72] GetField(v1=ref(1,1,0)[60], fld=4) -> ref(1,1,4)=[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}][60]
 1194:[72] ConstText(_value="One") -> "One"[72]
 1199:[88] ConstInt(val=83) -> 83[88]
 1204:[92] GetRecord(data=ref(1,1,4)[60], db_tp=14, no_keys=2, key1=83[88], key2="One"[72]) -> ref(1,0,0)[60]
 1208:[72] ConvBoolFromRef(val=ref(1,0,0)[60]) -> false[60]
 1209:[61] Not(v1=false[60]) -> true[60]
 1210:[61] GotoFalseWord(jump=1216, if_false=true[60])
 1213:[60] GotoWord(jump=1229)
 1229:[60] VarInt(var[56]) -> 345[60]
 1232:[64] FreeStack(value=4, discard=20)
 1236:[48] VarInt(var[44]) -> 345[48]
 1239:[52] ConstInt(val=345) -> 345[52]
 1244:[56] EqInt(v1=345[48], v2=345[52]) -> true[48]
 1245:[49] GotoFalseWord(jump=1251, if_false=true[48])
 1248:[48] GotoWord(jump=1302)
 1302:[48] FreeText(var[20])
 1305:[48] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:63,key:"Six",value:6},{nr:83,key:"Three",value:3},{nr:83,key:"Four",value:4},{nr:83,key:"Five",value:5},{nr:92,key:"Two",value:2},{nr:101,key:"One",value:1}]}[48]
 1308:[60] FreeRef(v1=ref(1,1,0)[48])
 1309:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
