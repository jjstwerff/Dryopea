Test code:
pub fn test() {
    test_value = {"a{0.1f + 2 * 1.0f}b"};
    assert(
        test_value == "a2.1b",
        "Test failed {test_value} != \"a2.1b\""
    );
}

fn test {
  let test_value = {
    {
      let append_8 = "a";
      OpFormatSingle(append_8, OpAddSingle(0.1f32, OpMulSingle(OpConvSingleFromInt(2i32), 1f32)), 0i32, 0i32);
      OpAppendText(append_8, "b");
      append_8;
    };
  };
  if OpEqText(test_value, "a2.1b") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "a2.1b"");
    append_9;
  })};
}

byte-code for format_single:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="a") -> text
 673[68]: AppendText(var[28], v1: text)
 676[52]: ConstSingle(val=0.1) -> single
 681[56]: ConstInt(val=2) -> integer
 686[60]: ConvSingleFromInt(v1: integer) -> single
 687[60]: ConstSingle(val=1) -> single
 692[64]: MulSingle(v1: single, v2: single) -> single
 693[60]: AddSingle(v1: single, v2: single) -> single
 694[56]: ConstInt(val=0) -> integer
 699[60]: ConstInt(val=0) -> integer
 704[64]: FormatSingle(var[28], val: single, width: integer, precision: integer)
 707[52]: ConstText(_value="b") -> text
 710[68]: AppendText(var[28], v1: text)
 713[52]: VarText(var[28]) -> text
 716[68]: GenFreeStack(value=16, discard=24)
 720[44]: AppendText(var[4], v1: text)
 723[28]: VarText(var[4]) -> text
 726[44]: ConstText(_value="a2.1b") -> text
 733[60]: EqText(v1: text, v2: text) -> boolean
 734[29]: GenGotoFalseWord(jump=740, if_false: boolean)
 737[28]: GenGotoWord(jump=795)
 740[28]: Text()
 741[52]: ConstText(_value="Test failed ") -> text
 755[68]: AppendText(var[28], v1: text)
 758[52]: VarText(var[4]) -> text
 761[68]: ConstInt(val=0) -> integer
 766[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 771[52]: ConstText(_value=" != "a2.1b"") -> text
 784[68]: AppendText(var[28], v1: text)
 787[52]: VarText(var[28]) -> text
 790[68]: GenFreeStack(value=16, discard=24)
 794[44]: GenPanic(message: text)
 795[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Text()
  670:[52] ConstText(_value="a") -> "a"[52]
  673:[68] AppendText(var[28], v1="a"[52])
  676:[52] ConstSingle(val=0.1) -> 0.1[52]
  681:[56] ConstInt(val=2) -> 2[56]
  686:[60] ConvSingleFromInt(v1=2[56]) -> 2[56]
  687:[60] ConstSingle(val=1) -> 1[60]
  692:[64] MulSingle(v1=2[56], v2=1[60]) -> 2[56]
  693:[60] AddSingle(v1=0.1[52], v2=2[56]) -> 2.1[52]
  694:[56] ConstInt(val=0) -> 0[56]
  699:[60] ConstInt(val=0) -> 0[60]
  704:[64] FormatSingle(var[28], val=2.1[52], width=0[56], precision=0[60])
  707:[52] ConstText(_value="b") -> "b"[52]
  710:[68] AppendText(var[28], v1="b"[52])
  713:[52] VarText(var[28]) -> "a2.1b"[52]
  716:[68] GenFreeStack(value=16, discard=24)
  720:[44] AppendText(var[4], v1="a2.1b"[28])
  723:[28] VarText(var[4]) -> "a2.1b"[28]
  726:[44] ConstText(_value="a2.1b") -> "a2.1b"[44]
  733:[60] EqText(v1="a2.1b"[28], v2="a2.1b"[44]) -> true[28]
  734:[29] GenGotoFalseWord(jump=740, if_false=true[28])
  737:[28] GenGotoWord(jump=795)
  795:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
