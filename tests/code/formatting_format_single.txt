pub fn test() {
    test_value = {"a{0.1f + 2 * 1.0f}b"};
    assert(
        test_value == "a2.1b",
        "Test failed {test_value} != \"a2.1b\""
    );
}
fn test() {#1 block
  let __work_2:text = "";
  let __work_1:text = "";
  let test_value:text = {#2 block
    {#3 formatting string
      OpClearText(__work_1);
      OpAppendText(__work_1, "a");
      OpFormatSingle(__work_1, OpAddSingle(0.1f32, OpMulSingle(OpConvSingleFromInt(2i32), 1f32)), 0i32, 0i32);
      OpAppendText(__work_1, "b");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a2.1b") null else OpPanic({#4 formatting string
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a2.1b"");
    __work_2;
  }#4:text);
}#1

byte-code for format_single:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Text()
 677[52]: Text()
 678[76]: ClearText(var[28])
 681[76]: ConstText(_value="a") -> text
 684[92]: AppendText(var[28], v1: text)
 687[76]: ConstSingle(val=0.1) -> single
 692[80]: ConstInt(val=2) -> integer
 697[84]: ConvSingleFromInt(v1: integer) -> single
 698[84]: ConstSingle(val=1) -> single
 703[88]: MulSingle(v1: single, v2: single) -> single
 704[84]: AddSingle(v1: single, v2: single) -> single
 705[80]: ConstInt(val=0) -> integer
 710[84]: ConstInt(val=0) -> integer
 715[88]: FormatSingle(var[28], val: single, width: integer, precision: integer)
 718[76]: ConstText(_value="b") -> text
 721[92]: AppendText(var[28], v1: text)
 724[76]: VarText(var[28]) -> text
 727[92]: AppendText(var[52], v1: text)
 730[76]: VarText(var[52]) -> text
 733[92]: ConstText(_value="a2.1b") -> text
 740[108]: EqText(v1: text, v2: text) -> boolean
 741[77]: GotoFalseWord(jump=747, if_false: boolean)
 744[76]: GotoWord(jump=800)
 747[76]: ClearText(var[4])
 750[76]: ConstText(_value="Test failed ") -> text
 764[92]: AppendText(var[4], v1: text)
 767[76]: VarText(var[52]) -> text
 770[92]: ConstInt(val=0) -> integer
 775[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 780[76]: ConstText(_value=" != "a2.1b"") -> text
 793[92]: AppendText(var[4], v1: text)
 796[76]: VarText(var[4]) -> text
 799[92]: Panic(message: text)
 800[76]: Return(ret=0, value=0, discard=76)

Execute test:
  675:[8] Text()
  676:[32] Text()
  677:[56] Text()
  678:[80] ClearText(var[32])
  681:[80] ConstText(_value="a") -> "a"[80]
  684:[96] AppendText(var[32], v1="a"[80])
  687:[80] ConstSingle(val=0.1) -> 0.1[80]
  692:[84] ConstInt(val=2) -> 2[84]
  697:[88] ConvSingleFromInt(v1=2[84]) -> 2[84]
  698:[88] ConstSingle(val=1) -> 1[88]
  703:[92] MulSingle(v1=2[84], v2=1[88]) -> 2[84]
  704:[88] AddSingle(v1=0.1[80], v2=2[84]) -> 2.1[80]
  705:[84] ConstInt(val=0) -> 0[84]
  710:[88] ConstInt(val=0) -> 0[88]
  715:[92] FormatSingle(var[32], val=2.1[80], width=0[84], precision=0[88])
  718:[80] ConstText(_value="b") -> "b"[80]
  721:[96] AppendText(var[32], v1="b"[80])
  724:[80] VarText(var[32]) -> "a2.1b"[80]
  727:[96] AppendText(var[56], v1="a2.1b"[80])
  730:[80] VarText(var[56]) -> "a2.1b"[80]
  733:[96] ConstText(_value="a2.1b") -> "a2.1b"[96]
  740:[112] EqText(v1="a2.1b"[80], v2="a2.1b"[96]) -> true[80]
  741:[81] GotoFalseWord(jump=747, if_false=true[80])
  744:[80] GotoWord(jump=800)
  800:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
