pub fn test() {
    test_value = {"a{0.1f + 2 * 1.0f}b"};
    assert(
        test_value == "a2.1b",
        "Test failed {test_value} != \"a2.1b\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "a";
      OpFormatSingle(__work_1, OpAddSingle(0.1f32, OpMulSingle(OpConvSingleFromInt(2i32), 1f32)), 0i32, 0i32);
      OpAppendText(__work_1, "b");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a2.1b") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a2.1b"");
    __work_2;
  }#4:text);
}#1

byte-code for format_single:test()
 645[0]: return-address
 645[4]: Text() var=__work_2[4]:text in 1
 646[28]: Text() var=__work_1[28]:text in 1
 647[52]: Text() var=test_value[52]:text in 1
 648[76]: ClearText(var[28]) var=__work_1[28]:text in 1
 651[76]: ConstText(_value="a") -> text
 654[92]: AppendText(var[28], v1: text)
 657[76]: ConstSingle(val=0.1) -> single
 662[80]: ConstInt(val=2) -> integer
 667[84]: ConvSingleFromInt(v1: integer) -> single
 668[84]: ConstSingle(val=1) -> single
 673[88]: MulSingle(v1: single, v2: single) -> single
 674[84]: AddSingle(v1: single, v2: single) -> single
 675[80]: ConstInt(val=0) -> integer
 680[84]: ConstInt(val=0) -> integer
 685[88]: FormatSingle(var[28], val: single, width: integer, precision: integer)
 688[76]: ConstText(_value="b") -> text
 691[92]: AppendText(var[28], v1: text)
 694[76]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 697[92]: AppendText(var[52], v1: text)
 700[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 703[92]: ConstText(_value="a2.1b") -> text
 710[108]: EqText(v1: text, v2: text) -> boolean
 711[77]: GotoFalseWord(jump=717, if_false: boolean)
 714[76]: GotoWord(jump=770)
 717[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 720[76]: ConstText(_value="Test failed ") -> text
 734[92]: AppendText(var[4], v1: text)
 737[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 740[92]: ConstInt(val=0) -> integer
 745[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 750[76]: ConstText(_value=" != "a2.1b"") -> text
 763[92]: AppendText(var[4], v1: text)
 766[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 769[92]: Panic(message: text)
 770[76]: FreeText(var[52])
 773[76]: FreeText(var[28])
 776[76]: FreeText(var[4])
 779[76]: Return(ret=0, value=0, discard=76)

Execute test:
  645:[8] Text()
  646:[32] Text()
  647:[56] Text()
  648:[80] ClearText(var[32])
  651:[80] ConstText(_value="a") -> "a"[80]
  654:[96] AppendText(var[32], v1="a"[80])
  657:[80] ConstSingle(val=0.1) -> 0.1[80]
  662:[84] ConstInt(val=2) -> 2[84]
  667:[88] ConvSingleFromInt(v1=2[84]) -> 2[84]
  668:[88] ConstSingle(val=1) -> 1[88]
  673:[92] MulSingle(v1=2[84], v2=1[88]) -> 2[84]
  674:[88] AddSingle(v1=0.1[80], v2=2[84]) -> 2.1[80]
  675:[84] ConstInt(val=0) -> 0[84]
  680:[88] ConstInt(val=0) -> 0[88]
  685:[92] FormatSingle(var[32], val=2.1[80], width=0[84], precision=0[88])
  688:[80] ConstText(_value="b") -> "b"[80]
  691:[96] AppendText(var[32], v1="b"[80])
  694:[80] VarText(var[32]) -> "a2.1b"[80]
  697:[96] AppendText(var[56], v1="a2.1b"[80])
  700:[80] VarText(var[56]) -> "a2.1b"[80]
  703:[96] ConstText(_value="a2.1b") -> "a2.1b"[96]
  710:[112] EqText(v1="a2.1b"[80], v2="a2.1b"[96]) -> true[80]
  711:[81] GotoFalseWord(jump=717, if_false=true[80])
  714:[80] GotoWord(jump=770)
  770:[80] FreeText(var[56])
  773:[80] FreeText(var[32])
  776:[80] FreeText(var[8])
  779:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
