pub fn test() {
    test_value = {"a{0.1f + 2 * 1.0f}b"};
    assert(
        test_value == "a2.1b",
        "Test failed {test_value} != \"a2.1b\""
    );
}
fn test {#1 block
  let __work_2 = "";
  let __work_1 = "";
  let test_value = {#2 block
    {#3 formatting string
      OpClearText(__work_1);
      OpAppendText(__work_1, "a");
      OpFormatSingle(__work_1, OpAddSingle(0.1f32, OpMulSingle(OpConvSingleFromInt(2i32), 1f32)), 0i32, 0i32);
      OpAppendText(__work_1, "b");
      __work_1;
    }#3;
  }#2;
  if OpEqText(test_value, "a2.1b") null else OpGenPanic({#4 formatting string
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a2.1b"");
    __work_2;
  }#4);
}#1

byte-code for format_single:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: Text()
 671[76]: ClearText(var[28])
 674[76]: ConstText(_value="a") -> text(false, [])
 677[92]: AppendText(var[28], v1: text(false, []))
 680[76]: ConstSingle(val=0.1) -> single
 685[80]: ConstInt(val=2) -> integer
 690[84]: ConvSingleFromInt(v1: integer) -> single
 691[84]: ConstSingle(val=1) -> single
 696[88]: MulSingle(v1: single, v2: single) -> single
 697[84]: AddSingle(v1: single, v2: single) -> single
 698[80]: ConstInt(val=0) -> integer
 703[84]: ConstInt(val=0) -> integer
 708[88]: FormatSingle(var[28], val: single, width: integer, precision: integer)
 711[76]: ConstText(_value="b") -> text(false, [])
 714[92]: AppendText(var[28], v1: text(false, []))
 717[76]: VarText(var[28]) -> text(false, [])
 720[92]: AppendText(var[52], v1: text(false, []))
 723[76]: VarText(var[52]) -> text(false, [])
 726[92]: ConstText(_value="a2.1b") -> text(false, [])
 733[108]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 734[77]: GenGotoFalseWord(jump=740, if_false: boolean)
 737[76]: GenGotoWord(jump=793)
 740[76]: ClearText(var[4])
 743[76]: ConstText(_value="Test failed ") -> text(false, [])
 757[92]: AppendText(var[4], v1: text(false, []))
 760[76]: VarText(var[52]) -> text(false, [])
 763[92]: ConstInt(val=0) -> integer
 768[96]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 773[76]: ConstText(_value=" != "a2.1b"") -> text(false, [])
 786[92]: AppendText(var[4], v1: text(false, []))
 789[76]: VarText(var[4]) -> text(false, [])
 792[92]: GenPanic(message: text(false, []))
 793[76]: GenReturn(ret=0, value=0, discard=76)

Execute test:
  668:[8] Text()
  669:[32] Text()
  670:[56] Text()
  671:[80] ClearText(var[32])
  674:[80] ConstText(_value="a") -> "a"[80]
  677:[96] AppendText(var[32], v1="a"[80])
  680:[80] ConstSingle(val=0.1) -> 0.1[80]
  685:[84] ConstInt(val=2) -> 2[84]
  690:[88] ConvSingleFromInt(v1=2[84]) -> 2[84]
  691:[88] ConstSingle(val=1) -> 1[88]
  696:[92] MulSingle(v1=2[84], v2=1[88]) -> 2[84]
  697:[88] AddSingle(v1=0.1[80], v2=2[84]) -> 2.1[80]
  698:[84] ConstInt(val=0) -> 0[84]
  703:[88] ConstInt(val=0) -> 0[88]
  708:[92] FormatSingle(var[32], val=2.1[80], width=0[84], precision=0[88])
  711:[80] ConstText(_value="b") -> "b"[80]
  714:[96] AppendText(var[32], v1="b"[80])
  717:[80] VarText(var[32]) -> "a2.1b"[80]
  720:[96] AppendText(var[56], v1="a2.1b"[80])
  723:[80] VarText(var[56]) -> "a2.1b"[80]
  726:[96] ConstText(_value="a2.1b") -> "a2.1b"[96]
  733:[112] EqText(v1="a2.1b"[80], v2="a2.1b"[96]) -> true[80]
  734:[81] GenGotoFalseWord(jump=740, if_false=true[80])
  737:[80] GenGotoWord(jump=793)
  793:[80] GenReturn(ret=4294967295[4], value=0, discard=76)
Finished
