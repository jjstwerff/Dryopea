Test code:
pub fn test() {
    test_value = {"a{0.1f + 2 * 1.0f}b"};
    assert(
        test_value == "a2.1b",
        "Test failed {test_value} != \"a2.1b\""
    );
}

fn test {
  let test_value = {
    {
      let append_8 = "a";
      OpFormatSingle(append_8, OpAddSingle(0.1f32, OpMulSingle(OpConvSingleFromInt(2i32), 1f32)), 0i32, 0i32);
      OpAppendText(append_8, "b");
      append_8;
    };
  };
  if OpEqText(test_value, "a2.1b") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "a2.1b"");
    append_9;
  })};
}

byte-code for format_single:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: Text()
 666[52]: ConstText(_value="a") -> text
 669[68]: AppendText(var[28], v1: text)
 672[52]: ConstSingle(val=0.1) -> single
 677[56]: ConstInt(val=2) -> integer
 682[60]: ConvSingleFromInt(v1: integer) -> single
 683[60]: ConstSingle(val=1) -> single
 688[64]: MulSingle(v1: single, v2: single) -> single
 689[60]: AddSingle(v1: single, v2: single) -> single
 690[56]: ConstInt(val=0) -> integer
 695[60]: ConstInt(val=0) -> integer
 700[64]: FormatSingle(var[28], val: single, width: integer, precision: integer)
 703[52]: ConstText(_value="b") -> text
 706[68]: AppendText(var[28], v1: text)
 709[52]: VarText(var[28]) -> text
 712[68]: GenFreeStack(value=16, discard=24)
 716[44]: AppendText(var[4], v1: text)
 719[28]: VarText(var[4]) -> text
 722[44]: ConstText(_value="a2.1b") -> text
 729[60]: EqText(v1: text, v2: text) -> boolean
 730[29]: GenGotoFalseWord(jump=736, if_false: boolean)
 733[28]: GenGotoWord(jump=791)
 736[28]: Text()
 737[52]: ConstText(_value="Test failed ") -> text
 751[68]: AppendText(var[28], v1: text)
 754[52]: VarText(var[4]) -> text
 757[68]: ConstInt(val=0) -> integer
 762[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 767[52]: ConstText(_value=" != "a2.1b"") -> text
 780[68]: AppendText(var[28], v1: text)
 783[52]: VarText(var[28]) -> text
 786[68]: GenFreeStack(value=16, discard=24)
 790[44]: GenPanic(message: text)
 791[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] Text()
  666:[52] ConstText(_value="a") -> "a"[52]
  669:[68] AppendText(var[28], v1="a"[52])
  672:[52] ConstSingle(val=0.1) -> 0.1[52]
  677:[56] ConstInt(val=2) -> 2[56]
  682:[60] ConvSingleFromInt(v1=2[56]) -> 2[56]
  683:[60] ConstSingle(val=1) -> 1[60]
  688:[64] MulSingle(v1=2[56], v2=1[60]) -> 2[56]
  689:[60] AddSingle(v1=0.1[52], v2=2[56]) -> 2.1[52]
  690:[56] ConstInt(val=0) -> 0[56]
  695:[60] ConstInt(val=0) -> 0[60]
  700:[64] FormatSingle(var[28], val=2.1[52], width=0[56], precision=0[60])
  703:[52] ConstText(_value="b") -> "b"[52]
  706:[68] AppendText(var[28], v1="b"[52])
  709:[52] VarText(var[28]) -> "a2.1b"[52]
  712:[68] GenFreeStack(value=16, discard=24)
  716:[44] AppendText(var[4], v1="a2.1b"[28])
  719:[28] VarText(var[4]) -> "a2.1b"[28]
  722:[44] ConstText(_value="a2.1b") -> "a2.1b"[44]
  729:[60] EqText(v1="a2.1b"[28], v2="a2.1b"[44]) -> true[28]
  730:[29] GenGotoFalseWord(jump=736, if_false=true[28])
  733:[28] GenGotoWord(jump=791)
  791:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
