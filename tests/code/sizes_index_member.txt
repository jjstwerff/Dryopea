struct S {a: integer, b: long, c: integer};
struct Main { s: index<S[a, -c]> };

pub fn test() {
    test_value = {m = Main {}; sizeof(S) + 100 * sizeof(m)};
    assert(
        test_value == 829,
        "Test failed {test_value} != 829"
    );
}
Type 14:S[29]:
    a:integer[4]
    b:long[8]
    c:integer[16]
    #left_1:integer[20]
    #right_1:integer[24]
    #color_1:boolean[28]

Type 15:Main[8]:
    s:index<S[a,-c]>[4]

Type 16:index<S[a,-c]>[4]:Index(14, [(0, true), (2, false)], 3) keys [tp:1 desc:false field:4, tp:1 desc:true field:16, ]

fn test() {#1 block
  __ref_1:ref(Main) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    m:ref(Main)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 15i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      __ref_1;
    }#3:ref(Main)["__ref_1"];
    OpAddInt(29i32, OpMulInt(100i32, 8i32));
  }#2:integer;
  if OpEqInt(test_value, 829i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 829");
    __work_1;
  }#4:text);
}#1

byte-code for index_member:test() [1073]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Main) in 1
   1[16]: Text() var=__work_1[16]:text in 1
   2[40]: Database(var[4], db_tp=15) type=Main[8]:{s:index<S[a,-c]>[4]}[15] var=m[40]:ref(Main)["__ref_1"] in 2
   7[40]: VarRef(var[4]) -> ref(reference) type=Main[8]:{s:index<S[a,-c]>[4]}[15] var=__ref_1[4]:ref(Main) in 1
  10[52]: ConstInt(val=0) -> integer
  15[56]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[40]: VarRef(var[4]) -> ref(reference) type=Main[8]:{s:index<S[a,-c]>[4]}[15] var=__ref_1[4]:ref(Main) in 1
  21[52]: ConstInt(val=29) -> integer
  26[56]: ConstInt(val=100) -> integer
  31[60]: ConstInt(val=8) -> integer
  36[64]: MulInt(v1: integer, v2: integer) -> integer
  37[60]: AddInt(v1: integer, v2: integer) -> integer
  38[56]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
  42[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
  45[48]: ConstInt(val=829) -> integer
  50[52]: EqInt(v1: integer, v2: integer) -> boolean
  51[45]: GotoFalseWord(jump=57, if_false: boolean)
  54[44]: GotoWord(jump=108)
  57[44]: ClearText(var[16]) var=__work_1[16]:text in 1
  60[44]: ConstText(_value="Test failed ") -> text
  74[60]: AppendText(var[16], v1: text)
  77[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
  80[48]: ConstInt(val=0) -> integer
  85[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  92[44]: ConstText(_value=" != 829") -> text
 101[60]: AppendText(var[16], v1: text)
 104[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 107[60]: Panic(message: text)
 108[44]: FreeText(var[16])
 111[44]: VarRef(var[4]) -> ref(reference) type=Main[8]:{s:index<S[a,-c]>[4]}[15] var=__ref_1[4]:ref(Main) in 1
 114[56]: FreeRef(v1: ref(reference))
 115[44]: Return(ret=0, value=0, discard=44)

