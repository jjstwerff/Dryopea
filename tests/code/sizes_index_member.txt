struct S {a: integer, b: long, c: integer};
struct Main { s: index<S[a, -c]> };

pub fn test() {
    test_value = {m = Main {}; sizeof(S) + 100 * sizeof(m)};
    assert(
        test_value == 829,
        "Test failed {test_value} != 829"
    );
}
Type 17:S[29]:
    a:integer[4]
    b:long[8]
    c:integer[16]
    #left_1:integer[20]
    #right_1:integer[24]
    #color_1:boolean[28]

Type 18:Main[8]:
    s:index<S[a,-c]>[4]

Type 19:index<S[a,-c]>[4]:Index(17, [(0, true), (2, false)], 3) keys [tp:1 desc:false field:4, tp:1 desc:true field:16, tp:1 desc:false field:4, tp:1 desc:true field:16, ]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    m:ref(Main)["m"] = OpConvRefFromNull();
    OpDatabase(m, 18i32);
    OpSetInt(m, 4i32, 0i32);
    OpAddInt(29i32, OpMulInt(100i32, 8i32));
  }#2:integer;
  if OpEqInt(test_value, 829i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 829");
    __work_1;
  }#3:text);
}#1

byte-code for index_member:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConvRefFromNull() -> ref(reference) var=m[28]:ref(Main)["m"] in 2
   2[40]: Database(var[28], db_tp=18) type=Main[8]:{s:index<S[a,-c]>[4]}[18]
   7[40]: VarRef(var[28]) -> ref(reference) type=Main[8]:{s:index<S[a,-c]>[4]}[18] var=m[28]:ref(Main)["m"] in 2
  10[52]: ConstInt(val=0) -> integer
  15[56]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[40]: ConstInt(val=29) -> integer
  23[44]: ConstInt(val=100) -> integer
  28[48]: ConstInt(val=8) -> integer
  33[52]: MulInt(v1: integer, v2: integer) -> integer
  34[48]: AddInt(v1: integer, v2: integer) -> integer
  35[44]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
  39[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  42[36]: ConstInt(val=829) -> integer
  47[40]: EqInt(v1: integer, v2: integer) -> boolean
  48[33]: GotoFalseWord(jump=54, if_false: boolean)
  51[32]: GotoWord(jump=105)
  54[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  57[32]: ConstText(_value="Test failed ") -> text
  71[48]: AppendText(var[4], v1: text)
  74[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  77[36]: ConstInt(val=0) -> integer
  82[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  89[32]: ConstText(_value=" != 829") -> text
  98[48]: AppendText(var[4], v1: text)
 101[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 104[48]: Panic(message: text)
 105[32]: FreeText(var[4])
 108[32]: Return(ret=0, value=0, discard=32)

