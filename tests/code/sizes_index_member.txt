Test code:
struct S {a: integer, b: long, c: integer};
struct Main { s: index<S[a, -c]> };

pub fn test() {
    test_value = {m = Main {}; sizeof(S) + 100 * sizeof(m)};
    assert(
        test_value == 829,
        "Test failed {test_value} != 829"
    );
}

Type 13:S[29]:
    a:integer[4]
    b:long[8]
    c:integer[16]
    _left_1:integer[20]
    _right_1:integer[24]
    _color_1:boolean[28]

Type 14:Main[8]:
    s:index<S[a,-c]>[4]

Type 15:index<S[a,-c]>[4]:Index(13, [(0, false), (2, true)], 3)

fn test {
  let test_value = {
    let m = {
      let val = OpDatabase(8i32, 14i32);
      OpSetInt(val, 4i32, 0i32);
      val;
    };
    OpAddInt(29i32, OpMulInt(100i32, 8i32));
  };
  if OpEqInt(test_value, 829i32) null else OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatInt(append_9, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_9, " != 829");
    append_9;
  });
}

byte-code for index_member:test()
 705[0]: return-address
 705[4]: Database(size=8, db_tp=14) -> reference type=Main[8]:{s:index<S[a,-c]>[4]}[14]
 710[16]: VarRef(var[4]) -> reference type=Main[8]:{s:index<S[a,-c]>[4]}[14]
 713[28]: ConstInt(val=0) -> integer
 718[32]: SetInt(v1: reference, fld=4, val: integer)
 723[16]: VarRef(var[4]) -> reference type=Main[8]:{s:index<S[a,-c]>[4]}[14]
 726[28]: GenFreeStack(value=12, discard=12)
 730[16]: ConstInt(val=29) -> integer
 735[20]: ConstInt(val=100) -> integer
 740[24]: ConstInt(val=8) -> integer
 745[28]: MulInt(v1: integer, v2: integer) -> integer
 746[24]: AddInt(v1: integer, v2: integer) -> integer
 747[20]: GenFreeStack(value=4, discard=12)
 751[8]: VarInt(var[4]) -> integer
 754[12]: ConstInt(val=829) -> integer
 759[16]: EqInt(v1: integer, v2: integer) -> boolean
 760[9]: GenGotoFalseWord(jump=766, if_false: boolean)
 763[8]: GenGotoWord(jump=819)
 766[8]: Text()
 767[32]: ConstText(_value="Test failed ") -> text
 781[48]: AppendText(var[8], v1: text)
 784[32]: VarInt(var[4]) -> integer
 787[36]: ConstInt(val=0) -> integer
 792[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 799[32]: ConstText(_value=" != 829") -> text
 808[48]: AppendText(var[8], v1: text)
 811[32]: VarText(var[8]) -> text
 814[48]: GenFreeStack(value=16, discard=24)
 818[24]: GenPanic(message: text)
 819[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  705:[4] Database(size=8, db_tp=14)