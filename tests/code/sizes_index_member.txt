struct S {a: integer, b: long, c: integer};
struct Main { s: index<S[a, -c]> };

pub fn test() {
    test_value = {m = Main {}; sizeof(S) + 100 * sizeof(m)};
    assert(
        test_value == 829,
        "Test failed {test_value} != 829"
    );
}
Type 11:S[29]:
    a:integer[4]
    b:long[8]
    c:integer[16]
    #left_1:integer[20]
    #right_1:integer[24]
    #color_1:boolean[28]

Type 12:Main[8]:
    s:index<S[a,-c]>[4]

Type 13:index<S[a,-c]>[4]:Index(11, [(0, true), (2, false)], 3) keys [tp:1 desc:false field:4, tp:1 desc:true field:16, ]

fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    let m = {#3 object
      let _val_1 = OpDatabase(8i32, 12i32);
      OpSetInt(_val_1, 4i32, 0i32);
      _val_1;
    }#3;
    OpAddInt(29i32, OpMulInt(100i32, 8i32));
  }#2;
  if OpEqInt(test_value, 829i32) null else OpGenPanic({#4 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 829");
    __work_1;
  }#4);
}#1

byte-code for index_member:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Database(size=8, db_tp=12) -> reference#[] type=Main[8]:{s:index<S[a,-c]>[4]}[12]
 674[40]: VarRef(var[28]) -> reference#[] type=Main[8]:{s:index<S[a,-c]>[4]}[12]
 677[52]: ConstInt(val=0) -> integer
 682[56]: SetInt(v1: reference#[], fld=4, val: integer)
 685[40]: VarRef(var[28]) -> reference#[] type=Main[8]:{s:index<S[a,-c]>[4]}[12]
 688[52]: GenFreeStack(value=12, discard=12)
 692[40]: ConstInt(val=29) -> integer
 697[44]: ConstInt(val=100) -> integer
 702[48]: ConstInt(val=8) -> integer
 707[52]: MulInt(v1: integer, v2: integer) -> integer
 708[48]: AddInt(v1: integer, v2: integer) -> integer
 709[44]: GenFreeStack(value=4, discard=12)
 713[32]: VarInt(var[28]) -> integer
 716[36]: ConstInt(val=829) -> integer
 721[40]: EqInt(v1: integer, v2: integer) -> boolean
 722[33]: GenGotoFalseWord(jump=728, if_false: boolean)
 725[32]: GenGotoWord(jump=779)
 728[32]: ClearText(var[4])
 731[32]: ConstText(_value="Test failed ") -> text(false, [])
 745[48]: AppendText(var[4], v1: text(false, []))
 748[32]: VarInt(var[28]) -> integer
 751[36]: ConstInt(val=0) -> integer
 756[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 763[32]: ConstText(_value=" != 829") -> text(false, [])
 772[48]: AppendText(var[4], v1: text(false, []))
 775[32]: VarText(var[4]) -> text(false, [])
 778[48]: GenPanic(message: text(false, []))
 779[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] Database(size=8, db_tp=12) -> ref(1,1,0)={s:[]}[32]
  674:[44] VarRef(var[32]) -> ref(1,1,0)={s:[]}[44]
  677:[56] ConstInt(val=0) -> 0[56]
  682:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
  685:[44] VarRef(var[32]) -> ref(1,1,0)={s:[]}[44]
  688:[56] GenFreeStack(value=12, discard=12)
  692:[44] ConstInt(val=29) -> 29[44]
  697:[48] ConstInt(val=100) -> 100[48]
  702:[52] ConstInt(val=8) -> 8[52]
  707:[56] MulInt(v1=100[48], v2=8[52]) -> 800[48]
  708:[52] AddInt(v1=29[44], v2=800[48]) -> 829[44]
  709:[48] GenFreeStack(value=4, discard=12)
  713:[36] VarInt(var[32]) -> 829[36]
  716:[40] ConstInt(val=829) -> 829[40]
  721:[44] EqInt(v1=829[36], v2=829[40]) -> true[36]
  722:[37] GenGotoFalseWord(jump=728, if_false=true[36])
  725:[36] GenGotoWord(jump=779)
  779:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
