enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {1 as Number < 3 as Number};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
Type 12:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    OpLtEnum(OpCastEnumFromInt(1i32, 12i32), OpCastEnumFromInt(3i32, 12i32));
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for int_to_enum:test()
 645[0]: return-address
 645[4]: Text() var=__work_1[4]:text in 1
 646[28]: ConstInt(val=1) -> integer var=test_value[28]:boolean in 1
 651[32]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[12]
 652[29]: ConstInt(val=3) -> integer
 657[33]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[12]
 658[30]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
 659[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
 662[30]: ConstTrue() -> boolean
 663[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 664[30]: GotoFalseWord(jump=670, if_false: boolean)
 667[29]: GotoWord(jump=720)
 670[29]: ClearText(var[4]) var=__work_1[4]:text in 1
 673[29]: ConstText(_value="Test failed ") -> text
 687[45]: AppendText(var[4], v1: text)
 690[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
 693[30]: ConstInt(val=0) -> integer
 698[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 703[29]: ConstText(_value=" != true") -> text
 713[45]: AppendText(var[4], v1: text)
 716[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 719[45]: Panic(message: text)
 720[29]: FreeText(var[4])
 723[29]: Return(ret=0, value=0, discard=29)

Execute test:
  645:[8] Text()
  646:[32] ConstInt(val=1) -> 1[32]
  651:[36] CastEnumFromInt(v1=1[32]) -> One(1)[32]
  652:[33] ConstInt(val=3) -> 3[33]
  657:[37] CastEnumFromInt(v1=3[33]) -> Three(3)[33]
  658:[34] LtEnum(v1=1[32], v2=3[33]) -> true[32]
  659:[33] VarBool(var[32]) -> true[33]
  662:[34] ConstTrue() -> true[34]
  663:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
  664:[34] GotoFalseWord(jump=670, if_false=true[33])
  667:[33] GotoWord(jump=720)
  720:[33] FreeText(var[8])
  723:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
