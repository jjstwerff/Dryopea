enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {1 as Number < 3 as Number};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
Type 17:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):boolean = {#block(2):boolean
    OpLtEnum(OpCastEnumFromInt(1i32, 17i32), OpCastEnumFromInt(3i32, 17i32));
  }#block(2):boolean;
  if OpEqBool(test_value(1), true) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatBool(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != true");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for int_to_enum:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=1) -> integer var=test_value[32]:boolean
   6[36]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[17]
   7[33]: ConstInt(val=3) -> integer
  12[37]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[17]
  13[34]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
  14[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  17[34]: ConstTrue() -> boolean
  18[35]: EqBool(v1: boolean, v2: boolean) -> boolean
  19[34]: GotoFalseWord(jump=25, if_false: boolean)
  22[33]: GotoWord(jump=75)
  25[33]: ClearText(var[8]) var=__work_1[8]:text
  28[33]: ConstText(_value="Test failed ") -> text
  42[49]: AppendText(var[8], v1: text)
  45[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  48[34]: ConstInt(val=0) -> integer
  53[38]: FormatBool(var[8], val: boolean, width: integer, dir=-1, token=32)
  58[33]: ConstText(_value=" != true") -> text
  68[49]: AppendText(var[8], v1: text)
  71[33]: VarText(var[8]) -> text var=__work_1[8]:text
  74[49]: Panic(message: text)
  75[33]: FreeText(var[8])
  78[33]: Return(ret=0, value=0, discard=29)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=1) -> 1[32]
    6:[36] CastEnumFromInt(v1=1[32]) -> One(1)[32]
    7:[33] ConstInt(val=3) -> 3[33]
   12:[37] CastEnumFromInt(v1=3[33]) -> Three(3)[33]
   13:[34] LtEnum(v1=1[32], v2=3[33]) -> true[32]
   14:[33] VarBool(var[32]) -> true[33]
   17:[34] ConstTrue() -> true[34]
   18:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
   19:[34] GotoFalseWord(jump=25, if_false=true[33])
   22:[33] GotoWord(jump=75)
   75:[33] FreeText(var[8])
   78:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
