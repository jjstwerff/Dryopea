enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {1 as Number < 3 as Number};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
Type 17:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    OpLtEnum(OpCastEnumFromInt(1i32, 17i32), OpCastEnumFromInt(3i32, 17i32));
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for int_to_enum:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=1) -> integer var=test_value[28]:boolean in 1
   6[32]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[17]
   7[29]: ConstInt(val=3) -> integer
  12[33]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[17]
  13[30]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
  14[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  17[30]: ConstTrue() -> boolean
  18[31]: EqBool(v1: boolean, v2: boolean) -> boolean
  19[30]: GotoFalseWord(jump=25, if_false: boolean)
  22[29]: GotoWord(jump=75)
  25[29]: ClearText(var[4]) var=__work_1[4]:text in 1
  28[29]: ConstText(_value="Test failed ") -> text
  42[45]: AppendText(var[4], v1: text)
  45[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  48[30]: ConstInt(val=0) -> integer
  53[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
  58[29]: ConstText(_value=" != true") -> text
  68[45]: AppendText(var[4], v1: text)
  71[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  74[45]: Panic(message: text)
  75[29]: FreeText(var[4])
  78[29]: Return(ret=0, value=0, discard=29)

