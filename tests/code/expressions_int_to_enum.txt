Test code:
enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {1 as Number < 3 as Number};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}

Type 13:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test {
  let __work_1 = "";
  let test_value = {
    OpLtEnum(OpCastEnumFromInt(1i32, 13i32), OpCastEnumFromInt(3i32, 13i32));
  };
  if OpEqBool(test_value, true) {null} else {OpGenPanic({
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  })};
}

byte-code for int_to_enum:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: ConstInt(val=1) -> integer
 679[32]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[13]
 680[29]: ConstInt(val=3) -> integer
 685[33]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[13]
 686[30]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
 687[29]: VarBool(var[28]) -> boolean
 690[30]: ConstTrue() -> boolean
 691[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 692[30]: GenGotoFalseWord(jump=698, if_false: boolean)
 695[29]: GenGotoWord(jump=748)
 698[29]: ClearText(var[4])
 701[29]: ConstText(_value="Test failed ") -> text(false)
 715[45]: AppendText(var[4], v1: text(false))
 718[29]: VarBool(var[28]) -> boolean
 721[30]: ConstInt(val=0) -> integer
 726[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 731[29]: ConstText(_value=" != true") -> text(false)
 741[45]: AppendText(var[4], v1: text(false))
 744[29]: VarText(var[4]) -> text(false)
 747[45]: GenPanic(message: text(false))
 748[29]: GenReturn(ret=0, value=0, discard=29)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] ConstInt(val=1) -> 1[32]
  679:[36] CastEnumFromInt(v1=1[32]) -> One(1)[32]
  680:[33] ConstInt(val=3) -> 3[33]
  685:[37] CastEnumFromInt(v1=3[33]) -> Three(3)[33]
  686:[34] LtEnum(v1=1[32], v2=3[33]) -> true[32]
  687:[33] VarBool(var[32]) -> true[33]
  690:[34] ConstTrue() -> true[34]
  691:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
  692:[34] GenGotoFalseWord(jump=698, if_false=true[33])
  695:[33] GenGotoWord(jump=748)
  748:[33] GenReturn(ret=4294967295[4], value=0, discard=29)
Finished
