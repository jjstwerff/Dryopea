enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {1 as Number < 3 as Number};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
Type 12:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    OpLtEnum(OpCastEnumFromInt(1i32, 12i32), OpCastEnumFromInt(3i32, 12i32));
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for int_to_enum:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: ConstInt(val=1) -> integer
 697[32]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[12]
 698[29]: ConstInt(val=3) -> integer
 703[33]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[12]
 704[30]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
 705[29]: VarBool(var[28]) -> boolean
 708[30]: ConstTrue() -> boolean
 709[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 710[30]: GotoFalseWord(jump=716, if_false: boolean)
 713[29]: GotoWord(jump=766)
 716[29]: ClearText(var[4])
 719[29]: ConstText(_value="Test failed ") -> text
 733[45]: AppendText(var[4], v1: text)
 736[29]: VarBool(var[28]) -> boolean
 739[30]: ConstInt(val=0) -> integer
 744[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 749[29]: ConstText(_value=" != true") -> text
 759[45]: AppendText(var[4], v1: text)
 762[29]: VarText(var[4]) -> text
 765[45]: Panic(message: text)
 766[29]: FreeText(var[4])
 769[29]: Return(ret=0, value=0, discard=29)

Execute test:
  691:[8] Text()
  692:[32] ConstInt(val=1) -> 1[32]
  697:[36] CastEnumFromInt(v1=1[32]) -> One(1)[32]
  698:[33] ConstInt(val=3) -> 3[33]
  703:[37] CastEnumFromInt(v1=3[33]) -> Three(3)[33]
  704:[34] LtEnum(v1=1[32], v2=3[33]) -> true[32]
  705:[33] VarBool(var[32]) -> true[33]
  708:[34] ConstTrue() -> true[34]
  709:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
  710:[34] GotoFalseWord(jump=716, if_false=true[33])
  713:[33] GotoWord(jump=766)
  766:[33] FreeText(var[8])
  769:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
