Test code:
pub fn test() {
    test_value = {123 and (12 or false)};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}

fn test {
  let test_value = {
    if OpConvBoolFromInt(123i32) {if OpConvBoolFromInt(12i32) {true} else {false}} else {false};
  };
  if OpEqBool(test_value, true) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatBool(append_7, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_7, " != true");
    append_7;
  })};
}

byte-code for boolean_named:test()
 668[0]: return-address
 668[4]: ConstInt(val=123) -> integer
 673[8]: ConvBoolFromInt(v1: integer) -> boolean
 674[5]: GenGotoFalseWord(jump=694, if_false: boolean)
 677[4]: ConstInt(val=12) -> integer
 682[8]: ConvBoolFromInt(v1: integer) -> boolean
 683[5]: GenGotoFalseWord(jump=690, if_false: boolean)
 686[4]: ConstTrue() -> boolean
 687[5]: GenGotoWord(jump=691)
 690[4]: ConstFalse() -> boolean
 691[5]: GenGotoWord(jump=695)
 694[4]: ConstFalse() -> boolean
 695[5]: VarBool(var[4]) -> boolean
 698[6]: ConstTrue() -> boolean
 699[7]: EqBool(v1: boolean, v2: boolean) -> boolean
 700[6]: GenGotoFalseWord(jump=706, if_false: boolean)
 703[5]: GenGotoWord(jump=758)
 706[5]: Text()
 707[29]: ConstText(_value="Test failed ") -> text
 721[45]: AppendText(var[5], v1: text)
 724[29]: VarBool(var[4]) -> boolean
 727[30]: ConstInt(val=0) -> integer
 732[34]: FormatBool(var[5], val: boolean, width: integer, dir=-1, token=32)
 737[29]: ConstText(_value=" != true") -> text
 747[45]: AppendText(var[5], v1: text)
 750[29]: VarText(var[5]) -> text
 753[45]: GenFreeStack(value=16, discard=24)
 757[21]: GenPanic(message: text)
 758[5]: GenReturn(ret=0, value=0, discard=5)

Execute test:
  668:[4] ConstInt(val=123) -> 123[4]
  673:[8] ConvBoolFromInt(v1=123[4]) -> true[4]
  674:[5] GenGotoFalseWord(jump=694, if_false=true[4])
  677:[4] ConstInt(val=12) -> 12[4]
  682:[8] ConvBoolFromInt(v1=12[4]) -> true[4]
  683:[5] GenGotoFalseWord(jump=690, if_false=true[4])
  686:[4] ConstTrue() -> true[4]
  687:[5] GenGotoWord(jump=691)
  691:[5] GenGotoWord(jump=695)
  695:[5] VarBool(var[4]) -> true[5]
  698:[6] ConstTrue() -> true[6]
  699:[7] EqBool(v1=true[5], v2=true[6]) -> true[5]
  700:[6] GenGotoFalseWord(jump=706, if_false=true[5])
  703:[5] GenGotoWord(jump=758)
  758:[5] GenReturn(ret=4294967295[0], value=0, discard=5)
Finished
