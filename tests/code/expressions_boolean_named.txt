Test code:
pub fn test() {
    test_value = {123 and (12 or false)};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}

fn test {
  let test_value = {
    if OpConvBoolFromInt(123i32) {if OpConvBoolFromInt(12i32) {true} else {false}} else {false};
  };
  if OpEqBool(test_value, true) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatBool(append_7, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_7, " != true");
    append_7;
  })};
}

byte-code for boolean_named:test()
 664[0]: return-address
 664[4]: ConstInt(val=123) -> integer
 669[8]: ConvBoolFromInt(v1: integer) -> boolean
 670[5]: GenGotoFalseWord(jump=690, if_false: boolean)
 673[4]: ConstInt(val=12) -> integer
 678[8]: ConvBoolFromInt(v1: integer) -> boolean
 679[5]: GenGotoFalseWord(jump=686, if_false: boolean)
 682[4]: ConstTrue() -> boolean
 683[5]: GenGotoWord(jump=687)
 686[4]: ConstFalse() -> boolean
 687[5]: GenGotoWord(jump=691)
 690[4]: ConstFalse() -> boolean
 691[5]: VarBool(var[4]) -> boolean
 694[6]: ConstTrue() -> boolean
 695[7]: EqBool(v1: boolean, v2: boolean) -> boolean
 696[6]: GenGotoFalseWord(jump=702, if_false: boolean)
 699[5]: GenGotoWord(jump=754)
 702[5]: Text()
 703[29]: ConstText(_value="Test failed ") -> text
 717[45]: AppendText(var[5], v1: text)
 720[29]: VarBool(var[4]) -> boolean
 723[30]: ConstInt(val=0) -> integer
 728[34]: FormatBool(var[5], val: boolean, width: integer, dir=-1, token=32)
 733[29]: ConstText(_value=" != true") -> text
 743[45]: AppendText(var[5], v1: text)
 746[29]: VarText(var[5]) -> text
 749[45]: GenFreeStack(value=16, discard=24)
 753[21]: GenPanic(message: text)
 754[5]: GenReturn(ret=0, value=0, discard=5)

Execute test:
  664:[4] ConstInt(val=123) -> 123[4]
  669:[8] ConvBoolFromInt(v1=123[4]) -> true[4]
  670:[5] GenGotoFalseWord(jump=690, if_false=true[4])
  673:[4] ConstInt(val=12) -> 12[4]
  678:[8] ConvBoolFromInt(v1=12[4]) -> true[4]
  679:[5] GenGotoFalseWord(jump=686, if_false=true[4])
  682:[4] ConstTrue() -> true[4]
  683:[5] GenGotoWord(jump=687)
  687:[5] GenGotoWord(jump=691)
  691:[5] VarBool(var[4]) -> true[5]
  694:[6] ConstTrue() -> true[6]
  695:[7] EqBool(v1=true[5], v2=true[6]) -> true[5]
  696:[6] GenGotoFalseWord(jump=702, if_false=true[5])
  699:[5] GenGotoWord(jump=754)
  754:[5] GenReturn(ret=4294967295[0], value=0, discard=5)
Finished
