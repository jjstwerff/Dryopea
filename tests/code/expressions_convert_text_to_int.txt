pub fn test() {
    test_value = {"123" as integer + 2};
    assert(
        test_value == 125,
        "Test failed {test_value} != 125"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpCastIntFromText("123"), 2i32);
  }#2:integer;
  if OpEqInt(test_value, 125i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125");
    __work_1;
  }#3:text);
}#1

byte-code for convert_text_to_int:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstText(_value="123") -> text var=test_value[28]:integer in 1
   6[44]: CastIntFromText(v1: text) -> integer
   7[32]: ConstInt(val=2) -> integer
  12[36]: AddInt(v1: integer, v2: integer) -> integer
  13[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  16[36]: ConstInt(val=125) -> integer
  21[40]: EqInt(v1: integer, v2: integer) -> boolean
  22[33]: GotoFalseWord(jump=28, if_false: boolean)
  25[32]: GotoWord(jump=79)
  28[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  31[32]: ConstText(_value="Test failed ") -> text
  45[48]: AppendText(var[4], v1: text)
  48[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  51[36]: ConstInt(val=0) -> integer
  56[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  63[32]: ConstText(_value=" != 125") -> text
  72[48]: AppendText(var[4], v1: text)
  75[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  78[48]: Panic(message: text)
  79[32]: FreeText(var[4])
  82[32]: Return(ret=0, value=0, discard=32)

