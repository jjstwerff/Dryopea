pub fn test() {
    test_value = {"123" as integer + 2};
    assert(
        test_value == 125,
        "Test failed {test_value} != 125"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpCastIntFromText("123"), 2i32);
  }#2:integer;
  if OpEqInt(test_value, 125i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125");
    __work_1;
  }#3:text);
}#1

byte-code for convert_text_to_int:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: ConstText(_value="123") -> text
 688[44]: CastIntFromText(v1: text) -> integer
 689[32]: ConstInt(val=2) -> integer
 694[36]: AddInt(v1: integer, v2: integer) -> integer
 695[32]: VarInt(var[28]) -> integer
 698[36]: ConstInt(val=125) -> integer
 703[40]: EqInt(v1: integer, v2: integer) -> boolean
 704[33]: GotoFalseWord(jump=710, if_false: boolean)
 707[32]: GotoWord(jump=761)
 710[32]: ClearText(var[4])
 713[32]: ConstText(_value="Test failed ") -> text
 727[48]: AppendText(var[4], v1: text)
 730[32]: VarInt(var[28]) -> integer
 733[36]: ConstInt(val=0) -> integer
 738[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 745[32]: ConstText(_value=" != 125") -> text
 754[48]: AppendText(var[4], v1: text)
 757[32]: VarText(var[4]) -> text
 760[48]: Panic(message: text)
 761[32]: Return(ret=0, value=0, discard=32)

Execute test:
  682:[8] Text()
  683:[32] ConstText(_value="123") -> "123"[32]
  688:[48] CastIntFromText(v1="123"[32]) -> 123[32]
  689:[36] ConstInt(val=2) -> 2[36]
  694:[40] AddInt(v1=123[32], v2=2[36]) -> 125[32]
  695:[36] VarInt(var[32]) -> 125[36]
  698:[40] ConstInt(val=125) -> 125[40]
  703:[44] EqInt(v1=125[36], v2=125[40]) -> true[36]
  704:[37] GotoFalseWord(jump=710, if_false=true[36])
  707:[36] GotoWord(jump=761)
  761:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
