pub fn test() {
    test_value = {"123" as integer + 2};
    assert(
        test_value == 125,
        "Test failed {test_value} != 125"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpCastIntFromText("123"), 2i32);
  }#2:integer;
  if OpEqInt(test_value, 125i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125");
    __work_1;
  }#3:text);
}#1

byte-code for convert_text_to_int:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstText(_value="123") -> text
 698[44]: CastIntFromText(v1: text) -> integer
 699[32]: ConstInt(val=2) -> integer
 704[36]: AddInt(v1: integer, v2: integer) -> integer
 705[32]: VarInt(var[28]) -> integer
 708[36]: ConstInt(val=125) -> integer
 713[40]: EqInt(v1: integer, v2: integer) -> boolean
 714[33]: GotoFalseWord(jump=720, if_false: boolean)
 717[32]: GotoWord(jump=771)
 720[32]: ClearText(var[4])
 723[32]: ConstText(_value="Test failed ") -> text
 737[48]: AppendText(var[4], v1: text)
 740[32]: VarInt(var[28]) -> integer
 743[36]: ConstInt(val=0) -> integer
 748[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 755[32]: ConstText(_value=" != 125") -> text
 764[48]: AppendText(var[4], v1: text)
 767[32]: VarText(var[4]) -> text
 770[48]: Panic(message: text)
 771[32]: FreeText(var[4])
 774[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] ConstText(_value="123") -> "123"[32]
  698:[48] CastIntFromText(v1="123"[32]) -> 123[32]
  699:[36] ConstInt(val=2) -> 2[36]
  704:[40] AddInt(v1=123[32], v2=2[36]) -> 125[32]
  705:[36] VarInt(var[32]) -> 125[36]
  708:[40] ConstInt(val=125) -> 125[40]
  713:[44] EqInt(v1=125[36], v2=125[40]) -> true[36]
  714:[37] GotoFalseWord(jump=720, if_false=true[36])
  717:[36] GotoWord(jump=771)
  771:[36] FreeText(var[8])
  774:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
