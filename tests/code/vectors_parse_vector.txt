pub fn test() {
    test_value = {a = "[ 1.2, -10.3, 1.812e4, 1.001e-8 ]" as vector<float>; a[2] + a[3]};
    assert(
        test_value == 18120.00000001001,
        "Test failed {test_value} != 18120.00000001001"
    );
}
Type 17:main_vector<float>[8]:
    vector:vector<float>[4]

Type 18:vector<float>[4]:Vector(3)

fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):float = {#block(2):float
    a(2):vector<float> = OpCastVectorFromText("[ 1.2, -10.3, 1.812e4, 1.001e-8 ]", 18i32);
    OpAddFloat(OpGetFloat(OpGetVector(a(2), 8i32, 2i32), 0i32), OpGetFloat(OpGetVector(a(2), 8i32, 3i32), 0i32));
    OpFreeRef(a(2));
  }#block(2):float;
  if OpEqFloat(test_value(1), 18120.00000001001f64) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatFloat(__work_1(1), test_value(1), 0i32, 0i32);
    OpAppendText(__work_1(1), " != 18120.00000001001");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for parse_vector:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstText(_value="[ 1.2, -10.3, 1.812e4, 1.001e-8 ]") -> text var=a[32]:vector<float>
  36[48]: CastVectorFromText(val: text, db_tp=18) -> vector
  39[44]: VarVector(var[32]) -> vector type=vector<float>[4]:Vector(3)[18] var=a[32]:vector<float>
  42[56]: ConstInt(val=2) -> integer
  47[60]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=float[8]:Base[3]
  50[56]: GetFloat(v1: ref(reference), fld=0) -> float
  53[52]: VarVector(var[32]) -> vector type=vector<float>[4]:Vector(3)[18] var=a[32]:vector<float>
  56[64]: ConstInt(val=3) -> integer
  61[68]: GetVector(r: vector, size=8, index: integer) -> ref(reference) type=float[8]:Base[3]
  64[64]: GetFloat(v1: ref(reference), fld=0) -> float
  67[60]: AddFloat(v1: float, v2: float) -> float
  68[52]: VarVector(var[32]) -> vector type=vector<float>[4]:Vector(3)[18] var=a[32]:vector<float>
  71[64]: FreeRef(v1: ref(reference))
  72[52]: FreeStack(value=8, discard=20)
  76[40]: VarFloat(var[32]) -> float var=test_value[32]:float
  79[48]: ConstFloat(val=18120.00000001001) -> float
  88[56]: EqFloat(v1: float, v2: float) -> boolean
  89[41]: GotoFalseWord(jump=95, if_false: boolean)
  92[40]: GotoWord(jump=161)
  95[40]: ClearText(var[8]) var=__work_1[8]:text
  98[40]: ConstText(_value="Test failed ") -> text
 112[56]: AppendText(var[8], v1: text)
 115[40]: VarFloat(var[32]) -> float var=test_value[32]:float
 118[48]: ConstInt(val=0) -> integer
 123[52]: ConstInt(val=0) -> integer
 128[56]: FormatFloat(var[8], val: float, width: integer, precision: integer)
 131[40]: ConstText(_value=" != 18120.00000001001") -> text
 154[56]: AppendText(var[8], v1: text)
 157[40]: VarText(var[8]) -> text var=__work_1[8]:text
 160[56]: Panic(message: text)
 161[40]: FreeText(var[8])
 164[40]: Return(ret=0, value=0, discard=36)

Execute test:
    0:[8] Text()
    1:[32] ConstText(_value="[ 1.2, -10.3, 1.812e4, 1.001e-8 ]") -> "[ 1.2, -10.3, 1.812e4, 1.001e-8 ]"[32]
   36:[48] CastVectorFromText(val="[ 1.2, -10.3, 1.812e4, 1.001e-8 ]"[32], db_tp=18) -> ref(1,1,4)[32]
   39:[44] VarVector(var[32]) -> ref(1,1,4)=[1.2,-10.3,18120,0.00000001001][44]
   42:[56] ConstInt(val=2) -> 2[56]
   47:[60] GetVector(r=ref(1,1,4)[44], size=8, index=2[56]) -> ref(1,9,24)=18120[44]
   50:[56] GetFloat(v1=ref(1,9,24)[44], fld=0) -> 18120[44]
   53:[52] VarVector(var[32]) -> ref(1,1,4)=[1.2,-10.3,18120,0.00000001001][52]
   56:[64] ConstInt(val=3) -> 3[64]
   61:[68] GetVector(r=ref(1,1,4)[52], size=8, index=3[64]) -> ref(1,9,32)=0.00000001001[52]
   64:[64] GetFloat(v1=ref(1,9,32)[52], fld=0) -> 0.00000001001[52]
   67:[60] AddFloat(v1=18120[44], v2=0.00000001001[52]) -> 18120.00000001001[44]
   68:[52] VarVector(var[32]) -> ref(1,1,4)=[1.2,-10.3,18120,0.00000001001][52]
   71:[64] FreeRef(v1=ref(1,1,4)[52])
   72:[52] FreeStack(value=8, discard=20)
   76:[40] VarFloat(var[32]) -> 18120.00000001001[40]
   79:[48] ConstFloat(val=18120.00000001001) -> 18120.00000001001[48]
   88:[56] EqFloat(v1=18120.00000001001[40], v2=18120.00000001001[48]) -> true[40]
   89:[41] GotoFalseWord(jump=95, if_false=true[40])
   92:[40] GotoWord(jump=161)
  161:[40] FreeText(var[8])
  164:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
