pub fn test() {
    test_value = {1 + 2};
    assert(
        test_value == 3,
        "Test failed {test_value} != 3"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(1i32, 2i32);
  }#2:integer;
  if OpEqInt(test_value, 3i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 3");
    __work_1;
  }#3:text);
}#1

byte-code for expr_add:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: ConstInt(val=1) -> integer
 697[32]: ConstInt(val=2) -> integer
 702[36]: AddInt(v1: integer, v2: integer) -> integer
 703[32]: VarInt(var[28]) -> integer
 706[36]: ConstInt(val=3) -> integer
 711[40]: EqInt(v1: integer, v2: integer) -> boolean
 712[33]: GotoFalseWord(jump=718, if_false: boolean)
 715[32]: GotoWord(jump=767)
 718[32]: ClearText(var[4])
 721[32]: ConstText(_value="Test failed ") -> text
 735[48]: AppendText(var[4], v1: text)
 738[32]: VarInt(var[28]) -> integer
 741[36]: ConstInt(val=0) -> integer
 746[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 753[32]: ConstText(_value=" != 3") -> text
 760[48]: AppendText(var[4], v1: text)
 763[32]: VarText(var[4]) -> text
 766[48]: Panic(message: text)
 767[32]: FreeText(var[4])
 770[32]: Return(ret=0, value=0, discard=32)

Execute test:
  691:[8] Text()
  692:[32] ConstInt(val=1) -> 1[32]
  697:[36] ConstInt(val=2) -> 2[36]
  702:[40] AddInt(v1=1[32], v2=2[36]) -> 3[32]
  703:[36] VarInt(var[32]) -> 3[36]
  706:[40] ConstInt(val=3) -> 3[40]
  711:[44] EqInt(v1=3[36], v2=3[40]) -> true[36]
  712:[37] GotoFalseWord(jump=718, if_false=true[36])
  715:[36] GotoWord(jump=767)
  767:[36] FreeText(var[8])
  770:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
