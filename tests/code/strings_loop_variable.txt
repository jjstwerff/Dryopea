pub fn test() {
    test_value = {a = 0; for _t in 1..5 { b = "123"; a += b as integer; if a > 200 { break; }}; a};
    assert(
        test_value == 246,
        "Test failed {test_value} != 246"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 0i32;
    {#3 for
      _t#index:integer = OpConvIntFromNull();
      loop {#4 for loop
        _t:integer = {#5 for next
          _t#index:integer = if OpNot(OpConvBoolFromInt(_t#index)) 1i32 else OpAddInt(_t#index, 1i32);
          if OpGeInt(_t#index, 5i32) break(0) else null;
          _t#index;
        }#5:integer;
        {#6 block
          b:text = "123";
          a:integer = OpAddInt(a, OpCastIntFromText(b));
          if OpGtInt(a, 200i32) {#7 block
            break(0);
          }#7 else null;
        }#6;
      }#4;
    }#3;
    a;
  }#2:integer;
  if OpEqInt(test_value, 246i32) null else OpPanic({#8 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 246");
    __work_1;
  }#8:text);
}#1

byte-code for loop_variable:test() [1067]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=0) -> integer var=a[28]:integer in 2
   6[32]: ConvIntFromNull() -> integer var=_t#index[32]:integer in 3
   7[36]: VarInt(var[32]) -> integer var=_t#index[32]:integer in 3
  10[40]: ConvBoolFromInt(v1: integer) -> boolean
  11[37]: Not(v1: boolean) -> boolean
  12[37]: GotoFalseWord(jump=23, if_false: boolean)
  15[36]: ConstInt(val=1) -> integer
  20[40]: GotoWord(jump=32)
  23[36]: VarInt(var[32]) -> integer var=_t#index[32]:integer in 3
  26[40]: ConstInt(val=1) -> integer
  31[44]: AddInt(v1: integer, v2: integer) -> integer
  32[40]: PutInt(var[32], value: integer)
  35[36]: VarInt(var[32]) -> integer var=_t#index[32]:integer in 3
  38[40]: ConstInt(val=5) -> integer
  43[44]: GeInt(v1: integer, v2: integer) -> boolean
  44[37]: GotoFalseWord(jump=50, if_false: boolean)
  47[36]: GotoWord(jump=109)
  50[36]: VarInt(var[32]) -> integer var=_t#index[32]:integer in 3
  53[40]: Text() var=b[40]:text in 6
  54[64]: ConstText(_value="123") -> text
  59[80]: AppendText(var[40], v1: text)
  62[64]: VarInt(var[28]) -> integer var=a[28]:integer in 2
  65[68]: VarText(var[40]) -> text var=b[40]:text in 6
  68[84]: CastIntFromText(v1: text) -> integer
  69[72]: AddInt(v1: integer, v2: integer) -> integer
  70[68]: PutInt(var[28], value: integer)
  73[64]: VarInt(var[28]) -> integer var=a[28]:integer in 2
  76[68]: ConstInt(val=200) -> integer
  81[72]: GtInt(v1: integer, v2: integer) -> boolean
  82[65]: GotoFalseWord(jump=95, if_false: boolean)
  85[64]: FreeText(var[40])
  88[64]: FreeStack(value=0, discard=28)
  92[36]: GotoWord(jump=109)
  95[64]: FreeText(var[40])
  98[64]: FreeStack(value=0, discard=24)
 102[40]: FreeStack(value=0, discard=4)
 106[36]: GotoWord(jump=7)
 109[36]: FreeStack(value=0, discard=4)
 113[32]: VarInt(var[28]) -> integer var=a[28]:integer in 2
 116[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 120[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 123[36]: ConstInt(val=246) -> integer
 128[40]: EqInt(v1: integer, v2: integer) -> boolean
 129[33]: GotoFalseWord(jump=135, if_false: boolean)
 132[32]: GotoWord(jump=186)
 135[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 138[32]: ConstText(_value="Test failed ") -> text
 152[48]: AppendText(var[4], v1: text)
 155[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 158[36]: ConstInt(val=0) -> integer
 163[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 170[32]: ConstText(_value=" != 246") -> text
 179[48]: AppendText(var[4], v1: text)
 182[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 185[48]: Panic(message: text)
 186[32]: FreeText(var[4])
 189[32]: Return(ret=0, value=0, discard=32)

