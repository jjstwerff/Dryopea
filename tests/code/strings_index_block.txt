pub fn test() {
    test_value = {s = "1ðŸ˜Š2"; s[1]};
    assert(
        test_value == 128522,
        "Test failed {test_value} != 128522"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):character = {#block(2):character
    s(2):text = "1ðŸ˜Š2";
    OpGetCharacter(s(2), 1i32);
    OpFreeText(s(2));
  }#block(2):character;
  if OpEqInt(OpConvIntFromCharacter(test_value(1)), 128522i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpAppendCharacter(__work_1(1), test_value(1));
    OpAppendText(__work_1(1), " != 128522");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for index_block:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=s[32]:text
   2[56]: ConstText(_value="1ðŸ˜Š2") -> text
  10[72]: AppendText(var[32], v1: text)
  13[56]: VarText(var[32]) -> text var=s[32]:text
  16[72]: ConstInt(val=1) -> integer
  21[76]: GetCharacter(v1: text, v2: integer) -> character
  22[60]: FreeText(var[32])
  25[60]: FreeStack(value=4, discard=28)
  29[36]: VarInt(var[32]) -> integer var=test_value[32]:character
  32[40]: ConvIntFromCharacter(v1: character) -> integer
  33[40]: ConstInt(val=128522) -> integer
  38[44]: EqInt(v1: integer, v2: integer) -> boolean
  39[37]: GotoFalseWord(jump=45, if_false: boolean)
  42[36]: GotoWord(jump=90)
  45[36]: ClearText(var[8]) var=__work_1[8]:text
  48[36]: ConstText(_value="Test failed ") -> text
  62[52]: AppendText(var[8], v1: text)
  65[36]: VarInt(var[32]) -> integer var=test_value[32]:character
  68[40]: AppendCharacter(var[8], v1: character)
  71[36]: ConstText(_value=" != 128522") -> text
  83[52]: AppendText(var[8], v1: text)
  86[36]: VarText(var[8]) -> text var=__work_1[8]:text
  89[52]: Panic(message: text)
  90[36]: FreeText(var[8])
  93[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] ConstText(_value="1ðŸ˜Š2") -> "1ðŸ˜Š2"[56]
   10:[72] AppendText(var[32], v1="1ðŸ˜Š2"[56])
   13:[56] VarText(var[32]) -> "1ðŸ˜Š2"[56]
   16:[72] ConstInt(val=1) -> 1[72]
   21:[76] GetCharacter(v1="1ðŸ˜Š2"[56], v2=1[72]) -> ðŸ˜Š[56]
   22:[60] FreeText(var[32])
   25:[60] FreeStack(value=4, discard=28)
   29:[36] VarInt(var[32]) -> 128522[36]
   32:[40] ConvIntFromCharacter(v1=ðŸ˜Š[36]) -> 128522[36]
   33:[40] ConstInt(val=128522) -> 128522[40]
   38:[44] EqInt(v1=128522[36], v2=128522[40]) -> true[36]
   39:[37] GotoFalseWord(jump=45, if_false=true[36])
   42:[36] GotoWord(jump=90)
   90:[36] FreeText(var[8])
   93:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
