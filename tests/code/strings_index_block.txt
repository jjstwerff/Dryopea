pub fn test() {
    test_value = {s = "1ðŸ˜Š2"; s[1]};
    assert(
        test_value == 128522,
        "Test failed {test_value} != 128522"
    );
}
fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:character(1) = {#block_2:character
    s:text(2) = "1ðŸ˜Š2";
    _res_3:character(2) = OpGetCharacter(s, 1i32);
    OpFreeText(s);
    _res_3;
  }#block_2:character;
  if OpEqInt(OpConvIntFromCharacter(test_value), 128522i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpAppendCharacter(__work_1, test_value);
    OpAppendText(__work_1, " != 128522");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for index_block:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=s[32]:text
   2[56]: ConstText(_value="1ðŸ˜Š2") -> text
  10[72]: AppendText(var[32], v1: text)
  13[56]: VarText(var[32]) -> text var=s[32]:text
  16[72]: ConstInt(val=1) -> integer
  21[76]: GetCharacter(v1: text, v2: integer) -> character
  22[60]: FreeText(var[32])
  25[60]: VarInt(var[56]) -> integer var=_res_3[56]:character
  28[64]: FreeStack(value=4, discard=32) type=character[4]:Base[6]
  32[36]: VarInt(var[32]) -> integer var=test_value[32]:character
  35[40]: ConvIntFromCharacter(v1: character) -> integer
  36[40]: ConstInt(val=128522) -> integer
  41[44]: EqInt(v1: integer, v2: integer) -> boolean
  42[37]: GotoFalseWord(jump=48, if_false: boolean)
  45[36]: GotoWord(jump=93)
  48[36]: ClearText(var[8]) var=__work_1[8]:text
  51[36]: ConstText(_value="Test failed ") -> text
  65[52]: AppendText(var[8], v1: text)
  68[36]: VarInt(var[32]) -> integer var=test_value[32]:character
  71[40]: AppendCharacter(var[8], v1: character)
  74[36]: ConstText(_value=" != 128522") -> text
  86[52]: AppendText(var[8], v1: text)
  89[36]: VarText(var[8]) -> text var=__work_1[8]:text
  92[52]: Panic(message: text)
  93[36]: FreeText(var[8])
  96[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] ConstText(_value="1ðŸ˜Š2") -> "1ðŸ˜Š2"[56]
   10:[72] AppendText(var[32], v1="1ðŸ˜Š2"[56])
   13:[56] VarText(var[32]) -> "1ðŸ˜Š2"[56]
   16:[72] ConstInt(val=1) -> 1[72]
   21:[76] GetCharacter(v1="1ðŸ˜Š2"[56], v2=1[72]) -> unknown[60]
   22:[60] FreeText(var[32])
   25:[60] VarInt(var[56]) -> 128522[60]
   28:[64] FreeStack(value=4, discard=32)
   32:[36] VarInt(var[32]) -> 128522[36]
   35:[40] ConvIntFromCharacter(v1=unknown[40]) -> 128522[36]
   36:[40] ConstInt(val=128522) -> 128522[40]
   41:[44] EqInt(v1=128522[36], v2=128522[40]) -> true[36]
   42:[37] GotoFalseWord(jump=1216, if_false=true[36])
   45:[36] GotoWord(jump=1261)
   93:[36] FreeText(var[8])
   96:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
