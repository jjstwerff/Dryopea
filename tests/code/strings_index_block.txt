pub fn test() {
    test_value = {s = "1ðŸ˜Š2"; s[1]};
    assert(
        test_value == "ðŸ˜Š",
        "Test failed {test_value} != \"ðŸ˜Š\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  s:text = "";
  test_value:text["s"] = {#2 block
    s:text = "1ðŸ˜Š2";
    OpGetTextSub(s, 1i32, -2147483648i32);
  }#2:text["s"];
  if OpEqText(test_value, "ðŸ˜Š") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "ðŸ˜Š"");
    __work_1;
  }#3:text);
}#1

byte-code for index_block:test()
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=s[28]:text in 1
   2[52]: Text() var=test_value[52]:text["s"] in 1
   3[76]: ClearText(var[28]) var=s[28]:text in 1
   6[76]: ConstText(_value="1ðŸ˜Š2") -> text
  14[92]: AppendText(var[28], v1: text)
  17[76]: VarText(var[28]) -> text var=s[28]:text in 1
  20[92]: ConstInt(val=1) -> integer
  25[96]: ConstInt(val=-2147483648) -> integer
  30[100]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  31[92]: AppendText(var[52], v1: text)
  34[76]: VarText(var[52]) -> text var=test_value[52]:text["s"] in 1
  37[92]: ConstText(_value="ðŸ˜Š") -> text
  43[108]: EqText(v1: text, v2: text) -> boolean
  44[77]: GotoFalseWord(jump=50, if_false: boolean)
  47[76]: GotoWord(jump=102)
  50[76]: ClearText(var[4]) var=__work_1[4]:text in 1
  53[76]: ConstText(_value="Test failed ") -> text
  67[92]: AppendText(var[4], v1: text)
  70[76]: VarText(var[52]) -> text var=test_value[52]:text["s"] in 1
  73[92]: ConstInt(val=0) -> integer
  78[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  83[76]: ConstText(_value=" != "ðŸ˜Š"") -> text
  95[92]: AppendText(var[4], v1: text)
  98[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 101[92]: Panic(message: text)
 102[76]: FreeText(var[52])
 105[76]: FreeText(var[28])
 108[76]: FreeText(var[4])
 111[76]: Return(ret=0, value=0, discard=76)

