pub fn test() {
    test_value = {123 as integer + 2};
    assert(
        test_value == 125,
        "Test failed {test_value} != 125"
    );
}
fn test() {#1 block
  let __work_1:text = "";
  let test_value:integer = {#2 block
    OpAddInt(123i32, 2i32);
  }#2:integer;
  if OpEqInt(test_value, 125i32) null else OpPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125");
    __work_1;
  }#3:text);
}#1

byte-code for convert_to_int:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: ConstInt(val=123) -> integer
 681[32]: ConstInt(val=2) -> integer
 686[36]: AddInt(v1: integer, v2: integer) -> integer
 687[32]: VarInt(var[28]) -> integer
 690[36]: ConstInt(val=125) -> integer
 695[40]: EqInt(v1: integer, v2: integer) -> boolean
 696[33]: GotoFalseWord(jump=702, if_false: boolean)
 699[32]: GotoWord(jump=753)
 702[32]: ClearText(var[4])
 705[32]: ConstText(_value="Test failed ") -> text
 719[48]: AppendText(var[4], v1: text)
 722[32]: VarInt(var[28]) -> integer
 725[36]: ConstInt(val=0) -> integer
 730[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 737[32]: ConstText(_value=" != 125") -> text
 746[48]: AppendText(var[4], v1: text)
 749[32]: VarText(var[4]) -> text
 752[48]: Panic(message: text)
 753[32]: Return(ret=0, value=0, discard=32)

Execute test:
  675:[8] Text()
  676:[32] ConstInt(val=123) -> 123[32]
  681:[36] ConstInt(val=2) -> 2[36]
  686:[40] AddInt(v1=123[32], v2=2[36]) -> 125[32]
  687:[36] VarInt(var[32]) -> 125[36]
  690:[40] ConstInt(val=125) -> 125[40]
  695:[44] EqInt(v1=125[36], v2=125[40]) -> true[36]
  696:[37] GotoFalseWord(jump=702, if_false=true[36])
  699:[36] GotoWord(jump=753)
  753:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
