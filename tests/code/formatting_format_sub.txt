pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{txt[2..-1]}b"};
    assert(
        test_value == "aðŸ˜ŠðŸ™ƒ4b",
        "Test failed {test_value} != \"aðŸ˜ŠðŸ™ƒ4b\""
    );
}
fn test() {#1 block
  let __work_2:text = "";
  let __work_1:text = "";
  let test_value:text = {#2 block
    let txt:text = "12ðŸ˜ŠðŸ™ƒ45";
    {#3 formatting string
      OpClearText(__work_1);
      OpAppendText(__work_1, "a");
      OpFormatText(__work_1, OpGetTextSub(txt, 2i32, OpMinSingleInt(1i32)), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "b");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "aðŸ˜ŠðŸ™ƒ4b") null else OpPanic({#4 formatting string
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "aðŸ˜ŠðŸ™ƒ4b"");
    __work_2;
  }#4:text);
}#1

byte-code for format_sub:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Text()
 677[52]: Text()
 678[76]: Text()
 679[100]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
 693[116]: AppendText(var[76], v1: text)
 696[100]: ClearText(var[28])
 699[100]: ConstText(_value="a") -> text
 702[116]: AppendText(var[28], v1: text)
 705[100]: VarText(var[76]) -> text
 708[116]: ConstInt(val=2) -> integer
 713[120]: ConstInt(val=1) -> integer
 718[124]: MinSingleInt(v1: integer) -> integer
 719[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 720[116]: ConstInt(val=0) -> integer
 725[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 730[100]: ConstText(_value="b") -> text
 733[116]: AppendText(var[28], v1: text)
 736[100]: VarText(var[28]) -> text
 739[116]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 743[92]: AppendText(var[52], v1: text)
 746[76]: VarText(var[52]) -> text
 749[92]: ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> text
 762[108]: EqText(v1: text, v2: text) -> boolean
 763[77]: GotoFalseWord(jump=769, if_false: boolean)
 766[76]: GotoWord(jump=828)
 769[76]: ClearText(var[4])
 772[76]: ConstText(_value="Test failed ") -> text
 786[92]: AppendText(var[4], v1: text)
 789[76]: VarText(var[52]) -> text
 792[92]: ConstInt(val=0) -> integer
 797[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 802[76]: ConstText(_value=" != "aðŸ˜ŠðŸ™ƒ4b"") -> text
 821[92]: AppendText(var[4], v1: text)
 824[76]: VarText(var[4]) -> text
 827[92]: Panic(message: text)
 828[76]: Return(ret=0, value=0, discard=76)

Execute test:
  675:[8] Text()
  676:[32] Text()
  677:[56] Text()
  678:[80] Text()
  679:[104] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[104]
  693:[120] AppendText(var[80], v1="12ðŸ˜ŠðŸ™ƒ45"[104])
  696:[104] ClearText(var[32])
  699:[104] ConstText(_value="a") -> "a"[104]
  702:[120] AppendText(var[32], v1="a"[104])
  705:[104] VarText(var[80]) -> "12ðŸ˜ŠðŸ™ƒ45"[104]
  708:[120] ConstInt(val=2) -> 2[120]
  713:[124] ConstInt(val=1) -> 1[124]
  718:[128] MinSingleInt(v1=1[124]) -> -1[124]
  719:[128] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[104], from=2[120], till=-1[124]) -> "ðŸ˜ŠðŸ™ƒ4"[104]
  720:[120] ConstInt(val=0) -> 0[120]
  725:[124] FormatText(var[32], val="ðŸ˜ŠðŸ™ƒ4"[104], width=0[120], dir=-1, token=32)
  730:[104] ConstText(_value="b") -> "b"[104]
  733:[120] AppendText(var[32], v1="b"[104])
  736:[104] VarText(var[32]) -> "aðŸ˜ŠðŸ™ƒ4b"[104]
  739:[120] FreeStack(value=16, discard=24)
  743:[96] AppendText(var[56], v1="aðŸ˜ŠðŸ™ƒ4b"[80])
  746:[80] VarText(var[56]) -> "aðŸ˜ŠðŸ™ƒ4b"[80]
  749:[96] ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> "aðŸ˜ŠðŸ™ƒ4b"[96]
  762:[112] EqText(v1="aðŸ˜ŠðŸ™ƒ4b"[80], v2="aðŸ˜ŠðŸ™ƒ4b"[96]) -> true[80]
  763:[81] GotoFalseWord(jump=769, if_false=true[80])
  766:[80] GotoWord(jump=828)
  828:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
