pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{txt[2..-1]}b"};
    assert(
        test_value == "aðŸ˜ŠðŸ™ƒ4b",
        "Test failed {test_value} != \"aðŸ˜ŠðŸ™ƒ4b\""
    );
}
fn test() {#block(1):void
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text = {#block(2):text
    txt(2):text = "12ðŸ˜ŠðŸ™ƒ45";
    {#Formatted string(3):text
      __work_1(1):text = "a";
      OpFormatText(__work_1(1), OpGetTextSub(txt(2), 2i32, OpMinSingleInt(1i32)), 0i32, -1i32, 32i32);
      OpAppendText(__work_1(1), "b");
      OpFreeText(txt(2));
      __work_1(1);
    }#Formatted string(3):text;
  }#block(2):text;
  if OpEqText(test_value(1), "aðŸ˜ŠðŸ™ƒ4b") null else OpPanic({#Formatted string(4):text
    __work_2(1):text = "Test failed ";
    OpFormatText(__work_2(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_2(1), " != "aðŸ˜ŠðŸ™ƒ4b"");
    __work_2(1);
  }#Formatted string(4):text);
  OpFreeText(test_value(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for format_sub:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: Text() var=test_value[56]:text
   3[80]: Text() var=txt[80]:text
   4[104]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
  18[120]: AppendText(var[80], v1: text)
  21[104]: ClearText(var[32]) var=__work_1[32]:text
  24[104]: ConstText(_value="a") -> text
  27[120]: AppendText(var[32], v1: text)
  30[104]: VarText(var[80]) -> text var=txt[80]:text
  33[120]: ConstInt(val=2) -> integer
  38[124]: ConstInt(val=1) -> integer
  43[128]: MinSingleInt(v1: integer) -> integer
  44[128]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  45[120]: ConstInt(val=0) -> integer
  50[124]: FormatText(var[32], val: text, width: integer, dir=-1, token=32)
  55[104]: ConstText(_value="b") -> text
  58[120]: AppendText(var[32], v1: text)
  61[104]: FreeText(var[80])
  64[104]: VarText(var[32]) -> text var=__work_1[32]:text
  67[120]: FreeStack(value=16, discard=40)
  71[96]: AppendText(var[56], v1: text)
  74[80]: VarText(var[56]) -> text var=test_value[56]:text
  77[96]: ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> text
  90[112]: EqText(v1: text, v2: text) -> boolean
  91[81]: GotoFalseWord(jump=97, if_false: boolean)
  94[80]: GotoWord(jump=156)
  97[80]: ClearText(var[8]) var=__work_2[8]:text
 100[80]: ConstText(_value="Test failed ") -> text
 114[96]: AppendText(var[8], v1: text)
 117[80]: VarText(var[56]) -> text var=test_value[56]:text
 120[96]: ConstInt(val=0) -> integer
 125[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
 130[80]: ConstText(_value=" != "aðŸ˜ŠðŸ™ƒ4b"") -> text
 149[96]: AppendText(var[8], v1: text)
 152[80]: VarText(var[8]) -> text var=__work_2[8]:text
 155[96]: Panic(message: text)
 156[80]: FreeText(var[56])
 159[80]: FreeText(var[32])
 162[80]: FreeText(var[8])
 165[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] Text()
    4:[104] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[104]
   18:[120] AppendText(var[80], v1="12ðŸ˜ŠðŸ™ƒ45"[104])
   21:[104] ClearText(var[32])
   24:[104] ConstText(_value="a") -> "a"[104]
   27:[120] AppendText(var[32], v1="a"[104])
   30:[104] VarText(var[80]) -> "12ðŸ˜ŠðŸ™ƒ45"[104]
   33:[120] ConstInt(val=2) -> 2[120]
   38:[124] ConstInt(val=1) -> 1[124]
   43:[128] MinSingleInt(v1=1[124]) -> -1[124]
   44:[128] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[104], from=2[120], till=-1[124]) -> "ðŸ˜ŠðŸ™ƒ4"[104]
   45:[120] ConstInt(val=0) -> 0[120]
   50:[124] FormatText(var[32], val="ðŸ˜ŠðŸ™ƒ4"[104], width=0[120], dir=-1, token=32)
   55:[104] ConstText(_value="b") -> "b"[104]
   58:[120] AppendText(var[32], v1="b"[104])
   61:[104] FreeText(var[80])
   64:[104] VarText(var[32]) -> "aðŸ˜ŠðŸ™ƒ4b"[104]
   67:[120] FreeStack(value=16, discard=40)
   71:[96] AppendText(var[56], v1="aðŸ˜ŠðŸ™ƒ4b"[80])
   74:[80] VarText(var[56]) -> "aðŸ˜ŠðŸ™ƒ4b"[80]
   77:[96] ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> "aðŸ˜ŠðŸ™ƒ4b"[96]
   90:[112] EqText(v1="aðŸ˜ŠðŸ™ƒ4b"[80], v2="aðŸ˜ŠðŸ™ƒ4b"[96]) -> true[80]
   91:[81] GotoFalseWord(jump=97, if_false=true[80])
   94:[80] GotoWord(jump=156)
  156:[80] FreeText(var[56])
  159:[80] FreeText(var[32])
  162:[80] FreeText(var[8])
  165:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
