pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{txt[2..-1]}b"};
    assert(
        test_value == "aðŸ˜ŠðŸ™ƒ4b",
        "Test failed {test_value} != \"aðŸ˜ŠðŸ™ƒ4b\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    txt:text = "12ðŸ˜ŠðŸ™ƒ45";
    {#3 formatting string
      __work_1:text = "a";
      OpFormatText(__work_1, OpGetTextSub(txt, 2i32, OpMinSingleInt(1i32)), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "b");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "aðŸ˜ŠðŸ™ƒ4b") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "aðŸ˜ŠðŸ™ƒ4b"");
    __work_2;
  }#4:text);
}#1

byte-code for format_sub:test()
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: Text() var=txt[76]:text in 2
   4[100]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
  18[116]: AppendText(var[76], v1: text)
  21[100]: ClearText(var[28]) var=__work_1[28]:text in 1
  24[100]: ConstText(_value="a") -> text
  27[116]: AppendText(var[28], v1: text)
  30[100]: VarText(var[76]) -> text var=txt[76]:text in 2
  33[116]: ConstInt(val=2) -> integer
  38[120]: ConstInt(val=1) -> integer
  43[124]: MinSingleInt(v1: integer) -> integer
  44[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  45[116]: ConstInt(val=0) -> integer
  50[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
  55[100]: ConstText(_value="b") -> text
  58[116]: AppendText(var[28], v1: text)
  61[100]: VarText(var[28]) -> text var=__work_1[28]:text in 1
  64[116]: FreeText(var[76])
  67[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
  71[92]: AppendText(var[52], v1: text)
  74[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
  77[92]: ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> text
  90[108]: EqText(v1: text, v2: text) -> boolean
  91[77]: GotoFalseWord(jump=97, if_false: boolean)
  94[76]: GotoWord(jump=156)
  97[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 100[76]: ConstText(_value="Test failed ") -> text
 114[92]: AppendText(var[4], v1: text)
 117[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 120[92]: ConstInt(val=0) -> integer
 125[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 130[76]: ConstText(_value=" != "aðŸ˜ŠðŸ™ƒ4b"") -> text
 149[92]: AppendText(var[4], v1: text)
 152[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 155[92]: Panic(message: text)
 156[76]: FreeText(var[52])
 159[76]: FreeText(var[28])
 162[76]: FreeText(var[4])
 165[76]: Return(ret=0, value=0, discard=76)

