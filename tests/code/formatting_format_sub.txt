pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{txt[2..-1]}b"};
    assert(
        test_value == "aðŸ˜ŠðŸ™ƒ4b",
        "Test failed {test_value} != \"aðŸ˜ŠðŸ™ƒ4b\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    txt:text = "12ðŸ˜ŠðŸ™ƒ45";
    {#3 formatting string
      __work_1:text = "a";
      OpFormatText(__work_1, OpGetTextSub(txt, 2i32, OpMinSingleInt(1i32)), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "b");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "aðŸ˜ŠðŸ™ƒ4b") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "aðŸ˜ŠðŸ™ƒ4b"");
    __work_2;
  }#4:text);
}#1

byte-code for format_sub:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Text()
 684[52]: Text()
 685[76]: Text()
 686[100]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
 700[116]: AppendText(var[76], v1: text)
 703[100]: ClearText(var[28])
 706[100]: ConstText(_value="a") -> text
 709[116]: AppendText(var[28], v1: text)
 712[100]: VarText(var[76]) -> text
 715[116]: ConstInt(val=2) -> integer
 720[120]: ConstInt(val=1) -> integer
 725[124]: MinSingleInt(v1: integer) -> integer
 726[124]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 727[116]: ConstInt(val=0) -> integer
 732[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 737[100]: ConstText(_value="b") -> text
 740[116]: AppendText(var[28], v1: text)
 743[100]: VarText(var[28]) -> text
 746[116]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 750[92]: AppendText(var[52], v1: text)
 753[76]: VarText(var[52]) -> text
 756[92]: ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> text
 769[108]: EqText(v1: text, v2: text) -> boolean
 770[77]: GotoFalseWord(jump=776, if_false: boolean)
 773[76]: GotoWord(jump=835)
 776[76]: ClearText(var[4])
 779[76]: ConstText(_value="Test failed ") -> text
 793[92]: AppendText(var[4], v1: text)
 796[76]: VarText(var[52]) -> text
 799[92]: ConstInt(val=0) -> integer
 804[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 809[76]: ConstText(_value=" != "aðŸ˜ŠðŸ™ƒ4b"") -> text
 828[92]: AppendText(var[4], v1: text)
 831[76]: VarText(var[4]) -> text
 834[92]: Panic(message: text)
 835[76]: Return(ret=0, value=0, discard=76)

Execute test:
  682:[8] Text()
  683:[32] Text()
  684:[56] Text()
  685:[80] Text()
  686:[104] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[104]
  700:[120] AppendText(var[80], v1="12ðŸ˜ŠðŸ™ƒ45"[104])
  703:[104] ClearText(var[32])
  706:[104] ConstText(_value="a") -> "a"[104]
  709:[120] AppendText(var[32], v1="a"[104])
  712:[104] VarText(var[80]) -> "12ðŸ˜ŠðŸ™ƒ45"[104]
  715:[120] ConstInt(val=2) -> 2[120]
  720:[124] ConstInt(val=1) -> 1[124]
  725:[128] MinSingleInt(v1=1[124]) -> -1[124]
  726:[128] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[104], from=2[120], till=-1[124]) -> "ðŸ˜ŠðŸ™ƒ4"[104]
  727:[120] ConstInt(val=0) -> 0[120]
  732:[124] FormatText(var[32], val="ðŸ˜ŠðŸ™ƒ4"[104], width=0[120], dir=-1, token=32)
  737:[104] ConstText(_value="b") -> "b"[104]
  740:[120] AppendText(var[32], v1="b"[104])
  743:[104] VarText(var[32]) -> "aðŸ˜ŠðŸ™ƒ4b"[104]
  746:[120] FreeStack(value=16, discard=24)
  750:[96] AppendText(var[56], v1="aðŸ˜ŠðŸ™ƒ4b"[80])
  753:[80] VarText(var[56]) -> "aðŸ˜ŠðŸ™ƒ4b"[80]
  756:[96] ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> "aðŸ˜ŠðŸ™ƒ4b"[96]
  769:[112] EqText(v1="aðŸ˜ŠðŸ™ƒ4b"[80], v2="aðŸ˜ŠðŸ™ƒ4b"[96]) -> true[80]
  770:[81] GotoFalseWord(jump=776, if_false=true[80])
  773:[80] GotoWord(jump=835)
  835:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
