Test code:
pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{txt[2..-1]}b"};
    assert(
        test_value == "aðŸ˜ŠðŸ™ƒ4b",
        "Test failed {test_value} != \"aðŸ˜ŠðŸ™ƒ4b\""
    );
}

fn test {
  let test_value = {
    let txt = "12ðŸ˜ŠðŸ™ƒ45";
    {
      let append_10 = "a";
      OpFormatText(append_10, OpGetTextSub(txt, 2i32, OpMinSingleInt(1i32)), 0i32, -1i32, 32i32);
      OpAppendText(append_10, "b");
      append_10;
    };
  };
  if OpEqText(test_value, "aðŸ˜ŠðŸ™ƒ4b") {null} else {OpGenPanic({
    let append_11 = "Test failed ";
    OpFormatText(append_11, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_11, " != "aðŸ˜ŠðŸ™ƒ4b"");
    append_11;
  })};
}

byte-code for format_sub:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: Text()
 666[52]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
 680[68]: AppendText(var[28], v1: text)
 683[52]: Text()
 684[76]: ConstText(_value="a") -> text
 687[92]: AppendText(var[52], v1: text)
 690[76]: VarText(var[28]) -> text
 693[92]: ConstInt(val=2) -> integer
 698[96]: ConstInt(val=1) -> integer
 703[100]: MinSingleInt(v1: integer) -> integer
 704[100]: GetTextSub(v1: text, from: integer, till: integer) -> text
 705[92]: ConstInt(val=0) -> integer
 710[96]: FormatText(var[52], val: text, width: integer, dir=-1, token=32)
 715[76]: ConstText(_value="b") -> text
 718[92]: AppendText(var[52], v1: text)
 721[76]: VarText(var[52]) -> text
 724[92]: GenFreeStack(value=16, discard=24)
 728[68]: GenFreeStack(value=16, discard=24)
 732[44]: AppendText(var[4], v1: text)
 735[28]: VarText(var[4]) -> text
 738[44]: ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> text
 751[60]: EqText(v1: text, v2: text) -> boolean
 752[29]: GenGotoFalseWord(jump=758, if_false: boolean)
 755[28]: GenGotoWord(jump=819)
 758[28]: Text()
 759[52]: ConstText(_value="Test failed ") -> text
 773[68]: AppendText(var[28], v1: text)
 776[52]: VarText(var[4]) -> text
 779[68]: ConstInt(val=0) -> integer
 784[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 789[52]: ConstText(_value=" != "aðŸ˜ŠðŸ™ƒ4b"") -> text
 808[68]: AppendText(var[28], v1: text)
 811[52]: VarText(var[28]) -> text
 814[68]: GenFreeStack(value=16, discard=24)
 818[44]: GenPanic(message: text)
 819[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] Text()
  666:[52] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[52]
  680:[68] AppendText(var[28], v1="12ðŸ˜ŠðŸ™ƒ45"[52])
  683:[52] Text()
  684:[76] ConstText(_value="a") -> "a"[76]
  687:[92] AppendText(var[52], v1="a"[76])
  690:[76] VarText(var[28]) -> "12ðŸ˜ŠðŸ™ƒ45"[76]
  693:[92] ConstInt(val=2) -> 2[92]
  698:[96] ConstInt(val=1) -> 1[96]
  703:[100] MinSingleInt(v1=1[96]) -> -1[96]
  704:[100] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[76], from=2[92], till=-1[96]) -> "ðŸ˜ŠðŸ™ƒ4"[76]
  705:[92] ConstInt(val=0) -> 0[92]
  710:[96] FormatText(var[52], val="ðŸ˜ŠðŸ™ƒ4"[76], width=0[92], dir=-1, token=32)
  715:[76] ConstText(_value="b") -> "b"[76]
  718:[92] AppendText(var[52], v1="b"[76])
  721:[76] VarText(var[52]) -> "aðŸ˜ŠðŸ™ƒ4b"[76]
  724:[92] GenFreeStack(value=16, discard=24)
  728:[68] GenFreeStack(value=16, discard=24)
  732:[44] AppendText(var[4], v1="aðŸ˜ŠðŸ™ƒ4b"[28])
  735:[28] VarText(var[4]) -> "aðŸ˜ŠðŸ™ƒ4b"[28]
  738:[44] ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> "aðŸ˜ŠðŸ™ƒ4b"[44]
  751:[60] EqText(v1="aðŸ˜ŠðŸ™ƒ4b"[28], v2="aðŸ˜ŠðŸ™ƒ4b"[44]) -> true[28]
  752:[29] GenGotoFalseWord(jump=758, if_false=true[28])
  755:[28] GenGotoWord(jump=819)
  819:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
