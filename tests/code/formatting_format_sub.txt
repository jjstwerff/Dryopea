Test code:
pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{txt[2..-1]}b"};
    assert(
        test_value == "aðŸ˜ŠðŸ™ƒ4b",
        "Test failed {test_value} != \"aðŸ˜ŠðŸ™ƒ4b\""
    );
}

fn test {
  let test_value = {
    let txt = "12ðŸ˜ŠðŸ™ƒ45";
    {
      let append_10 = "a";
      OpFormatText(append_10, OpGetTextSub(txt, 2i32, OpMinSingleInt(1i32)), 0i32, -1i32, 32i32);
      OpAppendText(append_10, "b");
      append_10;
    };
  };
  if OpEqText(test_value, "aðŸ˜ŠðŸ™ƒ4b") {null} else {OpGenPanic({
    let append_11 = "Test failed ";
    OpFormatText(append_11, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_11, " != "aðŸ˜ŠðŸ™ƒ4b"");
    append_11;
  })};
}

byte-code for format_sub:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
 684[68]: AppendText(var[28], v1: text)
 687[52]: Text()
 688[76]: ConstText(_value="a") -> text
 691[92]: AppendText(var[52], v1: text)
 694[76]: VarText(var[28]) -> text
 697[92]: ConstInt(val=2) -> integer
 702[96]: ConstInt(val=1) -> integer
 707[100]: MinSingleInt(v1: integer) -> integer
 708[100]: GetTextSub(v1: text, from: integer, till: integer) -> text
 709[92]: ConstInt(val=0) -> integer
 714[96]: FormatText(var[52], val: text, width: integer, dir=-1, token=32)
 719[76]: ConstText(_value="b") -> text
 722[92]: AppendText(var[52], v1: text)
 725[76]: VarText(var[52]) -> text
 728[92]: GenFreeStack(value=16, discard=24)
 732[68]: GenFreeStack(value=16, discard=24)
 736[44]: AppendText(var[4], v1: text)
 739[28]: VarText(var[4]) -> text
 742[44]: ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> text
 755[60]: EqText(v1: text, v2: text) -> boolean
 756[29]: GenGotoFalseWord(jump=762, if_false: boolean)
 759[28]: GenGotoWord(jump=823)
 762[28]: Text()
 763[52]: ConstText(_value="Test failed ") -> text
 777[68]: AppendText(var[28], v1: text)
 780[52]: VarText(var[4]) -> text
 783[68]: ConstInt(val=0) -> integer
 788[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 793[52]: ConstText(_value=" != "aðŸ˜ŠðŸ™ƒ4b"") -> text
 812[68]: AppendText(var[28], v1: text)
 815[52]: VarText(var[28]) -> text
 818[68]: GenFreeStack(value=16, discard=24)
 822[44]: GenPanic(message: text)
 823[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Text()
  670:[52] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[52]
  684:[68] AppendText(var[28], v1="12ðŸ˜ŠðŸ™ƒ45"[52])
  687:[52] Text()
  688:[76] ConstText(_value="a") -> "a"[76]
  691:[92] AppendText(var[52], v1="a"[76])
  694:[76] VarText(var[28]) -> "12ðŸ˜ŠðŸ™ƒ45"[76]
  697:[92] ConstInt(val=2) -> 2[92]
  702:[96] ConstInt(val=1) -> 1[96]
  707:[100] MinSingleInt(v1=1[96]) -> -1[96]
  708:[100] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[76], from=2[92], till=-1[96]) -> "ðŸ˜ŠðŸ™ƒ4"[76]
  709:[92] ConstInt(val=0) -> 0[92]
  714:[96] FormatText(var[52], val="ðŸ˜ŠðŸ™ƒ4"[76], width=0[92], dir=-1, token=32)
  719:[76] ConstText(_value="b") -> "b"[76]
  722:[92] AppendText(var[52], v1="b"[76])
  725:[76] VarText(var[52]) -> "aðŸ˜ŠðŸ™ƒ4b"[76]
  728:[92] GenFreeStack(value=16, discard=24)
  732:[68] GenFreeStack(value=16, discard=24)
  736:[44] AppendText(var[4], v1="aðŸ˜ŠðŸ™ƒ4b"[28])
  739:[28] VarText(var[4]) -> "aðŸ˜ŠðŸ™ƒ4b"[28]
  742:[44] ConstText(_value="aðŸ˜ŠðŸ™ƒ4b") -> "aðŸ˜ŠðŸ™ƒ4b"[44]
  755:[60] EqText(v1="aðŸ˜ŠðŸ™ƒ4b"[28], v2="aðŸ˜ŠðŸ™ƒ4b"[44]) -> true[28]
  756:[29] GenGotoFalseWord(jump=762, if_false=true[28])
  759:[28] GenGotoWord(jump=823)
  823:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
