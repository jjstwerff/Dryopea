pub fn test() {
    test_value = {a="12345";a[1..len(a)-1]};
    assert(
        test_value == "234",
        "Test failed {test_value} != \"234\""
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  a(1):text = "";
  test_value(1):text["a"] = {#block(2):text["a"]
    a(1):text = "12345";
    OpGetTextSub(a(1), 1i32, OpMinInt(_tp_text_len(a(1)), 1i32));
  }#block(2):text["a"];
  if OpEqText(test_value(1), "234") null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatText(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != "234"");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(test_value(1));
  OpFreeText(a(1));
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for sub_str:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=a[32]:text
   2[56]: Text() var=test_value[56]:text["a"]
   3[80]: ClearText(var[32]) var=a[32]:text
   6[80]: ConstText(_value="12345") -> text
  13[96]: AppendText(var[32], v1: text)
  16[80]: VarText(var[32]) -> text var=a[32]:text
  19[96]: ConstInt(val=1) -> integer
  24[100]: VarText(var[32]) -> text var=a[32]:text
  27[116]: Call(size=0, to=318)
  34[104]: ConstInt(val=1) -> integer
  39[108]: MinInt(v1: integer, v2: integer) -> integer
  40[104]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  41[96]: AppendText(var[56], v1: text)
  44[80]: VarText(var[56]) -> text var=test_value[56]:text["a"]
  47[96]: ConstText(_value="234") -> text
  52[112]: EqText(v1: text, v2: text) -> boolean
  53[81]: GotoFalseWord(jump=59, if_false: boolean)
  56[80]: GotoWord(jump=110)
  59[80]: ClearText(var[8]) var=__work_1[8]:text
  62[80]: ConstText(_value="Test failed ") -> text
  76[96]: AppendText(var[8], v1: text)
  79[80]: VarText(var[56]) -> text var=test_value[56]:text["a"]
  82[96]: ConstInt(val=0) -> integer
  87[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  92[80]: ConstText(_value=" != "234"") -> text
 103[96]: AppendText(var[8], v1: text)
 106[80]: VarText(var[8]) -> text var=__work_1[8]:text
 109[96]: Panic(message: text)
 110[80]: FreeText(var[56])
 113[80]: FreeText(var[32])
 116[80]: FreeText(var[8])
 119[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value="12345") -> "12345"[80]
   13:[96] AppendText(var[32], v1="12345"[80])
   16:[80] VarText(var[32]) -> "12345"[80]
   19:[96] ConstInt(val=1) -> 1[96]
   24:[100] VarText(var[32]) -> "12345"[100]
   27:[116] Call(size=0, to=318)
  318:[120] ArgText(var[100]) -> "12345"[120]
  321:[136] LengthText(v1="12345"[120]) -> 5[120]
  322:[124] Return(ret=1153[116], value=4, discard=24) -> 5[100]
   34:[104] ConstInt(val=1) -> 1[104]
   39:[108] MinInt(v1=5[100], v2=1[104]) -> 4[100]
   40:[104] GetTextSub(v1="12345"[80], from=1[96], till=4[100]) -> "234"[80]
   41:[96] AppendText(var[56], v1="234"[80])
   44:[80] VarText(var[56]) -> "234"[80]
   47:[96] ConstText(_value="234") -> "234"[96]
   52:[112] EqText(v1="234"[80], v2="234"[96]) -> true[80]
   53:[81] GotoFalseWord(jump=59, if_false=true[80])
   56:[80] GotoWord(jump=110)
  110:[80] FreeText(var[56])
  113:[80] FreeText(var[32])
  116:[80] FreeText(var[8])
  119:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
