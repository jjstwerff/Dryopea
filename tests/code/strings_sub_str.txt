Test code:
pub fn test() {
    test_value = {a="12345";a[1..len(a)-1]};
    assert(
        test_value == "234",
        "Test failed {test_value} != \"234\""
    );
}

fn test {
  let test_value = {
    let a = "12345";
    OpGetTextSub(a, 1i32, OpMinInt(_tp_text_len(a), 1i32));
  };
  if OpEqText(test_value, "234") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "234"");
    append_9;
  })};
}

byte-code for sub_str:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: Text()
 666[52]: ConstText(_value="12345") -> text
 673[68]: AppendText(var[28], v1: text)
 676[52]: VarText(var[28]) -> text
 679[68]: ConstInt(val=1) -> integer
 684[72]: VarText(var[28]) -> text
 687[88]: GenCall(size=0, to=318)
 694[76]: ConstInt(val=1) -> integer
 699[80]: MinInt(v1: integer, v2: integer) -> integer
 700[76]: GetTextSub(v1: text, from: integer, till: integer) -> text
 701[68]: GenFreeStack(value=16, discard=24)
 705[44]: AppendText(var[4], v1: text)
 708[28]: VarText(var[4]) -> text
 711[44]: ConstText(_value="234") -> text
 716[60]: EqText(v1: text, v2: text) -> boolean
 717[29]: GenGotoFalseWord(jump=723, if_false: boolean)
 720[28]: GenGotoWord(jump=776)
 723[28]: Text()
 724[52]: ConstText(_value="Test failed ") -> text
 738[68]: AppendText(var[28], v1: text)
 741[52]: VarText(var[4]) -> text
 744[68]: ConstInt(val=0) -> integer
 749[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 754[52]: ConstText(_value=" != "234"") -> text
 765[68]: AppendText(var[28], v1: text)
 768[52]: VarText(var[28]) -> text
 771[68]: GenFreeStack(value=16, discard=24)
 775[44]: GenPanic(message: text)
 776[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] Text()
  666:[52] ConstText(_value="12345") -> "12345"[52]
  673:[68] AppendText(var[28], v1="12345"[52])
  676:[52] VarText(var[28]) -> "12345"[52]
  679:[68] ConstInt(val=1) -> 1[68]
  684:[72] VarText(var[28]) -> "12345"[72]
  687:[88] GenCall(size=0, to=318)
  318:[92] ArgText(var[72]) -> "12345"[92]
  321:[108] LengthText(v1="12345"[92]) -> 5[92]
  322:[96] GenReturn(ret=694[88], value=4, discard=24)
  694:[76] ConstInt(val=1) -> 1[76]
  699:[80] MinInt(v1=5[72], v2=1[76]) -> 4[72]
  700:[76] GetTextSub(v1="12345"[52], from=1[68], till=4[72]) -> "234"[52]
  701:[68] GenFreeStack(value=16, discard=24)
  705:[44] AppendText(var[4], v1="234"[28])
  708:[28] VarText(var[4]) -> "234"[28]
  711:[44] ConstText(_value="234") -> "234"[44]
  716:[60] EqText(v1="234"[28], v2="234"[44]) -> true[28]
  717:[29] GenGotoFalseWord(jump=723, if_false=true[28])
  720:[28] GenGotoWord(jump=776)
  776:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
