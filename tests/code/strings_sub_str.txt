pub fn test() {
    test_value = {a="12345";a[1..len(a)-1]};
    assert(
        test_value == "234",
        "Test failed {test_value} != \"234\""
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    let a = "12345";
    OpGetTextSub(a, 1i32, OpMinInt(_tp_text_len(a), 1i32));
  }#2;
  if OpEqText(test_value, "234") null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "234"");
    __work_1;
  }#3);
}#1

byte-code for sub_str:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: Text()
 671[76]: ConstText(_value="12345") -> text(false, [])
 678[92]: AppendText(var[52], v1: text(false, []))
 681[76]: VarText(var[52]) -> text(false, [])
 684[92]: ConstInt(val=1) -> integer
 689[96]: VarText(var[52]) -> text(false, [])
 692[112]: GenCall(size=0, to=318)
 699[100]: ConstInt(val=1) -> integer
 704[104]: MinInt(v1: integer, v2: integer) -> integer
 705[100]: GetTextSub(v1: text(false, []), from: integer, till: integer) -> text(false, [])
 706[92]: GenFreeStack(value=16, discard=24)
 710[68]: AppendText(var[28], v1: text(false, []))
 713[52]: VarText(var[28]) -> text(false, [])
 716[68]: ConstText(_value="234") -> text(false, [])
 721[84]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 722[53]: GenGotoFalseWord(jump=728, if_false: boolean)
 725[52]: GenGotoWord(jump=779)
 728[52]: ClearText(var[4])
 731[52]: ConstText(_value="Test failed ") -> text(false, [])
 745[68]: AppendText(var[4], v1: text(false, []))
 748[52]: VarText(var[28]) -> text(false, [])
 751[68]: ConstInt(val=0) -> integer
 756[72]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 761[52]: ConstText(_value=" != "234"") -> text(false, [])
 772[68]: AppendText(var[4], v1: text(false, []))
 775[52]: VarText(var[4]) -> text(false, [])
 778[68]: GenPanic(message: text(false, []))
 779[52]: GenReturn(ret=0, value=0, discard=52)

Execute test:
  668:[8] Text()
  669:[32] Text()
  670:[56] Text()
  671:[80] ConstText(_value="12345") -> "12345"[80]
  678:[96] AppendText(var[56], v1="12345"[80])
  681:[80] VarText(var[56]) -> "12345"[80]
  684:[96] ConstInt(val=1) -> 1[96]
  689:[100] VarText(var[56]) -> "12345"[100]
  692:[116] GenCall(size=0, to=318)
  318:[120] ArgText(var[100]) -> "12345"[120]
  321:[136] LengthText(v1="12345"[120]) -> 5[120]
  322:[124] GenReturn(ret=699[116], value=4, discard=24)
  699:[104] ConstInt(val=1) -> 1[104]
  704:[108] MinInt(v1=5[100], v2=1[104]) -> 4[100]
  705:[104] GetTextSub(v1="12345"[80], from=1[96], till=4[100]) -> "234"[80]
  706:[96] GenFreeStack(value=16, discard=24)
  710:[72] AppendText(var[32], v1="234"[56])
  713:[56] VarText(var[32]) -> "234"[56]
  716:[72] ConstText(_value="234") -> "234"[72]
  721:[88] EqText(v1="234"[56], v2="234"[72]) -> true[56]
  722:[57] GenGotoFalseWord(jump=728, if_false=true[56])
  725:[56] GenGotoWord(jump=779)
  779:[56] GenReturn(ret=4294967295[4], value=0, discard=52)
Finished
