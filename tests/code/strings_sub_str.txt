pub fn test() {
    test_value = {a="12345";a[1..len(a)-1]};
    assert(
        test_value == "234",
        "Test failed {test_value} != \"234\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text["a"] = {#2 block
    a:text = "12345";
    OpGetTextSub(a, 1i32, OpMinInt(_tp_text_len(a), 1i32));
  }#2:text["a"];
  if OpEqText(test_value, "234") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "234"");
    __work_1;
  }#3:text);
}#1

byte-code for sub_str:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Text()
 684[52]: Text()
 685[76]: ConstText(_value="12345") -> text
 692[92]: AppendText(var[52], v1: text)
 695[76]: VarText(var[52]) -> text
 698[92]: ConstInt(val=1) -> integer
 703[96]: VarText(var[52]) -> text
 706[112]: Call(size=0, to=318)
 713[100]: ConstInt(val=1) -> integer
 718[104]: MinInt(v1: integer, v2: integer) -> integer
 719[100]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 720[92]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 724[68]: AppendText(var[28], v1: text)
 727[52]: VarText(var[28]) -> text
 730[68]: ConstText(_value="234") -> text
 735[84]: EqText(v1: text, v2: text) -> boolean
 736[53]: GotoFalseWord(jump=742, if_false: boolean)
 739[52]: GotoWord(jump=793)
 742[52]: ClearText(var[4])
 745[52]: ConstText(_value="Test failed ") -> text
 759[68]: AppendText(var[4], v1: text)
 762[52]: VarText(var[28]) -> text
 765[68]: ConstInt(val=0) -> integer
 770[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 775[52]: ConstText(_value=" != "234"") -> text
 786[68]: AppendText(var[4], v1: text)
 789[52]: VarText(var[4]) -> text
 792[68]: Panic(message: text)
 793[52]: Return(ret=0, value=0, discard=52)

Execute test:
  682:[8] Text()
  683:[32] Text()
  684:[56] Text()
  685:[80] ConstText(_value="12345") -> "12345"[80]
  692:[96] AppendText(var[56], v1="12345"[80])
  695:[80] VarText(var[56]) -> "12345"[80]
  698:[96] ConstInt(val=1) -> 1[96]
  703:[100] VarText(var[56]) -> "12345"[100]
  706:[116] Call(size=0, to=318)
  318:[120] ArgText(var[100]) -> "12345"[120]
  321:[136] LengthText(v1="12345"[120]) -> 5[120]
  322:[124] Return(ret=713[116], value=4, discard=24) -> 5[100]
  713:[104] ConstInt(val=1) -> 1[104]
  718:[108] MinInt(v1=5[100], v2=1[104]) -> 4[100]
  719:[104] GetTextSub(v1="12345"[80], from=1[96], till=4[100]) -> "234"[80]
  720:[96] FreeStack(value=16, discard=24)
  724:[72] AppendText(var[32], v1="234"[56])
  727:[56] VarText(var[32]) -> "234"[56]
  730:[72] ConstText(_value="234") -> "234"[72]
  735:[88] EqText(v1="234"[56], v2="234"[72]) -> true[56]
  736:[57] GotoFalseWord(jump=742, if_false=true[56])
  739:[56] GotoWord(jump=793)
  793:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
