pub fn test() {
    test_value = {a="12345";a[1..len(a)-1]};
    assert(
        test_value == "234",
        "Test failed {test_value} != \"234\""
    );
}
fn test() {#1 block
  let __work_1:text = "";
  let test_value:text["a"] = {#2 block
    let a:text = "12345";
    OpGetTextSub(a, 1i32, OpMinInt(_tp_text_len(a), 1i32));
  }#2:text["a"];
  if OpEqText(test_value, "234") null else OpPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "234"");
    __work_1;
  }#3:text);
}#1

byte-code for sub_str:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Text()
 677[52]: Text()
 678[76]: ConstText(_value="12345") -> text
 685[92]: AppendText(var[52], v1: text)
 688[76]: VarText(var[52]) -> text
 691[92]: ConstInt(val=1) -> integer
 696[96]: VarText(var[52]) -> text
 699[112]: Call(size=0, to=318)
 706[100]: ConstInt(val=1) -> integer
 711[104]: MinInt(v1: integer, v2: integer) -> integer
 712[100]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 713[92]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 717[68]: AppendText(var[28], v1: text)
 720[52]: VarText(var[28]) -> text
 723[68]: ConstText(_value="234") -> text
 728[84]: EqText(v1: text, v2: text) -> boolean
 729[53]: GotoFalseWord(jump=735, if_false: boolean)
 732[52]: GotoWord(jump=786)
 735[52]: ClearText(var[4])
 738[52]: ConstText(_value="Test failed ") -> text
 752[68]: AppendText(var[4], v1: text)
 755[52]: VarText(var[28]) -> text
 758[68]: ConstInt(val=0) -> integer
 763[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 768[52]: ConstText(_value=" != "234"") -> text
 779[68]: AppendText(var[4], v1: text)
 782[52]: VarText(var[4]) -> text
 785[68]: Panic(message: text)
 786[52]: Return(ret=0, value=0, discard=52)

Execute test:
  675:[8] Text()
  676:[32] Text()
  677:[56] Text()
  678:[80] ConstText(_value="12345") -> "12345"[80]
  685:[96] AppendText(var[56], v1="12345"[80])
  688:[80] VarText(var[56]) -> "12345"[80]
  691:[96] ConstInt(val=1) -> 1[96]
  696:[100] VarText(var[56]) -> "12345"[100]
  699:[116] Call(size=0, to=318)
  318:[120] ArgText(var[100]) -> "12345"[120]
  321:[136] LengthText(v1="12345"[120]) -> 5[120]
  322:[124] Return(ret=706[116], value=4, discard=24) -> 5[100]
  706:[104] ConstInt(val=1) -> 1[104]
  711:[108] MinInt(v1=5[100], v2=1[104]) -> 4[100]
  712:[104] GetTextSub(v1="12345"[80], from=1[96], till=4[100]) -> "234"[80]
  713:[96] FreeStack(value=16, discard=24)
  717:[72] AppendText(var[32], v1="234"[56])
  720:[56] VarText(var[32]) -> "234"[56]
  723:[72] ConstText(_value="234") -> "234"[72]
  728:[88] EqText(v1="234"[56], v2="234"[72]) -> true[56]
  729:[57] GotoFalseWord(jump=735, if_false=true[56])
  732:[56] GotoWord(jump=786)
  786:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
