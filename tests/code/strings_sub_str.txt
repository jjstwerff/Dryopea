Test code:
pub fn test() {
    test_value = {a="12345";a[1..len(a)-1]};
    assert(
        test_value == "234",
        "Test failed {test_value} != \"234\""
    );
}

fn test {
  let test_value = {
    let a = "12345";
    OpGetTextSub(a, 1i32, OpMinInt(_tp_text_len(a), 1i32));
  };
  if OpEqText(test_value, "234") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "234"");
    append_9;
  })};
}

byte-code for sub_str:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="12345") -> text
 677[68]: AppendText(var[28], v1: text)
 680[52]: VarText(var[28]) -> text
 683[68]: ConstInt(val=1) -> integer
 688[72]: VarText(var[28]) -> text
 691[88]: GenCall(size=0, to=318)
 698[76]: ConstInt(val=1) -> integer
 703[80]: MinInt(v1: integer, v2: integer) -> integer
 704[76]: GetTextSub(v1: text, from: integer, till: integer) -> text
 705[68]: GenFreeStack(value=16, discard=24)
 709[44]: AppendText(var[4], v1: text)
 712[28]: VarText(var[4]) -> text
 715[44]: ConstText(_value="234") -> text
 720[60]: EqText(v1: text, v2: text) -> boolean
 721[29]: GenGotoFalseWord(jump=727, if_false: boolean)
 724[28]: GenGotoWord(jump=780)
 727[28]: Text()
 728[52]: ConstText(_value="Test failed ") -> text
 742[68]: AppendText(var[28], v1: text)
 745[52]: VarText(var[4]) -> text
 748[68]: ConstInt(val=0) -> integer
 753[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 758[52]: ConstText(_value=" != "234"") -> text
 769[68]: AppendText(var[28], v1: text)
 772[52]: VarText(var[28]) -> text
 775[68]: GenFreeStack(value=16, discard=24)
 779[44]: GenPanic(message: text)
 780[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Text()
  670:[52] ConstText(_value="12345") -> "12345"[52]
  677:[68] AppendText(var[28], v1="12345"[52])
  680:[52] VarText(var[28]) -> "12345"[52]
  683:[68] ConstInt(val=1) -> 1[68]
  688:[72] VarText(var[28]) -> "12345"[72]
  691:[88] GenCall(size=0, to=318)
  318:[92] ArgText(var[72]) -> "12345"[92]
  321:[108] LengthText(v1="12345"[92]) -> 5[92]
  322:[96] GenReturn(ret=698[88], value=4, discard=24)
  698:[76] ConstInt(val=1) -> 1[76]
  703:[80] MinInt(v1=5[72], v2=1[76]) -> 4[72]
  704:[76] GetTextSub(v1="12345"[52], from=1[68], till=4[72]) -> "234"[52]
  705:[68] GenFreeStack(value=16, discard=24)
  709:[44] AppendText(var[4], v1="234"[28])
  712:[28] VarText(var[4]) -> "234"[28]
  715:[44] ConstText(_value="234") -> "234"[44]
  720:[60] EqText(v1="234"[28], v2="234"[44]) -> true[28]
  721:[29] GenGotoFalseWord(jump=727, if_false=true[28])
  724:[28] GenGotoWord(jump=780)
  780:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
