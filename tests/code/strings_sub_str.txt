pub fn test() {
    test_value = {a="12345";a[1..len(a)-1]};
    assert(
        test_value == "234",
        "Test failed {test_value} != \"234\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  a:text = "";
  test_value:text["a"] = {#2 block
    a:text = "12345";
    OpGetTextSub(a, 1i32, OpMinInt(_tp_text_len(a), 1i32));
  }#2:text["a"];
  if OpEqText(test_value, "234") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "234"");
    __work_1;
  }#3:text);
}#1

byte-code for sub_str:test()
 645[0]: return-address
 645[4]: Text() var=__work_1[4]:text in 1
 646[28]: Text() var=a[28]:text in 1
 647[52]: Text() var=test_value[52]:text["a"] in 1
 648[76]: ClearText(var[28]) var=a[28]:text in 1
 651[76]: ConstText(_value="12345") -> text
 658[92]: AppendText(var[28], v1: text)
 661[76]: VarText(var[28]) -> text var=a[28]:text in 1
 664[92]: ConstInt(val=1) -> integer
 669[96]: VarText(var[28]) -> text var=a[28]:text in 1
 672[112]: Call(size=0, to=318)
 679[100]: ConstInt(val=1) -> integer
 684[104]: MinInt(v1: integer, v2: integer) -> integer
 685[100]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 686[92]: AppendText(var[52], v1: text)
 689[76]: VarText(var[52]) -> text var=test_value[52]:text["a"] in 1
 692[92]: ConstText(_value="234") -> text
 697[108]: EqText(v1: text, v2: text) -> boolean
 698[77]: GotoFalseWord(jump=704, if_false: boolean)
 701[76]: GotoWord(jump=755)
 704[76]: ClearText(var[4]) var=__work_1[4]:text in 1
 707[76]: ConstText(_value="Test failed ") -> text
 721[92]: AppendText(var[4], v1: text)
 724[76]: VarText(var[52]) -> text var=test_value[52]:text["a"] in 1
 727[92]: ConstInt(val=0) -> integer
 732[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 737[76]: ConstText(_value=" != "234"") -> text
 748[92]: AppendText(var[4], v1: text)
 751[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 754[92]: Panic(message: text)
 755[76]: FreeText(var[52])
 758[76]: FreeText(var[28])
 761[76]: FreeText(var[4])
 764[76]: Return(ret=0, value=0, discard=76)

Execute test:
  645:[8] Text()
  646:[32] Text()
  647:[56] Text()
  648:[80] ClearText(var[32])
  651:[80] ConstText(_value="12345") -> "12345"[80]
  658:[96] AppendText(var[32], v1="12345"[80])
  661:[80] VarText(var[32]) -> "12345"[80]
  664:[96] ConstInt(val=1) -> 1[96]
  669:[100] VarText(var[32]) -> "12345"[100]
  672:[116] Call(size=0, to=318)
  318:[120] ArgText(var[100]) -> "12345"[120]
  321:[136] LengthText(v1="12345"[120]) -> 5[120]
  322:[124] Return(ret=679[116], value=4, discard=24) -> 5[100]
  679:[104] ConstInt(val=1) -> 1[104]
  684:[108] MinInt(v1=5[100], v2=1[104]) -> 4[100]
  685:[104] GetTextSub(v1="12345"[80], from=1[96], till=4[100]) -> "234"[80]
  686:[96] AppendText(var[56], v1="234"[80])
  689:[80] VarText(var[56]) -> "234"[80]
  692:[96] ConstText(_value="234") -> "234"[96]
  697:[112] EqText(v1="234"[80], v2="234"[96]) -> true[80]
  698:[81] GotoFalseWord(jump=704, if_false=true[80])
  701:[80] GotoWord(jump=755)
  755:[80] FreeText(var[56])
  758:[80] FreeText(var[32])
  761:[80] FreeText(var[8])
  764:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
