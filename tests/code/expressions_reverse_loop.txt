Test code:
pub fn test() {
    test_value = {b = 0; for a in rev(1..=6) { b=b*10+a }; b};
    assert(
        test_value == 654321,
        "Test failed {test_value} != 654321"
    );
}

fn test {
  let __work_4 = "";
  let test_value = {
    let b = 0i32;
    {
      let a#index = OpConvIntFromNull();
      loop {
        let a = {
          a#index = if OpNot(OpConvBoolFromInt(a#index)) {6i32} else {OpMinInt(a#index, 1i32)};
          if OpLtInt(a#index, 1i32) {break(0)} else {null};
          a#index;
        };
        {
          b = OpAddInt(OpMulInt(b, 10i32), a);
        };
      };
    };
    b;
  };
  if OpEqInt(test_value, 654321i32) {null} else {OpGenPanic({
    OpClearText(__work_4);
    OpAppendText(__work_4, "Test failed ");
    OpFormatInt(__work_4, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_4, " != 654321");
    __work_4;
  })};
}

byte-code for reverse_loop:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: ConstInt(val=0) -> integer
 679[32]: ConvIntFromNull() -> integer
 680[36]: VarInt(var[32]) -> integer
 683[40]: ConvBoolFromInt(v1: integer) -> boolean
 684[37]: Not(v1: boolean) -> boolean
 685[37]: GenGotoFalseWord(jump=696, if_false: boolean)
 688[36]: ConstInt(val=6) -> integer
 693[40]: GenGotoWord(jump=705)
 696[36]: VarInt(var[32]) -> integer
 699[40]: ConstInt(val=1) -> integer
 704[44]: MinInt(v1: integer, v2: integer) -> integer
 705[40]: PutInt(var[32], value: integer)
 708[36]: VarInt(var[32]) -> integer
 711[40]: ConstInt(val=1) -> integer
 716[44]: LtInt(v1: integer, v2: integer) -> boolean
 717[37]: GenGotoFalseWord(jump=723, if_false: boolean)
 720[36]: GenGotoWord(jump=749)
 723[36]: VarInt(var[32]) -> integer
 726[40]: VarInt(var[28]) -> integer
 729[44]: ConstInt(val=10) -> integer
 734[48]: MulInt(v1: integer, v2: integer) -> integer
 735[44]: VarInt(var[36]) -> integer
 738[48]: AddInt(v1: integer, v2: integer) -> integer
 739[44]: PutInt(var[28], value: integer)
 742[40]: GenFreeStack(value=0, discard=4)
 746[36]: GenGotoWord(jump=680)
 749[36]: GenFreeStack(value=0, discard=4)
 753[32]: VarInt(var[28]) -> integer
 756[36]: GenFreeStack(value=4, discard=4)
 760[32]: VarInt(var[28]) -> integer
 763[36]: ConstInt(val=654321) -> integer
 768[40]: EqInt(v1: integer, v2: integer) -> boolean
 769[33]: GenGotoFalseWord(jump=775, if_false: boolean)
 772[32]: GenGotoWord(jump=829)
 775[32]: ClearText(var[4])
 778[32]: ConstText(_value="Test failed ") -> text(false)
 792[48]: AppendText(var[4], v1: text(false))
 795[32]: VarInt(var[28]) -> integer
 798[36]: ConstInt(val=0) -> integer
 803[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 810[32]: ConstText(_value=" != 654321") -> text(false)
 822[48]: AppendText(var[4], v1: text(false))
 825[32]: VarText(var[4]) -> text(false)
 828[48]: GenPanic(message: text(false))
 829[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] ConstInt(val=0) -> 0[32]
  679:[36] ConvIntFromNull() -> -2147483648[36]
  680:[40] VarInt(var[36]) -> -2147483648[40]
  683:[44] ConvBoolFromInt(v1=-2147483648[40]) -> false[40]
  684:[41] Not(v1=false[40]) -> true[40]
  685:[41] GenGotoFalseWord(jump=696, if_false=true[40])
  688:[40] ConstInt(val=6) -> 6[40]
  693:[44] GenGotoWord(jump=705)
  705:[44] PutInt(var[36], value=6[40])
  708:[40] VarInt(var[36]) -> 6[40]
  711:[44] ConstInt(val=1) -> 1[44]
  716:[48] LtInt(v1=6[40], v2=1[44]) -> false[40]
  717:[41] GenGotoFalseWord(jump=723, if_false=false[40])
  723:[40] VarInt(var[36]) -> 6[40]
  726:[44] VarInt(var[32]) -> 0[44]
  729:[48] ConstInt(val=10) -> 10[48]
  734:[52] MulInt(v1=0[44], v2=10[48]) -> 0[44]
  735:[48] VarInt(var[40]) -> 6[48]
  738:[52] AddInt(v1=0[44], v2=6[48]) -> 6[44]
  739:[48] PutInt(var[32], value=6[44])
  742:[44] GenFreeStack(value=0, discard=4)
  746:[40] GenGotoWord(jump=680)
  680:[40] VarInt(var[36]) -> 6[40]
  683:[44] ConvBoolFromInt(v1=6[40]) -> true[40]
  684:[41] Not(v1=true[40]) -> false[40]
  685:[41] GenGotoFalseWord(jump=696, if_false=false[40])
  696:[40] VarInt(var[36]) -> 6[40]
  699:[44] ConstInt(val=1) -> 1[44]
  704:[48] MinInt(v1=6[40], v2=1[44]) -> 5[40]
  705:[44] PutInt(var[36], value=5[40])
  708:[40] VarInt(var[36]) -> 5[40]
  711:[44] ConstInt(val=1) -> 1[44]
  716:[48] LtInt(v1=5[40], v2=1[44]) -> false[40]
  717:[41] GenGotoFalseWord(jump=723, if_false=false[40])
  723:[40] VarInt(var[36]) -> 5[40]
  726:[44] VarInt(var[32]) -> 6[44]
  729:[48] ConstInt(val=10) -> 10[48]
  734:[52] MulInt(v1=6[44], v2=10[48]) -> 60[44]
  735:[48] VarInt(var[40]) -> 5[48]
  738:[52] AddInt(v1=60[44], v2=5[48]) -> 65[44]
  739:[48] PutInt(var[32], value=65[44])
  742:[44] GenFreeStack(value=0, discard=4)
  746:[40] GenGotoWord(jump=680)
  680:[40] VarInt(var[36]) -> 5[40]
  683:[44] ConvBoolFromInt(v1=5[40]) -> true[40]
  684:[41] Not(v1=true[40]) -> false[40]
  685:[41] GenGotoFalseWord(jump=696, if_false=false[40])
  696:[40] VarInt(var[36]) -> 5[40]
  699:[44] ConstInt(val=1) -> 1[44]
  704:[48] MinInt(v1=5[40], v2=1[44]) -> 4[40]
  705:[44] PutInt(var[36], value=4[40])
  708:[40] VarInt(var[36]) -> 4[40]
  711:[44] ConstInt(val=1) -> 1[44]
  716:[48] LtInt(v1=4[40], v2=1[44]) -> false[40]
  717:[41] GenGotoFalseWord(jump=723, if_false=false[40])
  723:[40] VarInt(var[36]) -> 4[40]
  726:[44] VarInt(var[32]) -> 65[44]
  729:[48] ConstInt(val=10) -> 10[48]
  734:[52] MulInt(v1=65[44], v2=10[48]) -> 650[44]
  735:[48] VarInt(var[40]) -> 4[48]
  738:[52] AddInt(v1=650[44], v2=4[48]) -> 654[44]
  739:[48] PutInt(var[32], value=654[44])
  742:[44] GenFreeStack(value=0, discard=4)
  746:[40] GenGotoWord(jump=680)
  680:[40] VarInt(var[36]) -> 4[40]
  683:[44] ConvBoolFromInt(v1=4[40]) -> true[40]
  684:[41] Not(v1=true[40]) -> false[40]
  685:[41] GenGotoFalseWord(jump=696, if_false=false[40])
  696:[40] VarInt(var[36]) -> 4[40]
  699:[44] ConstInt(val=1) -> 1[44]
  704:[48] MinInt(v1=4[40], v2=1[44]) -> 3[40]
  705:[44] PutInt(var[36], value=3[40])
  708:[40] VarInt(var[36]) -> 3[40]
  711:[44] ConstInt(val=1) -> 1[44]
  716:[48] LtInt(v1=3[40], v2=1[44]) -> false[40]
  717:[41] GenGotoFalseWord(jump=723, if_false=false[40])
  723:[40] VarInt(var[36]) -> 3[40]
  726:[44] VarInt(var[32]) -> 654[44]
  729:[48] ConstInt(val=10) -> 10[48]
  734:[52] MulInt(v1=654[44], v2=10[48]) -> 6540[44]
  735:[48] VarInt(var[40]) -> 3[48]
  738:[52] AddInt(v1=6540[44], v2=3[48]) -> 6543[44]
  739:[48] PutInt(var[32], value=6543[44])
  742:[44] GenFreeStack(value=0, discard=4)
  746:[40] GenGotoWord(jump=680)
  680:[40] VarInt(var[36]) -> 3[40]
  683:[44] ConvBoolFromInt(v1=3[40]) -> true[40]
  684:[41] Not(v1=true[40]) -> false[40]
  685:[41] GenGotoFalseWord(jump=696, if_false=false[40])
  696:[40] VarInt(var[36]) -> 3[40]
  699:[44] ConstInt(val=1) -> 1[44]
  704:[48] MinInt(v1=3[40], v2=1[44]) -> 2[40]
  705:[44] PutInt(var[36], value=2[40])
  708:[40] VarInt(var[36]) -> 2[40]
  711:[44] ConstInt(val=1) -> 1[44]
  716:[48] LtInt(v1=2[40], v2=1[44]) -> false[40]
  717:[41] GenGotoFalseWord(jump=723, if_false=false[40])
  723:[40] VarInt(var[36]) -> 2[40]
  726:[44] VarInt(var[32]) -> 6543[44]
  729:[48] ConstInt(val=10) -> 10[48]
  734:[52] MulInt(v1=6543[44], v2=10[48]) -> 65430[44]
  735:[48] VarInt(var[40]) -> 2[48]
  738:[52] AddInt(v1=65430[44], v2=2[48]) -> 65432[44]
  739:[48] PutInt(var[32], value=65432[44])
  742:[44] GenFreeStack(value=0, discard=4)
  746:[40] GenGotoWord(jump=680)
  680:[40] VarInt(var[36]) -> 2[40]
  683:[44] ConvBoolFromInt(v1=2[40]) -> true[40]
  684:[41] Not(v1=true[40]) -> false[40]
  685:[41] GenGotoFalseWord(jump=696, if_false=false[40])
  696:[40] VarInt(var[36]) -> 2[40]
  699:[44] ConstInt(val=1) -> 1[44]
  704:[48] MinInt(v1=2[40], v2=1[44]) -> 1[40]
  705:[44] PutInt(var[36], value=1[40])
  708:[40] VarInt(var[36]) -> 1[40]
  711:[44] ConstInt(val=1) -> 1[44]
  716:[48] LtInt(v1=1[40], v2=1[44]) -> false[40]
  717:[41] GenGotoFalseWord(jump=723, if_false=false[40])
  723:[40] VarInt(var[36]) -> 1[40]
  726:[44] VarInt(var[32]) -> 65432[44]
  729:[48] ConstInt(val=10) -> 10[48]
  734:[52] MulInt(v1=65432[44], v2=10[48]) -> 654320[44]
  735:[48] VarInt(var[40]) -> 1[48]
  738:[52] AddInt(v1=654320[44], v2=1[48]) -> 654321[44]
  739:[48] PutInt(var[32], value=654321[44])
  742:[44] GenFreeStack(value=0, discard=4)
  746:[40] GenGotoWord(jump=680)
  680:[40] VarInt(var[36]) -> 1[40]
  683:[44] ConvBoolFromInt(v1=1[40]) -> true[40]
  684:[41] Not(v1=true[40]) -> false[40]
  685:[41] GenGotoFalseWord(jump=696, if_false=false[40])
  696:[40] VarInt(var[36]) -> 1[40]
  699:[44] ConstInt(val=1) -> 1[44]
  704:[48] MinInt(v1=1[40], v2=1[44]) -> 0[40]
  705:[44] PutInt(var[36], value=0[40])
  708:[40] VarInt(var[36]) -> 0[40]
  711:[44] ConstInt(val=1) -> 1[44]
  716:[48] LtInt(v1=0[40], v2=1[44]) -> true[40]
  717:[41] GenGotoFalseWord(jump=723, if_false=true[40])
  720:[40] GenGotoWord(jump=749)
  749:[40] GenFreeStack(value=0, discard=4)
  753:[36] VarInt(var[32]) -> 654321[36]
  756:[40] GenFreeStack(value=4, discard=4)
  760:[36] VarInt(var[32]) -> 654321[36]
  763:[40] ConstInt(val=654321) -> 654321[40]
  768:[44] EqInt(v1=654321[36], v2=654321[40]) -> true[36]
  769:[37] GenGotoFalseWord(jump=775, if_false=true[36])
  772:[36] GenGotoWord(jump=829)
  829:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
