pub fn test() {
    test_value = {
  a=1l;
  b="";
  for n in 1..4 {
    t="1";
    b+="n" + ":{n}" + "=";
    for _m in 1..n {
      t+="2";
    };
    b += t+" ";
    a += t as long
  };
  "{a} via {b}"
};
    assert(
        test_value == "136 via n:1=1 n:2=12 n:3=122 ",
        "Test failed {test_value} != \"136 via n:1=1 n:2=12 n:3=122 \""
    );
}
fn test() {#1 block
  __work_3:text = "";
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    a:long = 1i64;
    b:text = "";
    {#3 for
      n#index:integer = OpConvIntFromNull();
      loop {#4 for loop
        n:integer = {#5 for next
          n#index:integer = if OpNot(OpConvBoolFromInt(n#index)) 1i32 else OpAddInt(n#index, 1i32);
          if OpGeInt(n#index, 4i32) break(0) else null;
          n#index;
        }#5:integer;
        {#6 block
          t:text = "1";
          OpAppendText(b, "n");
          OpAppendText(b, {#7 formatting string
            __work_1:text = ":";
            OpFormatInt(__work_1, n, 10i32, 0i32, 32i32, false, false);
            __work_1;
          }#7:text);
          OpAppendText(b, "=");
          {#8 for
            _m#index:integer = OpConvIntFromNull();
            loop {#9 for loop
              _m:integer = {#10 for next
                _m#index:integer = if OpNot(OpConvBoolFromInt(_m#index)) 1i32 else OpAddInt(_m#index, 1i32);
                if OpGeInt(_m#index, n) break(0) else null;
                _m#index;
              }#10:integer;
              {#11 block
                OpAppendText(t, "2");
              }#11;
            }#9;
          }#8;
          OpAppendText(b, t);
          OpAppendText(b, " ");
          a:long = OpAddLong(a, OpCastLongFromText(t));
        }#6;
      }#4;
    }#3;
    {#12 formatting string
      __work_2:text = "";
      OpFormatLong(__work_2, a, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_2, " via ");
      OpFormatText(__work_2, b, 0i32, -1i32, 32i32);
      __work_2;
    }#12:text;
  }#2:text;
  if OpEqText(test_value, "136 via n:1=1 n:2=12 n:3=122 ") null else OpPanic({#13 formatting string
    __work_3:text = "Test failed ";
    OpFormatText(__work_3, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_3, " != "136 via n:1=1 n:2=12 n:3=122 "");
    __work_3;
  }#13:text);
}#1

byte-code for string_scope:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_3[4]:text in 1
   1[28]: Text() var=__work_2[28]:text in 1
   2[52]: Text() var=__work_1[52]:text in 1
   3[76]: Text() var=test_value[76]:text in 1
   4[100]: ConstLong(val=1) -> long var=a[100]:long in 2
  13[108]: Text() var=b[108]:text in 2
  14[132]: ConvIntFromNull() -> integer var=n#index[132]:integer in 3
  15[136]: VarInt(var[132]) -> integer var=n#index[132]:integer in 3
  18[140]: ConvBoolFromInt(v1: integer) -> boolean
  19[137]: Not(v1: boolean) -> boolean
  20[137]: GotoFalseWord(jump=31, if_false: boolean)
  23[136]: ConstInt(val=1) -> integer
  28[140]: GotoWord(jump=40)
  31[136]: VarInt(var[132]) -> integer var=n#index[132]:integer in 3
  34[140]: ConstInt(val=1) -> integer
  39[144]: AddInt(v1: integer, v2: integer) -> integer
  40[140]: PutInt(var[132], value: integer)
  43[136]: VarInt(var[132]) -> integer var=n#index[132]:integer in 3
  46[140]: ConstInt(val=4) -> integer
  51[144]: GeInt(v1: integer, v2: integer) -> boolean
  52[137]: GotoFalseWord(jump=58, if_false: boolean)
  55[136]: GotoWord(jump=209)
  58[136]: VarInt(var[132]) -> integer var=n#index[132]:integer in 3
  61[140]: Text() var=t[140]:text in 6
  62[164]: ConstText(_value="1") -> text
  65[180]: AppendText(var[140], v1: text)
  68[164]: ConstText(_value="n") -> text
  71[180]: AppendText(var[108], v1: text)
  74[164]: ClearText(var[52]) var=__work_1[52]:text in 1
  77[164]: ConstText(_value=":") -> text
  80[180]: AppendText(var[52], v1: text)
  83[164]: VarInt(var[136]) -> integer var=n[136]:integer in 4
  86[168]: ConstInt(val=0) -> integer
  91[172]: FormatInt(var[52], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  98[164]: VarText(var[52]) -> text var=__work_1[52]:text in 1
 101[180]: AppendText(var[108], v1: text)
 104[164]: ConstText(_value="=") -> text
 107[180]: AppendText(var[108], v1: text)
 110[164]: ConvIntFromNull() -> integer var=_m#index[164]:integer in 8
 111[168]: VarInt(var[164]) -> integer var=_m#index[164]:integer in 8
 114[172]: ConvBoolFromInt(v1: integer) -> boolean
 115[169]: Not(v1: boolean) -> boolean
 116[169]: GotoFalseWord(jump=127, if_false: boolean)
 119[168]: ConstInt(val=1) -> integer
 124[172]: GotoWord(jump=136)
 127[168]: VarInt(var[164]) -> integer var=_m#index[164]:integer in 8
 130[172]: ConstInt(val=1) -> integer
 135[176]: AddInt(v1: integer, v2: integer) -> integer
 136[172]: PutInt(var[164], value: integer)
 139[168]: VarInt(var[164]) -> integer var=_m#index[164]:integer in 8
 142[172]: VarInt(var[136]) -> integer var=n[136]:integer in 4
 145[176]: GeInt(v1: integer, v2: integer) -> boolean
 146[169]: GotoFalseWord(jump=152, if_false: boolean)
 149[168]: GotoWord(jump=168)
 152[168]: VarInt(var[164]) -> integer var=_m#index[164]:integer in 8
 155[172]: ConstText(_value="2") -> text
 158[188]: AppendText(var[140], v1: text)
 161[172]: FreeStack(value=0, discard=4)
 165[168]: GotoWord(jump=111)
 168[168]: FreeStack(value=0, discard=4)
 172[164]: VarText(var[140]) -> text var=t[140]:text in 6
 175[180]: AppendText(var[108], v1: text)
 178[164]: ConstText(_value=" ") -> text
 181[180]: AppendText(var[108], v1: text)
 184[164]: VarLong(var[100]) -> long var=a[100]:long in 2
 187[172]: VarText(var[140]) -> text var=t[140]:text in 6
 190[188]: CastLongFromText(v1: text) -> long
 191[180]: AddLong(v1: long, v2: long) -> long
 192[172]: PutLong(var[100], value: long)
 195[164]: FreeText(var[140])
 198[164]: FreeStack(value=0, discard=24)
 202[140]: FreeStack(value=0, discard=4)
 206[136]: GotoWord(jump=15)
 209[136]: FreeStack(value=0, discard=4)
 213[132]: ClearText(var[28]) var=__work_2[28]:text in 1
 216[132]: ConstText(_value="") -> text
 218[148]: AppendText(var[28], v1: text)
 221[132]: VarLong(var[100]) -> long var=a[100]:long in 2
 224[140]: ConstInt(val=0) -> integer
 229[144]: FormatLong(var[28], val: long, radix=10, width: integer, token=32, plus=false, note=false)
 236[132]: ConstText(_value=" via ") -> text
 243[148]: AppendText(var[28], v1: text)
 246[132]: VarText(var[108]) -> text var=b[108]:text in 2
 249[148]: ConstInt(val=0) -> integer
 254[152]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 259[132]: VarText(var[28]) -> text var=__work_2[28]:text in 1
 262[148]: FreeText(var[108])
 265[148]: FreeStack(value=16, discard=48) type=text[4]:Base[5]
 269[116]: AppendText(var[76], v1: text)
 272[100]: VarText(var[76]) -> text var=test_value[76]:text in 1
 275[116]: ConstText(_value="136 via n:1=1 n:2=12 n:3=122 ") -> text
 306[132]: EqText(v1: text, v2: text) -> boolean
 307[101]: GotoFalseWord(jump=313, if_false: boolean)
 310[100]: GotoWord(jump=390)
 313[100]: ClearText(var[4]) var=__work_3[4]:text in 1
 316[100]: ConstText(_value="Test failed ") -> text
 330[116]: AppendText(var[4], v1: text)
 333[100]: VarText(var[76]) -> text var=test_value[76]:text in 1
 336[116]: ConstInt(val=0) -> integer
 341[120]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 346[100]: ConstText(_value=" != "136 via n:1=1 n:2=12 n:3=122 "") -> text
 383[116]: AppendText(var[4], v1: text)
 386[100]: VarText(var[4]) -> text var=__work_3[4]:text in 1
 389[116]: Panic(message: text)
 390[100]: FreeText(var[76])
 393[100]: FreeText(var[52])
 396[100]: FreeText(var[28])
 399[100]: FreeText(var[4])
 402[100]: Return(ret=0, value=0, discard=100)

