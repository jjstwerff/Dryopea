Test code:
struct Object{a: integer, bb: text, ccc: boolean}
fn obj() -> Object { Object {a: 12, bb: "hi", ccc: false } }

pub fn test() {
    test_value = {o = obj(); "{o} pretty {o:#}"};
    assert(
        test_value == "{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}",
        "Test failed {test_value} != \"{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}\""
    );
}

Type 13:Object[13]:
    a:integer[4]
    bb:text[8]
    ccc:boolean[12]

fn obj {
  {
    let val = OpDatabase(13i32, 13i32);
    OpSetInt(val, 4i32, 12i32);
    OpSetText(val, 8i32, "hi");
    OpSetByte(val, 12i32, 0i32, if false {1i32} else {0i32});
    val;
  };
}

byte-code for print_object:obj() -> Object
 664[0]: return-address
 664[4]: Database(size=13, db_tp=13) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 669[16]: VarRef(var[4]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 672[28]: ConstInt(val=12) -> integer
 677[32]: SetInt(v1: reference, fld=4, val: integer)
 680[16]: VarRef(var[4]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 683[28]: ConstText(_value="hi") -> text
 687[44]: SetText(v1: reference, fld=8, val: text)
 690[16]: VarRef(var[4]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 693[28]: ConstFalse() -> boolean
 694[29]: GenGotoFalseWord(jump=705, if_false: boolean)
 697[28]: ConstInt(val=1) -> integer
 702[32]: GenGotoWord(jump=710)
 705[28]: ConstInt(val=0) -> integer
 710[32]: SetByte(v1: reference, fld=12, min=0, val: integer)
 715[16]: VarRef(var[4]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 718[28]: GenFreeStack(value=12, discard=12)
 722[16]: GenReturn(ret=0, value=12, discard=16)

fn test {
  let test_value = {
    let o = obj();
    {
      let append_9 = "";
      OpFormatDatabase(append_9, o, 13i32, false);
      OpAppendText(append_9, " pretty ");
      OpFormatDatabase(append_9, o, 13i32, true);
      append_9;
    };
  };
  if OpEqText(test_value, "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") {null} else {OpGenPanic({
    let append_10 = "Test failed ";
    OpFormatText(append_10, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_10, " != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"");
    append_10;
  })};
}

byte-code for print_object:test()
 728[0]: return-address
 728[4]: Text()
 729[28]: GenCall(size=0, to=664)
 736[40]: Text()
 737[64]: ConstText(_value="") -> text
 739[80]: AppendText(var[40], v1: text)
 742[64]: VarRef(var[28]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 745[76]: FormatDatabase(var[40], val: reference, db_tp=13, pretty=false)
 751[64]: ConstText(_value=" pretty ") -> text
 761[80]: AppendText(var[40], v1: text)
 764[64]: VarRef(var[28]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 767[76]: FormatDatabase(var[40], val: reference, db_tp=13, pretty=true)
 773[64]: VarText(var[40]) -> text
 776[80]: GenFreeStack(value=16, discard=24)
 780[56]: GenFreeStack(value=16, discard=12)
 784[44]: AppendText(var[4], v1: text)
 787[28]: VarText(var[4]) -> text
 790[44]: ConstText(_value="{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") -> text
 855[60]: EqText(v1: text, v2: text) -> boolean
 856[29]: GenGotoFalseWord(jump=862, if_false: boolean)
 859[28]: GenGotoWord(jump=975)
 862[28]: Text()
 863[52]: ConstText(_value="Test failed ") -> text
 877[68]: AppendText(var[28], v1: text)
 880[52]: VarText(var[4]) -> text
 883[68]: ConstInt(val=0) -> integer
 888[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 893[52]: ConstText(_value=" != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"") -> text
 964[68]: AppendText(var[28], v1: text)
 967[52]: VarText(var[28]) -> text
 970[68]: GenFreeStack(value=16, discard=24)
 974[44]: GenPanic(message: text)
 975[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  728:[4] Text()
  729:[28] GenCall(size=0, to=664)
  664:[32] Database(size=13, db_tp=13) -> ref(1,1,0)={ccc:false}[32]
  669:[44] VarRef(var[32]) -> ref(1,1,0)={ccc:false}[44]
  672:[56] ConstInt(val=12) -> 12[56]
  677:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=12[56])
  680:[44] VarRef(var[32]) -> ref(1,1,0)={a:12,ccc:false}[44]
  683:[56] ConstText(_value="hi") -> "hi"[56]
  687:[72] SetText(v1=ref(1,1,0)[44], fld=8, val="hi"[56])
  690:[44] VarRef(var[32]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[44]
  693:[56] ConstFalse() -> false[56]
  694:[57] GenGotoFalseWord(jump=705, if_false=false[56])
  705:[56] ConstInt(val=0) -> 0[56]
  710:[60] SetByte(v1=ref(1,1,0)[44], fld=12, min=0, val=0[56])
  715:[44] VarRef(var[32]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[44]
  718:[56] GenFreeStack(value=12, discard=12)
  722:[44] GenReturn(ret=736[28], value=12, discard=16)
  736:[40] Text()
  737:[64] ConstText(_value="") -> ""[64]
  739:[80] AppendText(var[40], v1=""[64])
  742:[64] VarRef(var[28]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[64]
  745:[76] FormatDatabase(var[40], val=ref(1,1,0)[64], db_tp=13, pretty=false)
  751:[64] ConstText(_value=" pretty ") -> " pretty "[64]
  761:[80] AppendText(var[40], v1=" pretty "[64])
  764:[64] VarRef(var[28]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[64]
  767:[76] FormatDatabase(var[40], val=ref(1,1,0)[64], db_tp=13, pretty=true)
  773:[64] VarText(var[40]) -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[64]
  776:[80] GenFreeStack(value=16, discard=24)
  780:[56] GenFreeStack(value=16, discard=12)
  784:[44] AppendText(var[4], v1="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[28])
  787:[28] VarText(var[4]) -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[28]
  790:[44] ConstText(_value="{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[44]
  855:[60] EqText(v1="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[28], v2="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[44]) -> true[28]
  856:[29] GenGotoFalseWord(jump=862, if_false=true[28])
  859:[28] GenGotoWord(jump=975)
  975:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
