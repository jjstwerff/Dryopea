struct Object{a: integer, bb: text, ccc: boolean}
fn obj() -> Object { Object {a: 12, bb: "hi", ccc: false } }

pub fn test() {
    test_value = {o = obj(); "{o} pretty {o:#}"};
    assert(
        test_value == "{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}",
        "Test failed {test_value} != \"{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}\""
    );
}
Type 11:Object[13]:
    a:integer[4]
    bb:text[8]
    ccc:boolean[12]

fn obj {#1 block
  {#2 object
    let _val_1 = OpDatabase(13i32, 11i32);
    OpSetInt(_val_1, 4i32, 12i32);
    OpSetText(_val_1, 8i32, "hi");
    OpSetByte(_val_1, 12i32, 0i32, if false 1i32 else 0i32);
    _val_1;
  }#2;
}#1

byte-code for print_object:obj() -> Object#[]
 668[0]: return-address
 668[4]: Database(size=13, db_tp=11) -> reference#[] type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[11]
 673[16]: VarRef(var[4]) -> reference#[] type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[11]
 676[28]: ConstInt(val=12) -> integer
 681[32]: SetInt(v1: reference#[], fld=4, val: integer)
 684[16]: VarRef(var[4]) -> reference#[] type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[11]
 687[28]: ConstText(_value="hi") -> text(false, [])
 691[44]: SetText(v1: reference#[], fld=8, val: text(false, []))
 694[16]: VarRef(var[4]) -> reference#[] type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[11]
 697[28]: ConstFalse() -> boolean
 698[29]: GenGotoFalseWord(jump=709, if_false: boolean)
 701[28]: ConstInt(val=1) -> integer
 706[32]: GenGotoWord(jump=714)
 709[28]: ConstInt(val=0) -> integer
 714[32]: SetByte(v1: reference#[], fld=12, min=0, val: integer)
 719[16]: VarRef(var[4]) -> reference#[] type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[11]
 722[28]: GenFreeStack(value=12, discard=12)
 726[16]: GenReturn(ret=0, value=12, discard=16)

fn test {#1 block
  let __work_2 = "";
  let __work_1 = "";
  let test_value = {#2 block
    let o = obj();
    {#3 formatting string
      OpClearText(__work_1);
      OpAppendText(__work_1, "");
      OpFormatDatabase(__work_1, o, 11i32, false);
      OpAppendText(__work_1, " pretty ");
      OpFormatDatabase(__work_1, o, 11i32, true);
      __work_1;
    }#3;
  }#2;
  if OpEqText(test_value, "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") null else OpGenPanic({#4 formatting string
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"");
    __work_2;
  }#4);
}#1

byte-code for print_object:test()
 732[0]: return-address
 732[4]: Text()
 733[28]: Text()
 734[52]: Text()
 735[76]: GenCall(size=0, to=668)
 742[88]: ClearText(var[28])
 745[88]: ConstText(_value="") -> text(false, [])
 747[104]: AppendText(var[28], v1: text(false, []))
 750[88]: VarRef(var[76]) -> reference#[] type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[11]
 753[100]: FormatDatabase(var[28], val: reference#[], db_tp=11, pretty=false)
 759[88]: ConstText(_value=" pretty ") -> text(false, [])
 769[104]: AppendText(var[28], v1: text(false, []))
 772[88]: VarRef(var[76]) -> reference#[] type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[11]
 775[100]: FormatDatabase(var[28], val: reference#[], db_tp=11, pretty=true)
 781[88]: VarText(var[28]) -> text(false, [])
 784[104]: GenFreeStack(value=16, discard=12)
 788[92]: AppendText(var[52], v1: text(false, []))
 791[76]: VarText(var[52]) -> text(false, [])
 794[92]: ConstText(_value="{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") -> text(false, [])
 859[108]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 860[77]: GenGotoFalseWord(jump=866, if_false: boolean)
 863[76]: GenGotoWord(jump=977)
 866[76]: ClearText(var[4])
 869[76]: ConstText(_value="Test failed ") -> text(false, [])
 883[92]: AppendText(var[4], v1: text(false, []))
 886[76]: VarText(var[52]) -> text(false, [])
 889[92]: ConstInt(val=0) -> integer
 894[96]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 899[76]: ConstText(_value=" != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"") -> text(false, [])
 970[92]: AppendText(var[4], v1: text(false, []))
 973[76]: VarText(var[4]) -> text(false, [])
 976[92]: GenPanic(message: text(false, []))
 977[76]: GenReturn(ret=0, value=0, discard=76)

Execute test:
  732:[8] Text()
  733:[32] Text()
  734:[56] Text()
  735:[80] GenCall(size=0, to=668)
  668:[84] Database(size=13, db_tp=11) -> ref(1,1,0)={ccc:false}[84]
  673:[96] VarRef(var[84]) -> ref(1,1,0)={ccc:false}[96]
  676:[108] ConstInt(val=12) -> 12[108]
  681:[112] SetInt(v1=ref(1,1,0)[96], fld=4, val=12[108])
  684:[96] VarRef(var[84]) -> ref(1,1,0)={a:12,ccc:false}[96]
  687:[108] ConstText(_value="hi") -> "hi"[108]
  691:[124] SetText(v1=ref(1,1,0)[96], fld=8, val="hi"[108])
  694:[96] VarRef(var[84]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[96]
  697:[108] ConstFalse() -> false[108]
  698:[109] GenGotoFalseWord(jump=709, if_false=false[108])
  709:[108] ConstInt(val=0) -> 0[108]
  714:[112] SetByte(v1=ref(1,1,0)[96], fld=12, min=0, val=0[108])
  719:[96] VarRef(var[84]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[96]
  722:[108] GenFreeStack(value=12, discard=12)
  726:[96] GenReturn(ret=742[80], value=12, discard=16)
  742:[92] ClearText(var[32])
  745:[92] ConstText(_value="") -> ""[92]
  747:[108] AppendText(var[32], v1=""[92])
  750:[92] VarRef(var[80]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[92]
  753:[104] FormatDatabase(var[32], val=ref(1,1,0)[92], db_tp=11, pretty=false)
  759:[92] ConstText(_value=" pretty ") -> " pretty "[92]
  769:[108] AppendText(var[32], v1=" pretty "[92])
  772:[92] VarRef(var[80]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[92]
  775:[104] FormatDatabase(var[32], val=ref(1,1,0)[92], db_tp=11, pretty=true)
  781:[92] VarText(var[32]) -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[92]
  784:[108] GenFreeStack(value=16, discard=12)
  788:[96] AppendText(var[56], v1="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[80])
  791:[80] VarText(var[56]) -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[80]
  794:[96] ConstText(_value="{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[96]
  859:[112] EqText(v1="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[80], v2="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[96]) -> true[80]
  860:[81] GenGotoFalseWord(jump=866, if_false=true[80])
  863:[80] GenGotoWord(jump=977)
  977:[80] GenReturn(ret=4294967295[4], value=0, discard=76)
Finished
