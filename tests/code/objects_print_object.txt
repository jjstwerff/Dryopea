Test code:
struct Object{a: integer, bb: text, ccc: boolean}
fn obj() -> Object { Object {a: 12, bb: "hi", ccc: false } }

pub fn test() {
    test_value = {o = obj(); "{o} pretty {o:#}"};
    assert(
        test_value == "{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}",
        "Test failed {test_value} != \"{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}\""
    );
}

Type 13:Object[13]:
    a:integer[4]
    bb:text[8]
    ccc:boolean[12]

fn obj {
  {
    let val = OpDatabase(13i32, 13i32);
    OpSetInt(val, 4i32, 12i32);
    OpSetText(val, 8i32, "hi");
    OpSetByte(val, 12i32, 0i32, if false {1i32} else {0i32});
    val;
  };
}

byte-code for print_object:obj() -> Object
 668[0]: return-address
 668[4]: Database(size=13, db_tp=13) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 673[16]: VarRef(var[4]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 676[28]: ConstInt(val=12) -> integer
 681[32]: SetInt(v1: reference, fld=4, val: integer)
 684[16]: VarRef(var[4]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 687[28]: ConstText(_value="hi") -> text
 691[44]: SetText(v1: reference, fld=8, val: text)
 694[16]: VarRef(var[4]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 697[28]: ConstFalse() -> boolean
 698[29]: GenGotoFalseWord(jump=709, if_false: boolean)
 701[28]: ConstInt(val=1) -> integer
 706[32]: GenGotoWord(jump=714)
 709[28]: ConstInt(val=0) -> integer
 714[32]: SetByte(v1: reference, fld=12, min=0, val: integer)
 719[16]: VarRef(var[4]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 722[28]: GenFreeStack(value=12, discard=12)
 726[16]: GenReturn(ret=0, value=12, discard=16)

fn test {
  let test_value = {
    let o = obj();
    {
      let append_9 = "";
      OpFormatDatabase(append_9, o, 13i32, false);
      OpAppendText(append_9, " pretty ");
      OpFormatDatabase(append_9, o, 13i32, true);
      append_9;
    };
  };
  if OpEqText(test_value, "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") {null} else {OpGenPanic({
    let append_10 = "Test failed ";
    OpFormatText(append_10, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_10, " != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"");
    append_10;
  })};
}

byte-code for print_object:test()
 732[0]: return-address
 732[4]: Text()
 733[28]: GenCall(size=0, to=668)
 740[40]: Text()
 741[64]: ConstText(_value="") -> text
 743[80]: AppendText(var[40], v1: text)
 746[64]: VarRef(var[28]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 749[76]: FormatDatabase(var[40], val: reference, db_tp=13, pretty=false)
 755[64]: ConstText(_value=" pretty ") -> text
 765[80]: AppendText(var[40], v1: text)
 768[64]: VarRef(var[28]) -> reference type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[13]
 771[76]: FormatDatabase(var[40], val: reference, db_tp=13, pretty=true)
 777[64]: VarText(var[40]) -> text
 780[80]: GenFreeStack(value=16, discard=24)
 784[56]: GenFreeStack(value=16, discard=12)
 788[44]: AppendText(var[4], v1: text)
 791[28]: VarText(var[4]) -> text
 794[44]: ConstText(_value="{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") -> text
 859[60]: EqText(v1: text, v2: text) -> boolean
 860[29]: GenGotoFalseWord(jump=866, if_false: boolean)
 863[28]: GenGotoWord(jump=979)
 866[28]: Text()
 867[52]: ConstText(_value="Test failed ") -> text
 881[68]: AppendText(var[28], v1: text)
 884[52]: VarText(var[4]) -> text
 887[68]: ConstInt(val=0) -> integer
 892[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 897[52]: ConstText(_value=" != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"") -> text
 968[68]: AppendText(var[28], v1: text)
 971[52]: VarText(var[28]) -> text
 974[68]: GenFreeStack(value=16, discard=24)
 978[44]: GenPanic(message: text)
 979[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  732:[4] Text()
  733:[28] GenCall(size=0, to=668)
  668:[32] Database(size=13, db_tp=13) -> ref(1,1,0)={ccc:false}[32]
  673:[44] VarRef(var[32]) -> ref(1,1,0)={ccc:false}[44]
  676:[56] ConstInt(val=12) -> 12[56]
  681:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=12[56])
  684:[44] VarRef(var[32]) -> ref(1,1,0)={a:12,ccc:false}[44]
  687:[56] ConstText(_value="hi") -> "hi"[56]
  691:[72] SetText(v1=ref(1,1,0)[44], fld=8, val="hi"[56])
  694:[44] VarRef(var[32]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[44]
  697:[56] ConstFalse() -> false[56]
  698:[57] GenGotoFalseWord(jump=709, if_false=false[56])
  709:[56] ConstInt(val=0) -> 0[56]
  714:[60] SetByte(v1=ref(1,1,0)[44], fld=12, min=0, val=0[56])
  719:[44] VarRef(var[32]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[44]
  722:[56] GenFreeStack(value=12, discard=12)
  726:[44] GenReturn(ret=740[28], value=12, discard=16)
  740:[40] Text()
  741:[64] ConstText(_value="") -> ""[64]
  743:[80] AppendText(var[40], v1=""[64])
  746:[64] VarRef(var[28]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[64]
  749:[76] FormatDatabase(var[40], val=ref(1,1,0)[64], db_tp=13, pretty=false)
  755:[64] ConstText(_value=" pretty ") -> " pretty "[64]
  765:[80] AppendText(var[40], v1=" pretty "[64])
  768:[64] VarRef(var[28]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[64]
  771:[76] FormatDatabase(var[40], val=ref(1,1,0)[64], db_tp=13, pretty=true)
  777:[64] VarText(var[40]) -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[64]
  780:[80] GenFreeStack(value=16, discard=24)
  784:[56] GenFreeStack(value=16, discard=12)
  788:[44] AppendText(var[4], v1="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[28])
  791:[28] VarText(var[4]) -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[28]
  794:[44] ConstText(_value="{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[44]
  859:[60] EqText(v1="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[28], v2="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[44]) -> true[28]
  860:[29] GenGotoFalseWord(jump=866, if_false=true[28])
  863:[28] GenGotoWord(jump=979)
  979:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
