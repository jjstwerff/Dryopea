struct Object{a: integer, bb: text, ccc: boolean}
fn obj() -> Object { Object {a: 12, bb: "hi", ccc: false } }

pub fn test() {
    test_value = {o = obj(); "{o} pretty {o:#}"};
    assert(
        test_value == "{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}",
        "Test failed {test_value} != \"{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}\""
    );
}
Type 14:Object[13]:
    a:integer[4]
    bb:text[8]
    ccc:boolean[12]

fn obj(__ref_1:Object) -> Object["__ref_1"] {#1 block
  {#2 object
    OpDatabase(__ref_1, 14i32);
    OpSetInt(__ref_1, 4i32, 12i32);
    OpSetText(__ref_1, 8i32, "hi");
    OpSetByte(__ref_1, 12i32, 0i32, if false 1i32 else 0i32);
    __ref_1;
  }#2:ref(Object)["__ref_1"];
}#1:ref(Object)["__ref_1"]

byte-code for print_object:obj(__ref_1: ref(Object)[0]) -> ref(Object)["__ref_1"]
   0[12]: return-address
   0[16]: Database(var[0], db_tp=14) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14]
   5[16]: VarRef(var[0]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14] var=__ref_1[0]:ref(Object) in 0
   8[28]: ConstInt(val=12) -> integer
  13[32]: SetInt(v1: ref(reference), fld=4, val: integer)
  16[16]: VarRef(var[0]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14] var=__ref_1[0]:ref(Object) in 0
  19[28]: ConstText(_value="hi") -> text
  23[44]: SetText(v1: ref(reference), fld=8, val: text)
  26[16]: VarRef(var[0]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14] var=__ref_1[0]:ref(Object) in 0
  29[28]: ConstFalse() -> boolean
  30[29]: GotoFalseWord(jump=41, if_false: boolean)
  33[28]: ConstInt(val=1) -> integer
  38[32]: GotoWord(jump=46)
  41[28]: ConstInt(val=0) -> integer
  46[32]: SetByte(v1: ref(reference), fld=12, min=0, val: integer)
  51[16]: VarRef(var[0]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14] var=__ref_1[0]:ref(Object) in 0
  54[28]: Return(ret=12, value=12, discard=28) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14]

fn test() {#1 block
  __ref_1:ref(Object) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    o:ref(Object)["__ref_1"] = obj(__ref_1);
    {#3 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, o, 14i32, false);
      OpAppendText(__work_1, " pretty ");
      OpFormatDatabase(__work_1, o, 14i32, true);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"");
    __work_2;
  }#4:text);
}#1

byte-code for print_object:test()
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Object) in 1
   1[16]: Text() var=__work_2[16]:text in 1
   2[40]: Text() var=__work_1[40]:text in 1
   3[64]: Text() var=test_value[64]:text in 1
   4[88]: VarRef(var[4]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14] var=__ref_1[4]:ref(Object) in 1
   7[100]: Call(size=0, to=911)
  14[100]: ClearText(var[40]) var=__work_1[40]:text in 1
  17[100]: ConstText(_value="") -> text
  19[116]: AppendText(var[40], v1: text)
  22[100]: VarRef(var[88]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14] var=o[88]:ref(Object)["__ref_1"] in 2
  25[112]: FormatDatabase(var[40], val: ref(reference), db_tp=14, pretty=false)
  31[100]: ConstText(_value=" pretty ") -> text
  41[116]: AppendText(var[40], v1: text)
  44[100]: VarRef(var[88]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14] var=o[88]:ref(Object)["__ref_1"] in 2
  47[112]: FormatDatabase(var[40], val: ref(reference), db_tp=14, pretty=true)
  53[100]: VarText(var[40]) -> text var=__work_1[40]:text in 1
  56[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
  60[104]: AppendText(var[64], v1: text)
  63[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
  66[104]: ConstText(_value="{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") -> text
 131[120]: EqText(v1: text, v2: text) -> boolean
 132[89]: GotoFalseWord(jump=138, if_false: boolean)
 135[88]: GotoWord(jump=249)
 138[88]: ClearText(var[16]) var=__work_2[16]:text in 1
 141[88]: ConstText(_value="Test failed ") -> text
 155[104]: AppendText(var[16], v1: text)
 158[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 161[104]: ConstInt(val=0) -> integer
 166[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 171[88]: ConstText(_value=" != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"") -> text
 242[104]: AppendText(var[16], v1: text)
 245[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
 248[104]: Panic(message: text)
 249[88]: FreeText(var[64])
 252[88]: FreeText(var[40])
 255[88]: FreeText(var[16])
 258[88]: VarRef(var[4]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[14] var=__ref_1[4]:ref(Object) in 1
 261[100]: FreeRef(v1: ref(reference))
 262[88]: Return(ret=0, value=0, discard=88)

