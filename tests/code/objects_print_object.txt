struct Object{a: integer, bb: text, ccc: boolean}
fn obj() -> Object { Object {a: 12, bb: "hi", ccc: false } }

pub fn test() {
    test_value = {o = obj(); "{o} pretty {o:#}"};
    assert(
        test_value == "{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}",
        "Test failed {test_value} != \"{{a:12,bb:\"hi\",ccc:false}} pretty {{ a: 12, bb: \"hi\", ccc: false }}\""
    );
}
Type 17:Object[13]:
    a:integer[4]
    bb:text[8]
    ccc:boolean[12]

fn obj() -> Object {#block(1):ref(Object)
  __ref_1(1):ref(Object) = null;
  {#Object(2):ref(Object)["__ref_1"]
    OpDatabase(__ref_1(1), 17i32);
    OpSetInt(__ref_1(1), 4i32, 12i32);
    OpSetText(__ref_1(1), 8i32, "hi");
    OpSetByte(__ref_1(1), 12i32, 0i32, if false 1i32 else 0i32);
    __ref_1(1);
  }#Object(2):ref(Object)["__ref_1"];
}#block(1):ref(Object)

byte-code for print_object:obj() [1119] -> ref(Object)
   0[4]: return-address
   0[8]: ConvRefFromNull() -> ref(reference) var=__ref_1[8]:ref(Object)
   1[20]: Database(var[8], db_tp=17) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[17]
   6[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[17] var=__ref_1[8]:ref(Object)
   9[32]: ConstInt(val=12) -> integer
  14[36]: SetInt(v1: ref(reference), fld=4, val: integer)
  17[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[17] var=__ref_1[8]:ref(Object)
  20[32]: ConstText(_value="hi") -> text
  24[48]: SetText(v1: ref(reference), fld=8, val: text)
  27[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[17] var=__ref_1[8]:ref(Object)
  30[32]: ConstFalse() -> boolean
  31[33]: GotoFalseWord(jump=42, if_false: boolean)
  34[32]: ConstInt(val=1) -> integer
  39[36]: GotoWord(jump=47)
  42[32]: ConstInt(val=0) -> integer
  47[36]: SetByte(v1: ref(reference), fld=12, min=0, val: integer)
  52[20]: VarRef(var[8]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[17] var=__ref_1[8]:ref(Object)
  55[32]: Return(ret=0, value=12, discard=28) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[17]

fn test() {#block(1):void
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text = {#block(2):text
    o(2):ref(Object) = obj();
    {#Formatted string(3):text
      __work_1(1):text = "";
      OpFormatDatabase(__work_1(1), o(2), 17i32, false);
      OpAppendText(__work_1(1), " pretty ");
      OpFormatDatabase(__work_1(1), o(2), 17i32, true);
      OpFreeRef(o(2));
      __work_1(1);
    }#Formatted string(3):text;
  }#block(2):text;
  if OpEqText(test_value(1), "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") null else OpPanic({#Formatted string(4):text
    __work_2(1):text = "Test failed ";
    OpFormatText(__work_2(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_2(1), " != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"");
    __work_2(1);
  }#Formatted string(4):text);
  OpFreeText(test_value(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for print_object:test() [1180]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: Text() var=test_value[56]:text
   3[80]: Call(size=0, to=1119) var=o[80]:ref(Object)
  10[92]: ClearText(var[32]) var=__work_1[32]:text
  13[92]: ConstText(_value="") -> text
  15[108]: AppendText(var[32], v1: text)
  18[92]: VarRef(var[80]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[17] var=o[80]:ref(Object)
  21[104]: FormatDatabase(var[32], val: ref(reference), db_tp=17, pretty=false)
  27[92]: ConstText(_value=" pretty ") -> text
  37[108]: AppendText(var[32], v1: text)
  40[92]: VarRef(var[80]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[17] var=o[80]:ref(Object)
  43[104]: FormatDatabase(var[32], val: ref(reference), db_tp=17, pretty=true)
  49[92]: VarRef(var[80]) -> ref(reference) type=Object[13]:{a:integer[4], bb:text[8], ccc:boolean[12]}[17] var=o[80]:ref(Object)
  52[104]: FreeRef(v1: ref(reference))
  53[92]: VarText(var[32]) -> text var=__work_1[32]:text
  56[108]: FreeStack(value=16, discard=28)
  60[96]: AppendText(var[56], v1: text)
  63[80]: VarText(var[56]) -> text var=test_value[56]:text
  66[96]: ConstText(_value="{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") -> text
 131[112]: EqText(v1: text, v2: text) -> boolean
 132[81]: GotoFalseWord(jump=138, if_false: boolean)
 135[80]: GotoWord(jump=249)
 138[80]: ClearText(var[8]) var=__work_2[8]:text
 141[80]: ConstText(_value="Test failed ") -> text
 155[96]: AppendText(var[8], v1: text)
 158[80]: VarText(var[56]) -> text var=test_value[56]:text
 161[96]: ConstInt(val=0) -> integer
 166[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
 171[80]: ConstText(_value=" != "{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }"") -> text
 242[96]: AppendText(var[8], v1: text)
 245[80]: VarText(var[8]) -> text var=__work_2[8]:text
 248[96]: Panic(message: text)
 249[80]: FreeText(var[56])
 252[80]: FreeText(var[32])
 255[80]: FreeText(var[8])
 258[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] Call(size=0, to=1119)
 1119:[84] ConvRefFromNull() -> ref(1,0,0)[84]
 1120:[96] Database(var[84], db_tp=17)
 1125:[96] VarRef(var[84]) -> ref(1,1,0)={ccc:false}[96]
 1128:[108] ConstInt(val=12) -> 12[108]
 1133:[112] SetInt(v1=ref(1,1,0)[96], fld=4, val=12[108])
 1136:[96] VarRef(var[84]) -> ref(1,1,0)={a:12,ccc:false}[96]
 1139:[108] ConstText(_value="hi") -> "hi"[108]
 1143:[124] SetText(v1=ref(1,1,0)[96], fld=8, val="hi"[108])
 1146:[96] VarRef(var[84]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[96]
 1149:[108] ConstFalse() -> false[108]
 1150:[109] GotoFalseWord(jump=1161, if_false=false[108])
 1161:[108] ConstInt(val=0) -> 0[108]
 1166:[112] SetByte(v1=ref(1,1,0)[96], fld=12, min=0, val=0[108])
 1171:[96] VarRef(var[84]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[96]
 1174:[108] Return(ret=1190[80], value=12, discard=28) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[80]
   10:[92] ClearText(var[32])
   13:[92] ConstText(_value="") -> ""[92]
   15:[108] AppendText(var[32], v1=""[92])
   18:[92] VarRef(var[80]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[92]
   21:[104] FormatDatabase(var[32], val=ref(1,1,0)[92], db_tp=17, pretty=false)
   27:[92] ConstText(_value=" pretty ") -> " pretty "[92]
   37:[108] AppendText(var[32], v1=" pretty "[92])
   40:[92] VarRef(var[80]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[92]
   43:[104] FormatDatabase(var[32], val=ref(1,1,0)[92], db_tp=17, pretty=true)
   49:[92] VarRef(var[80]) -> ref(1,1,0)={a:12,bb:"hi",ccc:false}[92]
   52:[104] FreeRef(v1=ref(1,1,0)[92])
   53:[92] VarText(var[32]) -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[92]
   56:[108] FreeStack(value=16, discard=28)
   60:[96] AppendText(var[56], v1="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[80])
   63:[80] VarText(var[56]) -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[80]
   66:[96] ConstText(_value="{a:12,bb:"hi",ccc:false} pretty { a: 12, bb: "hi", ccc: false }") -> "{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[96]
  131:[112] EqText(v1="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[80], v2="{a:12,bb:\"hi\",ccc:false} pretty { a: 12, bb: \"hi\", ccc: false }"[96]) -> true[80]
  132:[81] GotoFalseWord(jump=138, if_false=true[80])
  135:[80] GotoWord(jump=249)
  249:[80] FreeText(var[56])
  252:[80] FreeText(var[32])
  255:[80] FreeText(var[8])
  258:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
