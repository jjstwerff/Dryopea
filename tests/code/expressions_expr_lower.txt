pub fn test() {
    test_value = {2 * 2 < 3};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):boolean = {#block(2):boolean
    OpLtInt(OpMulInt(2i32, 2i32), 3i32);
  }#block(2):boolean;
  if OpEqBool(test_value(1), false) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatBool(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != false");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for expr_lower:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=2) -> integer var=test_value[32]:boolean
   6[36]: ConstInt(val=2) -> integer
  11[40]: MulInt(v1: integer, v2: integer) -> integer
  12[36]: ConstInt(val=3) -> integer
  17[40]: LtInt(v1: integer, v2: integer) -> boolean
  18[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  21[34]: ConstFalse() -> boolean
  22[35]: EqBool(v1: boolean, v2: boolean) -> boolean
  23[34]: GotoFalseWord(jump=29, if_false: boolean)
  26[33]: GotoWord(jump=80)
  29[33]: ClearText(var[8]) var=__work_1[8]:text
  32[33]: ConstText(_value="Test failed ") -> text
  46[49]: AppendText(var[8], v1: text)
  49[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  52[34]: ConstInt(val=0) -> integer
  57[38]: FormatBool(var[8], val: boolean, width: integer, dir=-1, token=32)
  62[33]: ConstText(_value=" != false") -> text
  73[49]: AppendText(var[8], v1: text)
  76[33]: VarText(var[8]) -> text var=__work_1[8]:text
  79[49]: Panic(message: text)
  80[33]: FreeText(var[8])
  83[33]: Return(ret=0, value=0, discard=29)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=2) -> 2[32]
    6:[36] ConstInt(val=2) -> 2[36]
   11:[40] MulInt(v1=2[32], v2=2[36]) -> 4[32]
   12:[36] ConstInt(val=3) -> 3[36]
   17:[40] LtInt(v1=4[32], v2=3[36]) -> false[32]
   18:[33] VarBool(var[32]) -> false[33]
   21:[34] ConstFalse() -> false[34]
   22:[35] EqBool(v1=false[33], v2=false[34]) -> true[33]
   23:[34] GotoFalseWord(jump=29, if_false=true[33])
   26:[33] GotoWord(jump=80)
   80:[33] FreeText(var[8])
   83:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
