pub fn test() {
    test_value = {2 * 2 < 3};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    OpLtInt(OpMulInt(2i32, 2i32), 3i32);
  }#2:boolean;
  if OpEqBool(test_value, false) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != false");
    __work_1;
  }#3:text);
}#1

byte-code for expr_lower:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=2) -> integer var=test_value[28]:boolean in 1
   6[32]: ConstInt(val=2) -> integer
  11[36]: MulInt(v1: integer, v2: integer) -> integer
  12[32]: ConstInt(val=3) -> integer
  17[36]: LtInt(v1: integer, v2: integer) -> boolean
  18[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  21[30]: ConstFalse() -> boolean
  22[31]: EqBool(v1: boolean, v2: boolean) -> boolean
  23[30]: GotoFalseWord(jump=29, if_false: boolean)
  26[29]: GotoWord(jump=80)
  29[29]: ClearText(var[4]) var=__work_1[4]:text in 1
  32[29]: ConstText(_value="Test failed ") -> text
  46[45]: AppendText(var[4], v1: text)
  49[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  52[30]: ConstInt(val=0) -> integer
  57[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
  62[29]: ConstText(_value=" != false") -> text
  73[45]: AppendText(var[4], v1: text)
  76[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  79[45]: Panic(message: text)
  80[29]: FreeText(var[4])
  83[29]: Return(ret=0, value=0, discard=29)

