pub fn test() {
    test_value = {2 * 2 < 3};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    OpLtInt(OpMulInt(2i32, 2i32), 3i32);
  }#2:boolean;
  if OpEqBool(test_value, false) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != false");
    __work_1;
  }#3:text);
}#1

byte-code for expr_lower:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstInt(val=2) -> integer
 698[32]: ConstInt(val=2) -> integer
 703[36]: MulInt(v1: integer, v2: integer) -> integer
 704[32]: ConstInt(val=3) -> integer
 709[36]: LtInt(v1: integer, v2: integer) -> boolean
 710[29]: VarBool(var[28]) -> boolean
 713[30]: ConstFalse() -> boolean
 714[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 715[30]: GotoFalseWord(jump=721, if_false: boolean)
 718[29]: GotoWord(jump=772)
 721[29]: ClearText(var[4])
 724[29]: ConstText(_value="Test failed ") -> text
 738[45]: AppendText(var[4], v1: text)
 741[29]: VarBool(var[28]) -> boolean
 744[30]: ConstInt(val=0) -> integer
 749[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 754[29]: ConstText(_value=" != false") -> text
 765[45]: AppendText(var[4], v1: text)
 768[29]: VarText(var[4]) -> text
 771[45]: Panic(message: text)
 772[29]: FreeText(var[4])
 775[29]: Return(ret=0, value=0, discard=29)

Execute test:
  692:[8] Text()
  693:[32] ConstInt(val=2) -> 2[32]
  698:[36] ConstInt(val=2) -> 2[36]
  703:[40] MulInt(v1=2[32], v2=2[36]) -> 4[32]
  704:[36] ConstInt(val=3) -> 3[36]
  709:[40] LtInt(v1=4[32], v2=3[36]) -> false[32]
  710:[33] VarBool(var[32]) -> false[33]
  713:[34] ConstFalse() -> false[34]
  714:[35] EqBool(v1=false[33], v2=false[34]) -> true[33]
  715:[34] GotoFalseWord(jump=721, if_false=true[33])
  718:[33] GotoWord(jump=772)
  772:[33] FreeText(var[8])
  775:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
