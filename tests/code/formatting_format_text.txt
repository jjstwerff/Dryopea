Test code:
pub fn test() {
    test_value = {vr="abc"; "1{vr:<2+3}2{vr}3{vr:6}4{vr:>7}"};
    assert(
        test_value == "1abc  2abc3abc   4    abc",
        "Test failed {test_value} != \"1abc  2abc3abc   4    abc\""
    );
}

fn test {
  let test_value = {
    let vr = "abc";
    {
      let append_9 = "1";
      OpFormatText(append_9, vr, OpAddInt(2i32, 3i32), -1i32, 32i32);
      OpAppendText(append_9, "2");
      OpFormatText(append_9, vr, 0i32, -1i32, 32i32);
      OpAppendText(append_9, "3");
      OpFormatText(append_9, vr, 6i32, -1i32, 32i32);
      OpAppendText(append_9, "4");
      OpFormatText(append_9, vr, 7i32, 1i32, 32i32);
      append_9;
    };
  };
  if OpEqText(test_value, "1abc  2abc3abc   4    abc") {null} else {OpGenPanic({
    let append_10 = "Test failed ";
    OpFormatText(append_10, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_10, " != "1abc  2abc3abc   4    abc"");
    append_10;
  })};
}

byte-code for format_text:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="abc") -> text
 675[68]: AppendText(var[28], v1: text)
 678[52]: Text()
 679[76]: ConstText(_value="1") -> text
 682[92]: AppendText(var[52], v1: text)
 685[76]: VarText(var[28]) -> text
 688[92]: ConstInt(val=2) -> integer
 693[96]: ConstInt(val=3) -> integer
 698[100]: AddInt(v1: integer, v2: integer) -> integer
 699[96]: FormatText(var[52], val: text, width: integer, dir=-1, token=32)
 704[76]: ConstText(_value="2") -> text
 707[92]: AppendText(var[52], v1: text)
 710[76]: VarText(var[28]) -> text
 713[92]: ConstInt(val=0) -> integer
 718[96]: FormatText(var[52], val: text, width: integer, dir=-1, token=32)
 723[76]: ConstText(_value="3") -> text
 726[92]: AppendText(var[52], v1: text)
 729[76]: VarText(var[28]) -> text
 732[92]: ConstInt(val=6) -> integer
 737[96]: FormatText(var[52], val: text, width: integer, dir=-1, token=32)
 742[76]: ConstText(_value="4") -> text
 745[92]: AppendText(var[52], v1: text)
 748[76]: VarText(var[28]) -> text
 751[92]: ConstInt(val=7) -> integer
 756[96]: FormatText(var[52], val: text, width: integer, dir=1, token=32)
 761[76]: VarText(var[52]) -> text
 764[92]: GenFreeStack(value=16, discard=24)
 768[68]: GenFreeStack(value=16, discard=24)
 772[44]: AppendText(var[4], v1: text)
 775[28]: VarText(var[4]) -> text
 778[44]: ConstText(_value="1abc  2abc3abc   4    abc") -> text
 805[60]: EqText(v1: text, v2: text) -> boolean
 806[29]: GenGotoFalseWord(jump=812, if_false: boolean)
 809[28]: GenGotoWord(jump=887)
 812[28]: Text()
 813[52]: ConstText(_value="Test failed ") -> text
 827[68]: AppendText(var[28], v1: text)
 830[52]: VarText(var[4]) -> text
 833[68]: ConstInt(val=0) -> integer
 838[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 843[52]: ConstText(_value=" != "1abc  2abc3abc   4    abc"") -> text
 876[68]: AppendText(var[28], v1: text)
 879[52]: VarText(var[28]) -> text
 882[68]: GenFreeStack(value=16, discard=24)
 886[44]: GenPanic(message: text)
 887[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Text()
  670:[52] ConstText(_value="abc") -> "abc"[52]
  675:[68] AppendText(var[28], v1="abc"[52])
  678:[52] Text()
  679:[76] ConstText(_value="1") -> "1"[76]
  682:[92] AppendText(var[52], v1="1"[76])
  685:[76] VarText(var[28]) -> "abc"[76]
  688:[92] ConstInt(val=2) -> 2[92]
  693:[96] ConstInt(val=3) -> 3[96]
  698:[100] AddInt(v1=2[92], v2=3[96]) -> 5[92]
  699:[96] FormatText(var[52], val="abc"[76], width=5[92], dir=-1, token=32)
  704:[76] ConstText(_value="2") -> "2"[76]
  707:[92] AppendText(var[52], v1="2"[76])
  710:[76] VarText(var[28]) -> "abc"[76]
  713:[92] ConstInt(val=0) -> 0[92]
  718:[96] FormatText(var[52], val="abc"[76], width=0[92], dir=-1, token=32)
  723:[76] ConstText(_value="3") -> "3"[76]
  726:[92] AppendText(var[52], v1="3"[76])
  729:[76] VarText(var[28]) -> "abc"[76]
  732:[92] ConstInt(val=6) -> 6[92]
  737:[96] FormatText(var[52], val="abc"[76], width=6[92], dir=-1, token=32)
  742:[76] ConstText(_value="4") -> "4"[76]
  745:[92] AppendText(var[52], v1="4"[76])
  748:[76] VarText(var[28]) -> "abc"[76]
  751:[92] ConstInt(val=7) -> 7[92]
  756:[96] FormatText(var[52], val="abc"[76], width=7[92], dir=1, token=32)
  761:[76] VarText(var[52]) -> "1abc  2abc3abc   4    abc"[76]
  764:[92] GenFreeStack(value=16, discard=24)
  768:[68] GenFreeStack(value=16, discard=24)
  772:[44] AppendText(var[4], v1="1abc  2abc3abc   4    abc"[28])
  775:[28] VarText(var[4]) -> "1abc  2abc3abc   4    abc"[28]
  778:[44] ConstText(_value="1abc  2abc3abc   4    abc") -> "1abc  2abc3abc   4    abc"[44]
  805:[60] EqText(v1="1abc  2abc3abc   4    abc"[28], v2="1abc  2abc3abc   4    abc"[44]) -> true[28]
  806:[29] GenGotoFalseWord(jump=812, if_false=true[28])
  809:[28] GenGotoWord(jump=887)
  887:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
