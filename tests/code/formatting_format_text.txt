pub fn test() {
    test_value = {vr="abc"; "1{vr:<2+3}2{vr}3{vr:6}4{vr:>7}"};
    assert(
        test_value == "1abc  2abc3abc   4    abc",
        "Test failed {test_value} != \"1abc  2abc3abc   4    abc\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    vr:text = "abc";
    {#3 formatting string
      __work_1:text = "1";
      OpFormatText(__work_1, vr, OpAddInt(2i32, 3i32), -1i32, 32i32);
      OpAppendText(__work_1, "2");
      OpFormatText(__work_1, vr, 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "3");
      OpFormatText(__work_1, vr, 6i32, -1i32, 32i32);
      OpAppendText(__work_1, "4");
      OpFormatText(__work_1, vr, 7i32, 1i32, 32i32);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "1abc  2abc3abc   4    abc") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1abc  2abc3abc   4    abc"");
    __work_2;
  }#4:text);
}#1

byte-code for format_text:test()
 655[0]: return-address
 655[4]: Text() var=__work_2[4]:text in 1
 656[28]: Text() var=__work_1[28]:text in 1
 657[52]: Text() var=test_value[52]:text in 1
 658[76]: Text() var=vr[76]:text in 2
 659[100]: ConstText(_value="abc") -> text
 664[116]: AppendText(var[76], v1: text)
 667[100]: ClearText(var[28]) var=__work_1[28]:text in 1
 670[100]: ConstText(_value="1") -> text
 673[116]: AppendText(var[28], v1: text)
 676[100]: VarText(var[76]) -> text var=vr[76]:text in 2
 679[116]: ConstInt(val=2) -> integer
 684[120]: ConstInt(val=3) -> integer
 689[124]: AddInt(v1: integer, v2: integer) -> integer
 690[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 695[100]: ConstText(_value="2") -> text
 698[116]: AppendText(var[28], v1: text)
 701[100]: VarText(var[76]) -> text var=vr[76]:text in 2
 704[116]: ConstInt(val=0) -> integer
 709[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 714[100]: ConstText(_value="3") -> text
 717[116]: AppendText(var[28], v1: text)
 720[100]: VarText(var[76]) -> text var=vr[76]:text in 2
 723[116]: ConstInt(val=6) -> integer
 728[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 733[100]: ConstText(_value="4") -> text
 736[116]: AppendText(var[28], v1: text)
 739[100]: VarText(var[76]) -> text var=vr[76]:text in 2
 742[116]: ConstInt(val=7) -> integer
 747[120]: FormatText(var[28], val: text, width: integer, dir=1, token=32)
 752[100]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 755[116]: FreeText(var[76])
 758[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 762[92]: AppendText(var[52], v1: text)
 765[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 768[92]: ConstText(_value="1abc  2abc3abc   4    abc") -> text
 795[108]: EqText(v1: text, v2: text) -> boolean
 796[77]: GotoFalseWord(jump=802, if_false: boolean)
 799[76]: GotoWord(jump=875)
 802[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 805[76]: ConstText(_value="Test failed ") -> text
 819[92]: AppendText(var[4], v1: text)
 822[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 825[92]: ConstInt(val=0) -> integer
 830[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 835[76]: ConstText(_value=" != "1abc  2abc3abc   4    abc"") -> text
 868[92]: AppendText(var[4], v1: text)
 871[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 874[92]: Panic(message: text)
 875[76]: FreeText(var[52])
 878[76]: FreeText(var[28])
 881[76]: FreeText(var[4])
 884[76]: Return(ret=0, value=0, discard=76)

Execute test:
  655:[8] Text()
  656:[32] Text()
  657:[56] Text()
  658:[80] Text()
  659:[104] ConstText(_value="abc") -> "abc"[104]
  664:[120] AppendText(var[80], v1="abc"[104])
  667:[104] ClearText(var[32])
  670:[104] ConstText(_value="1") -> "1"[104]
  673:[120] AppendText(var[32], v1="1"[104])
  676:[104] VarText(var[80]) -> "abc"[104]
  679:[120] ConstInt(val=2) -> 2[120]
  684:[124] ConstInt(val=3) -> 3[124]
  689:[128] AddInt(v1=2[120], v2=3[124]) -> 5[120]
  690:[124] FormatText(var[32], val="abc"[104], width=5[120], dir=-1, token=32)
  695:[104] ConstText(_value="2") -> "2"[104]
  698:[120] AppendText(var[32], v1="2"[104])
  701:[104] VarText(var[80]) -> "abc"[104]
  704:[120] ConstInt(val=0) -> 0[120]
  709:[124] FormatText(var[32], val="abc"[104], width=0[120], dir=-1, token=32)
  714:[104] ConstText(_value="3") -> "3"[104]
  717:[120] AppendText(var[32], v1="3"[104])
  720:[104] VarText(var[80]) -> "abc"[104]
  723:[120] ConstInt(val=6) -> 6[120]
  728:[124] FormatText(var[32], val="abc"[104], width=6[120], dir=-1, token=32)
  733:[104] ConstText(_value="4") -> "4"[104]
  736:[120] AppendText(var[32], v1="4"[104])
  739:[104] VarText(var[80]) -> "abc"[104]
  742:[120] ConstInt(val=7) -> 7[120]
  747:[124] FormatText(var[32], val="abc"[104], width=7[120], dir=1, token=32)
  752:[104] VarText(var[32]) -> "1abc  2abc3abc   4    abc"[104]
  755:[120] FreeText(var[80])
  758:[120] FreeStack(value=16, discard=40)
  762:[96] AppendText(var[56], v1="1abc  2abc3abc   4    abc"[80])
  765:[80] VarText(var[56]) -> "1abc  2abc3abc   4    abc"[80]
  768:[96] ConstText(_value="1abc  2abc3abc   4    abc") -> "1abc  2abc3abc   4    abc"[96]
  795:[112] EqText(v1="1abc  2abc3abc   4    abc"[80], v2="1abc  2abc3abc   4    abc"[96]) -> true[80]
  796:[81] GotoFalseWord(jump=802, if_false=true[80])
  799:[80] GotoWord(jump=875)
  875:[80] FreeText(var[56])
  878:[80] FreeText(var[32])
  881:[80] FreeText(var[8])
  884:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
