pub fn test() {
    test_value = {vr="abc"; "1{vr:<2+3}2{vr}3{vr:6}4{vr:>7}"};
    assert(
        test_value == "1abc  2abc3abc   4    abc",
        "Test failed {test_value} != \"1abc  2abc3abc   4    abc\""
    );
}
fn test() {#block(1):void
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text = {#block(2):text
    vr(2):text = "abc";
    {#Formatted string(3):text
      __work_1(1):text = "1";
      OpFormatText(__work_1(1), vr(2), OpAddInt(2i32, 3i32), -1i32, 32i32);
      OpAppendText(__work_1(1), "2");
      OpFormatText(__work_1(1), vr(2), 0i32, -1i32, 32i32);
      OpAppendText(__work_1(1), "3");
      OpFormatText(__work_1(1), vr(2), 6i32, -1i32, 32i32);
      OpAppendText(__work_1(1), "4");
      OpFormatText(__work_1(1), vr(2), 7i32, 1i32, 32i32);
      OpFreeText(vr(2));
      __work_1(1);
    }#Formatted string(3):text;
  }#block(2):text;
  if OpEqText(test_value(1), "1abc  2abc3abc   4    abc") null else OpPanic({#Formatted string(4):text
    __work_2(1):text = "Test failed ";
    OpFormatText(__work_2(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_2(1), " != "1abc  2abc3abc   4    abc"");
    __work_2(1);
  }#Formatted string(4):text);
  OpFreeText(test_value(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for format_text:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: Text() var=test_value[56]:text
   3[80]: Text() var=vr[80]:text
   4[104]: ConstText(_value="abc") -> text
   9[120]: AppendText(var[80], v1: text)
  12[104]: ClearText(var[32]) var=__work_1[32]:text
  15[104]: ConstText(_value="1") -> text
  18[120]: AppendText(var[32], v1: text)
  21[104]: VarText(var[80]) -> text var=vr[80]:text
  24[120]: ConstInt(val=2) -> integer
  29[124]: ConstInt(val=3) -> integer
  34[128]: AddInt(v1: integer, v2: integer) -> integer
  35[124]: FormatText(var[32], val: text, width: integer, dir=-1, token=32)
  40[104]: ConstText(_value="2") -> text
  43[120]: AppendText(var[32], v1: text)
  46[104]: VarText(var[80]) -> text var=vr[80]:text
  49[120]: ConstInt(val=0) -> integer
  54[124]: FormatText(var[32], val: text, width: integer, dir=-1, token=32)
  59[104]: ConstText(_value="3") -> text
  62[120]: AppendText(var[32], v1: text)
  65[104]: VarText(var[80]) -> text var=vr[80]:text
  68[120]: ConstInt(val=6) -> integer
  73[124]: FormatText(var[32], val: text, width: integer, dir=-1, token=32)
  78[104]: ConstText(_value="4") -> text
  81[120]: AppendText(var[32], v1: text)
  84[104]: VarText(var[80]) -> text var=vr[80]:text
  87[120]: ConstInt(val=7) -> integer
  92[124]: FormatText(var[32], val: text, width: integer, dir=1, token=32)
  97[104]: FreeText(var[80])
 100[104]: VarText(var[32]) -> text var=__work_1[32]:text
 103[120]: FreeStack(value=16, discard=40)
 107[96]: AppendText(var[56], v1: text)
 110[80]: VarText(var[56]) -> text var=test_value[56]:text
 113[96]: ConstText(_value="1abc  2abc3abc   4    abc") -> text
 140[112]: EqText(v1: text, v2: text) -> boolean
 141[81]: GotoFalseWord(jump=147, if_false: boolean)
 144[80]: GotoWord(jump=220)
 147[80]: ClearText(var[8]) var=__work_2[8]:text
 150[80]: ConstText(_value="Test failed ") -> text
 164[96]: AppendText(var[8], v1: text)
 167[80]: VarText(var[56]) -> text var=test_value[56]:text
 170[96]: ConstInt(val=0) -> integer
 175[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
 180[80]: ConstText(_value=" != "1abc  2abc3abc   4    abc"") -> text
 213[96]: AppendText(var[8], v1: text)
 216[80]: VarText(var[8]) -> text var=__work_2[8]:text
 219[96]: Panic(message: text)
 220[80]: FreeText(var[56])
 223[80]: FreeText(var[32])
 226[80]: FreeText(var[8])
 229[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] Text()
    4:[104] ConstText(_value="abc") -> "abc"[104]
    9:[120] AppendText(var[80], v1="abc"[104])
   12:[104] ClearText(var[32])
   15:[104] ConstText(_value="1") -> "1"[104]
   18:[120] AppendText(var[32], v1="1"[104])
   21:[104] VarText(var[80]) -> "abc"[104]
   24:[120] ConstInt(val=2) -> 2[120]
   29:[124] ConstInt(val=3) -> 3[124]
   34:[128] AddInt(v1=2[120], v2=3[124]) -> 5[120]
   35:[124] FormatText(var[32], val="abc"[104], width=5[120], dir=-1, token=32)
   40:[104] ConstText(_value="2") -> "2"[104]
   43:[120] AppendText(var[32], v1="2"[104])
   46:[104] VarText(var[80]) -> "abc"[104]
   49:[120] ConstInt(val=0) -> 0[120]
   54:[124] FormatText(var[32], val="abc"[104], width=0[120], dir=-1, token=32)
   59:[104] ConstText(_value="3") -> "3"[104]
   62:[120] AppendText(var[32], v1="3"[104])
   65:[104] VarText(var[80]) -> "abc"[104]
   68:[120] ConstInt(val=6) -> 6[120]
   73:[124] FormatText(var[32], val="abc"[104], width=6[120], dir=-1, token=32)
   78:[104] ConstText(_value="4") -> "4"[104]
   81:[120] AppendText(var[32], v1="4"[104])
   84:[104] VarText(var[80]) -> "abc"[104]
   87:[120] ConstInt(val=7) -> 7[120]
   92:[124] FormatText(var[32], val="abc"[104], width=7[120], dir=1, token=32)
   97:[104] FreeText(var[80])
  100:[104] VarText(var[32]) -> "1abc  2abc3abc   4    abc"[104]
  103:[120] FreeStack(value=16, discard=40)
  107:[96] AppendText(var[56], v1="1abc  2abc3abc   4    abc"[80])
  110:[80] VarText(var[56]) -> "1abc  2abc3abc   4    abc"[80]
  113:[96] ConstText(_value="1abc  2abc3abc   4    abc") -> "1abc  2abc3abc   4    abc"[96]
  140:[112] EqText(v1="1abc  2abc3abc   4    abc"[80], v2="1abc  2abc3abc   4    abc"[96]) -> true[80]
  141:[81] GotoFalseWord(jump=147, if_false=true[80])
  144:[80] GotoWord(jump=220)
  220:[80] FreeText(var[56])
  223:[80] FreeText(var[32])
  226:[80] FreeText(var[8])
  229:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
