pub fn test() {
    test_value = {vr="abc"; "1{vr:<2+3}2{vr}3{vr:6}4{vr:>7}"};
    assert(
        test_value == "1abc  2abc3abc   4    abc",
        "Test failed {test_value} != \"1abc  2abc3abc   4    abc\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    vr:text = "abc";
    {#3 formatting string
      __work_1:text = "1";
      OpFormatText(__work_1, vr, OpAddInt(2i32, 3i32), -1i32, 32i32);
      OpAppendText(__work_1, "2");
      OpFormatText(__work_1, vr, 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "3");
      OpFormatText(__work_1, vr, 6i32, -1i32, 32i32);
      OpAppendText(__work_1, "4");
      OpFormatText(__work_1, vr, 7i32, 1i32, 32i32);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "1abc  2abc3abc   4    abc") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1abc  2abc3abc   4    abc"");
    __work_2;
  }#4:text);
}#1

byte-code for format_text:test()
 645[0]: return-address
 645[4]: Text() var=__work_2[4]:text in 1
 646[28]: Text() var=__work_1[28]:text in 1
 647[52]: Text() var=test_value[52]:text in 1
 648[76]: Text() var=vr[76]:text in 2
 649[100]: ConstText(_value="abc") -> text
 654[116]: AppendText(var[76], v1: text)
 657[100]: ClearText(var[28]) var=__work_1[28]:text in 1
 660[100]: ConstText(_value="1") -> text
 663[116]: AppendText(var[28], v1: text)
 666[100]: VarText(var[76]) -> text var=vr[76]:text in 2
 669[116]: ConstInt(val=2) -> integer
 674[120]: ConstInt(val=3) -> integer
 679[124]: AddInt(v1: integer, v2: integer) -> integer
 680[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 685[100]: ConstText(_value="2") -> text
 688[116]: AppendText(var[28], v1: text)
 691[100]: VarText(var[76]) -> text var=vr[76]:text in 2
 694[116]: ConstInt(val=0) -> integer
 699[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 704[100]: ConstText(_value="3") -> text
 707[116]: AppendText(var[28], v1: text)
 710[100]: VarText(var[76]) -> text var=vr[76]:text in 2
 713[116]: ConstInt(val=6) -> integer
 718[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 723[100]: ConstText(_value="4") -> text
 726[116]: AppendText(var[28], v1: text)
 729[100]: VarText(var[76]) -> text var=vr[76]:text in 2
 732[116]: ConstInt(val=7) -> integer
 737[120]: FormatText(var[28], val: text, width: integer, dir=1, token=32)
 742[100]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 745[116]: FreeText(var[76])
 748[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 752[92]: AppendText(var[52], v1: text)
 755[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 758[92]: ConstText(_value="1abc  2abc3abc   4    abc") -> text
 785[108]: EqText(v1: text, v2: text) -> boolean
 786[77]: GotoFalseWord(jump=792, if_false: boolean)
 789[76]: GotoWord(jump=865)
 792[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 795[76]: ConstText(_value="Test failed ") -> text
 809[92]: AppendText(var[4], v1: text)
 812[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 815[92]: ConstInt(val=0) -> integer
 820[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 825[76]: ConstText(_value=" != "1abc  2abc3abc   4    abc"") -> text
 858[92]: AppendText(var[4], v1: text)
 861[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 864[92]: Panic(message: text)
 865[76]: FreeText(var[52])
 868[76]: FreeText(var[28])
 871[76]: FreeText(var[4])
 874[76]: Return(ret=0, value=0, discard=76)

Execute test:
  645:[8] Text()
  646:[32] Text()
  647:[56] Text()
  648:[80] Text()
  649:[104] ConstText(_value="abc") -> "abc"[104]
  654:[120] AppendText(var[80], v1="abc"[104])
  657:[104] ClearText(var[32])
  660:[104] ConstText(_value="1") -> "1"[104]
  663:[120] AppendText(var[32], v1="1"[104])
  666:[104] VarText(var[80]) -> "abc"[104]
  669:[120] ConstInt(val=2) -> 2[120]
  674:[124] ConstInt(val=3) -> 3[124]
  679:[128] AddInt(v1=2[120], v2=3[124]) -> 5[120]
  680:[124] FormatText(var[32], val="abc"[104], width=5[120], dir=-1, token=32)
  685:[104] ConstText(_value="2") -> "2"[104]
  688:[120] AppendText(var[32], v1="2"[104])
  691:[104] VarText(var[80]) -> "abc"[104]
  694:[120] ConstInt(val=0) -> 0[120]
  699:[124] FormatText(var[32], val="abc"[104], width=0[120], dir=-1, token=32)
  704:[104] ConstText(_value="3") -> "3"[104]
  707:[120] AppendText(var[32], v1="3"[104])
  710:[104] VarText(var[80]) -> "abc"[104]
  713:[120] ConstInt(val=6) -> 6[120]
  718:[124] FormatText(var[32], val="abc"[104], width=6[120], dir=-1, token=32)
  723:[104] ConstText(_value="4") -> "4"[104]
  726:[120] AppendText(var[32], v1="4"[104])
  729:[104] VarText(var[80]) -> "abc"[104]
  732:[120] ConstInt(val=7) -> 7[120]
  737:[124] FormatText(var[32], val="abc"[104], width=7[120], dir=1, token=32)
  742:[104] VarText(var[32]) -> "1abc  2abc3abc   4    abc"[104]
  745:[120] FreeText(var[80])
  748:[120] FreeStack(value=16, discard=40)
  752:[96] AppendText(var[56], v1="1abc  2abc3abc   4    abc"[80])
  755:[80] VarText(var[56]) -> "1abc  2abc3abc   4    abc"[80]
  758:[96] ConstText(_value="1abc  2abc3abc   4    abc") -> "1abc  2abc3abc   4    abc"[96]
  785:[112] EqText(v1="1abc  2abc3abc   4    abc"[80], v2="1abc  2abc3abc   4    abc"[96]) -> true[80]
  786:[81] GotoFalseWord(jump=792, if_false=true[80])
  789:[80] GotoWord(jump=865)
  865:[80] FreeText(var[56])
  868:[80] FreeText(var[32])
  871:[80] FreeText(var[8])
  874:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
