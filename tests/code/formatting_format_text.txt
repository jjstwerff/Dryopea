pub fn test() {
    test_value = {vr="abc"; "1{vr:<2+3}2{vr}3{vr:6}4{vr:>7}"};
    assert(
        test_value == "1abc  2abc3abc   4    abc",
        "Test failed {test_value} != \"1abc  2abc3abc   4    abc\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    vr:text = "abc";
    {#3 formatting string
      __work_1:text = "1";
      OpFormatText(__work_1, vr, OpAddInt(2i32, 3i32), -1i32, 32i32);
      OpAppendText(__work_1, "2");
      OpFormatText(__work_1, vr, 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "3");
      OpFormatText(__work_1, vr, 6i32, -1i32, 32i32);
      OpAppendText(__work_1, "4");
      OpFormatText(__work_1, vr, 7i32, 1i32, 32i32);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "1abc  2abc3abc   4    abc") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1abc  2abc3abc   4    abc"");
    __work_2;
  }#4:text);
}#1

byte-code for format_text:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Text()
 694[52]: Text()
 695[76]: Text()
 696[100]: ConstText(_value="abc") -> text
 701[116]: AppendText(var[76], v1: text)
 704[100]: ClearText(var[28])
 707[100]: ConstText(_value="1") -> text
 710[116]: AppendText(var[28], v1: text)
 713[100]: VarText(var[76]) -> text
 716[116]: ConstInt(val=2) -> integer
 721[120]: ConstInt(val=3) -> integer
 726[124]: AddInt(v1: integer, v2: integer) -> integer
 727[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 732[100]: ConstText(_value="2") -> text
 735[116]: AppendText(var[28], v1: text)
 738[100]: VarText(var[76]) -> text
 741[116]: ConstInt(val=0) -> integer
 746[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 751[100]: ConstText(_value="3") -> text
 754[116]: AppendText(var[28], v1: text)
 757[100]: VarText(var[76]) -> text
 760[116]: ConstInt(val=6) -> integer
 765[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 770[100]: ConstText(_value="4") -> text
 773[116]: AppendText(var[28], v1: text)
 776[100]: VarText(var[76]) -> text
 779[116]: ConstInt(val=7) -> integer
 784[120]: FormatText(var[28], val: text, width: integer, dir=1, token=32)
 789[100]: VarText(var[28]) -> text
 792[116]: FreeText(var[76])
 795[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 799[92]: AppendText(var[52], v1: text)
 802[76]: VarText(var[52]) -> text
 805[92]: ConstText(_value="1abc  2abc3abc   4    abc") -> text
 832[108]: EqText(v1: text, v2: text) -> boolean
 833[77]: GotoFalseWord(jump=839, if_false: boolean)
 836[76]: GotoWord(jump=912)
 839[76]: ClearText(var[4])
 842[76]: ConstText(_value="Test failed ") -> text
 856[92]: AppendText(var[4], v1: text)
 859[76]: VarText(var[52]) -> text
 862[92]: ConstInt(val=0) -> integer
 867[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 872[76]: ConstText(_value=" != "1abc  2abc3abc   4    abc"") -> text
 905[92]: AppendText(var[4], v1: text)
 908[76]: VarText(var[4]) -> text
 911[92]: Panic(message: text)
 912[76]: FreeText(var[52])
 915[76]: FreeText(var[28])
 918[76]: FreeText(var[4])
 921[76]: Return(ret=0, value=0, discard=76)

Execute test:
  692:[8] Text()
  693:[32] Text()
  694:[56] Text()
  695:[80] Text()
  696:[104] ConstText(_value="abc") -> "abc"[104]
  701:[120] AppendText(var[80], v1="abc"[104])
  704:[104] ClearText(var[32])
  707:[104] ConstText(_value="1") -> "1"[104]
  710:[120] AppendText(var[32], v1="1"[104])
  713:[104] VarText(var[80]) -> "abc"[104]
  716:[120] ConstInt(val=2) -> 2[120]
  721:[124] ConstInt(val=3) -> 3[124]
  726:[128] AddInt(v1=2[120], v2=3[124]) -> 5[120]
  727:[124] FormatText(var[32], val="abc"[104], width=5[120], dir=-1, token=32)
  732:[104] ConstText(_value="2") -> "2"[104]
  735:[120] AppendText(var[32], v1="2"[104])
  738:[104] VarText(var[80]) -> "abc"[104]
  741:[120] ConstInt(val=0) -> 0[120]
  746:[124] FormatText(var[32], val="abc"[104], width=0[120], dir=-1, token=32)
  751:[104] ConstText(_value="3") -> "3"[104]
  754:[120] AppendText(var[32], v1="3"[104])
  757:[104] VarText(var[80]) -> "abc"[104]
  760:[120] ConstInt(val=6) -> 6[120]
  765:[124] FormatText(var[32], val="abc"[104], width=6[120], dir=-1, token=32)
  770:[104] ConstText(_value="4") -> "4"[104]
  773:[120] AppendText(var[32], v1="4"[104])
  776:[104] VarText(var[80]) -> "abc"[104]
  779:[120] ConstInt(val=7) -> 7[120]
  784:[124] FormatText(var[32], val="abc"[104], width=7[120], dir=1, token=32)
  789:[104] VarText(var[32]) -> "1abc  2abc3abc   4    abc"[104]
  792:[120] FreeText(var[80])
  795:[120] FreeStack(value=16, discard=40)
  799:[96] AppendText(var[56], v1="1abc  2abc3abc   4    abc"[80])
  802:[80] VarText(var[56]) -> "1abc  2abc3abc   4    abc"[80]
  805:[96] ConstText(_value="1abc  2abc3abc   4    abc") -> "1abc  2abc3abc   4    abc"[96]
  832:[112] EqText(v1="1abc  2abc3abc   4    abc"[80], v2="1abc  2abc3abc   4    abc"[96]) -> true[80]
  833:[81] GotoFalseWord(jump=839, if_false=true[80])
  836:[80] GotoWord(jump=912)
  912:[80] FreeText(var[56])
  915:[80] FreeText(var[32])
  918:[80] FreeText(var[8])
  921:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
