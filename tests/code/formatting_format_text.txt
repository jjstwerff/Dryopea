pub fn test() {
    test_value = {vr="abc"; "1{vr:<2+3}2{vr}3{vr:6}4{vr:>7}"};
    assert(
        test_value == "1abc  2abc3abc   4    abc",
        "Test failed {test_value} != \"1abc  2abc3abc   4    abc\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    vr:text = "abc";
    {#3 formatting string
      __work_1:text = "1";
      OpFormatText(__work_1, vr, OpAddInt(2i32, 3i32), -1i32, 32i32);
      OpAppendText(__work_1, "2");
      OpFormatText(__work_1, vr, 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "3");
      OpFormatText(__work_1, vr, 6i32, -1i32, 32i32);
      OpAppendText(__work_1, "4");
      OpFormatText(__work_1, vr, 7i32, 1i32, 32i32);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "1abc  2abc3abc   4    abc") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1abc  2abc3abc   4    abc"");
    __work_2;
  }#4:text);
}#1

byte-code for format_text:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Text()
 677[52]: Text()
 678[76]: Text()
 679[100]: ConstText(_value="abc") -> text
 684[116]: AppendText(var[76], v1: text)
 687[100]: ClearText(var[28])
 690[100]: ConstText(_value="1") -> text
 693[116]: AppendText(var[28], v1: text)
 696[100]: VarText(var[76]) -> text
 699[116]: ConstInt(val=2) -> integer
 704[120]: ConstInt(val=3) -> integer
 709[124]: AddInt(v1: integer, v2: integer) -> integer
 710[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 715[100]: ConstText(_value="2") -> text
 718[116]: AppendText(var[28], v1: text)
 721[100]: VarText(var[76]) -> text
 724[116]: ConstInt(val=0) -> integer
 729[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 734[100]: ConstText(_value="3") -> text
 737[116]: AppendText(var[28], v1: text)
 740[100]: VarText(var[76]) -> text
 743[116]: ConstInt(val=6) -> integer
 748[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 753[100]: ConstText(_value="4") -> text
 756[116]: AppendText(var[28], v1: text)
 759[100]: VarText(var[76]) -> text
 762[116]: ConstInt(val=7) -> integer
 767[120]: FormatText(var[28], val: text, width: integer, dir=1, token=32)
 772[100]: VarText(var[28]) -> text
 775[116]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 779[92]: AppendText(var[52], v1: text)
 782[76]: VarText(var[52]) -> text
 785[92]: ConstText(_value="1abc  2abc3abc   4    abc") -> text
 812[108]: EqText(v1: text, v2: text) -> boolean
 813[77]: GotoFalseWord(jump=819, if_false: boolean)
 816[76]: GotoWord(jump=892)
 819[76]: ClearText(var[4])
 822[76]: ConstText(_value="Test failed ") -> text
 836[92]: AppendText(var[4], v1: text)
 839[76]: VarText(var[52]) -> text
 842[92]: ConstInt(val=0) -> integer
 847[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 852[76]: ConstText(_value=" != "1abc  2abc3abc   4    abc"") -> text
 885[92]: AppendText(var[4], v1: text)
 888[76]: VarText(var[4]) -> text
 891[92]: Panic(message: text)
 892[76]: Return(ret=0, value=0, discard=76)

Execute test:
  675:[8] Text()
  676:[32] Text()
  677:[56] Text()
  678:[80] Text()
  679:[104] ConstText(_value="abc") -> "abc"[104]
  684:[120] AppendText(var[80], v1="abc"[104])
  687:[104] ClearText(var[32])
  690:[104] ConstText(_value="1") -> "1"[104]
  693:[120] AppendText(var[32], v1="1"[104])
  696:[104] VarText(var[80]) -> "abc"[104]
  699:[120] ConstInt(val=2) -> 2[120]
  704:[124] ConstInt(val=3) -> 3[124]
  709:[128] AddInt(v1=2[120], v2=3[124]) -> 5[120]
  710:[124] FormatText(var[32], val="abc"[104], width=5[120], dir=-1, token=32)
  715:[104] ConstText(_value="2") -> "2"[104]
  718:[120] AppendText(var[32], v1="2"[104])
  721:[104] VarText(var[80]) -> "abc"[104]
  724:[120] ConstInt(val=0) -> 0[120]
  729:[124] FormatText(var[32], val="abc"[104], width=0[120], dir=-1, token=32)
  734:[104] ConstText(_value="3") -> "3"[104]
  737:[120] AppendText(var[32], v1="3"[104])
  740:[104] VarText(var[80]) -> "abc"[104]
  743:[120] ConstInt(val=6) -> 6[120]
  748:[124] FormatText(var[32], val="abc"[104], width=6[120], dir=-1, token=32)
  753:[104] ConstText(_value="4") -> "4"[104]
  756:[120] AppendText(var[32], v1="4"[104])
  759:[104] VarText(var[80]) -> "abc"[104]
  762:[120] ConstInt(val=7) -> 7[120]
  767:[124] FormatText(var[32], val="abc"[104], width=7[120], dir=1, token=32)
  772:[104] VarText(var[32]) -> "1abc  2abc3abc   4    abc"[104]
  775:[120] FreeStack(value=16, discard=24)
  779:[96] AppendText(var[56], v1="1abc  2abc3abc   4    abc"[80])
  782:[80] VarText(var[56]) -> "1abc  2abc3abc   4    abc"[80]
  785:[96] ConstText(_value="1abc  2abc3abc   4    abc") -> "1abc  2abc3abc   4    abc"[96]
  812:[112] EqText(v1="1abc  2abc3abc   4    abc"[80], v2="1abc  2abc3abc   4    abc"[96]) -> true[80]
  813:[81] GotoFalseWord(jump=819, if_false=true[80])
  816:[80] GotoWord(jump=892)
  892:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
