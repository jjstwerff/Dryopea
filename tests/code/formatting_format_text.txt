pub fn test() {
    test_value = {vr="abc"; "1{vr:<2+3}2{vr}3{vr:6}4{vr:>7}"};
    assert(
        test_value == "1abc  2abc3abc   4    abc",
        "Test failed {test_value} != \"1abc  2abc3abc   4    abc\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    vr:text = "abc";
    {#3 formatting string
      __work_1:text = "1";
      OpFormatText(__work_1, vr, OpAddInt(2i32, 3i32), -1i32, 32i32);
      OpAppendText(__work_1, "2");
      OpFormatText(__work_1, vr, 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "3");
      OpFormatText(__work_1, vr, 6i32, -1i32, 32i32);
      OpAppendText(__work_1, "4");
      OpFormatText(__work_1, vr, 7i32, 1i32, 32i32);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "1abc  2abc3abc   4    abc") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1abc  2abc3abc   4    abc"");
    __work_2;
  }#4:text);
}#1

byte-code for format_text:test() [1067]
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: Text() var=vr[76]:text in 2
   4[100]: ConstText(_value="abc") -> text
   9[116]: AppendText(var[76], v1: text)
  12[100]: ClearText(var[28]) var=__work_1[28]:text in 1
  15[100]: ConstText(_value="1") -> text
  18[116]: AppendText(var[28], v1: text)
  21[100]: VarText(var[76]) -> text var=vr[76]:text in 2
  24[116]: ConstInt(val=2) -> integer
  29[120]: ConstInt(val=3) -> integer
  34[124]: AddInt(v1: integer, v2: integer) -> integer
  35[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
  40[100]: ConstText(_value="2") -> text
  43[116]: AppendText(var[28], v1: text)
  46[100]: VarText(var[76]) -> text var=vr[76]:text in 2
  49[116]: ConstInt(val=0) -> integer
  54[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
  59[100]: ConstText(_value="3") -> text
  62[116]: AppendText(var[28], v1: text)
  65[100]: VarText(var[76]) -> text var=vr[76]:text in 2
  68[116]: ConstInt(val=6) -> integer
  73[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
  78[100]: ConstText(_value="4") -> text
  81[116]: AppendText(var[28], v1: text)
  84[100]: VarText(var[76]) -> text var=vr[76]:text in 2
  87[116]: ConstInt(val=7) -> integer
  92[120]: FormatText(var[28], val: text, width: integer, dir=1, token=32)
  97[100]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 100[116]: FreeText(var[76])
 103[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 107[92]: AppendText(var[52], v1: text)
 110[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 113[92]: ConstText(_value="1abc  2abc3abc   4    abc") -> text
 140[108]: EqText(v1: text, v2: text) -> boolean
 141[77]: GotoFalseWord(jump=147, if_false: boolean)
 144[76]: GotoWord(jump=220)
 147[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 150[76]: ConstText(_value="Test failed ") -> text
 164[92]: AppendText(var[4], v1: text)
 167[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 170[92]: ConstInt(val=0) -> integer
 175[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 180[76]: ConstText(_value=" != "1abc  2abc3abc   4    abc"") -> text
 213[92]: AppendText(var[4], v1: text)
 216[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 219[92]: Panic(message: text)
 220[76]: FreeText(var[52])
 223[76]: FreeText(var[28])
 226[76]: FreeText(var[4])
 229[76]: Return(ret=0, value=0, discard=76)

