pub fn test() {
    test_value = {vr="abc"; "1{vr:<2+3}2{vr}3{vr:6}4{vr:>7}"};
    assert(
        test_value == "1abc  2abc3abc   4    abc",
        "Test failed {test_value} != \"1abc  2abc3abc   4    abc\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    vr:text = "abc";
    {#3 formatting string
      __work_1:text = "1";
      OpFormatText(__work_1, vr, OpAddInt(2i32, 3i32), -1i32, 32i32);
      OpAppendText(__work_1, "2");
      OpFormatText(__work_1, vr, 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "3");
      OpFormatText(__work_1, vr, 6i32, -1i32, 32i32);
      OpAppendText(__work_1, "4");
      OpFormatText(__work_1, vr, 7i32, 1i32, 32i32);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "1abc  2abc3abc   4    abc") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1abc  2abc3abc   4    abc"");
    __work_2;
  }#4:text);
}#1

byte-code for format_text:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: Text()
 693[52]: Text()
 694[76]: Text()
 695[100]: ConstText(_value="abc") -> text
 700[116]: AppendText(var[76], v1: text)
 703[100]: ClearText(var[28])
 706[100]: ConstText(_value="1") -> text
 709[116]: AppendText(var[28], v1: text)
 712[100]: VarText(var[76]) -> text
 715[116]: ConstInt(val=2) -> integer
 720[120]: ConstInt(val=3) -> integer
 725[124]: AddInt(v1: integer, v2: integer) -> integer
 726[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 731[100]: ConstText(_value="2") -> text
 734[116]: AppendText(var[28], v1: text)
 737[100]: VarText(var[76]) -> text
 740[116]: ConstInt(val=0) -> integer
 745[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 750[100]: ConstText(_value="3") -> text
 753[116]: AppendText(var[28], v1: text)
 756[100]: VarText(var[76]) -> text
 759[116]: ConstInt(val=6) -> integer
 764[120]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 769[100]: ConstText(_value="4") -> text
 772[116]: AppendText(var[28], v1: text)
 775[100]: VarText(var[76]) -> text
 778[116]: ConstInt(val=7) -> integer
 783[120]: FormatText(var[28], val: text, width: integer, dir=1, token=32)
 788[100]: VarText(var[28]) -> text
 791[116]: FreeText(var[76])
 794[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 798[92]: AppendText(var[52], v1: text)
 801[76]: VarText(var[52]) -> text
 804[92]: ConstText(_value="1abc  2abc3abc   4    abc") -> text
 831[108]: EqText(v1: text, v2: text) -> boolean
 832[77]: GotoFalseWord(jump=838, if_false: boolean)
 835[76]: GotoWord(jump=911)
 838[76]: ClearText(var[4])
 841[76]: ConstText(_value="Test failed ") -> text
 855[92]: AppendText(var[4], v1: text)
 858[76]: VarText(var[52]) -> text
 861[92]: ConstInt(val=0) -> integer
 866[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 871[76]: ConstText(_value=" != "1abc  2abc3abc   4    abc"") -> text
 904[92]: AppendText(var[4], v1: text)
 907[76]: VarText(var[4]) -> text
 910[92]: Panic(message: text)
 911[76]: FreeText(var[52])
 914[76]: FreeText(var[28])
 917[76]: FreeText(var[4])
 920[76]: Return(ret=0, value=0, discard=76)

Execute test:
  691:[8] Text()
  692:[32] Text()
  693:[56] Text()
  694:[80] Text()
  695:[104] ConstText(_value="abc") -> "abc"[104]
  700:[120] AppendText(var[80], v1="abc"[104])
  703:[104] ClearText(var[32])
  706:[104] ConstText(_value="1") -> "1"[104]
  709:[120] AppendText(var[32], v1="1"[104])
  712:[104] VarText(var[80]) -> "abc"[104]
  715:[120] ConstInt(val=2) -> 2[120]
  720:[124] ConstInt(val=3) -> 3[124]
  725:[128] AddInt(v1=2[120], v2=3[124]) -> 5[120]
  726:[124] FormatText(var[32], val="abc"[104], width=5[120], dir=-1, token=32)
  731:[104] ConstText(_value="2") -> "2"[104]
  734:[120] AppendText(var[32], v1="2"[104])
  737:[104] VarText(var[80]) -> "abc"[104]
  740:[120] ConstInt(val=0) -> 0[120]
  745:[124] FormatText(var[32], val="abc"[104], width=0[120], dir=-1, token=32)
  750:[104] ConstText(_value="3") -> "3"[104]
  753:[120] AppendText(var[32], v1="3"[104])
  756:[104] VarText(var[80]) -> "abc"[104]
  759:[120] ConstInt(val=6) -> 6[120]
  764:[124] FormatText(var[32], val="abc"[104], width=6[120], dir=-1, token=32)
  769:[104] ConstText(_value="4") -> "4"[104]
  772:[120] AppendText(var[32], v1="4"[104])
  775:[104] VarText(var[80]) -> "abc"[104]
  778:[120] ConstInt(val=7) -> 7[120]
  783:[124] FormatText(var[32], val="abc"[104], width=7[120], dir=1, token=32)
  788:[104] VarText(var[32]) -> "1abc  2abc3abc   4    abc"[104]
  791:[120] FreeText(var[80])
  794:[120] FreeStack(value=16, discard=40)
  798:[96] AppendText(var[56], v1="1abc  2abc3abc   4    abc"[80])
  801:[80] VarText(var[56]) -> "1abc  2abc3abc   4    abc"[80]
  804:[96] ConstText(_value="1abc  2abc3abc   4    abc") -> "1abc  2abc3abc   4    abc"[96]
  831:[112] EqText(v1="1abc  2abc3abc   4    abc"[80], v2="1abc  2abc3abc   4    abc"[96]) -> true[80]
  832:[81] GotoFalseWord(jump=838, if_false=true[80])
  835:[80] GotoWord(jump=911)
  911:[80] FreeText(var[56])
  914:[80] FreeText(var[32])
  917:[80] FreeText(var[8])
  920:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
