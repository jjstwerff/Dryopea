pub fn test() {
    test_value = {a="12345"; a[2]};
    assert(
        test_value == 51,
        "Test failed {test_value} != 51"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:character = {#2 block
    a:text = "12345";
    OpGetCharacter(a, 2i32);
  }#2:character;
  if OpEqInt(OpConvIntFromCharacter(test_value), 51i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpAppendCharacter(__work_1, test_value);
    OpAppendText(__work_1, " != 51");
    __work_1;
  }#3:text);
}#1

byte-code for str_index:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=a[28]:text in 2
   2[52]: ConstText(_value="12345") -> text
   9[68]: AppendText(var[28], v1: text)
  12[52]: VarText(var[28]) -> text var=a[28]:text in 2
  15[68]: ConstInt(val=2) -> integer
  20[72]: GetCharacter(v1: text, v2: integer) -> character
  21[56]: FreeText(var[28])
  24[56]: FreeStack(value=4, discard=28) type=character[4]:Base[6]
  28[32]: VarInt(var[28]) -> integer var=test_value[28]:character in 1
  31[36]: ConvIntFromCharacter(v1: character) -> integer
  32[36]: ConstInt(val=51) -> integer
  37[40]: EqInt(v1: integer, v2: integer) -> boolean
  38[33]: GotoFalseWord(jump=44, if_false: boolean)
  41[32]: GotoWord(jump=85)
  44[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  47[32]: ConstText(_value="Test failed ") -> text
  61[48]: AppendText(var[4], v1: text)
  64[32]: VarInt(var[28]) -> integer var=test_value[28]:character in 1
  67[36]: AppendCharacter(var[4], v1: character)
  70[32]: ConstText(_value=" != 51") -> text
  78[48]: AppendText(var[4], v1: text)
  81[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  84[48]: Panic(message: text)
  85[32]: FreeText(var[4])
  88[32]: Return(ret=0, value=0, discard=32)

