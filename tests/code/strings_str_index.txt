Test code:
pub fn test() {
    test_value = {a="12345"; a[2]};
    assert(
        test_value == "3",
        "Test failed {test_value} != \"3\""
    );
}

fn test {
  let test_value = {
    let a = "12345";
    OpGetTextSub(a, 2i32, -2147483648i32);
  };
  if OpEqText(test_value, "3") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "3"");
    append_9;
  })};
}

byte-code for str_index:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: Text()
 666[52]: ConstText(_value="12345") -> text
 673[68]: AppendText(var[28], v1: text)
 676[52]: VarText(var[28]) -> text
 679[68]: ConstInt(val=2) -> integer
 684[72]: ConstInt(val=-2147483648) -> integer
 689[76]: GetTextSub(v1: text, from: integer, till: integer) -> text
 690[68]: GenFreeStack(value=16, discard=24)
 694[44]: AppendText(var[4], v1: text)
 697[28]: VarText(var[4]) -> text
 700[44]: ConstText(_value="3") -> text
 703[60]: EqText(v1: text, v2: text) -> boolean
 704[29]: GenGotoFalseWord(jump=710, if_false: boolean)
 707[28]: GenGotoWord(jump=761)
 710[28]: Text()
 711[52]: ConstText(_value="Test failed ") -> text
 725[68]: AppendText(var[28], v1: text)
 728[52]: VarText(var[4]) -> text
 731[68]: ConstInt(val=0) -> integer
 736[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 741[52]: ConstText(_value=" != "3"") -> text
 750[68]: AppendText(var[28], v1: text)
 753[52]: VarText(var[28]) -> text
 756[68]: GenFreeStack(value=16, discard=24)
 760[44]: GenPanic(message: text)
 761[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] Text()
  666:[52] ConstText(_value="12345") -> "12345"[52]
  673:[68] AppendText(var[28], v1="12345"[52])
  676:[52] VarText(var[28]) -> "12345"[52]
  679:[68] ConstInt(val=2) -> 2[68]
  684:[72] ConstInt(val=-2147483648) -> -2147483648[72]
  689:[76] GetTextSub(v1="12345"[52], from=2[68], till=-2147483648[72]) -> "3"[52]
  690:[68] GenFreeStack(value=16, discard=24)
  694:[44] AppendText(var[4], v1="3"[28])
  697:[28] VarText(var[4]) -> "3"[28]
  700:[44] ConstText(_value="3") -> "3"[44]
  703:[60] EqText(v1="3"[28], v2="3"[44]) -> true[28]
  704:[29] GenGotoFalseWord(jump=710, if_false=true[28])
  707:[28] GenGotoWord(jump=761)
  761:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
