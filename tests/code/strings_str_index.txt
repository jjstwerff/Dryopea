pub fn test() {
    test_value = {a="12345"; a[2]};
    assert(
        test_value == 51,
        "Test failed {test_value} != 51"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):character = {#block(2):character
    a(2):text = "12345";
    OpGetCharacter(a(2), 2i32);
    OpFreeText(a(2));
  }#block(2):character;
  if OpEqInt(OpConvIntFromCharacter(test_value(1)), 51i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpAppendCharacter(__work_1(1), test_value(1));
    OpAppendText(__work_1(1), " != 51");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for str_index:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=a[32]:text
   2[56]: ConstText(_value="12345") -> text
   9[72]: AppendText(var[32], v1: text)
  12[56]: VarText(var[32]) -> text var=a[32]:text
  15[72]: ConstInt(val=2) -> integer
  20[76]: GetCharacter(v1: text, v2: integer) -> character
  21[60]: FreeText(var[32])
  24[60]: FreeStack(value=4, discard=28)
  28[36]: VarInt(var[32]) -> integer var=test_value[32]:character
  31[40]: ConvIntFromCharacter(v1: character) -> integer
  32[40]: ConstInt(val=51) -> integer
  37[44]: EqInt(v1: integer, v2: integer) -> boolean
  38[37]: GotoFalseWord(jump=44, if_false: boolean)
  41[36]: GotoWord(jump=85)
  44[36]: ClearText(var[8]) var=__work_1[8]:text
  47[36]: ConstText(_value="Test failed ") -> text
  61[52]: AppendText(var[8], v1: text)
  64[36]: VarInt(var[32]) -> integer var=test_value[32]:character
  67[40]: AppendCharacter(var[8], v1: character)
  70[36]: ConstText(_value=" != 51") -> text
  78[52]: AppendText(var[8], v1: text)
  81[36]: VarText(var[8]) -> text var=__work_1[8]:text
  84[52]: Panic(message: text)
  85[36]: FreeText(var[8])
  88[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] ConstText(_value="12345") -> "12345"[56]
    9:[72] AppendText(var[32], v1="12345"[56])
   12:[56] VarText(var[32]) -> "12345"[56]
   15:[72] ConstInt(val=2) -> 2[72]
   20:[76] GetCharacter(v1="12345"[56], v2=2[72]) -> 3[56]
   21:[60] FreeText(var[32])
   24:[60] FreeStack(value=4, discard=28)
   28:[36] VarInt(var[32]) -> 51[36]
   31:[40] ConvIntFromCharacter(v1=3[36]) -> 51[36]
   32:[40] ConstInt(val=51) -> 51[40]
   37:[44] EqInt(v1=51[36], v2=51[40]) -> true[36]
   38:[37] GotoFalseWord(jump=44, if_false=true[36])
   41:[36] GotoWord(jump=85)
   85:[36] FreeText(var[8])
   88:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
