Test code:
pub fn test() {
    test_value = {"a{1.2:4.2}b{1.34}c{1.4:5}d{334.1:.2}e"};
    assert(
        test_value == "a1.20b1.34c  1.4d334.10e",
        "Test failed {test_value} != \"a1.20b1.34c  1.4d334.10e\""
    );
}

fn test {
  let test_value = {
    {
      let append_8 = "a";
      OpFormatFloat(append_8, 1.2f64, 4i32, 2i32);
      OpAppendText(append_8, "b");
      OpFormatFloat(append_8, 1.34f64, 0i32, 0i32);
      OpAppendText(append_8, "c");
      OpFormatFloat(append_8, 1.4f64, 5i32, 0i32);
      OpAppendText(append_8, "d");
      OpFormatFloat(append_8, 334.1f64, 0i32, 2i32);
      OpAppendText(append_8, "e");
      append_8;
    };
  };
  if OpEqText(test_value, "a1.20b1.34c  1.4d334.10e") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "a1.20b1.34c  1.4d334.10e"");
    append_9;
  })};
}

byte-code for format_float:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: Text()
 666[52]: ConstText(_value="a") -> text
 669[68]: AppendText(var[28], v1: text)
 672[52]: ConstFloat(val=1.2) -> float
 681[60]: ConstInt(val=4) -> integer
 686[64]: ConstInt(val=2) -> integer
 691[68]: FormatFloat(var[28], val: float, width: integer, precision: integer)
 694[52]: ConstText(_value="b") -> text
 697[68]: AppendText(var[28], v1: text)
 700[52]: ConstFloat(val=1.34) -> float
 709[60]: ConstInt(val=0) -> integer
 714[64]: ConstInt(val=0) -> integer
 719[68]: FormatFloat(var[28], val: float, width: integer, precision: integer)
 722[52]: ConstText(_value="c") -> text
 725[68]: AppendText(var[28], v1: text)
 728[52]: ConstFloat(val=1.4) -> float
 737[60]: ConstInt(val=5) -> integer
 742[64]: ConstInt(val=0) -> integer
 747[68]: FormatFloat(var[28], val: float, width: integer, precision: integer)
 750[52]: ConstText(_value="d") -> text
 753[68]: AppendText(var[28], v1: text)
 756[52]: ConstFloat(val=334.1) -> float
 765[60]: ConstInt(val=0) -> integer
 770[64]: ConstInt(val=2) -> integer
 775[68]: FormatFloat(var[28], val: float, width: integer, precision: integer)
 778[52]: ConstText(_value="e") -> text
 781[68]: AppendText(var[28], v1: text)
 784[52]: VarText(var[28]) -> text
 787[68]: GenFreeStack(value=16, discard=24)
 791[44]: AppendText(var[4], v1: text)
 794[28]: VarText(var[4]) -> text
 797[44]: ConstText(_value="a1.20b1.34c  1.4d334.10e") -> text
 823[60]: EqText(v1: text, v2: text) -> boolean
 824[29]: GenGotoFalseWord(jump=830, if_false: boolean)
 827[28]: GenGotoWord(jump=904)
 830[28]: Text()
 831[52]: ConstText(_value="Test failed ") -> text
 845[68]: AppendText(var[28], v1: text)
 848[52]: VarText(var[4]) -> text
 851[68]: ConstInt(val=0) -> integer
 856[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 861[52]: ConstText(_value=" != "a1.20b1.34c  1.4d334.10e"") -> text
 893[68]: AppendText(var[28], v1: text)
 896[52]: VarText(var[28]) -> text
 899[68]: GenFreeStack(value=16, discard=24)
 903[44]: GenPanic(message: text)
 904[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] Text()
  666:[52] ConstText(_value="a") -> "a"[52]
  669:[68] AppendText(var[28], v1="a"[52])
  672:[52] ConstFloat(val=1.2) -> 1.2[52]
  681:[60] ConstInt(val=4) -> 4[60]
  686:[64] ConstInt(val=2) -> 2[64]
  691:[68] FormatFloat(var[28], val=1.2[52], width=4[60], precision=2[64])
  694:[52] ConstText(_value="b") -> "b"[52]
  697:[68] AppendText(var[28], v1="b"[52])
  700:[52] ConstFloat(val=1.34) -> 1.34[52]
  709:[60] ConstInt(val=0) -> 0[60]
  714:[64] ConstInt(val=0) -> 0[64]
  719:[68] FormatFloat(var[28], val=1.34[52], width=0[60], precision=0[64])
  722:[52] ConstText(_value="c") -> "c"[52]
  725:[68] AppendText(var[28], v1="c"[52])
  728:[52] ConstFloat(val=1.4) -> 1.4[52]
  737:[60] ConstInt(val=5) -> 5[60]
  742:[64] ConstInt(val=0) -> 0[64]
  747:[68] FormatFloat(var[28], val=1.4[52], width=5[60], precision=0[64])
  750:[52] ConstText(_value="d") -> "d"[52]
  753:[68] AppendText(var[28], v1="d"[52])
  756:[52] ConstFloat(val=334.1) -> 334.1[52]
  765:[60] ConstInt(val=0) -> 0[60]
  770:[64] ConstInt(val=2) -> 2[64]
  775:[68] FormatFloat(var[28], val=334.1[52], width=0[60], precision=2[64])
  778:[52] ConstText(_value="e") -> "e"[52]
  781:[68] AppendText(var[28], v1="e"[52])
  784:[52] VarText(var[28]) -> "a1.20b1.34c  1.4d334.10e"[52]
  787:[68] GenFreeStack(value=16, discard=24)
  791:[44] AppendText(var[4], v1="a1.20b1.34c  1.4d334.10e"[28])
  794:[28] VarText(var[4]) -> "a1.20b1.34c  1.4d334.10e"[28]
  797:[44] ConstText(_value="a1.20b1.34c  1.4d334.10e") -> "a1.20b1.34c  1.4d334.10e"[44]
  823:[60] EqText(v1="a1.20b1.34c  1.4d334.10e"[28], v2="a1.20b1.34c  1.4d334.10e"[44]) -> true[28]
  824:[29] GenGotoFalseWord(jump=830, if_false=true[28])
  827:[28] GenGotoWord(jump=904)
  904:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
