Test code:
pub fn test() {
    test_value = {"a{1.2:4.2}b{1.34}c{1.4:5}d{334.1:.2}e"};
    assert(
        test_value == "a1.20b1.34c  1.4d334.10e",
        "Test failed {test_value} != \"a1.20b1.34c  1.4d334.10e\""
    );
}

fn test {
  let test_value = {
    {
      let append_8 = "a";
      OpFormatFloat(append_8, 1.2f64, 4i32, 2i32);
      OpAppendText(append_8, "b");
      OpFormatFloat(append_8, 1.34f64, 0i32, 0i32);
      OpAppendText(append_8, "c");
      OpFormatFloat(append_8, 1.4f64, 5i32, 0i32);
      OpAppendText(append_8, "d");
      OpFormatFloat(append_8, 334.1f64, 0i32, 2i32);
      OpAppendText(append_8, "e");
      append_8;
    };
  };
  if OpEqText(test_value, "a1.20b1.34c  1.4d334.10e") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "a1.20b1.34c  1.4d334.10e"");
    append_9;
  })};
}

byte-code for format_float:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="a") -> text
 673[68]: AppendText(var[28], v1: text)
 676[52]: ConstFloat(val=1.2) -> float
 685[60]: ConstInt(val=4) -> integer
 690[64]: ConstInt(val=2) -> integer
 695[68]: FormatFloat(var[28], val: float, width: integer, precision: integer)
 698[52]: ConstText(_value="b") -> text
 701[68]: AppendText(var[28], v1: text)
 704[52]: ConstFloat(val=1.34) -> float
 713[60]: ConstInt(val=0) -> integer
 718[64]: ConstInt(val=0) -> integer
 723[68]: FormatFloat(var[28], val: float, width: integer, precision: integer)
 726[52]: ConstText(_value="c") -> text
 729[68]: AppendText(var[28], v1: text)
 732[52]: ConstFloat(val=1.4) -> float
 741[60]: ConstInt(val=5) -> integer
 746[64]: ConstInt(val=0) -> integer
 751[68]: FormatFloat(var[28], val: float, width: integer, precision: integer)
 754[52]: ConstText(_value="d") -> text
 757[68]: AppendText(var[28], v1: text)
 760[52]: ConstFloat(val=334.1) -> float
 769[60]: ConstInt(val=0) -> integer
 774[64]: ConstInt(val=2) -> integer
 779[68]: FormatFloat(var[28], val: float, width: integer, precision: integer)
 782[52]: ConstText(_value="e") -> text
 785[68]: AppendText(var[28], v1: text)
 788[52]: VarText(var[28]) -> text
 791[68]: GenFreeStack(value=16, discard=24)
 795[44]: AppendText(var[4], v1: text)
 798[28]: VarText(var[4]) -> text
 801[44]: ConstText(_value="a1.20b1.34c  1.4d334.10e") -> text
 827[60]: EqText(v1: text, v2: text) -> boolean
 828[29]: GenGotoFalseWord(jump=834, if_false: boolean)
 831[28]: GenGotoWord(jump=908)
 834[28]: Text()
 835[52]: ConstText(_value="Test failed ") -> text
 849[68]: AppendText(var[28], v1: text)
 852[52]: VarText(var[4]) -> text
 855[68]: ConstInt(val=0) -> integer
 860[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 865[52]: ConstText(_value=" != "a1.20b1.34c  1.4d334.10e"") -> text
 897[68]: AppendText(var[28], v1: text)
 900[52]: VarText(var[28]) -> text
 903[68]: GenFreeStack(value=16, discard=24)
 907[44]: GenPanic(message: text)
 908[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Text()
  670:[52] ConstText(_value="a") -> "a"[52]
  673:[68] AppendText(var[28], v1="a"[52])
  676:[52] ConstFloat(val=1.2) -> 1.2[52]
  685:[60] ConstInt(val=4) -> 4[60]
  690:[64] ConstInt(val=2) -> 2[64]
  695:[68] FormatFloat(var[28], val=1.2[52], width=4[60], precision=2[64])
  698:[52] ConstText(_value="b") -> "b"[52]
  701:[68] AppendText(var[28], v1="b"[52])
  704:[52] ConstFloat(val=1.34) -> 1.34[52]
  713:[60] ConstInt(val=0) -> 0[60]
  718:[64] ConstInt(val=0) -> 0[64]
  723:[68] FormatFloat(var[28], val=1.34[52], width=0[60], precision=0[64])
  726:[52] ConstText(_value="c") -> "c"[52]
  729:[68] AppendText(var[28], v1="c"[52])
  732:[52] ConstFloat(val=1.4) -> 1.4[52]
  741:[60] ConstInt(val=5) -> 5[60]
  746:[64] ConstInt(val=0) -> 0[64]
  751:[68] FormatFloat(var[28], val=1.4[52], width=5[60], precision=0[64])
  754:[52] ConstText(_value="d") -> "d"[52]
  757:[68] AppendText(var[28], v1="d"[52])
  760:[52] ConstFloat(val=334.1) -> 334.1[52]
  769:[60] ConstInt(val=0) -> 0[60]
  774:[64] ConstInt(val=2) -> 2[64]
  779:[68] FormatFloat(var[28], val=334.1[52], width=0[60], precision=2[64])
  782:[52] ConstText(_value="e") -> "e"[52]
  785:[68] AppendText(var[28], v1="e"[52])
  788:[52] VarText(var[28]) -> "a1.20b1.34c  1.4d334.10e"[52]
  791:[68] GenFreeStack(value=16, discard=24)
  795:[44] AppendText(var[4], v1="a1.20b1.34c  1.4d334.10e"[28])
  798:[28] VarText(var[4]) -> "a1.20b1.34c  1.4d334.10e"[28]
  801:[44] ConstText(_value="a1.20b1.34c  1.4d334.10e") -> "a1.20b1.34c  1.4d334.10e"[44]
  827:[60] EqText(v1="a1.20b1.34c  1.4d334.10e"[28], v2="a1.20b1.34c  1.4d334.10e"[44]) -> true[28]
  828:[29] GenGotoFalseWord(jump=834, if_false=true[28])
  831:[28] GenGotoWord(jump=908)
  908:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
