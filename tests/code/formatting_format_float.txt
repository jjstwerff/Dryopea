pub fn test() {
    test_value = {"a{1.2:4.2}b{1.34}c{1.4:5}d{334.1:.2}e"};
    assert(
        test_value == "a1.20b1.34c  1.4d334.10e",
        "Test failed {test_value} != \"a1.20b1.34c  1.4d334.10e\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "a";
      OpFormatFloat(__work_1, 1.2f64, 4i32, 2i32);
      OpAppendText(__work_1, "b");
      OpFormatFloat(__work_1, 1.34f64, 0i32, 0i32);
      OpAppendText(__work_1, "c");
      OpFormatFloat(__work_1, 1.4f64, 5i32, 0i32);
      OpAppendText(__work_1, "d");
      OpFormatFloat(__work_1, 334.1f64, 0i32, 2i32);
      OpAppendText(__work_1, "e");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a1.20b1.34c  1.4d334.10e") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a1.20b1.34c  1.4d334.10e"");
    __work_2;
  }#4:text);
}#1

byte-code for format_float:test() [1067]
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: ClearText(var[28]) var=__work_1[28]:text in 1
   6[76]: ConstText(_value="a") -> text
   9[92]: AppendText(var[28], v1: text)
  12[76]: ConstFloat(val=1.2) -> float
  21[84]: ConstInt(val=4) -> integer
  26[88]: ConstInt(val=2) -> integer
  31[92]: FormatFloat(var[28], val: float, width: integer, precision: integer)
  34[76]: ConstText(_value="b") -> text
  37[92]: AppendText(var[28], v1: text)
  40[76]: ConstFloat(val=1.34) -> float
  49[84]: ConstInt(val=0) -> integer
  54[88]: ConstInt(val=0) -> integer
  59[92]: FormatFloat(var[28], val: float, width: integer, precision: integer)
  62[76]: ConstText(_value="c") -> text
  65[92]: AppendText(var[28], v1: text)
  68[76]: ConstFloat(val=1.4) -> float
  77[84]: ConstInt(val=5) -> integer
  82[88]: ConstInt(val=0) -> integer
  87[92]: FormatFloat(var[28], val: float, width: integer, precision: integer)
  90[76]: ConstText(_value="d") -> text
  93[92]: AppendText(var[28], v1: text)
  96[76]: ConstFloat(val=334.1) -> float
 105[84]: ConstInt(val=0) -> integer
 110[88]: ConstInt(val=2) -> integer
 115[92]: FormatFloat(var[28], val: float, width: integer, precision: integer)
 118[76]: ConstText(_value="e") -> text
 121[92]: AppendText(var[28], v1: text)
 124[76]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 127[92]: AppendText(var[52], v1: text)
 130[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 133[92]: ConstText(_value="a1.20b1.34c  1.4d334.10e") -> text
 159[108]: EqText(v1: text, v2: text) -> boolean
 160[77]: GotoFalseWord(jump=166, if_false: boolean)
 163[76]: GotoWord(jump=238)
 166[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 169[76]: ConstText(_value="Test failed ") -> text
 183[92]: AppendText(var[4], v1: text)
 186[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 189[92]: ConstInt(val=0) -> integer
 194[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 199[76]: ConstText(_value=" != "a1.20b1.34c  1.4d334.10e"") -> text
 231[92]: AppendText(var[4], v1: text)
 234[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 237[92]: Panic(message: text)
 238[76]: FreeText(var[52])
 241[76]: FreeText(var[28])
 244[76]: FreeText(var[4])
 247[76]: Return(ret=0, value=0, discard=76)

