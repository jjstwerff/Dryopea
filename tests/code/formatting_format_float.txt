pub fn test() {
    test_value = {"a{1.2:4.2}b{1.34}c{1.4:5}d{334.1:.2}e"};
    assert(
        test_value == "a1.20b1.34c  1.4d334.10e",
        "Test failed {test_value} != \"a1.20b1.34c  1.4d334.10e\""
    );
}
fn test() {#block(1):void
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text = {#block(2):text
    {#Formatted string(3):text
      __work_1(1):text = "a";
      OpFormatFloat(__work_1(1), 1.2f64, 4i32, 2i32);
      OpAppendText(__work_1(1), "b");
      OpFormatFloat(__work_1(1), 1.34f64, 0i32, 0i32);
      OpAppendText(__work_1(1), "c");
      OpFormatFloat(__work_1(1), 1.4f64, 5i32, 0i32);
      OpAppendText(__work_1(1), "d");
      OpFormatFloat(__work_1(1), 334.1f64, 0i32, 2i32);
      OpAppendText(__work_1(1), "e");
      __work_1(1);
    }#Formatted string(3):text;
  }#block(2):text;
  if OpEqText(test_value(1), "a1.20b1.34c  1.4d334.10e") null else OpPanic({#Formatted string(4):text
    __work_2(1):text = "Test failed ";
    OpFormatText(__work_2(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_2(1), " != "a1.20b1.34c  1.4d334.10e"");
    __work_2(1);
  }#Formatted string(4):text);
  OpFreeText(test_value(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for format_float:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: Text() var=test_value[56]:text
   3[80]: ClearText(var[32]) var=__work_1[32]:text
   6[80]: ConstText(_value="a") -> text
   9[96]: AppendText(var[32], v1: text)
  12[80]: ConstFloat(val=1.2) -> float
  21[88]: ConstInt(val=4) -> integer
  26[92]: ConstInt(val=2) -> integer
  31[96]: FormatFloat(var[32], val: float, width: integer, precision: integer)
  34[80]: ConstText(_value="b") -> text
  37[96]: AppendText(var[32], v1: text)
  40[80]: ConstFloat(val=1.34) -> float
  49[88]: ConstInt(val=0) -> integer
  54[92]: ConstInt(val=0) -> integer
  59[96]: FormatFloat(var[32], val: float, width: integer, precision: integer)
  62[80]: ConstText(_value="c") -> text
  65[96]: AppendText(var[32], v1: text)
  68[80]: ConstFloat(val=1.4) -> float
  77[88]: ConstInt(val=5) -> integer
  82[92]: ConstInt(val=0) -> integer
  87[96]: FormatFloat(var[32], val: float, width: integer, precision: integer)
  90[80]: ConstText(_value="d") -> text
  93[96]: AppendText(var[32], v1: text)
  96[80]: ConstFloat(val=334.1) -> float
 105[88]: ConstInt(val=0) -> integer
 110[92]: ConstInt(val=2) -> integer
 115[96]: FormatFloat(var[32], val: float, width: integer, precision: integer)
 118[80]: ConstText(_value="e") -> text
 121[96]: AppendText(var[32], v1: text)
 124[80]: VarText(var[32]) -> text var=__work_1[32]:text
 127[96]: AppendText(var[56], v1: text)
 130[80]: VarText(var[56]) -> text var=test_value[56]:text
 133[96]: ConstText(_value="a1.20b1.34c  1.4d334.10e") -> text
 159[112]: EqText(v1: text, v2: text) -> boolean
 160[81]: GotoFalseWord(jump=166, if_false: boolean)
 163[80]: GotoWord(jump=238)
 166[80]: ClearText(var[8]) var=__work_2[8]:text
 169[80]: ConstText(_value="Test failed ") -> text
 183[96]: AppendText(var[8], v1: text)
 186[80]: VarText(var[56]) -> text var=test_value[56]:text
 189[96]: ConstInt(val=0) -> integer
 194[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
 199[80]: ConstText(_value=" != "a1.20b1.34c  1.4d334.10e"") -> text
 231[96]: AppendText(var[8], v1: text)
 234[80]: VarText(var[8]) -> text var=__work_2[8]:text
 237[96]: Panic(message: text)
 238[80]: FreeText(var[56])
 241[80]: FreeText(var[32])
 244[80]: FreeText(var[8])
 247[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value="a") -> "a"[80]
    9:[96] AppendText(var[32], v1="a"[80])
   12:[80] ConstFloat(val=1.2) -> 1.2[80]
   21:[88] ConstInt(val=4) -> 4[88]
   26:[92] ConstInt(val=2) -> 2[92]
   31:[96] FormatFloat(var[32], val=1.2[80], width=4[88], precision=2[92])
   34:[80] ConstText(_value="b") -> "b"[80]
   37:[96] AppendText(var[32], v1="b"[80])
   40:[80] ConstFloat(val=1.34) -> 1.34[80]
   49:[88] ConstInt(val=0) -> 0[88]
   54:[92] ConstInt(val=0) -> 0[92]
   59:[96] FormatFloat(var[32], val=1.34[80], width=0[88], precision=0[92])
   62:[80] ConstText(_value="c") -> "c"[80]
   65:[96] AppendText(var[32], v1="c"[80])
   68:[80] ConstFloat(val=1.4) -> 1.4[80]
   77:[88] ConstInt(val=5) -> 5[88]
   82:[92] ConstInt(val=0) -> 0[92]
   87:[96] FormatFloat(var[32], val=1.4[80], width=5[88], precision=0[92])
   90:[80] ConstText(_value="d") -> "d"[80]
   93:[96] AppendText(var[32], v1="d"[80])
   96:[80] ConstFloat(val=334.1) -> 334.1[80]
  105:[88] ConstInt(val=0) -> 0[88]
  110:[92] ConstInt(val=2) -> 2[92]
  115:[96] FormatFloat(var[32], val=334.1[80], width=0[88], precision=2[92])
  118:[80] ConstText(_value="e") -> "e"[80]
  121:[96] AppendText(var[32], v1="e"[80])
  124:[80] VarText(var[32]) -> "a1.20b1.34c  1.4d334.10e"[80]
  127:[96] AppendText(var[56], v1="a1.20b1.34c  1.4d334.10e"[80])
  130:[80] VarText(var[56]) -> "a1.20b1.34c  1.4d334.10e"[80]
  133:[96] ConstText(_value="a1.20b1.34c  1.4d334.10e") -> "a1.20b1.34c  1.4d334.10e"[96]
  159:[112] EqText(v1="a1.20b1.34c  1.4d334.10e"[80], v2="a1.20b1.34c  1.4d334.10e"[96]) -> true[80]
  160:[81] GotoFalseWord(jump=166, if_false=true[80])
  163:[80] GotoWord(jump=238)
  238:[80] FreeText(var[56])
  241:[80] FreeText(var[32])
  244:[80] FreeText(var[8])
  247:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
