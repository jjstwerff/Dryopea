struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S>, biggest: reference<S> };

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(vector<S>)};
    assert(
        test_value == 122012,
        "Test failed {test_value} != 122012"
    );
}
Type 17:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 18:Main[20]:
    s:vector<S>[4]
    biggest:S[8]

Type 19:vector<S>[4]:Vector(17)

fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 20i32)), OpMulInt(10000i32, 12i32));
  }#block_2:integer;
  if OpEqInt(test_value, 122012i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 122012");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for reference_field:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=12) -> integer var=test_value[32]:integer
   6[36]: ConstInt(val=100) -> integer
  11[40]: ConstInt(val=20) -> integer
  16[44]: MulInt(v1: integer, v2: integer) -> integer
  17[40]: AddInt(v1: integer, v2: integer) -> integer
  18[36]: ConstInt(val=10000) -> integer
  23[40]: ConstInt(val=12) -> integer
  28[44]: MulInt(v1: integer, v2: integer) -> integer
  29[40]: AddInt(v1: integer, v2: integer) -> integer
  30[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  33[40]: ConstInt(val=122012) -> integer
  38[44]: EqInt(v1: integer, v2: integer) -> boolean
  39[37]: GotoFalseWord(jump=45, if_false: boolean)
  42[36]: GotoWord(jump=99)
  45[36]: ClearText(var[8]) var=__work_1[8]:text
  48[36]: ConstText(_value="Test failed ") -> text
  62[52]: AppendText(var[8], v1: text)
  65[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  68[40]: ConstInt(val=0) -> integer
  73[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  80[36]: ConstText(_value=" != 122012") -> text
  92[52]: AppendText(var[8], v1: text)
  95[36]: VarText(var[8]) -> text var=__work_1[8]:text
  98[52]: Panic(message: text)
  99[36]: FreeText(var[8])
 102[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=12) -> 12[32]
    6:[36] ConstInt(val=100) -> 100[36]
   11:[40] ConstInt(val=20) -> 20[40]
   16:[44] MulInt(v1=100[36], v2=20[40]) -> 2000[36]
   17:[40] AddInt(v1=12[32], v2=2000[36]) -> 2012[32]
   18:[36] ConstInt(val=10000) -> 10000[36]
   23:[40] ConstInt(val=12) -> 12[40]
   28:[44] MulInt(v1=10000[36], v2=12[40]) -> 120000[36]
   29:[40] AddInt(v1=2012[32], v2=120000[36]) -> 122012[32]
   30:[36] VarInt(var[32]) -> 122012[36]
   33:[40] ConstInt(val=122012) -> 122012[40]
   38:[44] EqInt(v1=122012[36], v2=122012[40]) -> true[36]
   39:[37] GotoFalseWord(jump=1213, if_false=true[36])
   42:[36] GotoWord(jump=1267)
   99:[36] FreeText(var[8])
  102:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
