Test code:
struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S>, biggest: reference<S> };

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(vector<S>)};
    assert(
        test_value == 122012,
        "Test failed {test_value} != 122012"
    );
}

Type 13:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 14:Main[20]:
    s:vector<S>[4]
    biggest:S[8]

Type 15:vector<S>[4]:Vector(13)

fn test {
  let test_value = {
    OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 20i32)), OpMulInt(10000i32, 12i32));
  };
  if OpEqInt(test_value, 122012i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 122012");
    append_7;
  })};
}

byte-code for reference_field:test()
 664[0]: return-address
 664[4]: ConstInt(val=12) -> integer
 669[8]: ConstInt(val=100) -> integer
 674[12]: ConstInt(val=20) -> integer
 679[16]: MulInt(v1: integer, v2: integer) -> integer
 680[12]: AddInt(v1: integer, v2: integer) -> integer
 681[8]: ConstInt(val=10000) -> integer
 686[12]: ConstInt(val=12) -> integer
 691[16]: MulInt(v1: integer, v2: integer) -> integer
 692[12]: AddInt(v1: integer, v2: integer) -> integer
 693[8]: VarInt(var[4]) -> integer
 696[12]: ConstInt(val=122012) -> integer
 701[16]: EqInt(v1: integer, v2: integer) -> boolean
 702[9]: GenGotoFalseWord(jump=708, if_false: boolean)
 705[8]: GenGotoWord(jump=764)
 708[8]: Text()
 709[32]: ConstText(_value="Test failed ") -> text
 723[48]: AppendText(var[8], v1: text)
 726[32]: VarInt(var[4]) -> integer
 729[36]: ConstInt(val=0) -> integer
 734[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 741[32]: ConstText(_value=" != 122012") -> text
 753[48]: AppendText(var[8], v1: text)
 756[32]: VarText(var[8]) -> text
 759[48]: GenFreeStack(value=16, discard=24)
 763[24]: GenPanic(message: text)
 764[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] ConstInt(val=12) -> 12[4]
  669:[8] ConstInt(val=100) -> 100[8]
  674:[12] ConstInt(val=20) -> 20[12]
  679:[16] MulInt(v1=100[8], v2=20[12]) -> 2000[8]
  680:[12] AddInt(v1=12[4], v2=2000[8]) -> 2012[4]
  681:[8] ConstInt(val=10000) -> 10000[8]
  686:[12] ConstInt(val=12) -> 12[12]
  691:[16] MulInt(v1=10000[8], v2=12[12]) -> 120000[8]
  692:[12] AddInt(v1=2012[4], v2=120000[8]) -> 122012[4]
  693:[8] VarInt(var[4]) -> 122012[8]
  696:[12] ConstInt(val=122012) -> 122012[12]
  701:[16] EqInt(v1=122012[8], v2=122012[12]) -> true[8]
  702:[9] GenGotoFalseWord(jump=708, if_false=true[8])
  705:[8] GenGotoWord(jump=764)
  764:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
