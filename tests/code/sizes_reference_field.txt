struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S>, biggest: reference<S> };

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(vector<S>)};
    assert(
        test_value == 122012,
        "Test failed {test_value} != 122012"
    );
}
Type 15:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 16:Main[20]:
    s:vector<S>[4]
    biggest:S[8]

Type 17:vector<S>[4]:Vector(15)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 20i32)), OpMulInt(10000i32, 12i32));
  }#2:integer;
  if OpEqInt(test_value, 122012i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 122012");
    __work_1;
  }#3:text);
}#1

byte-code for reference_field:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=12) -> integer var=test_value[28]:integer in 1
   6[32]: ConstInt(val=100) -> integer
  11[36]: ConstInt(val=20) -> integer
  16[40]: MulInt(v1: integer, v2: integer) -> integer
  17[36]: AddInt(v1: integer, v2: integer) -> integer
  18[32]: ConstInt(val=10000) -> integer
  23[36]: ConstInt(val=12) -> integer
  28[40]: MulInt(v1: integer, v2: integer) -> integer
  29[36]: AddInt(v1: integer, v2: integer) -> integer
  30[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  33[36]: ConstInt(val=122012) -> integer
  38[40]: EqInt(v1: integer, v2: integer) -> boolean
  39[33]: GotoFalseWord(jump=45, if_false: boolean)
  42[32]: GotoWord(jump=99)
  45[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  48[32]: ConstText(_value="Test failed ") -> text
  62[48]: AppendText(var[4], v1: text)
  65[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  68[36]: ConstInt(val=0) -> integer
  73[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  80[32]: ConstText(_value=" != 122012") -> text
  92[48]: AppendText(var[4], v1: text)
  95[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  98[48]: Panic(message: text)
  99[32]: FreeText(var[4])
 102[32]: Return(ret=0, value=0, discard=32)

