struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S>, biggest: reference<S> };

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(vector<S>)};
    assert(
        test_value == 122012,
        "Test failed {test_value} != 122012"
    );
}
Type 12:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 13:Main[20]:
    s:vector<S>[4]
    biggest:S[8]

Type 14:vector<S>[4]:Vector(12)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 20i32)), OpMulInt(10000i32, 12i32));
  }#2:integer;
  if OpEqInt(test_value, 122012i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 122012");
    __work_1;
  }#3:text);
}#1

byte-code for reference_field:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstInt(val=12) -> integer
 698[32]: ConstInt(val=100) -> integer
 703[36]: ConstInt(val=20) -> integer
 708[40]: MulInt(v1: integer, v2: integer) -> integer
 709[36]: AddInt(v1: integer, v2: integer) -> integer
 710[32]: ConstInt(val=10000) -> integer
 715[36]: ConstInt(val=12) -> integer
 720[40]: MulInt(v1: integer, v2: integer) -> integer
 721[36]: AddInt(v1: integer, v2: integer) -> integer
 722[32]: VarInt(var[28]) -> integer
 725[36]: ConstInt(val=122012) -> integer
 730[40]: EqInt(v1: integer, v2: integer) -> boolean
 731[33]: GotoFalseWord(jump=737, if_false: boolean)
 734[32]: GotoWord(jump=791)
 737[32]: ClearText(var[4])
 740[32]: ConstText(_value="Test failed ") -> text
 754[48]: AppendText(var[4], v1: text)
 757[32]: VarInt(var[28]) -> integer
 760[36]: ConstInt(val=0) -> integer
 765[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 772[32]: ConstText(_value=" != 122012") -> text
 784[48]: AppendText(var[4], v1: text)
 787[32]: VarText(var[4]) -> text
 790[48]: Panic(message: text)
 791[32]: FreeText(var[4])
 794[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] ConstInt(val=12) -> 12[32]
  698:[36] ConstInt(val=100) -> 100[36]
  703:[40] ConstInt(val=20) -> 20[40]
  708:[44] MulInt(v1=100[36], v2=20[40]) -> 2000[36]
  709:[40] AddInt(v1=12[32], v2=2000[36]) -> 2012[32]
  710:[36] ConstInt(val=10000) -> 10000[36]
  715:[40] ConstInt(val=12) -> 12[40]
  720:[44] MulInt(v1=10000[36], v2=12[40]) -> 120000[36]
  721:[40] AddInt(v1=2012[32], v2=120000[36]) -> 122012[32]
  722:[36] VarInt(var[32]) -> 122012[36]
  725:[40] ConstInt(val=122012) -> 122012[40]
  730:[44] EqInt(v1=122012[36], v2=122012[40]) -> true[36]
  731:[37] GotoFalseWord(jump=737, if_false=true[36])
  734:[36] GotoWord(jump=791)
  791:[36] FreeText(var[8])
  794:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
