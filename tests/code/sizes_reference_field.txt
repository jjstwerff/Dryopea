struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S>, biggest: reference<S> };

pub fn test() {
    test_value = {sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(vector<S>)};
    assert(
        test_value == 122012,
        "Test failed {test_value} != 122012"
    );
}
Type 11:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 12:Main[20]:
    s:vector<S>[4]
    biggest:S[8]

Type 13:vector<S>[4]:Vector(11)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 20i32)), OpMulInt(10000i32, 12i32));
  }#2:integer;
  if OpEqInt(test_value, 122012i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 122012");
    __work_1;
  }#3:text);
}#1

byte-code for reference_field:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: ConstInt(val=12) -> integer
 688[32]: ConstInt(val=100) -> integer
 693[36]: ConstInt(val=20) -> integer
 698[40]: MulInt(v1: integer, v2: integer) -> integer
 699[36]: AddInt(v1: integer, v2: integer) -> integer
 700[32]: ConstInt(val=10000) -> integer
 705[36]: ConstInt(val=12) -> integer
 710[40]: MulInt(v1: integer, v2: integer) -> integer
 711[36]: AddInt(v1: integer, v2: integer) -> integer
 712[32]: VarInt(var[28]) -> integer
 715[36]: ConstInt(val=122012) -> integer
 720[40]: EqInt(v1: integer, v2: integer) -> boolean
 721[33]: GotoFalseWord(jump=727, if_false: boolean)
 724[32]: GotoWord(jump=781)
 727[32]: ClearText(var[4])
 730[32]: ConstText(_value="Test failed ") -> text
 744[48]: AppendText(var[4], v1: text)
 747[32]: VarInt(var[28]) -> integer
 750[36]: ConstInt(val=0) -> integer
 755[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 762[32]: ConstText(_value=" != 122012") -> text
 774[48]: AppendText(var[4], v1: text)
 777[32]: VarText(var[4]) -> text
 780[48]: Panic(message: text)
 781[32]: Return(ret=0, value=0, discard=32)

Execute test:
  682:[8] Text()
  683:[32] ConstInt(val=12) -> 12[32]
  688:[36] ConstInt(val=100) -> 100[36]
  693:[40] ConstInt(val=20) -> 20[40]
  698:[44] MulInt(v1=100[36], v2=20[40]) -> 2000[36]
  699:[40] AddInt(v1=12[32], v2=2000[36]) -> 2012[32]
  700:[36] ConstInt(val=10000) -> 10000[36]
  705:[40] ConstInt(val=12) -> 12[40]
  710:[44] MulInt(v1=10000[36], v2=12[40]) -> 120000[36]
  711:[40] AddInt(v1=2012[32], v2=120000[36]) -> 122012[32]
  712:[36] VarInt(var[32]) -> 122012[36]
  715:[40] ConstInt(val=122012) -> 122012[40]
  720:[44] EqInt(v1=122012[36], v2=122012[40]) -> true[36]
  721:[37] GotoFalseWord(jump=727, if_false=true[36])
  724:[36] GotoWord(jump=781)
  781:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
