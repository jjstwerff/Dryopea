Test code:
pub fn test() {
    test_value = {2 + 1 <= 3};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}

fn test {
  let test_value = {
    OpLeInt(OpAddInt(2i32, 1i32), 3i32);
  };
  if OpEqBool(test_value, true) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatBool(append_7, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_7, " != true");
    append_7;
  })};
}

byte-code for expr_prio_lt:test()
 668[0]: return-address
 668[4]: ConstInt(val=2) -> integer
 673[8]: ConstInt(val=1) -> integer
 678[12]: AddInt(v1: integer, v2: integer) -> integer
 679[8]: ConstInt(val=3) -> integer
 684[12]: LeInt(v1: integer, v2: integer) -> boolean
 685[5]: VarBool(var[4]) -> boolean
 688[6]: ConstTrue() -> boolean
 689[7]: EqBool(v1: boolean, v2: boolean) -> boolean
 690[6]: GenGotoFalseWord(jump=696, if_false: boolean)
 693[5]: GenGotoWord(jump=748)
 696[5]: Text()
 697[29]: ConstText(_value="Test failed ") -> text
 711[45]: AppendText(var[5], v1: text)
 714[29]: VarBool(var[4]) -> boolean
 717[30]: ConstInt(val=0) -> integer
 722[34]: FormatBool(var[5], val: boolean, width: integer, dir=-1, token=32)
 727[29]: ConstText(_value=" != true") -> text
 737[45]: AppendText(var[5], v1: text)
 740[29]: VarText(var[5]) -> text
 743[45]: GenFreeStack(value=16, discard=24)
 747[21]: GenPanic(message: text)
 748[5]: GenReturn(ret=0, value=0, discard=5)

Execute test:
  668:[4] ConstInt(val=2) -> 2[4]
  673:[8] ConstInt(val=1) -> 1[8]
  678:[12] AddInt(v1=2[4], v2=1[8]) -> 3[4]
  679:[8] ConstInt(val=3) -> 3[8]
  684:[12] LeInt(v1=3[4], v2=3[8]) -> true[4]
  685:[5] VarBool(var[4]) -> true[5]
  688:[6] ConstTrue() -> true[6]
  689:[7] EqBool(v1=true[5], v2=true[6]) -> true[5]
  690:[6] GenGotoFalseWord(jump=696, if_false=true[5])
  693:[5] GenGotoWord(jump=748)
  748:[5] GenReturn(ret=4294967295[0], value=0, discard=5)
Finished
