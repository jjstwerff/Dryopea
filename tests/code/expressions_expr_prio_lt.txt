pub fn test() {
    test_value = {2 + 1 <= 3};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test() {#1 block
  let __work_1:text = "";
  let test_value:boolean = {#2 block
    OpLeInt(OpAddInt(2i32, 1i32), 3i32);
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for expr_prio_lt:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: ConstInt(val=2) -> integer
 681[32]: ConstInt(val=1) -> integer
 686[36]: AddInt(v1: integer, v2: integer) -> integer
 687[32]: ConstInt(val=3) -> integer
 692[36]: LeInt(v1: integer, v2: integer) -> boolean
 693[29]: VarBool(var[28]) -> boolean
 696[30]: ConstTrue() -> boolean
 697[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 698[30]: GotoFalseWord(jump=704, if_false: boolean)
 701[29]: GotoWord(jump=754)
 704[29]: ClearText(var[4])
 707[29]: ConstText(_value="Test failed ") -> text
 721[45]: AppendText(var[4], v1: text)
 724[29]: VarBool(var[28]) -> boolean
 727[30]: ConstInt(val=0) -> integer
 732[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 737[29]: ConstText(_value=" != true") -> text
 747[45]: AppendText(var[4], v1: text)
 750[29]: VarText(var[4]) -> text
 753[45]: Panic(message: text)
 754[29]: Return(ret=0, value=0, discard=29)

Execute test:
  675:[8] Text()
  676:[32] ConstInt(val=2) -> 2[32]
  681:[36] ConstInt(val=1) -> 1[36]
  686:[40] AddInt(v1=2[32], v2=1[36]) -> 3[32]
  687:[36] ConstInt(val=3) -> 3[36]
  692:[40] LeInt(v1=3[32], v2=3[36]) -> true[32]
  693:[33] VarBool(var[32]) -> true[33]
  696:[34] ConstTrue() -> true[34]
  697:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
  698:[34] GotoFalseWord(jump=704, if_false=true[33])
  701:[33] GotoWord(jump=754)
  754:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
