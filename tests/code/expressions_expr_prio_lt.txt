pub fn test() {
    test_value = {2 + 1 <= 3};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:boolean(1) = {#block_2:boolean
    OpLeInt(OpAddInt(2i32, 1i32), 3i32);
  }#block_2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for expr_prio_lt:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=2) -> integer var=test_value[32]:boolean
   6[36]: ConstInt(val=1) -> integer
  11[40]: AddInt(v1: integer, v2: integer) -> integer
  12[36]: ConstInt(val=3) -> integer
  17[40]: LeInt(v1: integer, v2: integer) -> boolean
  18[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  21[34]: ConstTrue() -> boolean
  22[35]: EqBool(v1: boolean, v2: boolean) -> boolean
  23[34]: GotoFalseWord(jump=29, if_false: boolean)
  26[33]: GotoWord(jump=79)
  29[33]: ClearText(var[8]) var=__work_1[8]:text
  32[33]: ConstText(_value="Test failed ") -> text
  46[49]: AppendText(var[8], v1: text)
  49[33]: VarBool(var[32]) -> boolean var=test_value[32]:boolean
  52[34]: ConstInt(val=0) -> integer
  57[38]: FormatBool(var[8], val: boolean, width: integer, dir=-1, token=32)
  62[33]: ConstText(_value=" != true") -> text
  72[49]: AppendText(var[8], v1: text)
  75[33]: VarText(var[8]) -> text var=__work_1[8]:text
  78[49]: Panic(message: text)
  79[33]: FreeText(var[8])
  82[33]: Return(ret=0, value=0, discard=29)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=2) -> 2[32]
    6:[36] ConstInt(val=1) -> 1[36]
   11:[40] AddInt(v1=2[32], v2=1[36]) -> 3[32]
   12:[36] ConstInt(val=3) -> 3[36]
   17:[40] LeInt(v1=3[32], v2=3[36]) -> true[32]
   18:[33] VarBool(var[32]) -> true[33]
   21:[34] ConstTrue() -> true[34]
   22:[35] EqBool(v1=true[33], v2=true[34]) -> true[33]
   23:[34] GotoFalseWord(jump=1197, if_false=true[33])
   26:[33] GotoWord(jump=1247)
   79:[33] FreeText(var[8])
   82:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
