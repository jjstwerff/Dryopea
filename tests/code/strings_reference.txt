fn add(a: &text, b: text=" world!") {
    a += b;
}

pub fn test() {
    test_value = {v = "Hello"; add(v); v};
    assert(
        test_value == "Hello world!",
        "Test failed {test_value} != \"Hello world!\""
    );
}
fn add(a:&text, b:text) {#block(1):void
  OpAppendRefText(OpVarRef(a(0)), 0i32, b(0));
}#block(1):void

byte-code for reference:add(a: &text[4], b: text[16]) [1119]
   0[32]: return-address
   0[36]: VarRef(var[4]) -> ref(reference)
   3[48]: ArgText(var[16]) -> text var=b[16]:text
   6[64]: AppendRefText(r: ref(reference), fld=0, v1: text)
   9[36]: Return(ret=28, value=0, discard=32)

fn test() {#block(1):void
  __work_1(1):text = "";
  v(1):text = "";
  test_value(1):text["v"] = {#block(2):text["v"]
    v(1):text = "Hello";
    add(OpCreateRef(v(1)), " world!");
    v(1);
  }#block(2):text["v"];
  if OpEqText(test_value(1), "Hello world!") null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatText(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != "Hello world!"");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(test_value(1));
  OpFreeText(v(1));
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for reference:test() [1134]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=v[32]:text
   2[56]: Text() var=test_value[56]:text["v"]
   3[80]: ClearText(var[32]) var=v[32]:text
   6[80]: ConstText(_value="Hello") -> text
  13[96]: AppendText(var[32], v1: text)
  16[80]: CreateRef(var[32]) -> ref(reference)
  19[92]: ConstText(_value=" world!") -> text
  28[108]: Call(size=0, to=1119)
  35[80]: VarText(var[32]) -> text var=v[32]:text
  38[96]: AppendText(var[56], v1: text)
  41[80]: VarText(var[56]) -> text var=test_value[56]:text["v"]
  44[96]: ConstText(_value="Hello world!") -> text
  58[112]: EqText(v1: text, v2: text) -> boolean
  59[81]: GotoFalseWord(jump=65, if_false: boolean)
  62[80]: GotoWord(jump=125)
  65[80]: ClearText(var[8]) var=__work_1[8]:text
  68[80]: ConstText(_value="Test failed ") -> text
  82[96]: AppendText(var[8], v1: text)
  85[80]: VarText(var[56]) -> text var=test_value[56]:text["v"]
  88[96]: ConstInt(val=0) -> integer
  93[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  98[80]: ConstText(_value=" != "Hello world!"") -> text
 118[96]: AppendText(var[8], v1: text)
 121[80]: VarText(var[8]) -> text var=__work_1[8]:text
 124[96]: Panic(message: text)
 125[80]: FreeText(var[56])
 128[80]: FreeText(var[32])
 131[80]: FreeText(var[8])
 134[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value="Hello") -> "Hello"[80]
   13:[96] AppendText(var[32], v1="Hello"[80])
   16:[80] CreateRef(var[32]) -> ref(0,1,32)[80]
   19:[92] ConstText(_value=" world!") -> " world!"[92]
   28:[108] Call(size=0, to=1119)
 1119:[112] VarRef(var[80]) -> ref(0,1,32)[112]
 1122:[124] ArgText(var[92]) -> " world!"[124]
 1125:[140] AppendRefText(r=ref(0,1,32)[112], fld=0, v1=" world!"[124])
 1126:[112] Goto(jump=2665)
 1128:[112] Return(ret=1169[108], value=0, discard=32)
   35:[80] VarText(var[32]) -> "Hello world!"[80]
   38:[96] AppendText(var[56], v1="Hello world!"[80])
   41:[80] VarText(var[56]) -> "Hello world!"[80]
   44:[96] ConstText(_value="Hello world!") -> "Hello world!"[96]
   58:[112] EqText(v1="Hello world!"[80], v2="Hello world!"[96]) -> true[80]
   59:[81] GotoFalseWord(jump=65, if_false=true[80])
   62:[80] GotoWord(jump=125)
  125:[80] FreeText(var[56])
  128:[80] FreeText(var[32])
  131:[80] FreeText(var[8])
  134:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
