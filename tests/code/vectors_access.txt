Test code:
pub fn test() {
    test_value = {v=[1, 10, 100]; v[1]};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}

Type 13:main_vector<integer>[8]:
    vector:vector<integer>[4]

Type 14:vector<integer>[4]:Vector(0)

fn test {
  let test_value = {
    let v = {
      let db_13 = OpDatabase(4i32, 13i32);
      let vec_12 = OpGetField(db_13, 4i32, 14i32);
      OpSetInt(db_13, 4i32, 0i32);
      let elm_11 = OpNewRecord(vec_12, 14i32, 65535i32);
      OpSetInt(elm_11, 0i32, 1i32);
      OpFinishRecord(vec_12, elm_11, 14i32, 65535i32);
      elm_11 = OpNewRecord(vec_12, 14i32, 65535i32);
      OpSetInt(elm_11, 0i32, 10i32);
      OpFinishRecord(vec_12, elm_11, 14i32, 65535i32);
      elm_11 = OpNewRecord(vec_12, 14i32, 65535i32);
      OpSetInt(elm_11, 0i32, 100i32);
      OpFinishRecord(vec_12, elm_11, 14i32, 65535i32);
      vec_12;
    };
    OpGetInt(OpGetVector(v, 4i32, 1i32), 0i32);
  };
  if OpEqInt(test_value, 10i32) {null} else {OpGenPanic({
    let append_14 = "Test failed ";
    OpFormatInt(append_14, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_14, " != 10");
    append_14;
  })};
}

byte-code for access:test()
 668[0]: return-address
 668[4]: Database(size=4, db_tp=13) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 673[16]: VarRef(var[4]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 676[28]: GetField(v1: reference, fld=4) -> reference type=vector<integer>[4]:Vector(0)[14]
 679[28]: VarRef(var[4]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 682[40]: ConstInt(val=0) -> integer
 687[44]: SetInt(v1: reference, fld=4, val: integer)
 690[28]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 693[40]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 698[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 701[52]: ConstInt(val=1) -> integer
 706[56]: SetInt(v1: reference, fld=0, val: integer)
 709[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 712[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 715[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 720[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 723[52]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 728[52]: PutRef(var[28], value: reference)
 731[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 734[52]: ConstInt(val=10) -> integer
 739[56]: SetInt(v1: reference, fld=0, val: integer)
 742[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 745[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 748[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 753[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 756[52]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 761[52]: PutRef(var[28], value: reference)
 764[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 767[52]: ConstInt(val=100) -> integer
 772[56]: SetInt(v1: reference, fld=0, val: integer)
 775[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 778[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 781[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 786[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 789[52]: GenFreeStack(value=12, discard=36)
 793[16]: VarVector(var[4]) -> vector type=vector<integer>[4]:Vector(0)[14]
 796[28]: ConstInt(val=1) -> integer
 801[32]: GetVector(r: vector, size=4, index: integer) -> reference type=integer[4]:Base[0]
 804[28]: GetInt(v1: reference, fld=0) -> integer
 807[20]: GenFreeStack(value=4, discard=12)
 811[8]: VarInt(var[4]) -> integer
 814[12]: ConstInt(val=10) -> integer
 819[16]: EqInt(v1: integer, v2: integer) -> boolean
 820[9]: GenGotoFalseWord(jump=826, if_false: boolean)
 823[8]: GenGotoWord(jump=878)
 826[8]: Text()
 827[32]: ConstText(_value="Test failed ") -> text
 841[48]: AppendText(var[8], v1: text)
 844[32]: VarInt(var[4]) -> integer
 847[36]: ConstInt(val=0) -> integer
 852[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 859[32]: ConstText(_value=" != 10") -> text
 867[48]: AppendText(var[8], v1: text)
 870[32]: VarText(var[8]) -> text
 873[48]: GenFreeStack(value=16, discard=24)
 877[24]: GenPanic(message: text)
 878[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] Database(size=4, db_tp=13) -> ref(1,1,0)={}[4]
  673:[16] VarRef(var[4]) -> ref(1,1,0)={}[16]
  676:[28] GetField(v1=ref(1,1,0)[16], fld=4) -> ref(1,1,4)=[][16]
  679:[28] VarRef(var[4]) -> ref(1,1,0)={}[28]
  682:[40] ConstInt(val=0) -> 0[40]
  687:[44] SetInt(v1=ref(1,1,0)[28], fld=4, val=0[40])
  690:[28] VarVector(var[16]) -> ref(1,1,4)=[][28]
  693:[40] NewRecord(data=ref(1,1,4)[28], parent_tp=14, fld=65535) -> ref(1,5,8)[28]
  698:[40] VarRef(var[28]) -> ref(1,5,8)=false[40]
  701:[52] ConstInt(val=1) -> 1[52]
  706:[56] SetInt(v1=ref(1,5,8)[40], fld=0, val=1[52])
  709:[40] VarVector(var[16]) -> ref(1,1,4)=[1][40]
  712:[52] VarRef(var[28]) -> ref(1,5,8)=true[52]
  715:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,8)[52], parent_tp=14, fld=65535)
  720:[40] VarVector(var[16]) -> ref(1,1,4)=[1][40]
  723:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=14, fld=65535) -> ref(1,5,12)[40]
  728:[52] PutRef(var[28], value=ref(1,5,12)[40])
  731:[40] VarRef(var[28]) -> ref(1,5,12)=false[40]
  734:[52] ConstInt(val=10) -> 10[52]
  739:[56] SetInt(v1=ref(1,5,12)[40], fld=0, val=10[52])
  742:[40] VarVector(var[16]) -> ref(1,1,4)=[1,10][40]
  745:[52] VarRef(var[28]) -> ref(1,5,12)=true[52]
  748:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,12)[52], parent_tp=14, fld=65535)
  753:[40] VarVector(var[16]) -> ref(1,1,4)=[1,10][40]
  756:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=14, fld=65535) -> ref(1,5,16)[40]
  761:[52] PutRef(var[28], value=ref(1,5,16)[40])
  764:[40] VarRef(var[28]) -> ref(1,5,16)=false[40]
  767:[52] ConstInt(val=100) -> 100[52]
  772:[56] SetInt(v1=ref(1,5,16)[40], fld=0, val=100[52])
  775:[40] VarVector(var[16]) -> ref(1,1,4)=[1,10,100][40]
  778:[52] VarRef(var[28]) -> ref(1,5,16)=true[52]
  781:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,16)[52], parent_tp=14, fld=65535)
  786:[40] VarVector(var[16]) -> ref(1,1,4)=[1,10,100][40]
  789:[52] GenFreeStack(value=12, discard=36)
  793:[16] VarVector(var[4]) -> ref(1,1,4)=[1,10,100][16]
  796:[28] ConstInt(val=1) -> 1[28]
  801:[32] GetVector(r=ref(1,1,4)=true[16], size=4, index=1[28]) -> ref(1,5,12)=10[16]
  804:[28] GetInt(v1=ref(1,5,12)[16], fld=0) -> 10[16]
  807:[20] GenFreeStack(value=4, discard=12)
  811:[8] VarInt(var[4]) -> 10[8]
  814:[12] ConstInt(val=10) -> 10[12]
  819:[16] EqInt(v1=10[8], v2=10[12]) -> true[8]
  820:[9] GenGotoFalseWord(jump=826, if_false=true[8])
  823:[8] GenGotoWord(jump=878)
  878:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
