pub fn test() {
    test_value = {v=[1, 10, 100]; v[1]};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}
Type 17:vector<integer>[4]:Vector(0)

Type 18:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn test() {#block(1):void
  __ref_1(1):ref(main_vector<integer>) = null;
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    OpDatabase(__ref_1(1), 18i32);
    v(2):vector<integer>["__ref_1"] = OpGetField(__ref_1(1), 4i32, 17i32);
    OpSetInt(__ref_1(1), 4i32, 0i32);
    _elm_1(2):ref(boolean)["v"] = OpNewRecord(v(2), 17i32, 65535i32);
    OpSetInt(_elm_1(2), 0i32, 1i32);
    OpFinishRecord(v(2), _elm_1(2), 17i32, 65535i32);
    _elm_1(2):ref(boolean)["v"] = OpNewRecord(v(2), 17i32, 65535i32);
    OpSetInt(_elm_1(2), 0i32, 10i32);
    OpFinishRecord(v(2), _elm_1(2), 17i32, 65535i32);
    _elm_1(2):ref(boolean)["v"] = OpNewRecord(v(2), 17i32, 65535i32);
    OpSetInt(_elm_1(2), 0i32, 100i32);
    OpFinishRecord(v(2), _elm_1(2), 17i32, 65535i32);
    OpGetInt(OpGetVector(v(2), 4i32, 1i32), 0i32);
  }#block(2):integer;
  if OpEqInt(test_value(1), 10i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 10");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeRef(__ref_1(1));
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for access:test() [1119]
   0[4]: return-address
   0[8]: ConvRefFromNull() -> ref(reference) var=__ref_1[8]:ref(main_vector<integer>)
   1[20]: Text() var=__work_1[20]:text
   2[44]: Database(var[8], db_tp=18) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=test_value[44]:integer
   7[44]: VarRef(var[8]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[8]:ref(main_vector<integer>)
  10[56]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=vector<integer>[4]:Vector(0)[17]
  13[56]: VarRef(var[8]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[8]:ref(main_vector<integer>)
  16[68]: ConstInt(val=0) -> integer
  21[72]: SetInt(v1: ref(reference), fld=4, val: integer)
  24[56]: VarVector(var[44]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[44]:vector<integer>["__ref_1"]
  27[68]: NewRecord(data: ref(reference), parent_tp=17, fld=65535) -> ref(reference)
  32[68]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
  35[80]: ConstInt(val=1) -> integer
  40[84]: SetInt(v1: ref(reference), fld=0, val: integer)
  43[68]: VarVector(var[44]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[44]:vector<integer>["__ref_1"]
  46[80]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
  49[92]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=65535)
  54[68]: VarVector(var[44]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[44]:vector<integer>["__ref_1"]
  57[80]: NewRecord(data: ref(reference), parent_tp=17, fld=65535) -> ref(reference)
  62[80]: PutRef(var[56], value: ref(reference))
  65[68]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
  68[80]: ConstInt(val=10) -> integer
  73[84]: SetInt(v1: ref(reference), fld=0, val: integer)
  76[68]: VarVector(var[44]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[44]:vector<integer>["__ref_1"]
  79[80]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
  82[92]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=65535)
  87[68]: VarVector(var[44]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[44]:vector<integer>["__ref_1"]
  90[80]: NewRecord(data: ref(reference), parent_tp=17, fld=65535) -> ref(reference)
  95[80]: PutRef(var[56], value: ref(reference))
  98[68]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
 101[80]: ConstInt(val=100) -> integer
 106[84]: SetInt(v1: ref(reference), fld=0, val: integer)
 109[68]: VarVector(var[44]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[44]:vector<integer>["__ref_1"]
 112[80]: VarRef(var[56]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[56]:ref(boolean)["v"]
 115[92]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=17, fld=65535)
 120[68]: VarVector(var[44]) -> vector type=vector<integer>[4]:Vector(0)[17] var=v[44]:vector<integer>["__ref_1"]
 123[80]: ConstInt(val=1) -> integer
 128[84]: GetVector(r: vector, size=4, index: integer) -> ref(reference) type=integer[4]:Base[0]
 131[80]: GetInt(v1: ref(reference), fld=0) -> integer
 134[72]: FreeStack(value=4, discard=28)
 138[48]: VarInt(var[44]) -> integer var=test_value[44]:integer
 141[52]: ConstInt(val=10) -> integer
 146[56]: EqInt(v1: integer, v2: integer) -> boolean
 147[49]: GotoFalseWord(jump=153, if_false: boolean)
 150[48]: GotoWord(jump=203)
 153[48]: ClearText(var[20]) var=__work_1[20]:text
 156[48]: ConstText(_value="Test failed ") -> text
 170[64]: AppendText(var[20], v1: text)
 173[48]: VarInt(var[44]) -> integer var=test_value[44]:integer
 176[52]: ConstInt(val=0) -> integer
 181[56]: FormatInt(var[20], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 188[48]: ConstText(_value=" != 10") -> text
 196[64]: AppendText(var[20], v1: text)
 199[48]: VarText(var[20]) -> text var=__work_1[20]:text
 202[64]: Panic(message: text)
 203[48]: VarRef(var[8]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[18] var=__ref_1[8]:ref(main_vector<integer>)
 206[60]: FreeRef(v1: ref(reference))
 207[48]: FreeText(var[20])
 210[48]: Return(ret=0, value=0, discard=44)

Execute test:
    0:[8] ConvRefFromNull() -> ref(1,0,0)[8]
    1:[20] Text()
    2:[44] Database(var[8], db_tp=18)
    7:[44] VarRef(var[8]) -> ref(1,1,0)={}[44]
   10:[56] GetField(v1=ref(1,1,0)[44], fld=4) -> ref(1,1,4)=[][44]
   13:[56] VarRef(var[8]) -> ref(1,1,0)={}[56]
   16:[68] ConstInt(val=0) -> 0[68]
   21:[72] SetInt(v1=ref(1,1,0)[56], fld=4, val=0[68])
   24:[56] VarVector(var[44]) -> ref(1,1,4)=[][56]
   27:[68] NewRecord(data=ref(1,1,4)[56], parent_tp=17, fld=65535) -> ref(1,9,8)[56]
   32:[68] VarRef(var[56]) -> ref(1,9,8)=false[68]
   35:[80] ConstInt(val=1) -> 1[80]
   40:[84] SetInt(v1=ref(1,9,8)[68], fld=0, val=1[80])
   43:[68] VarVector(var[44]) -> ref(1,1,4)=[1][68]
   46:[80] VarRef(var[56]) -> ref(1,9,8)=true[80]
   49:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,8)[80], parent_tp=17, fld=65535)
   54:[68] VarVector(var[44]) -> ref(1,1,4)=[1][68]
   57:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=17, fld=65535) -> ref(1,9,12)[68]
   62:[80] PutRef(var[56], value=ref(1,9,12)[68])
   65:[68] VarRef(var[56]) -> ref(1,9,12)=false[68]
   68:[80] ConstInt(val=10) -> 10[80]
   73:[84] SetInt(v1=ref(1,9,12)[68], fld=0, val=10[80])
   76:[68] VarVector(var[44]) -> ref(1,1,4)=[1,10][68]
   79:[80] VarRef(var[56]) -> ref(1,9,12)=true[80]
   82:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,12)[80], parent_tp=17, fld=65535)
   87:[68] VarVector(var[44]) -> ref(1,1,4)=[1,10][68]
   90:[80] NewRecord(data=ref(1,1,4)[68], parent_tp=17, fld=65535) -> ref(1,9,16)[68]
   95:[80] PutRef(var[56], value=ref(1,9,16)[68])
   98:[68] VarRef(var[56]) -> ref(1,9,16)=false[68]
  101:[80] ConstInt(val=100) -> 100[80]
  106:[84] SetInt(v1=ref(1,9,16)[68], fld=0, val=100[80])
  109:[68] VarVector(var[44]) -> ref(1,1,4)=[1,10,100][68]
  112:[80] VarRef(var[56]) -> ref(1,9,16)=true[80]
  115:[92] FinishRecord(data=ref(1,1,4)[68], rec=ref(1,9,16)[80], parent_tp=17, fld=65535)
  120:[68] VarVector(var[44]) -> ref(1,1,4)=[1,10,100][68]
  123:[80] ConstInt(val=1) -> 1[80]
  128:[84] GetVector(r=ref(1,1,4)[68], size=4, index=1[80]) -> ref(1,9,12)=10[68]
  131:[80] GetInt(v1=ref(1,9,12)[68], fld=0) -> 10[68]
  134:[72] FreeStack(value=4, discard=28)
  138:[48] VarInt(var[44]) -> 10[48]
  141:[52] ConstInt(val=10) -> 10[52]
  146:[56] EqInt(v1=10[48], v2=10[52]) -> true[48]
  147:[49] GotoFalseWord(jump=153, if_false=true[48])
  150:[48] GotoWord(jump=203)
  203:[48] VarRef(var[8]) -> ref(1,1,0)={vector:[1,10,100]}[48]
  206:[60] FreeRef(v1=ref(1,1,0)[48])
  207:[48] FreeText(var[20])
  210:[48] Return(ret=4294967295[4], value=0, discard=44)
Finished
