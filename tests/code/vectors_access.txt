Test code:
pub fn test() {
    test_value = {v=[1, 10, 100]; v[1]};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}

Type 13:main_vector<integer>[8]:
    vector:vector<integer>[4]

Type 14:vector<integer>[4]:Vector(0)

fn test {
  let test_value = {
    let v = {
      let db_13 = OpDatabase(4i32, 13i32);
      let vec_12 = OpGetField(db_13, 4i32, 14i32);
      OpSetInt(db_13, 4i32, 0i32);
      let elm_11 = OpNewRecord(vec_12, 14i32, 65535i32);
      OpSetInt(elm_11, 0i32, 1i32);
      OpFinishRecord(vec_12, elm_11, 14i32, 65535i32);
      elm_11 = OpNewRecord(vec_12, 14i32, 65535i32);
      OpSetInt(elm_11, 0i32, 10i32);
      OpFinishRecord(vec_12, elm_11, 14i32, 65535i32);
      elm_11 = OpNewRecord(vec_12, 14i32, 65535i32);
      OpSetInt(elm_11, 0i32, 100i32);
      OpFinishRecord(vec_12, elm_11, 14i32, 65535i32);
      vec_12;
    };
    OpGetInt(OpGetVector(v, 4i32, 1i32), 0i32);
  };
  if OpEqInt(test_value, 10i32) {null} else {OpGenPanic({
    let append_14 = "Test failed ";
    OpFormatInt(append_14, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_14, " != 10");
    append_14;
  })};
}

byte-code for access:test()
 664[0]: return-address
 664[4]: Database(size=4, db_tp=13) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 669[16]: VarRef(var[4]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 672[28]: GetField(v1: reference, fld=4) -> reference type=vector<integer>[4]:Vector(0)[14]
 675[28]: VarRef(var[4]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 678[40]: ConstInt(val=0) -> integer
 683[44]: SetInt(v1: reference, fld=4, val: integer)
 686[28]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 689[40]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 694[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 697[52]: ConstInt(val=1) -> integer
 702[56]: SetInt(v1: reference, fld=0, val: integer)
 705[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 708[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 711[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 716[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 719[52]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 724[52]: PutRef(var[28], value: reference)
 727[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 730[52]: ConstInt(val=10) -> integer
 735[56]: SetInt(v1: reference, fld=0, val: integer)
 738[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 741[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 744[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 749[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 752[52]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 757[52]: PutRef(var[28], value: reference)
 760[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 763[52]: ConstInt(val=100) -> integer
 768[56]: SetInt(v1: reference, fld=0, val: integer)
 771[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 774[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 777[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 782[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 785[52]: GenFreeStack(value=12, discard=36)
 789[16]: VarVector(var[4]) -> vector type=vector<integer>[4]:Vector(0)[14]
 792[28]: ConstInt(val=1) -> integer
 797[32]: GetVector(r: vector, size=4, index: integer) -> reference type=integer[4]:Base[0]
 800[28]: GetInt(v1: reference, fld=0) -> integer
 803[20]: GenFreeStack(value=4, discard=12)
 807[8]: VarInt(var[4]) -> integer
 810[12]: ConstInt(val=10) -> integer
 815[16]: EqInt(v1: integer, v2: integer) -> boolean
 816[9]: GenGotoFalseWord(jump=822, if_false: boolean)
 819[8]: GenGotoWord(jump=874)
 822[8]: Text()
 823[32]: ConstText(_value="Test failed ") -> text
 837[48]: AppendText(var[8], v1: text)
 840[32]: VarInt(var[4]) -> integer
 843[36]: ConstInt(val=0) -> integer
 848[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 855[32]: ConstText(_value=" != 10") -> text
 863[48]: AppendText(var[8], v1: text)
 866[32]: VarText(var[8]) -> text
 869[48]: GenFreeStack(value=16, discard=24)
 873[24]: GenPanic(message: text)
 874[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] Database(size=4, db_tp=13) -> ref(1,1,0)={}[4]
  669:[16] VarRef(var[4]) -> ref(1,1,0)={}[16]
  672:[28] GetField(v1=ref(1,1,0)[16], fld=4) -> ref(1,1,4)=[][16]
  675:[28] VarRef(var[4]) -> ref(1,1,0)={}[28]
  678:[40] ConstInt(val=0) -> 0[40]
  683:[44] SetInt(v1=ref(1,1,0)[28], fld=4, val=0[40])
  686:[28] VarVector(var[16]) -> ref(1,1,4)=[][28]
  689:[40] NewRecord(data=ref(1,1,4)[28], parent_tp=14, fld=65535) -> ref(1,5,8)[28]
  694:[40] VarRef(var[28]) -> ref(1,5,8)=false[40]
  697:[52] ConstInt(val=1) -> 1[52]
  702:[56] SetInt(v1=ref(1,5,8)[40], fld=0, val=1[52])
  705:[40] VarVector(var[16]) -> ref(1,1,4)=[1][40]
  708:[52] VarRef(var[28]) -> ref(1,5,8)=true[52]
  711:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,8)[52], parent_tp=14, fld=65535)
  716:[40] VarVector(var[16]) -> ref(1,1,4)=[1][40]
  719:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=14, fld=65535) -> ref(1,5,12)[40]
  724:[52] PutRef(var[28], value=ref(1,5,12)[40])
  727:[40] VarRef(var[28]) -> ref(1,5,12)=false[40]
  730:[52] ConstInt(val=10) -> 10[52]
  735:[56] SetInt(v1=ref(1,5,12)[40], fld=0, val=10[52])
  738:[40] VarVector(var[16]) -> ref(1,1,4)=[1,10][40]
  741:[52] VarRef(var[28]) -> ref(1,5,12)=true[52]
  744:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,12)[52], parent_tp=14, fld=65535)
  749:[40] VarVector(var[16]) -> ref(1,1,4)=[1,10][40]
  752:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=14, fld=65535) -> ref(1,5,16)[40]
  757:[52] PutRef(var[28], value=ref(1,5,16)[40])
  760:[40] VarRef(var[28]) -> ref(1,5,16)=false[40]
  763:[52] ConstInt(val=100) -> 100[52]
  768:[56] SetInt(v1=ref(1,5,16)[40], fld=0, val=100[52])
  771:[40] VarVector(var[16]) -> ref(1,1,4)=[1,10,100][40]
  774:[52] VarRef(var[28]) -> ref(1,5,16)=true[52]
  777:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,16)[52], parent_tp=14, fld=65535)
  782:[40] VarVector(var[16]) -> ref(1,1,4)=[1,10,100][40]
  785:[52] GenFreeStack(value=12, discard=36)
  789:[16] VarVector(var[4]) -> ref(1,1,4)=[1,10,100][16]
  792:[28] ConstInt(val=1) -> 1[28]
  797:[32] GetVector(r=ref(1,1,4)=true[16], size=4, index=1[28]) -> ref(1,5,12)=10[16]
  800:[28] GetInt(v1=ref(1,5,12)[16], fld=0) -> 10[16]
  803:[20] GenFreeStack(value=4, discard=12)
  807:[8] VarInt(var[4]) -> 10[8]
  810:[12] ConstInt(val=10) -> 10[12]
  815:[16] EqInt(v1=10[8], v2=10[12]) -> true[8]
  816:[9] GenGotoFalseWord(jump=822, if_false=true[8])
  819:[8] GenGotoWord(jump=874)
  874:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
