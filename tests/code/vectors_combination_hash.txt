struct Count { t: text, v: integer};
struct Counting { v: vector<Count>, h: hash<Count[t]> };
fn fill(c: Counting) {
  c.v = [
    {t:"One", v:1},
    {t:"Two", v:2},
  ];
  c.v += [
    {t:"Three", v:3},
    {t:"Four", v:4},
    {t:"Five", v:5},
    {t:"Six", v:6},
    {t:"Seven", v:7},
    {t:"Eight", v:8},
    {t:"Nine", v:9},
    {t:"Ten", v:10},
    {t:"Eleven", v:11},
    {t:"Twelve", v:12},
    {t:"Thirteen", v:13}
  ];
}

pub fn test() {
    test_value = {c = Counting {};
  fill(c);
  assert(!c.h["None"], "No element");
  c.h["Five"].v + c.h["Seven"].v};
    assert(
        test_value == 12,
        "Test failed {test_value} != 12"
    );
}
Type 14:Count[12]:
    t:text[4]
    v:integer[8]

Type 15:Counting[12]:
    v:array<Count>[4] other [1]
    h:hash<Count[t]>[8] other [65535]

Type 16:array<Count>[4]:Array(14)

Type 17:hash<Count[t]>[4]:Hash(14, [0]) keys [tp:6 desc:false field:4, ]

fn fill(c:Counting) {#1 block
  {#2 vector
    OpClear(OpGetField(c, 4i32, 16i32), 16i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#3 object
      OpSetText(_elm_1, 4i32, "One");
      OpSetInt(_elm_1, 8i32, 1i32);
    }#3;
    OpFinishRecord(c, _elm_1, 15i32, 0i32);
    _elm_1:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#4 object
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 2i32);
    }#4;
    OpFinishRecord(c, _elm_1, 15i32, 0i32);
  }#2;
  {#5 vector
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#6 object
      OpSetText(_elm_2, 4i32, "Three");
      OpSetInt(_elm_2, 8i32, 3i32);
    }#6;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#7 object
      OpSetText(_elm_2, 4i32, "Four");
      OpSetInt(_elm_2, 8i32, 4i32);
    }#7;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#8 object
      OpSetText(_elm_2, 4i32, "Five");
      OpSetInt(_elm_2, 8i32, 5i32);
    }#8;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#9 object
      OpSetText(_elm_2, 4i32, "Six");
      OpSetInt(_elm_2, 8i32, 6i32);
    }#9;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#10 object
      OpSetText(_elm_2, 4i32, "Seven");
      OpSetInt(_elm_2, 8i32, 7i32);
    }#10;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#11 object
      OpSetText(_elm_2, 4i32, "Eight");
      OpSetInt(_elm_2, 8i32, 8i32);
    }#11;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#12 object
      OpSetText(_elm_2, 4i32, "Nine");
      OpSetInt(_elm_2, 8i32, 9i32);
    }#12;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#13 object
      OpSetText(_elm_2, 4i32, "Ten");
      OpSetInt(_elm_2, 8i32, 10i32);
    }#13;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#14 object
      OpSetText(_elm_2, 4i32, "Eleven");
      OpSetInt(_elm_2, 8i32, 11i32);
    }#14;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#15 object
      OpSetText(_elm_2, 4i32, "Twelve");
      OpSetInt(_elm_2, 8i32, 12i32);
    }#15;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
    _elm_2:ref(Count)["c"] = OpNewRecord(c, 15i32, 0i32);
    {#16 object
      OpSetText(_elm_2, 4i32, "Thirteen");
      OpSetInt(_elm_2, 8i32, 13i32);
    }#16;
    OpFinishRecord(c, _elm_2, 15i32, 0i32);
  }#5;
}#1

byte-code for combination_hash:fill(c: ref(Counting)[0]) [1073]
   0[12]: return-address
   0[16]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
   3[28]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=array<Count>[4]:Array(14)[16]
   6[28]: Clear(data: ref(reference), tp=16)
   9[16]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
  12[28]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
  17[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_1[16]:ref(Count)["c"] in 2
  20[40]: ConstText(_value="One") -> text
  25[56]: SetText(v1: ref(reference), fld=4, val: text)
  28[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_1[16]:ref(Count)["c"] in 2
  31[40]: ConstInt(val=1) -> integer
  36[44]: SetInt(v1: ref(reference), fld=8, val: integer)
  39[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
  42[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_1[16]:ref(Count)["c"] in 2
  45[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
  50[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
  53[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
  58[40]: PutRef(var[16], value: ref(reference))
  61[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_1[16]:ref(Count)["c"] in 2
  64[40]: ConstText(_value="Two") -> text
  69[56]: SetText(v1: ref(reference), fld=4, val: text)
  72[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_1[16]:ref(Count)["c"] in 2
  75[40]: ConstInt(val=2) -> integer
  80[44]: SetInt(v1: ref(reference), fld=8, val: integer)
  83[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
  86[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_1[16]:ref(Count)["c"] in 2
  89[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
  94[28]: FreeStack(value=0, discard=12)
  98[16]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 101[28]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 106[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 109[40]: ConstText(_value="Three") -> text
 116[56]: SetText(v1: ref(reference), fld=4, val: text)
 119[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 122[40]: ConstInt(val=3) -> integer
 127[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 130[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 133[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 136[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 141[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 144[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 149[40]: PutRef(var[16], value: ref(reference))
 152[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 155[40]: ConstText(_value="Four") -> text
 161[56]: SetText(v1: ref(reference), fld=4, val: text)
 164[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 167[40]: ConstInt(val=4) -> integer
 172[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 175[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 178[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 181[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 186[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 189[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 194[40]: PutRef(var[16], value: ref(reference))
 197[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 200[40]: ConstText(_value="Five") -> text
 206[56]: SetText(v1: ref(reference), fld=4, val: text)
 209[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 212[40]: ConstInt(val=5) -> integer
 217[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 220[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 223[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 226[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 231[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 234[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 239[40]: PutRef(var[16], value: ref(reference))
 242[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 245[40]: ConstText(_value="Six") -> text
 250[56]: SetText(v1: ref(reference), fld=4, val: text)
 253[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 256[40]: ConstInt(val=6) -> integer
 261[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 264[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 267[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 270[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 275[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 278[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 283[40]: PutRef(var[16], value: ref(reference))
 286[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 289[40]: ConstText(_value="Seven") -> text
 296[56]: SetText(v1: ref(reference), fld=4, val: text)
 299[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 302[40]: ConstInt(val=7) -> integer
 307[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 310[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 313[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 316[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 321[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 324[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 329[40]: PutRef(var[16], value: ref(reference))
 332[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 335[40]: ConstText(_value="Eight") -> text
 342[56]: SetText(v1: ref(reference), fld=4, val: text)
 345[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 348[40]: ConstInt(val=8) -> integer
 353[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 356[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 359[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 362[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 367[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 370[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 375[40]: PutRef(var[16], value: ref(reference))
 378[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 381[40]: ConstText(_value="Nine") -> text
 387[56]: SetText(v1: ref(reference), fld=4, val: text)
 390[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 393[40]: ConstInt(val=9) -> integer
 398[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 401[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 404[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 407[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 412[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 415[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 420[40]: PutRef(var[16], value: ref(reference))
 423[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 426[40]: ConstText(_value="Ten") -> text
 431[56]: SetText(v1: ref(reference), fld=4, val: text)
 434[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 437[40]: ConstInt(val=10) -> integer
 442[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 445[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 448[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 451[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 456[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 459[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 464[40]: PutRef(var[16], value: ref(reference))
 467[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 470[40]: ConstText(_value="Eleven") -> text
 478[56]: SetText(v1: ref(reference), fld=4, val: text)
 481[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 484[40]: ConstInt(val=11) -> integer
 489[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 492[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 495[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 498[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 503[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 506[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 511[40]: PutRef(var[16], value: ref(reference))
 514[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 517[40]: ConstText(_value="Twelve") -> text
 525[56]: SetText(v1: ref(reference), fld=4, val: text)
 528[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 531[40]: ConstInt(val=12) -> integer
 536[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 539[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 542[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 545[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 550[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 553[40]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 558[40]: PutRef(var[16], value: ref(reference))
 561[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 564[40]: ConstText(_value="Thirteen") -> text
 574[56]: SetText(v1: ref(reference), fld=4, val: text)
 577[28]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 580[40]: ConstInt(val=13) -> integer
 585[44]: SetInt(v1: ref(reference), fld=8, val: integer)
 588[28]: VarRef(var[0]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[0]:ref(Counting) in 0
 591[40]: VarRef(var[16]) -> ref(reference) type=Count[12]:{t:text[4], v:integer[8]}[14] var=_elm_2[16]:ref(Count)["c"] in 5
 594[52]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 599[28]: FreeStack(value=0, discard=12)
 603[16]: Return(ret=12, value=0, discard=16)

fn test() {#1 block
  __ref_1:ref(Counting) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    c:ref(Counting)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 15i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      OpSetInt(__ref_1, 8i32, 0i32);
      __ref_1;
    }#3:ref(Counting)["__ref_1"];
    fill(c);
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(c, 8i32, 17i32), 17i32, 1i32, "None"))) null else OpPanic("No element");
    OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 17i32), 17i32, 1i32, "Five"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 17i32), 17i32, 1i32, "Seven"), 8i32));
  }#2:integer;
  if OpEqInt(test_value, 12i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 12");
    __work_1;
  }#4:text);
}#1

byte-code for combination_hash:test() [1682]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Counting) in 1
   1[16]: Text() var=__work_1[16]:text in 1
   2[40]: Database(var[4], db_tp=15) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[40]:ref(Counting)["__ref_1"] in 2
   7[40]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=__ref_1[4]:ref(Counting) in 1
  10[52]: ConstInt(val=0) -> integer
  15[56]: SetInt(v1: ref(reference), fld=4, val: integer)
  18[40]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=__ref_1[4]:ref(Counting) in 1
  21[52]: ConstInt(val=0) -> integer
  26[56]: SetInt(v1: ref(reference), fld=8, val: integer)
  29[40]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=__ref_1[4]:ref(Counting) in 1
  32[52]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[40]:ref(Counting)["__ref_1"] in 2
  35[64]: Call(size=0, to=1073)
  42[52]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[40]:ref(Counting)["__ref_1"] in 2
  45[64]: GetField(v1: ref(reference), fld=8) -> ref(reference) type=hash<Count[t]>[4]:Hash(14, [0]) keys [tp:6 desc:false field:4, ][17]
  48[64]: ConstText(_value="None") -> text
  54[80]: GetRecord(data: ref(reference), db_tp=17, no_keys=1) -> ref(reference)
  58[64]: ConvBoolFromRef(val: ref(reference)) -> boolean
  59[53]: Not(v1: boolean) -> boolean
  60[53]: GotoFalseWord(jump=66, if_false: boolean)
  63[52]: GotoWord(jump=79)
  66[52]: ConstText(_value="No element") -> text
  78[68]: Panic(message: text)
  79[52]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[40]:ref(Counting)["__ref_1"] in 2
  82[64]: GetField(v1: ref(reference), fld=8) -> ref(reference) type=hash<Count[t]>[4]:Hash(14, [0]) keys [tp:6 desc:false field:4, ][17]
  85[64]: ConstText(_value="Five") -> text
  91[80]: GetRecord(data: ref(reference), db_tp=17, no_keys=1) -> ref(reference)
  95[64]: GetInt(v1: ref(reference), fld=8) -> integer
  98[56]: VarRef(var[40]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=c[40]:ref(Counting)["__ref_1"] in 2
 101[68]: GetField(v1: ref(reference), fld=8) -> ref(reference) type=hash<Count[t]>[4]:Hash(14, [0]) keys [tp:6 desc:false field:4, ][17]
 104[68]: ConstText(_value="Seven") -> text
 111[84]: GetRecord(data: ref(reference), db_tp=17, no_keys=1) -> ref(reference)
 115[68]: GetInt(v1: ref(reference), fld=8) -> integer
 118[60]: AddInt(v1: integer, v2: integer) -> integer
 119[56]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
 123[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 126[48]: ConstInt(val=12) -> integer
 131[52]: EqInt(v1: integer, v2: integer) -> boolean
 132[45]: GotoFalseWord(jump=138, if_false: boolean)
 135[44]: GotoWord(jump=188)
 138[44]: ClearText(var[16]) var=__work_1[16]:text in 1
 141[44]: ConstText(_value="Test failed ") -> text
 155[60]: AppendText(var[16], v1: text)
 158[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 161[48]: ConstInt(val=0) -> integer
 166[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 173[44]: ConstText(_value=" != 12") -> text
 181[60]: AppendText(var[16], v1: text)
 184[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 187[60]: Panic(message: text)
 188[44]: FreeText(var[16])
 191[44]: VarRef(var[4]) -> ref(reference) type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[15] var=__ref_1[4]:ref(Counting) in 1
 194[56]: FreeRef(v1: ref(reference))
 195[44]: Return(ret=0, value=0, discard=44)

