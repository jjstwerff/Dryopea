fn text_ref() -> text {
    a = "12345";
    a[0..4]
}

pub fn test() {
    test_value = {text_ref()};
    assert(
        test_value == "1234",
        "Test failed {test_value} != \"1234\""
    );
}
fn text_ref(a:&text) -> text["a"] {#1 block
  OpClearRefText(OpVarRef(a));
  OpAppendRefText(OpVarRef(a), 0i32, "12345");
  OpGetTextSub(OpGetRefText(OpVarRef(a), 0i32), 0i32, 4i32);
}#1:text["a"]

byte-code for var_ref:text_ref(a: &text[0]) [1082] -> text["a"]
   0[12]: return-address
   0[16]: VarRef(var[0]) -> ref(reference)
   3[28]: ClearRefText(r: ref(reference))
   4[16]: VarRef(var[0]) -> ref(reference)
   7[28]: ConstText(_value="12345") -> text
  14[44]: AppendRefText(r: ref(reference), fld=0, v1: text)
  17[16]: VarRef(var[0]) -> ref(reference)
  20[28]: GetRefText(r: ref(reference), fld=0) -> text["a"]
  23[32]: ConstInt(val=0) -> integer
  28[36]: ConstInt(val=4) -> integer
  33[40]: GetTextSub(v1: text, from: integer, till: integer) -> text["a"]
  34[32]: Return(ret=12, value=16, discard=32) type=text[4]:Base[5]

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    text_ref({#3 default ref
      OpCreateRef(__work_1);
    }#3:ref(reference)["__work_1"]);
  }#2:text;
  if OpEqText(test_value, "1234") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "1234"");
    __work_2;
  }#4:text);
}#1

byte-code for var_ref:test() [1122]
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: CreateRef(var[28]) -> ref(reference)
   6[88]: Call(size=0, to=1082)
  13[92]: AppendText(var[52], v1: text)
  16[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
  19[92]: ConstText(_value="1234") -> text
  25[108]: EqText(v1: text, v2: text) -> boolean
  26[77]: GotoFalseWord(jump=32, if_false: boolean)
  29[76]: GotoWord(jump=84)
  32[76]: ClearText(var[4]) var=__work_2[4]:text in 1
  35[76]: ConstText(_value="Test failed ") -> text
  49[92]: AppendText(var[4], v1: text)
  52[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
  55[92]: ConstInt(val=0) -> integer
  60[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  65[76]: ConstText(_value=" != "1234"") -> text
  77[92]: AppendText(var[4], v1: text)
  80[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
  83[92]: Panic(message: text)
  84[76]: FreeText(var[52])
  87[76]: FreeText(var[28])
  90[76]: FreeText(var[4])
  93[76]: Return(ret=0, value=0, discard=76)

