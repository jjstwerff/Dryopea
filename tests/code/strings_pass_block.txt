pub fn test() {
    test_value = {s = "12 "; d = s; trim(d)};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  d(1):text = "";
  test_value(1):text["d"] = {#block(2):text["d"]
    s(2):text = "12 ";
    d(1):text = s(2);
    _tp_text_trim(d(1));
    OpFreeText(s(2));
  }#block(2):text["d"];
  if OpEqText(test_value(1), "12") null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatText(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != "12"");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(test_value(1));
  OpFreeText(d(1));
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for pass_block:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=d[32]:text
   2[56]: Text() var=test_value[56]:text["d"]
   3[80]: Text() var=s[80]:text
   4[104]: ConstText(_value="12 ") -> text
   9[120]: AppendText(var[80], v1: text)
  12[104]: ClearText(var[32]) var=d[32]:text
  15[104]: VarText(var[80]) -> text var=s[80]:text
  18[120]: AppendText(var[32], v1: text)
  21[104]: VarText(var[32]) -> text var=d[32]:text
  24[120]: StaticCall(_tp_text_trim)
  27[120]: FreeText(var[80])
  30[120]: FreeStack(value=16, discard=40)
  34[96]: AppendText(var[56], v1: text)
  37[80]: VarText(var[56]) -> text var=test_value[56]:text["d"]
  40[96]: ConstText(_value="12") -> text
  44[112]: EqText(v1: text, v2: text) -> boolean
  45[81]: GotoFalseWord(jump=51, if_false: boolean)
  48[80]: GotoWord(jump=101)
  51[80]: ClearText(var[8]) var=__work_1[8]:text
  54[80]: ConstText(_value="Test failed ") -> text
  68[96]: AppendText(var[8], v1: text)
  71[80]: VarText(var[56]) -> text var=test_value[56]:text["d"]
  74[96]: ConstInt(val=0) -> integer
  79[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  84[80]: ConstText(_value=" != "12"") -> text
  94[96]: AppendText(var[8], v1: text)
  97[80]: VarText(var[8]) -> text var=__work_1[8]:text
 100[96]: Panic(message: text)
 101[80]: FreeText(var[56])
 104[80]: FreeText(var[32])
 107[80]: FreeText(var[8])
 110[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] Text()
    4:[104] ConstText(_value="12 ") -> "12 "[104]
    9:[120] AppendText(var[80], v1="12 "[104])
   12:[104] ClearText(var[32])
   15:[104] VarText(var[80]) -> "12 "[104]
   18:[120] AppendText(var[32], v1="12 "[104])
   21:[104] VarText(var[32]) -> "12 "[104]
   24:[120] StaticCall(_tp_text_trim)
   27:[120] FreeText(var[80])
   30:[120] FreeStack(value=16, discard=40)
   34:[96] AppendText(var[56], v1="12"[80])
   37:[80] VarText(var[56]) -> "12"[80]
   40:[96] ConstText(_value="12") -> "12"[96]
   44:[112] EqText(v1="12"[80], v2="12"[96]) -> true[80]
   45:[81] GotoFalseWord(jump=51, if_false=true[80])
   48:[80] GotoWord(jump=101)
  101:[80] FreeText(var[56])
  104:[80] FreeText(var[32])
  107:[80] FreeText(var[8])
  110:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
