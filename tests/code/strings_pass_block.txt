pub fn test() {
    test_value = {s = "12 "; d = s; trim(d)};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  d:text["s"] = "";
  test_value:text["d"] = {#2 block
    s:text = "12 ";
    d:text["s"] = s;
    _tp_text_trim(d);
  }#2:text["d"];
  if OpEqText(test_value, "12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "12"");
    __work_1;
  }#3:text);
}#1

byte-code for pass_block:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: Text() var=d[28]:text["s"] in 1
 657[52]: Text() var=test_value[52]:text["d"] in 1
 658[76]: Text() var=s[76]:text in 2
 659[100]: ConstText(_value="12 ") -> text
 664[116]: AppendText(var[76], v1: text)
 667[100]: ClearText(var[28]) var=d[28]:text["s"] in 1
 670[100]: VarText(var[76]) -> text var=s[76]:text in 2
 673[116]: AppendText(var[28], v1: text)
 676[100]: VarText(var[28]) -> text var=d[28]:text["s"] in 1
 679[116]: StaticCall(_tp_text_trim)
 682[116]: FreeText(var[76])
 685[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 689[92]: AppendText(var[52], v1: text)
 692[76]: VarText(var[52]) -> text var=test_value[52]:text["d"] in 1
 695[92]: ConstText(_value="12") -> text
 699[108]: EqText(v1: text, v2: text) -> boolean
 700[77]: GotoFalseWord(jump=706, if_false: boolean)
 703[76]: GotoWord(jump=756)
 706[76]: ClearText(var[4]) var=__work_1[4]:text in 1
 709[76]: ConstText(_value="Test failed ") -> text
 723[92]: AppendText(var[4], v1: text)
 726[76]: VarText(var[52]) -> text var=test_value[52]:text["d"] in 1
 729[92]: ConstInt(val=0) -> integer
 734[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 739[76]: ConstText(_value=" != "12"") -> text
 749[92]: AppendText(var[4], v1: text)
 752[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 755[92]: Panic(message: text)
 756[76]: FreeText(var[52])
 759[76]: FreeText(var[28])
 762[76]: FreeText(var[4])
 765[76]: Return(ret=0, value=0, discard=76)

Execute test:
  655:[8] Text()
  656:[32] Text()
  657:[56] Text()
  658:[80] Text()
  659:[104] ConstText(_value="12 ") -> "12 "[104]
  664:[120] AppendText(var[80], v1="12 "[104])
  667:[104] ClearText(var[32])
  670:[104] VarText(var[80]) -> "12 "[104]
  673:[120] AppendText(var[32], v1="12 "[104])
  676:[104] VarText(var[32]) -> "12 "[104]
  679:[120] StaticCall(call=6)
  682:[120] FreeText(var[80])
  685:[120] FreeStack(value=16, discard=40)
  689:[96] AppendText(var[56], v1="12"[80])
  692:[80] VarText(var[56]) -> "12"[80]
  695:[96] ConstText(_value="12") -> "12"[96]
  699:[112] EqText(v1="12"[80], v2="12"[96]) -> true[80]
  700:[81] GotoFalseWord(jump=706, if_false=true[80])
  703:[80] GotoWord(jump=756)
  756:[80] FreeText(var[56])
  759:[80] FreeText(var[32])
  762:[80] FreeText(var[8])
  765:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
