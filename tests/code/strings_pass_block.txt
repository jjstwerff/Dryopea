pub fn test() {
    test_value = {s = "12 "; d = s; trim(d)};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  d:text["s"] = "";
  test_value:text["d"] = {#2 block
    s:text = "12 ";
    d:text["s"] = s;
    _tp_text_trim(d);
  }#2:text["d"];
  if OpEqText(test_value, "12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "12"");
    __work_1;
  }#3:text);
}#1

byte-code for pass_block:test()
 645[0]: return-address
 645[4]: Text() var=__work_1[4]:text in 1
 646[28]: Text() var=d[28]:text["s"] in 1
 647[52]: Text() var=test_value[52]:text["d"] in 1
 648[76]: Text() var=s[76]:text in 2
 649[100]: ConstText(_value="12 ") -> text
 654[116]: AppendText(var[76], v1: text)
 657[100]: ClearText(var[28]) var=d[28]:text["s"] in 1
 660[100]: VarText(var[76]) -> text var=s[76]:text in 2
 663[116]: AppendText(var[28], v1: text)
 666[100]: VarText(var[28]) -> text var=d[28]:text["s"] in 1
 669[116]: StaticCall(_tp_text_trim)
 672[116]: FreeText(var[76])
 675[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 679[92]: AppendText(var[52], v1: text)
 682[76]: VarText(var[52]) -> text var=test_value[52]:text["d"] in 1
 685[92]: ConstText(_value="12") -> text
 689[108]: EqText(v1: text, v2: text) -> boolean
 690[77]: GotoFalseWord(jump=696, if_false: boolean)
 693[76]: GotoWord(jump=746)
 696[76]: ClearText(var[4]) var=__work_1[4]:text in 1
 699[76]: ConstText(_value="Test failed ") -> text
 713[92]: AppendText(var[4], v1: text)
 716[76]: VarText(var[52]) -> text var=test_value[52]:text["d"] in 1
 719[92]: ConstInt(val=0) -> integer
 724[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 729[76]: ConstText(_value=" != "12"") -> text
 739[92]: AppendText(var[4], v1: text)
 742[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 745[92]: Panic(message: text)
 746[76]: FreeText(var[52])
 749[76]: FreeText(var[28])
 752[76]: FreeText(var[4])
 755[76]: Return(ret=0, value=0, discard=76)

Execute test:
  645:[8] Text()
  646:[32] Text()
  647:[56] Text()
  648:[80] Text()
  649:[104] ConstText(_value="12 ") -> "12 "[104]
  654:[120] AppendText(var[80], v1="12 "[104])
  657:[104] ClearText(var[32])
  660:[104] VarText(var[80]) -> "12 "[104]
  663:[120] AppendText(var[32], v1="12 "[104])
  666:[104] VarText(var[32]) -> "12 "[104]
  669:[120] StaticCall(call=7)
  672:[120] FreeText(var[80])
  675:[120] FreeStack(value=16, discard=40)
  679:[96] AppendText(var[56], v1="12"[80])
  682:[80] VarText(var[56]) -> "12"[80]
  685:[96] ConstText(_value="12") -> "12"[96]
  689:[112] EqText(v1="12"[80], v2="12"[96]) -> true[80]
  690:[81] GotoFalseWord(jump=696, if_false=true[80])
  693:[80] GotoWord(jump=746)
  746:[80] FreeText(var[56])
  749:[80] FreeText(var[32])
  752:[80] FreeText(var[8])
  755:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
