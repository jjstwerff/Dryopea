pub fn test() {
    test_value = {s = "12 "; d = s; trim(d)};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  d:text["s"] = "";
  test_value:text["d"] = {#2 block
    s:text = "12 ";
    d:text["s"] = s;
    _tp_text_trim(d);
  }#2:text["d"];
  if OpEqText(test_value, "12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "12"");
    __work_1;
  }#3:text);
}#1

byte-code for pass_block:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=d[28]:text["s"] in 1
   2[52]: Text() var=test_value[52]:text["d"] in 1
   3[76]: Text() var=s[76]:text in 2
   4[100]: ConstText(_value="12 ") -> text
   9[116]: AppendText(var[76], v1: text)
  12[100]: ClearText(var[28]) var=d[28]:text["s"] in 1
  15[100]: VarText(var[76]) -> text var=s[76]:text in 2
  18[116]: AppendText(var[28], v1: text)
  21[100]: VarText(var[28]) -> text var=d[28]:text["s"] in 1
  24[116]: StaticCall(_tp_text_trim)
  27[116]: FreeText(var[76])
  30[116]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
  34[92]: AppendText(var[52], v1: text)
  37[76]: VarText(var[52]) -> text var=test_value[52]:text["d"] in 1
  40[92]: ConstText(_value="12") -> text
  44[108]: EqText(v1: text, v2: text) -> boolean
  45[77]: GotoFalseWord(jump=51, if_false: boolean)
  48[76]: GotoWord(jump=101)
  51[76]: ClearText(var[4]) var=__work_1[4]:text in 1
  54[76]: ConstText(_value="Test failed ") -> text
  68[92]: AppendText(var[4], v1: text)
  71[76]: VarText(var[52]) -> text var=test_value[52]:text["d"] in 1
  74[92]: ConstInt(val=0) -> integer
  79[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  84[76]: ConstText(_value=" != "12"") -> text
  94[92]: AppendText(var[4], v1: text)
  97[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 100[92]: Panic(message: text)
 101[76]: FreeText(var[52])
 104[76]: FreeText(var[28])
 107[76]: FreeText(var[4])
 110[76]: Return(ret=0, value=0, discard=76)

