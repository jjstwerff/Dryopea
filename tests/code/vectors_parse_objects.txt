struct Elm {n:text, c:integer}

pub fn test() {
    test_value = {v = "[ {{n:'hi', c:10 }}, {{n:'world', c:2 }} ]" as vector<Elm>; "{v}"};
    assert(
        test_value == "[{{n:\"hi\",c:10}},{{n:\"world\",c:2}}]",
        "Test failed {test_value} != \"[{{n:\"hi\",c:10}},{{n:\"world\",c:2}}]\""
    );
}
Type 14:Elm[12]:
    n:text[4]
    c:integer[8]

Type 15:vector<Elm>[4]:Vector(14)

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    v:vector<ref(Elm)> = OpCastVectorFromText("[ {n:'hi', c:10 }, {n:'world', c:2 } ]", 15i32);
    {#3 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 15i32, false);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "[{n:"hi",c:10},{n:"world",c:2}]") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[{n:"hi",c:10},{n:"world",c:2}]"");
    __work_2;
  }#4:text);
}#1

byte-code for parse_objects:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: ConstText(_value="[ {n:'hi', c:10 }, {n:'world', c:2 } ]") -> text var=v[76]:vector<ref(Elm)> in 2
  43[92]: CastVectorFromText(val: text, db_tp=15) -> vector
  46[88]: ClearText(var[28]) var=__work_1[28]:text in 1
  49[88]: ConstText(_value="") -> text
  51[104]: AppendText(var[28], v1: text)
  54[88]: VarVector(var[76]) -> vector type=vector<Elm>[4]:Vector(14)[15] var=v[76]:vector<ref(Elm)> in 2
  57[100]: FormatDatabase(var[28], val: ref(reference), db_tp=15, pretty=false)
  63[88]: VarText(var[28]) -> text var=__work_1[28]:text in 1
  66[104]: VarVector(var[76]) -> vector type=vector<Elm>[4]:Vector(14)[15] var=v[76]:vector<ref(Elm)> in 2
  69[116]: FreeRef(v1: ref(reference))
  70[104]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
  74[92]: AppendText(var[52], v1: text)
  77[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
  80[92]: ConstText(_value="[{n:"hi",c:10},{n:"world",c:2}]") -> text
 113[108]: EqText(v1: text, v2: text) -> boolean
 114[77]: GotoFalseWord(jump=120, if_false: boolean)
 117[76]: GotoWord(jump=199)
 120[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 123[76]: ConstText(_value="Test failed ") -> text
 137[92]: AppendText(var[4], v1: text)
 140[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 143[92]: ConstInt(val=0) -> integer
 148[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 153[76]: ConstText(_value=" != "[{n:"hi",c:10},{n:"world",c:2}]"") -> text
 192[92]: AppendText(var[4], v1: text)
 195[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 198[92]: Panic(message: text)
 199[76]: FreeText(var[52])
 202[76]: FreeText(var[28])
 205[76]: FreeText(var[4])
 208[76]: Return(ret=0, value=0, discard=76)

