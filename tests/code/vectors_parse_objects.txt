struct Elm {n:text, c:integer}

pub fn test() {
    test_value = {v = "[ {{n:'hi', c:10 }}, {{n:'world', c:2 }} ]" as vector<Elm>; "{v}"};
    assert(
        test_value == "[{{n:\"hi\",c:10}},{{n:\"world\",c:2}}]",
        "Test failed {test_value} != \"[{{n:\"hi\",c:10}},{{n:\"world\",c:2}}]\""
    );
}
Type 12:Elm[12]:
    n:text[4]
    c:integer[8]

Type 13:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    v:vector<Elm> = OpCastVectorFromText("[ {n:'hi', c:10 }, {n:'world', c:2 } ]", 13i32);
    {#3 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 13i32, false);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "[{n:"hi",c:10},{n:"world",c:2}]") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[{n:"hi",c:10},{n:"world",c:2}]"");
    __work_2;
  }#4:text);
}#1

byte-code for parse_objects:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: Text()
 693[52]: Text()
 694[76]: ConstText(_value="[ {n:'hi', c:10 }, {n:'world', c:2 } ]") -> text
 734[92]: CastVectorFromText(val: text, db_tp=13) -> vector
 737[88]: ClearText(var[28])
 740[88]: ConstText(_value="") -> text
 742[104]: AppendText(var[28], v1: text)
 745[88]: VarVector(var[76]) -> vector type=vector<Elm>[4]:Vector(12)[13]
 748[100]: FormatDatabase(var[28], val: reference, db_tp=13, pretty=false)
 754[88]: VarText(var[28]) -> text
 757[104]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 761[92]: AppendText(var[52], v1: text)
 764[76]: VarText(var[52]) -> text
 767[92]: ConstText(_value="[{n:"hi",c:10},{n:"world",c:2}]") -> text
 800[108]: EqText(v1: text, v2: text) -> boolean
 801[77]: GotoFalseWord(jump=807, if_false: boolean)
 804[76]: GotoWord(jump=886)
 807[76]: ClearText(var[4])
 810[76]: ConstText(_value="Test failed ") -> text
 824[92]: AppendText(var[4], v1: text)
 827[76]: VarText(var[52]) -> text
 830[92]: ConstInt(val=0) -> integer
 835[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 840[76]: ConstText(_value=" != "[{n:"hi",c:10},{n:"world",c:2}]"") -> text
 879[92]: AppendText(var[4], v1: text)
 882[76]: VarText(var[4]) -> text
 885[92]: Panic(message: text)
 886[76]: FreeText(var[52])
 889[76]: FreeText(var[28])
 892[76]: FreeText(var[4])
 895[76]: Return(ret=0, value=0, discard=76)

Execute test:
  691:[8] Text()
  692:[32] Text()
  693:[56] Text()
  694:[80] ConstText(_value="[ {n:'hi', c:10 }, {n:'world', c:2 } ]") -> "[ {n:'hi', c:10 }, {n:'world', c:2 } ]"[80]
  734:[96] CastVectorFromText(val="[ {n:'hi', c:10 }, {n:'world', c:2 } ]"[80], db_tp=13) -> ref(1,1,4)=true[80]
  737:[92] ClearText(var[32])
  740:[92] ConstText(_value="") -> ""[92]
  742:[108] AppendText(var[32], v1=""[92])
  745:[92] VarVector(var[80]) -> ref(1,1,4)=[{n:"hi",c:10},{n:"world",c:2}][92]
  748:[104] FormatDatabase(var[32], val=ref(1,1,4)[92], db_tp=13, pretty=false)
  754:[92] VarText(var[32]) -> "[{n:\"hi\",c:10},{n:\"world\",c:2}]"[92]
  757:[108] FreeStack(value=16, discard=28)
  761:[96] AppendText(var[56], v1="[{n:\"hi\",c:10},{n:\"world\",c:2}]"[80])
  764:[80] VarText(var[56]) -> "[{n:\"hi\",c:10},{n:\"world\",c:2}]"[80]
  767:[96] ConstText(_value="[{n:"hi",c:10},{n:"world",c:2}]") -> "[{n:\"hi\",c:10},{n:\"world\",c:2}]"[96]
  800:[112] EqText(v1="[{n:\"hi\",c:10},{n:\"world\",c:2}]"[80], v2="[{n:\"hi\",c:10},{n:\"world\",c:2}]"[96]) -> true[80]
  801:[81] GotoFalseWord(jump=807, if_false=true[80])
  804:[80] GotoWord(jump=886)
  886:[80] FreeText(var[56])
  889:[80] FreeText(var[32])
  892:[80] FreeText(var[8])
  895:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
