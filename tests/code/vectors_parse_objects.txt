Test code:
struct Elm {n:text, c:integer}

pub fn test() {
    test_value = {v = "[ {{n:'hi', c:10 }}, {{n:'world', c:2 }} ]" as vector<Elm>; "{v}"};
    assert(
        test_value == "[{{n:\"hi\",c:10}},{{n:\"world\",c:2}}]",
        "Test failed {test_value} != \"[{{n:\"hi\",c:10}},{{n:\"world\",c:2}}]\""
    );
}

Type 13:Elm[12]:
    n:text[4]
    c:integer[8]

Type 14:vector<Elm>[4]:Vector(13)

fn test {
  let test_value = {
    let v = OpCastVectorFromText("[ {n:'hi', c:10 }, {n:'world', c:2 } ]", 14i32);
    {
      let append_9 = "";
      OpFormatDatabase(append_9, v, 14i32, false);
      append_9;
    };
  };
  if OpEqText(test_value, "[{n:"hi",c:10},{n:"world",c:2}]") {null} else {OpGenPanic({
    let append_10 = "Test failed ";
    OpFormatText(append_10, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_10, " != "[{n:"hi",c:10},{n:"world",c:2}]"");
    append_10;
  })};
}

byte-code for parse_objects:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: ConstText(_value="[ {n:'hi', c:10 }, {n:'world', c:2 } ]") -> text
 705[44]: CastVectorFromText(val: text, db_tp=14) -> vector
 708[40]: Text()
 709[64]: ConstText(_value="") -> text
 711[80]: AppendText(var[40], v1: text)
 714[64]: VarVector(var[28]) -> vector type=vector<Elm>[4]:Vector(13)[14]
 717[76]: FormatDatabase(var[40], val: reference, db_tp=14, pretty=false)
 723[64]: VarText(var[40]) -> text
 726[80]: GenFreeStack(value=16, discard=24)
 730[56]: GenFreeStack(value=16, discard=12)
 734[44]: AppendText(var[4], v1: text)
 737[28]: VarText(var[4]) -> text
 740[44]: ConstText(_value="[{n:"hi",c:10},{n:"world",c:2}]") -> text
 773[60]: EqText(v1: text, v2: text) -> boolean
 774[29]: GenGotoFalseWord(jump=780, if_false: boolean)
 777[28]: GenGotoWord(jump=861)
 780[28]: Text()
 781[52]: ConstText(_value="Test failed ") -> text
 795[68]: AppendText(var[28], v1: text)
 798[52]: VarText(var[4]) -> text
 801[68]: ConstInt(val=0) -> integer
 806[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 811[52]: ConstText(_value=" != "[{n:"hi",c:10},{n:"world",c:2}]"") -> text
 850[68]: AppendText(var[28], v1: text)
 853[52]: VarText(var[28]) -> text
 856[68]: GenFreeStack(value=16, discard=24)
 860[44]: GenPanic(message: text)
 861[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] ConstText(_value="[ {n:'hi', c:10 }, {n:'world', c:2 } ]") -> "[ {n:'hi', c:10 }, {n:'world', c:2 } ]"[28]
  705:[44] CastVectorFromText(val="[ {n:'hi', c:10 }, {n:'world', c:2 } ]"[28], db_tp=14) -> ref(1,1,4)=true[28]
  708:[40] Text()
  709:[64] ConstText(_value="") -> ""[64]
  711:[80] AppendText(var[40], v1=""[64])
  714:[64] VarVector(var[28]) -> ref(1,1,4)=[{n:"hi",c:10},{n:"world",c:2}][64]
  717:[76] FormatDatabase(var[40], val=ref(1,1,4)[64], db_tp=14, pretty=false)
  723:[64] VarText(var[40]) -> "[{n:\"hi\",c:10},{n:\"world\",c:2}]"[64]
  726:[80] GenFreeStack(value=16, discard=24)
  730:[56] GenFreeStack(value=16, discard=12)
  734:[44] AppendText(var[4], v1="[{n:\"hi\",c:10},{n:\"world\",c:2}]"[28])
  737:[28] VarText(var[4]) -> "[{n:\"hi\",c:10},{n:\"world\",c:2}]"[28]
  740:[44] ConstText(_value="[{n:"hi",c:10},{n:"world",c:2}]") -> "[{n:\"hi\",c:10},{n:\"world\",c:2}]"[44]
  773:[60] EqText(v1="[{n:\"hi\",c:10},{n:\"world\",c:2}]"[28], v2="[{n:\"hi\",c:10},{n:\"world\",c:2}]"[44]) -> true[28]
  774:[29] GenGotoFalseWord(jump=780, if_false=true[28])
  777:[28] GenGotoWord(jump=861)
  861:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
