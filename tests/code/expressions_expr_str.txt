Test code:
pub fn test() {
    test_value = {"1.1"};
    assert(
        test_value == "1.1",
        "Test failed {test_value} != \"1.1\""
    );
}

fn test {
  let __work_1 = "";
  let test_value = {
    "1.1";
  };
  if OpEqText(test_value, "1.1") {null} else {OpGenPanic({
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "1.1"");
    __work_1;
  })};
}

byte-code for expr_str:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: Text()
 675[52]: ConstText(_value="1.1") -> text(false)
 680[68]: AppendText(var[28], v1: text(false))
 683[52]: VarText(var[28]) -> text(false)
 686[68]: ConstText(_value="1.1") -> text(false)
 691[84]: EqText(v1: text(false), v2: text(false)) -> boolean
 692[53]: GenGotoFalseWord(jump=698, if_false: boolean)
 695[52]: GenGotoWord(jump=749)
 698[52]: ClearText(var[4])
 701[52]: ConstText(_value="Test failed ") -> text(false)
 715[68]: AppendText(var[4], v1: text(false))
 718[52]: VarText(var[28]) -> text(false)
 721[68]: ConstInt(val=0) -> integer
 726[72]: FormatText(var[4], val: text(false), width: integer, dir=-1, token=32)
 731[52]: ConstText(_value=" != "1.1"") -> text(false)
 742[68]: AppendText(var[4], v1: text(false))
 745[52]: VarText(var[4]) -> text(false)
 748[68]: GenPanic(message: text(false))
 749[52]: GenReturn(ret=0, value=0, discard=52)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] Text()
  675:[56] ConstText(_value="1.1") -> "1.1"[56]
  680:[72] AppendText(var[32], v1="1.1"[56])
  683:[56] VarText(var[32]) -> "1.1"[56]
  686:[72] ConstText(_value="1.1") -> "1.1"[72]
  691:[88] EqText(v1="1.1"[56], v2="1.1"[72]) -> true[56]
  692:[57] GenGotoFalseWord(jump=698, if_false=true[56])
  695:[56] GenGotoWord(jump=749)
  749:[56] GenReturn(ret=4294967295[4], value=0, discard=52)
Finished
