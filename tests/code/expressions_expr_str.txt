pub fn test() {
    test_value = {"1.1"};
    assert(
        test_value == "1.1",
        "Test failed {test_value} != \"1.1\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text = {#2 block
    "1.1";
  }#2:text;
  if OpEqText(test_value, "1.1") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "1.1"");
    __work_1;
  }#3:text);
}#1

byte-code for expr_str:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: Text()
 693[52]: ConstText(_value="1.1") -> text
 698[68]: AppendText(var[28], v1: text)
 701[52]: VarText(var[28]) -> text
 704[68]: ConstText(_value="1.1") -> text
 709[84]: EqText(v1: text, v2: text) -> boolean
 710[53]: GotoFalseWord(jump=716, if_false: boolean)
 713[52]: GotoWord(jump=767)
 716[52]: ClearText(var[4])
 719[52]: ConstText(_value="Test failed ") -> text
 733[68]: AppendText(var[4], v1: text)
 736[52]: VarText(var[28]) -> text
 739[68]: ConstInt(val=0) -> integer
 744[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 749[52]: ConstText(_value=" != "1.1"") -> text
 760[68]: AppendText(var[4], v1: text)
 763[52]: VarText(var[4]) -> text
 766[68]: Panic(message: text)
 767[52]: FreeText(var[28])
 770[52]: FreeText(var[4])
 773[52]: Return(ret=0, value=0, discard=52)

Execute test:
  691:[8] Text()
  692:[32] Text()
  693:[56] ConstText(_value="1.1") -> "1.1"[56]
  698:[72] AppendText(var[32], v1="1.1"[56])
  701:[56] VarText(var[32]) -> "1.1"[56]
  704:[72] ConstText(_value="1.1") -> "1.1"[72]
  709:[88] EqText(v1="1.1"[56], v2="1.1"[72]) -> true[56]
  710:[57] GotoFalseWord(jump=716, if_false=true[56])
  713:[56] GotoWord(jump=767)
  767:[56] FreeText(var[32])
  770:[56] FreeText(var[8])
  773:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
