pub fn test() {
    test_value = {"1.1"};
    assert(
        test_value == "1.1",
        "Test failed {test_value} != \"1.1\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text = {#2 block
    "1.1";
  }#2:text;
  if OpEqText(test_value, "1.1") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "1.1"");
    __work_1;
  }#3:text);
}#1

byte-code for expr_str:test()
 645[0]: return-address
 645[4]: Text() var=__work_1[4]:text in 1
 646[28]: Text() var=test_value[28]:text in 1
 647[52]: ConstText(_value="1.1") -> text
 652[68]: AppendText(var[28], v1: text)
 655[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
 658[68]: ConstText(_value="1.1") -> text
 663[84]: EqText(v1: text, v2: text) -> boolean
 664[53]: GotoFalseWord(jump=670, if_false: boolean)
 667[52]: GotoWord(jump=721)
 670[52]: ClearText(var[4]) var=__work_1[4]:text in 1
 673[52]: ConstText(_value="Test failed ") -> text
 687[68]: AppendText(var[4], v1: text)
 690[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
 693[68]: ConstInt(val=0) -> integer
 698[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 703[52]: ConstText(_value=" != "1.1"") -> text
 714[68]: AppendText(var[4], v1: text)
 717[52]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 720[68]: Panic(message: text)
 721[52]: FreeText(var[28])
 724[52]: FreeText(var[4])
 727[52]: Return(ret=0, value=0, discard=52)

Execute test:
  645:[8] Text()
  646:[32] Text()
  647:[56] ConstText(_value="1.1") -> "1.1"[56]
  652:[72] AppendText(var[32], v1="1.1"[56])
  655:[56] VarText(var[32]) -> "1.1"[56]
  658:[72] ConstText(_value="1.1") -> "1.1"[72]
  663:[88] EqText(v1="1.1"[56], v2="1.1"[72]) -> true[56]
  664:[57] GotoFalseWord(jump=670, if_false=true[56])
  667:[56] GotoWord(jump=721)
  721:[56] FreeText(var[32])
  724:[56] FreeText(var[8])
  727:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
