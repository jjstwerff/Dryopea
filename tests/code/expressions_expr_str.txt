pub fn test() {
    test_value = {"1.1"};
    assert(
        test_value == "1.1",
        "Test failed {test_value} != \"1.1\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text = {#2 block
    "1.1";
  }#2:text;
  if OpEqText(test_value, "1.1") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "1.1"");
    __work_1;
  }#3:text);
}#1

byte-code for expr_str:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=test_value[28]:text in 1
   2[52]: ConstText(_value="1.1") -> text
   7[68]: AppendText(var[28], v1: text)
  10[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
  13[68]: ConstText(_value="1.1") -> text
  18[84]: EqText(v1: text, v2: text) -> boolean
  19[53]: GotoFalseWord(jump=25, if_false: boolean)
  22[52]: GotoWord(jump=76)
  25[52]: ClearText(var[4]) var=__work_1[4]:text in 1
  28[52]: ConstText(_value="Test failed ") -> text
  42[68]: AppendText(var[4], v1: text)
  45[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
  48[68]: ConstInt(val=0) -> integer
  53[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  58[52]: ConstText(_value=" != "1.1"") -> text
  69[68]: AppendText(var[4], v1: text)
  72[52]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  75[68]: Panic(message: text)
  76[52]: FreeText(var[28])
  79[52]: FreeText(var[4])
  82[52]: Return(ret=0, value=0, discard=52)

