pub fn test() {
    test_value = {"1.1"};
    assert(
        test_value == "1.1",
        "Test failed {test_value} != \"1.1\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text = {#2 block
    "1.1";
  }#2:text;
  if OpEqText(test_value, "1.1") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "1.1"");
    __work_1;
  }#3:text);
}#1

byte-code for expr_str:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Text()
 694[52]: ConstText(_value="1.1") -> text
 699[68]: AppendText(var[28], v1: text)
 702[52]: VarText(var[28]) -> text
 705[68]: ConstText(_value="1.1") -> text
 710[84]: EqText(v1: text, v2: text) -> boolean
 711[53]: GotoFalseWord(jump=717, if_false: boolean)
 714[52]: GotoWord(jump=768)
 717[52]: ClearText(var[4])
 720[52]: ConstText(_value="Test failed ") -> text
 734[68]: AppendText(var[4], v1: text)
 737[52]: VarText(var[28]) -> text
 740[68]: ConstInt(val=0) -> integer
 745[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 750[52]: ConstText(_value=" != "1.1"") -> text
 761[68]: AppendText(var[4], v1: text)
 764[52]: VarText(var[4]) -> text
 767[68]: Panic(message: text)
 768[52]: Return(ret=0, value=0, discard=52)

Execute test:
  692:[8] Text()
  693:[32] Text()
  694:[56] ConstText(_value="1.1") -> "1.1"[56]
  699:[72] AppendText(var[32], v1="1.1"[56])
  702:[56] VarText(var[32]) -> "1.1"[56]
  705:[72] ConstText(_value="1.1") -> "1.1"[72]
  710:[88] EqText(v1="1.1"[56], v2="1.1"[72]) -> true[56]
  711:[57] GotoFalseWord(jump=717, if_false=true[56])
  714:[56] GotoWord(jump=768)
  768:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
