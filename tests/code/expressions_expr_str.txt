Test code:
pub fn test() {
    test_value = {"1.1"};
    assert(
        test_value == "1.1",
        "Test failed {test_value} != \"1.1\""
    );
}

fn test {
  let test_value = {
    "1.1";
  };
  if OpEqText(test_value, "1.1") {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatText(append_7, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_7, " != "1.1"");
    append_7;
  })};
}

byte-code for expr_str:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: ConstText(_value="1.1") -> text
 670[44]: AppendText(var[4], v1: text)
 673[28]: VarText(var[4]) -> text
 676[44]: ConstText(_value="1.1") -> text
 681[60]: EqText(v1: text, v2: text) -> boolean
 682[29]: GenGotoFalseWord(jump=688, if_false: boolean)
 685[28]: GenGotoWord(jump=741)
 688[28]: Text()
 689[52]: ConstText(_value="Test failed ") -> text
 703[68]: AppendText(var[28], v1: text)
 706[52]: VarText(var[4]) -> text
 709[68]: ConstInt(val=0) -> integer
 714[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 719[52]: ConstText(_value=" != "1.1"") -> text
 730[68]: AppendText(var[28], v1: text)
 733[52]: VarText(var[28]) -> text
 736[68]: GenFreeStack(value=16, discard=24)
 740[44]: GenPanic(message: text)
 741[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] ConstText(_value="1.1") -> "1.1"[28]
  670:[44] AppendText(var[4], v1="1.1"[28])
  673:[28] VarText(var[4]) -> "1.1"[28]
  676:[44] ConstText(_value="1.1") -> "1.1"[44]
  681:[60] EqText(v1="1.1"[28], v2="1.1"[44]) -> true[28]
  682:[29] GenGotoFalseWord(jump=688, if_false=true[28])
  685:[28] GenGotoWord(jump=741)
  741:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
