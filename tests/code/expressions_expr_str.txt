pub fn test() {
    test_value = {"1.1"};
    assert(
        test_value == "1.1",
        "Test failed {test_value} != \"1.1\""
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    "1.1";
  }#2;
  if OpEqText(test_value, "1.1") null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "1.1"");
    __work_1;
  }#3);
}#1

byte-code for expr_str:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="1.1") -> text(false, [])
 675[68]: AppendText(var[28], v1: text(false, []))
 678[52]: VarText(var[28]) -> text(false, [])
 681[68]: ConstText(_value="1.1") -> text(false, [])
 686[84]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 687[53]: GenGotoFalseWord(jump=693, if_false: boolean)
 690[52]: GenGotoWord(jump=744)
 693[52]: ClearText(var[4])
 696[52]: ConstText(_value="Test failed ") -> text(false, [])
 710[68]: AppendText(var[4], v1: text(false, []))
 713[52]: VarText(var[28]) -> text(false, [])
 716[68]: ConstInt(val=0) -> integer
 721[72]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 726[52]: ConstText(_value=" != "1.1"") -> text(false, [])
 737[68]: AppendText(var[4], v1: text(false, []))
 740[52]: VarText(var[4]) -> text(false, [])
 743[68]: GenPanic(message: text(false, []))
 744[52]: GenReturn(ret=0, value=0, discard=52)

Execute test:
  668:[8] Text()
  669:[32] Text()
  670:[56] ConstText(_value="1.1") -> "1.1"[56]
  675:[72] AppendText(var[32], v1="1.1"[56])
  678:[56] VarText(var[32]) -> "1.1"[56]
  681:[72] ConstText(_value="1.1") -> "1.1"[72]
  686:[88] EqText(v1="1.1"[56], v2="1.1"[72]) -> true[56]
  687:[57] GenGotoFalseWord(jump=693, if_false=true[56])
  690:[56] GenGotoWord(jump=744)
  744:[56] GenReturn(ret=4294967295[4], value=0, discard=52)
Finished
