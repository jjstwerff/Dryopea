pub fn test() {
    test_value = {s = "1"; s += "2"; s};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text["s"] = {#2 block
    s:text = "1";
    OpAppendText(s, "2");
    s;
  }#2:text["s"];
  if OpEqText(test_value, "12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "12"");
    __work_1;
  }#3:text);
}#1

byte-code for block:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Text()
 684[52]: Text()
 685[76]: ConstText(_value="1") -> text
 688[92]: AppendText(var[52], v1: text)
 691[76]: ConstText(_value="2") -> text
 694[92]: AppendText(var[52], v1: text)
 697[76]: VarText(var[52]) -> text
 700[92]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 704[68]: AppendText(var[28], v1: text)
 707[52]: VarText(var[28]) -> text
 710[68]: ConstText(_value="12") -> text
 714[84]: EqText(v1: text, v2: text) -> boolean
 715[53]: GotoFalseWord(jump=721, if_false: boolean)
 718[52]: GotoWord(jump=771)
 721[52]: ClearText(var[4])
 724[52]: ConstText(_value="Test failed ") -> text
 738[68]: AppendText(var[4], v1: text)
 741[52]: VarText(var[28]) -> text
 744[68]: ConstInt(val=0) -> integer
 749[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 754[52]: ConstText(_value=" != "12"") -> text
 764[68]: AppendText(var[4], v1: text)
 767[52]: VarText(var[4]) -> text
 770[68]: Panic(message: text)
 771[52]: Return(ret=0, value=0, discard=52)

Execute test:
  682:[8] Text()
  683:[32] Text()
  684:[56] Text()
  685:[80] ConstText(_value="1") -> "1"[80]
  688:[96] AppendText(var[56], v1="1"[80])
  691:[80] ConstText(_value="2") -> "2"[80]
  694:[96] AppendText(var[56], v1="2"[80])
  697:[80] VarText(var[56]) -> "12"[80]
  700:[96] FreeStack(value=16, discard=24)
  704:[72] AppendText(var[32], v1="12"[56])
  707:[56] VarText(var[32]) -> "12"[56]
  710:[72] ConstText(_value="12") -> "12"[72]
  714:[88] EqText(v1="12"[56], v2="12"[72]) -> true[56]
  715:[57] GotoFalseWord(jump=721, if_false=true[56])
  718:[56] GotoWord(jump=771)
  771:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
