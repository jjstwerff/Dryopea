pub fn test() {
    test_value = {s = "1"; s += "2"; s};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#1 block
  let __work_1:text = "";
  let test_value:text["s"] = {#2 block
    let s:text = "1";
    OpAppendText(s, "2");
    s;
  }#2:text["s"];
  if OpEqText(test_value, "12") null else OpPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "12"");
    __work_1;
  }#3:text);
}#1

byte-code for block:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Text()
 677[52]: Text()
 678[76]: ConstText(_value="1") -> text
 681[92]: AppendText(var[52], v1: text)
 684[76]: ConstText(_value="2") -> text
 687[92]: AppendText(var[52], v1: text)
 690[76]: VarText(var[52]) -> text
 693[92]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 697[68]: AppendText(var[28], v1: text)
 700[52]: VarText(var[28]) -> text
 703[68]: ConstText(_value="12") -> text
 707[84]: EqText(v1: text, v2: text) -> boolean
 708[53]: GotoFalseWord(jump=714, if_false: boolean)
 711[52]: GotoWord(jump=764)
 714[52]: ClearText(var[4])
 717[52]: ConstText(_value="Test failed ") -> text
 731[68]: AppendText(var[4], v1: text)
 734[52]: VarText(var[28]) -> text
 737[68]: ConstInt(val=0) -> integer
 742[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 747[52]: ConstText(_value=" != "12"") -> text
 757[68]: AppendText(var[4], v1: text)
 760[52]: VarText(var[4]) -> text
 763[68]: Panic(message: text)
 764[52]: Return(ret=0, value=0, discard=52)

Execute test:
  675:[8] Text()
  676:[32] Text()
  677:[56] Text()
  678:[80] ConstText(_value="1") -> "1"[80]
  681:[96] AppendText(var[56], v1="1"[80])
  684:[80] ConstText(_value="2") -> "2"[80]
  687:[96] AppendText(var[56], v1="2"[80])
  690:[80] VarText(var[56]) -> "12"[80]
  693:[96] FreeStack(value=16, discard=24)
  697:[72] AppendText(var[32], v1="12"[56])
  700:[56] VarText(var[32]) -> "12"[56]
  703:[72] ConstText(_value="12") -> "12"[72]
  707:[88] EqText(v1="12"[56], v2="12"[72]) -> true[56]
  708:[57] GotoFalseWord(jump=714, if_false=true[56])
  711:[56] GotoWord(jump=764)
  764:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
