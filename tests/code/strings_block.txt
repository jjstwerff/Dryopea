pub fn test() {
    test_value = {s = "1"; s += "2"; s};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  s:text = "";
  test_value:text["s"] = {#2 block
    s:text = "1";
    OpAppendText(s, "2");
    s;
  }#2:text["s"];
  if OpEqText(test_value, "12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "12"");
    __work_1;
  }#3:text);
}#1

byte-code for block:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=s[28]:text in 1
   2[52]: Text() var=test_value[52]:text["s"] in 1
   3[76]: ClearText(var[28]) var=s[28]:text in 1
   6[76]: ConstText(_value="1") -> text
   9[92]: AppendText(var[28], v1: text)
  12[76]: ConstText(_value="2") -> text
  15[92]: AppendText(var[28], v1: text)
  18[76]: VarText(var[28]) -> text var=s[28]:text in 1
  21[92]: AppendText(var[52], v1: text)
  24[76]: VarText(var[52]) -> text var=test_value[52]:text["s"] in 1
  27[92]: ConstText(_value="12") -> text
  31[108]: EqText(v1: text, v2: text) -> boolean
  32[77]: GotoFalseWord(jump=38, if_false: boolean)
  35[76]: GotoWord(jump=88)
  38[76]: ClearText(var[4]) var=__work_1[4]:text in 1
  41[76]: ConstText(_value="Test failed ") -> text
  55[92]: AppendText(var[4], v1: text)
  58[76]: VarText(var[52]) -> text var=test_value[52]:text["s"] in 1
  61[92]: ConstInt(val=0) -> integer
  66[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  71[76]: ConstText(_value=" != "12"") -> text
  81[92]: AppendText(var[4], v1: text)
  84[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  87[92]: Panic(message: text)
  88[76]: FreeText(var[52])
  91[76]: FreeText(var[28])
  94[76]: FreeText(var[4])
  97[76]: Return(ret=0, value=0, discard=76)

