pub fn test() {
    test_value = {s = "1"; s += "2"; s};
    assert(
        test_value == "12",
        "Test failed {test_value} != \"12\""
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  s(1):text = "";
  test_value(1):text["s"] = {#block(2):text["s"]
    s(1):text = "1";
    OpAppendText(s(1), "2");
    s(1);
  }#block(2):text["s"];
  if OpEqText(test_value(1), "12") null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatText(__work_1(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_1(1), " != "12"");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(test_value(1));
  OpFreeText(s(1));
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for block:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=s[32]:text
   2[56]: Text() var=test_value[56]:text["s"]
   3[80]: ClearText(var[32]) var=s[32]:text
   6[80]: ConstText(_value="1") -> text
   9[96]: AppendText(var[32], v1: text)
  12[80]: ConstText(_value="2") -> text
  15[96]: AppendText(var[32], v1: text)
  18[80]: VarText(var[32]) -> text var=s[32]:text
  21[96]: AppendText(var[56], v1: text)
  24[80]: VarText(var[56]) -> text var=test_value[56]:text["s"]
  27[96]: ConstText(_value="12") -> text
  31[112]: EqText(v1: text, v2: text) -> boolean
  32[81]: GotoFalseWord(jump=38, if_false: boolean)
  35[80]: GotoWord(jump=88)
  38[80]: ClearText(var[8]) var=__work_1[8]:text
  41[80]: ConstText(_value="Test failed ") -> text
  55[96]: AppendText(var[8], v1: text)
  58[80]: VarText(var[56]) -> text var=test_value[56]:text["s"]
  61[96]: ConstInt(val=0) -> integer
  66[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  71[80]: ConstText(_value=" != "12"") -> text
  81[96]: AppendText(var[8], v1: text)
  84[80]: VarText(var[8]) -> text var=__work_1[8]:text
  87[96]: Panic(message: text)
  88[80]: FreeText(var[56])
  91[80]: FreeText(var[32])
  94[80]: FreeText(var[8])
  97[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value="1") -> "1"[80]
    9:[96] AppendText(var[32], v1="1"[80])
   12:[80] ConstText(_value="2") -> "2"[80]
   15:[96] AppendText(var[32], v1="2"[80])
   18:[80] VarText(var[32]) -> "12"[80]
   21:[96] AppendText(var[56], v1="12"[80])
   24:[80] VarText(var[56]) -> "12"[80]
   27:[96] ConstText(_value="12") -> "12"[96]
   31:[112] EqText(v1="12"[80], v2="12"[96]) -> true[80]
   32:[81] GotoFalseWord(jump=38, if_false=true[80])
   35:[80] GotoWord(jump=88)
   88:[80] FreeText(var[56])
   91:[80] FreeText(var[32])
   94:[80] FreeText(var[8])
   97:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
