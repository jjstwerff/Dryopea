struct Elm {nr: integer, key: text, value: integer}
struct Db {map: sorted<Elm[-nr,key]>}

pub fn test() {
    test_value = {db=Db {map: [
  Elm {nr: 101, key: "One", value: 1},
  Elm {nr: 92, key: "Two", value: 2},
  Elm {nr: 83, key: "Three", value: 3},
  Elm {nr: 83, key: "Four", value: 4},
  Elm {nr: 83, key: "Five", value: 5},
  Elm {nr: 63, key: "Six", value: 6},
  Elm {nr: 61, key: "Seven", value: 7},
]};
sum = 0;
assert(db.map[83,"Five"].value == 5, "Incorrect element {db.map[83,"Five"].value}");
for v in db.map[84..=63,"Six"] {
  sum = sum * 10 + v.value;
};
sum};
    assert(
        test_value == 5436,
        "Test failed {test_value} != 5436"
    );
}
Type 12:Elm[12]:
    nr:integer[0]
    key:text[4]
    value:integer[8]

Type 13:Db[8]:
    map:sorted<Elm[-nr,key]>[4]

Type 14:sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ]

Type 15:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __ref_1:ref(Db) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:integer = {#2 block
    db:ref(Db)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 13i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      {#4 vector
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#5 object
          OpSetInt(_elm_1, 0i32, 101i32);
          OpSetText(_elm_1, 4i32, "One");
          OpSetInt(_elm_1, 8i32, 1i32);
        }#5;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#6 object
          OpSetInt(_elm_1, 0i32, 92i32);
          OpSetText(_elm_1, 4i32, "Two");
          OpSetInt(_elm_1, 8i32, 2i32);
        }#6;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#7 object
          OpSetInt(_elm_1, 0i32, 83i32);
          OpSetText(_elm_1, 4i32, "Three");
          OpSetInt(_elm_1, 8i32, 3i32);
        }#7;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#8 object
          OpSetInt(_elm_1, 0i32, 83i32);
          OpSetText(_elm_1, 4i32, "Four");
          OpSetInt(_elm_1, 8i32, 4i32);
        }#8;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#9 object
          OpSetInt(_elm_1, 0i32, 83i32);
          OpSetText(_elm_1, 4i32, "Five");
          OpSetInt(_elm_1, 8i32, 5i32);
        }#9;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#10 object
          OpSetInt(_elm_1, 0i32, 63i32);
          OpSetText(_elm_1, 4i32, "Six");
          OpSetInt(_elm_1, 8i32, 6i32);
        }#10;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#11 object
          OpSetInt(_elm_1, 0i32, 61i32);
          OpSetText(_elm_1, 4i32, "Seven");
          OpSetInt(_elm_1, 8i32, 7i32);
        }#11;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
      }#4;
      __ref_1;
    }#3:ref(Db)["__ref_1"];
    sum:integer = 0i32;
    if OpEqInt(OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 83i32, "Five"), 8i32), 5i32) null else OpPanic({#12 formatting string
      __work_1:text = "Incorrect element ";
      OpFormatInt(__work_1, OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 83i32, "Five"), 8i32), 10i32, 0i32, 32i32, false, false);
      __work_1;
    }#12:text);
    {#13 for
      _iter_2:long = OpIterate(OpGetField(db, 4i32, 14i32), 130i32, 12i32, &[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], 1i32, 84i32, 2i32, 63i32, "Six");
      loop {#14 for loop
        v:ref(Elm)["db"] = {#15 for next
          OpStep(_iter_2, OpGetField(db, 4i32, 14i32), 130i32, 12i32);
        }#15:ref(Elm)["db"];
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#16 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        }#16;
      }#14;
    }#13;
    sum;
  }#2:integer;
  if OpEqInt(test_value, 5436i32) null else OpPanic({#17 formatting string
    __work_2:text = "Test failed ";
    OpFormatInt(__work_2, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " != 5436");
    __work_2;
  }#17:text);
}#1

byte-code for sorted_iterator:test()
 645[0]: return-address
 645[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Db) in 1
 646[16]: Text() var=__work_2[16]:text in 1
 647[40]: Text() var=__work_1[40]:text in 1
 648[64]: Database(var[4], db_tp=13) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
 653[64]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 656[76]: ConstInt(val=0) -> integer
 661[80]: SetInt(v1: ref(reference), fld=4, val: integer)
 664[64]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 667[76]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 672[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 675[88]: ConstInt(val=101) -> integer
 680[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 683[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 686[88]: ConstText(_value="One") -> text
 691[104]: SetText(v1: ref(reference), fld=4, val: text)
 694[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 697[88]: ConstInt(val=1) -> integer
 702[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 705[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 708[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 711[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 716[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 719[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 724[88]: PutRef(var[64], value: ref(reference))
 727[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 730[88]: ConstInt(val=92) -> integer
 735[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 738[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 741[88]: ConstText(_value="Two") -> text
 746[104]: SetText(v1: ref(reference), fld=4, val: text)
 749[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 752[88]: ConstInt(val=2) -> integer
 757[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 760[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 763[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 766[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 771[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 774[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 779[88]: PutRef(var[64], value: ref(reference))
 782[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 785[88]: ConstInt(val=83) -> integer
 790[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 793[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 796[88]: ConstText(_value="Three") -> text
 803[104]: SetText(v1: ref(reference), fld=4, val: text)
 806[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 809[88]: ConstInt(val=3) -> integer
 814[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 817[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 820[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 823[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 828[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 831[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 836[88]: PutRef(var[64], value: ref(reference))
 839[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 842[88]: ConstInt(val=83) -> integer
 847[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 850[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 853[88]: ConstText(_value="Four") -> text
 859[104]: SetText(v1: ref(reference), fld=4, val: text)
 862[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 865[88]: ConstInt(val=4) -> integer
 870[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 873[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 876[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 879[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 884[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 887[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 892[88]: PutRef(var[64], value: ref(reference))
 895[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 898[88]: ConstInt(val=83) -> integer
 903[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 906[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 909[88]: ConstText(_value="Five") -> text
 915[104]: SetText(v1: ref(reference), fld=4, val: text)
 918[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 921[88]: ConstInt(val=5) -> integer
 926[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 929[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 932[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 935[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 940[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 943[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 948[88]: PutRef(var[64], value: ref(reference))
 951[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 954[88]: ConstInt(val=63) -> integer
 959[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 962[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 965[88]: ConstText(_value="Six") -> text
 970[104]: SetText(v1: ref(reference), fld=4, val: text)
 973[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 976[88]: ConstInt(val=6) -> integer
 981[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 984[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 987[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 990[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 995[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 998[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
1003[88]: PutRef(var[64], value: ref(reference))
1006[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
1009[88]: ConstInt(val=61) -> integer
1014[92]: SetInt(v1: ref(reference), fld=0, val: integer)
1017[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
1020[88]: ConstText(_value="Seven") -> text
1027[104]: SetText(v1: ref(reference), fld=4, val: text)
1030[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
1033[88]: ConstInt(val=7) -> integer
1038[92]: SetInt(v1: ref(reference), fld=8, val: integer)
1041[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1044[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
1047[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
1052[76]: FreeStack(value=0, discard=12)
1056[64]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1059[76]: ConstInt(val=0) -> integer var=sum[76]:integer in 2
1064[80]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
1067[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][14]
1070[92]: ConstText(_value="Five") -> text
1076[108]: ConstInt(val=83) -> integer
1081[112]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1085[92]: GetInt(v1: ref(reference), fld=8) -> integer
1088[84]: ConstInt(val=5) -> integer
1093[88]: EqInt(v1: integer, v2: integer) -> boolean
1094[81]: GotoFalseWord(jump=1100, if_false: boolean)
1097[80]: GotoWord(jump=1166)
1100[80]: ClearText(var[40]) var=__work_1[40]:text in 1
1103[80]: ConstText(_value="Incorrect element ") -> text
1123[96]: AppendText(var[40], v1: text)
1126[80]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
1129[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][14]
1132[92]: ConstText(_value="Five") -> text
1138[108]: ConstInt(val=83) -> integer
1143[112]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1147[92]: GetInt(v1: ref(reference), fld=8) -> integer
1150[84]: ConstInt(val=0) -> integer
1155[88]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1162[80]: VarText(var[40]) -> text var=__work_1[40]:text in 1
1165[96]: Panic(message: text)
1166[80]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
1169[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][14]
1172[92]: ConstInt(val=84) -> integer
1177[96]: ConstText(_value="Six") -> text
1182[112]: ConstInt(val=63) -> integer
1187[116]: Iterate(data: ref(reference), on=130, arg=12, keys=[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], from_key=1, till_key=84) -> long
1200[88]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
1203[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][14]
1206[100]: Step(state_var=20, data: ref(reference), on=130, arg=12) -> ref(reference)
1212[100]: VarRef(var[88]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=v[88]:ref(Elm)["db"] in 14
1215[112]: ConvBoolFromRef(val: ref(reference)) -> boolean
1216[101]: Not(v1: boolean) -> boolean
1217[101]: GotoFalseWord(jump=1227, if_false: boolean)
1220[100]: FreeStack(value=0, discard=12)
1224[88]: GotoWord(jump=1253)
1227[100]: VarInt(var[76]) -> integer var=sum[76]:integer in 2
1230[104]: ConstInt(val=10) -> integer
1235[108]: MulInt(v1: integer, v2: integer) -> integer
1236[104]: VarRef(var[88]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=v[88]:ref(Elm)["db"] in 14
1239[116]: GetInt(v1: ref(reference), fld=8) -> integer
1242[108]: AddInt(v1: integer, v2: integer) -> integer
1243[104]: PutInt(var[76], value: integer)
1246[100]: FreeStack(value=0, discard=12)
1250[88]: GotoWord(jump=1200)
1253[88]: FreeStack(value=0, discard=8)
1257[80]: VarInt(var[76]) -> integer var=sum[76]:integer in 2
1260[84]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
1264[68]: VarInt(var[64]) -> integer var=test_value[64]:integer in 1
1267[72]: ConstInt(val=5436) -> integer
1272[76]: EqInt(v1: integer, v2: integer) -> boolean
1273[69]: GotoFalseWord(jump=1279, if_false: boolean)
1276[68]: GotoWord(jump=1331)
1279[68]: ClearText(var[16]) var=__work_2[16]:text in 1
1282[68]: ConstText(_value="Test failed ") -> text
1296[84]: AppendText(var[16], v1: text)
1299[68]: VarInt(var[64]) -> integer var=test_value[64]:integer in 1
1302[72]: ConstInt(val=0) -> integer
1307[76]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1314[68]: ConstText(_value=" != 5436") -> text
1324[84]: AppendText(var[16], v1: text)
1327[68]: VarText(var[16]) -> text var=__work_2[16]:text in 1
1330[84]: Panic(message: text)
1331[68]: FreeText(var[40])
1334[68]: FreeText(var[16])
1337[68]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1340[80]: FreeRef(v1: ref(reference))
1341[68]: Return(ret=0, value=0, discard=68)

Execute test:
  645:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  646:[20] Text()
  647:[44] Text()
  648:[68] Database(var[8], db_tp=13)
  653:[68] VarRef(var[8]) -> ref(1,1,0)={map:[]}[68]
  656:[80] ConstInt(val=0) -> 0[80]
  661:[84] SetInt(v1=ref(1,1,0)[68], fld=4, val=0[80])
  664:[68] VarRef(var[8]) -> ref(1,1,0)={map:[]}[68]
  667:[80] NewRecord(data=ref(1,1,0)[68], parent_tp=13, fld=0) -> ref(1,9,8)[68]
  672:[80] VarRef(var[68]) -> ref(1,9,8)={}[80]
  675:[92] ConstInt(val=101) -> 101[92]
  680:[96] SetInt(v1=ref(1,9,8)[80], fld=0, val=101[92])
  683:[80] VarRef(var[68]) -> ref(1,9,8)={nr:101}[80]
  686:[92] ConstText(_value="One") -> "One"[92]
  691:[108] SetText(v1=ref(1,9,8)[80], fld=4, val="One"[92])
  694:[80] VarRef(var[68]) -> ref(1,9,8)={nr:101,key:"One"}[80]
  697:[92] ConstInt(val=1) -> 1[92]
  702:[96] SetInt(v1=ref(1,9,8)[80], fld=8, val=1[92])
  705:[80] VarRef(var[8]) -> ref(1,1,0)={map:[]}[80]
  708:[92] VarRef(var[68]) -> ref(1,9,8)={nr:101,key:"One",value:1}[92]
  711:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,8)[92], parent_tp=13, fld=0)
  716:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[80]
  719:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,32)[80]
  724:[92] PutRef(var[68], value=ref(1,9,32)[80])
  727:[80] VarRef(var[68]) -> ref(1,9,32)={}[80]
  730:[92] ConstInt(val=92) -> 92[92]
  735:[96] SetInt(v1=ref(1,9,32)[80], fld=0, val=92[92])
  738:[80] VarRef(var[68]) -> ref(1,9,32)={nr:92}[80]
  741:[92] ConstText(_value="Two") -> "Two"[92]
  746:[108] SetText(v1=ref(1,9,32)[80], fld=4, val="Two"[92])
  749:[80] VarRef(var[68]) -> ref(1,9,32)={nr:92,key:"Two"}[80]
  752:[92] ConstInt(val=2) -> 2[92]
  757:[96] SetInt(v1=ref(1,9,32)[80], fld=8, val=2[92])
  760:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[80]
  763:[92] VarRef(var[68]) -> ref(1,9,32)={nr:92,key:"Two",value:2}[92]
  766:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,32)[92], parent_tp=13, fld=0)
  771:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2}]}[80]
  774:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,44)[80]
  779:[92] PutRef(var[68], value=ref(1,9,44)[80])
  782:[80] VarRef(var[68]) -> ref(1,9,44)={}[80]
  785:[92] ConstInt(val=83) -> 83[92]
  790:[96] SetInt(v1=ref(1,9,44)[80], fld=0, val=83[92])
  793:[80] VarRef(var[68]) -> ref(1,9,44)={nr:83}[80]
  796:[92] ConstText(_value="Three") -> "Three"[92]
  803:[108] SetText(v1=ref(1,9,44)[80], fld=4, val="Three"[92])
  806:[80] VarRef(var[68]) -> ref(1,9,44)={nr:83,key:"Three"}[80]
  809:[92] ConstInt(val=3) -> 3[92]
  814:[96] SetInt(v1=ref(1,9,44)[80], fld=8, val=3[92])
  817:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2}]}[80]
  820:[92] VarRef(var[68]) -> ref(1,9,44)={nr:83,key:"Three",value:3}[92]
  823:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,44)[92], parent_tp=13, fld=0)
  828:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Three",value:3}]}[80]
  831:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,56)[80]
  836:[92] PutRef(var[68], value=ref(1,9,56)[80])
  839:[80] VarRef(var[68]) -> ref(1,9,56)={}[80]
  842:[92] ConstInt(val=83) -> 83[92]
  847:[96] SetInt(v1=ref(1,9,56)[80], fld=0, val=83[92])
  850:[80] VarRef(var[68]) -> ref(1,9,56)={nr:83}[80]
  853:[92] ConstText(_value="Four") -> "Four"[92]
  859:[108] SetText(v1=ref(1,9,56)[80], fld=4, val="Four"[92])
  862:[80] VarRef(var[68]) -> ref(1,9,56)={nr:83,key:"Four"}[80]
  865:[92] ConstInt(val=4) -> 4[92]
  870:[96] SetInt(v1=ref(1,9,56)[80], fld=8, val=4[92])
  873:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Three",value:3}]}[80]
  876:[92] VarRef(var[68]) -> ref(1,9,56)={nr:83,key:"Four",value:4}[92]
  879:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,56)[92], parent_tp=13, fld=0)
  884:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  887:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,68)[80]
  892:[92] PutRef(var[68], value=ref(1,9,68)[80])
  895:[80] VarRef(var[68]) -> ref(1,9,68)={}[80]
  898:[92] ConstInt(val=83) -> 83[92]
  903:[96] SetInt(v1=ref(1,9,68)[80], fld=0, val=83[92])
  906:[80] VarRef(var[68]) -> ref(1,9,68)={nr:83}[80]
  909:[92] ConstText(_value="Five") -> "Five"[92]
  915:[108] SetText(v1=ref(1,9,68)[80], fld=4, val="Five"[92])
  918:[80] VarRef(var[68]) -> ref(1,9,68)={nr:83,key:"Five"}[80]
  921:[92] ConstInt(val=5) -> 5[92]
  926:[96] SetInt(v1=ref(1,9,68)[80], fld=8, val=5[92])
  929:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  932:[92] VarRef(var[68]) -> ref(1,9,68)={nr:83,key:"Five",value:5}[92]
  935:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,68)[92], parent_tp=13, fld=0)
  940:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  943:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,80)[80]
  948:[92] PutRef(var[68], value=ref(1,9,80)[80])
  951:[80] VarRef(var[68]) -> ref(1,9,80)={}[80]
  954:[92] ConstInt(val=63) -> 63[92]
  959:[96] SetInt(v1=ref(1,9,80)[80], fld=0, val=63[92])
  962:[80] VarRef(var[68]) -> ref(1,9,80)={nr:63}[80]
  965:[92] ConstText(_value="Six") -> "Six"[92]
  970:[108] SetText(v1=ref(1,9,80)[80], fld=4, val="Six"[92])
  973:[80] VarRef(var[68]) -> ref(1,9,80)={nr:63,key:"Six"}[80]
  976:[92] ConstInt(val=6) -> 6[92]
  981:[96] SetInt(v1=ref(1,9,80)[80], fld=8, val=6[92])
  984:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  987:[92] VarRef(var[68]) -> ref(1,9,80)={nr:63,key:"Six",value:6}[92]
  990:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,80)[92], parent_tp=13, fld=0)
  995:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[80]
  998:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,92)[80]
 1003:[92] PutRef(var[68], value=ref(1,9,92)[80])
 1006:[80] VarRef(var[68]) -> ref(1,9,92)={}[80]
 1009:[92] ConstInt(val=61) -> 61[92]
 1014:[96] SetInt(v1=ref(1,9,92)[80], fld=0, val=61[92])
 1017:[80] VarRef(var[68]) -> ref(1,9,92)={nr:61}[80]
 1020:[92] ConstText(_value="Seven") -> "Seven"[92]
 1027:[108] SetText(v1=ref(1,9,92)[80], fld=4, val="Seven"[92])
 1030:[80] VarRef(var[68]) -> ref(1,9,92)={nr:61,key:"Seven"}[80]
 1033:[92] ConstInt(val=7) -> 7[92]
 1038:[96] SetInt(v1=ref(1,9,92)[80], fld=8, val=7[92])
 1041:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[80]
 1044:[92] VarRef(var[68]) -> ref(1,9,92)={nr:61,key:"Seven",value:7}[92]
 1047:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,92)[92], parent_tp=13, fld=0)
 1052:[80] FreeStack(value=0, discard=12)
 1056:[68] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[68]
 1059:[80] ConstInt(val=0) -> 0[80]
 1064:[84] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[84]
 1067:[96] GetField(v1=ref(1,1,0)[84], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][84]
 1070:[96] ConstText(_value="Five") -> "Five"[96]
 1076:[112] ConstInt(val=83) -> 83[112]
 1081:[116] GetRecord(data=ref(1,1,4)[84], db_tp=14, no_keys=2, key1=83[112], key2="Five"[96]) -> ref(1,9,32)[84]
 1085:[96] GetInt(v1=ref(1,9,32)[84], fld=8) -> 5[84]
 1088:[88] ConstInt(val=5) -> 5[88]
 1093:[92] EqInt(v1=5[84], v2=5[88]) -> true[84]
 1094:[85] GotoFalseWord(jump=1100, if_false=true[84])
 1097:[84] GotoWord(jump=1166)
 1166:[84] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[84]
 1169:[96] GetField(v1=ref(1,1,0)[84], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][84]
 1172:[96] ConstInt(val=84) -> 84[96]
 1177:[100] ConstText(_value="Six") -> "Six"[100]
 1182:[116] ConstInt(val=63) -> 63[116]
 1187:[120] Iterate(data=ref(63,3,0)[108], on=130, arg=12, keys=[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], from_key=1, till_key=84) -> 25769803777[84]
 1200:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
 1203:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
 1206:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,9,32)[92]
 1212:[104] VarRef(var[92]) -> ref(1,9,32)={nr:83,key:"Five",value:5}[104]
 1215:[116] ConvBoolFromRef(val=ref(1,9,32)[104]) -> true[104]
 1216:[105] Not(v1=true[104]) -> false[104]
 1217:[105] GotoFalseWord(jump=1227, if_false=false[104])
 1227:[104] VarInt(var[80]) -> 0[104]
 1230:[108] ConstInt(val=10) -> 10[108]
 1235:[112] MulInt(v1=0[104], v2=10[108]) -> 0[104]
 1236:[108] VarRef(var[92]) -> ref(1,9,32)={nr:83,key:"Five",value:5}[108]
 1239:[120] GetInt(v1=ref(1,9,32)[108], fld=8) -> 5[108]
 1242:[112] AddInt(v1=0[104], v2=5[108]) -> 5[104]
 1243:[108] PutInt(var[80], value=5[104])
 1246:[104] FreeStack(value=0, discard=12)
 1250:[92] GotoWord(jump=1200)
 1200:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
 1203:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
 1206:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,9,44)[92]
 1212:[104] VarRef(var[92]) -> ref(1,9,44)={nr:83,key:"Four",value:4}[104]
 1215:[116] ConvBoolFromRef(val=ref(1,9,44)[104]) -> true[104]
 1216:[105] Not(v1=true[104]) -> false[104]
 1217:[105] GotoFalseWord(jump=1227, if_false=false[104])
 1227:[104] VarInt(var[80]) -> 5[104]
 1230:[108] ConstInt(val=10) -> 10[108]
 1235:[112] MulInt(v1=5[104], v2=10[108]) -> 50[104]
 1236:[108] VarRef(var[92]) -> ref(1,9,44)={nr:83,key:"Four",value:4}[108]
 1239:[120] GetInt(v1=ref(1,9,44)[108], fld=8) -> 4[108]
 1242:[112] AddInt(v1=50[104], v2=4[108]) -> 54[104]
 1243:[108] PutInt(var[80], value=54[104])
 1246:[104] FreeStack(value=0, discard=12)
 1250:[92] GotoWord(jump=1200)
 1200:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
 1203:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
 1206:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,9,56)[92]
 1212:[104] VarRef(var[92]) -> ref(1,9,56)={nr:83,key:"Three",value:3}[104]
 1215:[116] ConvBoolFromRef(val=ref(1,9,56)[104]) -> true[104]
 1216:[105] Not(v1=true[104]) -> false[104]
 1217:[105] GotoFalseWord(jump=1227, if_false=false[104])
 1227:[104] VarInt(var[80]) -> 54[104]
 1230:[108] ConstInt(val=10) -> 10[108]
 1235:[112] MulInt(v1=54[104], v2=10[108]) -> 540[104]
 1236:[108] VarRef(var[92]) -> ref(1,9,56)={nr:83,key:"Three",value:3}[108]
 1239:[120] GetInt(v1=ref(1,9,56)[108], fld=8) -> 3[108]
 1242:[112] AddInt(v1=540[104], v2=3[108]) -> 543[104]
 1243:[108] PutInt(var[80], value=543[104])
 1246:[104] FreeStack(value=0, discard=12)
 1250:[92] GotoWord(jump=1200)
 1200:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
 1203:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
 1206:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,9,68)[92]
 1212:[104] VarRef(var[92]) -> ref(1,9,68)={nr:63,key:"Six",value:6}[104]
 1215:[116] ConvBoolFromRef(val=ref(1,9,68)[104]) -> true[104]
 1216:[105] Not(v1=true[104]) -> false[104]
 1217:[105] GotoFalseWord(jump=1227, if_false=false[104])
 1227:[104] VarInt(var[80]) -> 543[104]
 1230:[108] ConstInt(val=10) -> 10[108]
 1235:[112] MulInt(v1=543[104], v2=10[108]) -> 5430[104]
 1236:[108] VarRef(var[92]) -> ref(1,9,68)={nr:63,key:"Six",value:6}[108]
 1239:[120] GetInt(v1=ref(1,9,68)[108], fld=8) -> 6[108]
 1242:[112] AddInt(v1=5430[104], v2=6[108]) -> 5436[104]
 1243:[108] PutInt(var[80], value=5436[104])
 1246:[104] FreeStack(value=0, discard=12)
 1250:[92] GotoWord(jump=1200)
 1200:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
 1203:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
 1206:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,0,2147483647)[92]
 1212:[104] VarRef(var[92]) -> ref(1,0,2147483647)=null[104]
 1215:[116] ConvBoolFromRef(val=ref(1,0,2147483647)[104]) -> false[104]
 1216:[105] Not(v1=false[104]) -> true[104]
 1217:[105] GotoFalseWord(jump=1227, if_false=true[104])
 1220:[104] FreeStack(value=0, discard=12)
 1224:[92] GotoWord(jump=1253)
 1253:[92] FreeStack(value=0, discard=8)
 1257:[84] VarInt(var[80]) -> 5436[84]
 1260:[88] FreeStack(value=4, discard=20)
 1264:[72] VarInt(var[68]) -> 5436[72]
 1267:[76] ConstInt(val=5436) -> 5436[76]
 1272:[80] EqInt(v1=5436[72], v2=5436[76]) -> true[72]
 1273:[73] GotoFalseWord(jump=1279, if_false=true[72])
 1276:[72] GotoWord(jump=1331)
 1331:[72] FreeText(var[44])
 1334:[72] FreeText(var[20])
 1337:[72] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[72]
 1340:[84] FreeRef(v1=ref(1,1,0)[72])
 1341:[72] Return(ret=4294967295[4], value=0, discard=68)
Finished
