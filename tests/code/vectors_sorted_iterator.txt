struct Elm {nr: integer, key: text, value: integer}
struct Db {map: sorted<Elm[-nr,key]>}

pub fn test() {
    test_value = {db=Db {map: [
  Elm {nr: 101, key: "One", value: 1},
  Elm {nr: 92, key: "Two", value: 2},
  Elm {nr: 83, key: "Three", value: 3},
  Elm {nr: 83, key: "Four", value: 4},
  Elm {nr: 83, key: "Five", value: 5},
  Elm {nr: 63, key: "Six", value: 6},
  Elm {nr: 61, key: "Seven", value: 7},
]};
sum = 0;
assert(db.map[83,"Five"].value == 5, "Incorrect element {db.map[83,"Five"].value}");
for v in db.map[84..=63,"Six"] {
  sum = sum * 10 + v.value;
};
sum};
    assert(
        test_value == 5436,
        "Test failed {test_value} != 5436"
    );
}
Type 14:Elm[12]:
    nr:integer[0]
    key:text[4]
    value:integer[8]

Type 15:Db[8]:
    map:sorted<Elm[-nr,key]>[4]

Type 16:sorted<Elm[-nr,key]>[4]:Sorted(14, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ]

Type 17:vector<Elm>[4]:Vector(14)

fn test() {#1 block
  __ref_1:ref(Db) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:integer = {#2 block
    db:ref(Db)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 15i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      {#4 vector
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 15i32, 0i32);
        {#5 object
          OpSetInt(_elm_1, 0i32, 101i32);
          OpSetText(_elm_1, 4i32, "One");
          OpSetInt(_elm_1, 8i32, 1i32);
        }#5;
        OpFinishRecord(__ref_1, _elm_1, 15i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 15i32, 0i32);
        {#6 object
          OpSetInt(_elm_1, 0i32, 92i32);
          OpSetText(_elm_1, 4i32, "Two");
          OpSetInt(_elm_1, 8i32, 2i32);
        }#6;
        OpFinishRecord(__ref_1, _elm_1, 15i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 15i32, 0i32);
        {#7 object
          OpSetInt(_elm_1, 0i32, 83i32);
          OpSetText(_elm_1, 4i32, "Three");
          OpSetInt(_elm_1, 8i32, 3i32);
        }#7;
        OpFinishRecord(__ref_1, _elm_1, 15i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 15i32, 0i32);
        {#8 object
          OpSetInt(_elm_1, 0i32, 83i32);
          OpSetText(_elm_1, 4i32, "Four");
          OpSetInt(_elm_1, 8i32, 4i32);
        }#8;
        OpFinishRecord(__ref_1, _elm_1, 15i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 15i32, 0i32);
        {#9 object
          OpSetInt(_elm_1, 0i32, 83i32);
          OpSetText(_elm_1, 4i32, "Five");
          OpSetInt(_elm_1, 8i32, 5i32);
        }#9;
        OpFinishRecord(__ref_1, _elm_1, 15i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 15i32, 0i32);
        {#10 object
          OpSetInt(_elm_1, 0i32, 63i32);
          OpSetText(_elm_1, 4i32, "Six");
          OpSetInt(_elm_1, 8i32, 6i32);
        }#10;
        OpFinishRecord(__ref_1, _elm_1, 15i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 15i32, 0i32);
        {#11 object
          OpSetInt(_elm_1, 0i32, 61i32);
          OpSetText(_elm_1, 4i32, "Seven");
          OpSetInt(_elm_1, 8i32, 7i32);
        }#11;
        OpFinishRecord(__ref_1, _elm_1, 15i32, 0i32);
      }#4;
      __ref_1;
    }#3:ref(Db)["__ref_1"];
    sum:integer = 0i32;
    if OpEqInt(OpGetInt(OpGetRecord(OpGetField(db, 4i32, 16i32), 16i32, 2i32, 83i32, "Five"), 8i32), 5i32) null else OpPanic({#12 formatting string
      __work_1:text = "Incorrect element ";
      OpFormatInt(__work_1, OpGetInt(OpGetRecord(OpGetField(db, 4i32, 16i32), 16i32, 2i32, 83i32, "Five"), 8i32), 10i32, 0i32, 32i32, false, false);
      __work_1;
    }#12:text);
    {#13 for
      _iter_2:long = OpIterate(OpGetField(db, 4i32, 16i32), 130i32, 12i32, &[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], 1i32, 84i32, 2i32, 63i32, "Six");
      loop {#14 for loop
        v:ref(Elm)["db"] = {#15 for next
          OpStep(_iter_2, OpGetField(db, 4i32, 16i32), 130i32, 12i32);
        }#15:ref(Elm)["db"];
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#16 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        }#16;
      }#14;
    }#13;
    sum;
  }#2:integer;
  if OpEqInt(test_value, 5436i32) null else OpPanic({#17 formatting string
    __work_2:text = "Test failed ";
    OpFormatInt(__work_2, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " != 5436");
    __work_2;
  }#17:text);
}#1

byte-code for sorted_iterator:test()
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Db) in 1
   1[16]: Text() var=__work_2[16]:text in 1
   2[40]: Text() var=__work_1[40]:text in 1
   3[64]: Database(var[4], db_tp=15) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=db[64]:ref(Db)["__ref_1"] in 2
   8[64]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
  11[76]: ConstInt(val=0) -> integer
  16[80]: SetInt(v1: ref(reference), fld=4, val: integer)
  19[64]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
  22[76]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
  27[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
  30[88]: ConstInt(val=101) -> integer
  35[92]: SetInt(v1: ref(reference), fld=0, val: integer)
  38[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
  41[88]: ConstText(_value="One") -> text
  46[104]: SetText(v1: ref(reference), fld=4, val: text)
  49[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
  52[88]: ConstInt(val=1) -> integer
  57[92]: SetInt(v1: ref(reference), fld=8, val: integer)
  60[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
  63[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
  66[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
  71[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
  74[88]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
  79[88]: PutRef(var[64], value: ref(reference))
  82[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
  85[88]: ConstInt(val=92) -> integer
  90[92]: SetInt(v1: ref(reference), fld=0, val: integer)
  93[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
  96[88]: ConstText(_value="Two") -> text
 101[104]: SetText(v1: ref(reference), fld=4, val: text)
 104[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 107[88]: ConstInt(val=2) -> integer
 112[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 115[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 118[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 121[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 126[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 129[88]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 134[88]: PutRef(var[64], value: ref(reference))
 137[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 140[88]: ConstInt(val=83) -> integer
 145[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 148[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 151[88]: ConstText(_value="Three") -> text
 158[104]: SetText(v1: ref(reference), fld=4, val: text)
 161[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 164[88]: ConstInt(val=3) -> integer
 169[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 172[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 175[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 178[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 183[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 186[88]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 191[88]: PutRef(var[64], value: ref(reference))
 194[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 197[88]: ConstInt(val=83) -> integer
 202[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 205[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 208[88]: ConstText(_value="Four") -> text
 214[104]: SetText(v1: ref(reference), fld=4, val: text)
 217[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 220[88]: ConstInt(val=4) -> integer
 225[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 228[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 231[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 234[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 239[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 242[88]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 247[88]: PutRef(var[64], value: ref(reference))
 250[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 253[88]: ConstInt(val=83) -> integer
 258[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 261[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 264[88]: ConstText(_value="Five") -> text
 270[104]: SetText(v1: ref(reference), fld=4, val: text)
 273[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 276[88]: ConstInt(val=5) -> integer
 281[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 284[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 287[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 290[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 295[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 298[88]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 303[88]: PutRef(var[64], value: ref(reference))
 306[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 309[88]: ConstInt(val=63) -> integer
 314[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 317[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 320[88]: ConstText(_value="Six") -> text
 325[104]: SetText(v1: ref(reference), fld=4, val: text)
 328[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 331[88]: ConstInt(val=6) -> integer
 336[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 339[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 342[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 345[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 350[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 353[88]: NewRecord(data: ref(reference), parent_tp=15, fld=0) -> ref(reference)
 358[88]: PutRef(var[64], value: ref(reference))
 361[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 364[88]: ConstInt(val=61) -> integer
 369[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 372[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 375[88]: ConstText(_value="Seven") -> text
 382[104]: SetText(v1: ref(reference), fld=4, val: text)
 385[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 388[88]: ConstInt(val=7) -> integer
 393[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 396[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 399[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 402[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=15, fld=0)
 407[76]: FreeStack(value=0, discard=12)
 411[64]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 414[76]: ConstInt(val=0) -> integer var=sum[76]:integer in 2
 419[80]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=db[64]:ref(Db)["__ref_1"] in 2
 422[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(14, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][16]
 425[92]: ConstText(_value="Five") -> text
 431[108]: ConstInt(val=83) -> integer
 436[112]: GetRecord(data: ref(reference), db_tp=16, no_keys=2) -> ref(reference)
 440[92]: GetInt(v1: ref(reference), fld=8) -> integer
 443[84]: ConstInt(val=5) -> integer
 448[88]: EqInt(v1: integer, v2: integer) -> boolean
 449[81]: GotoFalseWord(jump=455, if_false: boolean)
 452[80]: GotoWord(jump=521)
 455[80]: ClearText(var[40]) var=__work_1[40]:text in 1
 458[80]: ConstText(_value="Incorrect element ") -> text
 478[96]: AppendText(var[40], v1: text)
 481[80]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=db[64]:ref(Db)["__ref_1"] in 2
 484[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(14, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][16]
 487[92]: ConstText(_value="Five") -> text
 493[108]: ConstInt(val=83) -> integer
 498[112]: GetRecord(data: ref(reference), db_tp=16, no_keys=2) -> ref(reference)
 502[92]: GetInt(v1: ref(reference), fld=8) -> integer
 505[84]: ConstInt(val=0) -> integer
 510[88]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 517[80]: VarText(var[40]) -> text var=__work_1[40]:text in 1
 520[96]: Panic(message: text)
 521[80]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=db[64]:ref(Db)["__ref_1"] in 2
 524[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(14, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][16]
 527[92]: ConstInt(val=84) -> integer
 532[96]: ConstText(_value="Six") -> text
 537[112]: ConstInt(val=63) -> integer
 542[116]: Iterate(data: ref(reference), on=130, arg=12, keys=[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], from_key=1, till_key=84) -> long
 555[88]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=db[64]:ref(Db)["__ref_1"] in 2
 558[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(14, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][16]
 561[100]: Step(state_var=20, data: ref(reference), on=130, arg=12) -> ref(reference)
 567[100]: VarRef(var[88]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=v[88]:ref(Elm)["db"] in 14
 570[112]: ConvBoolFromRef(val: ref(reference)) -> boolean
 571[101]: Not(v1: boolean) -> boolean
 572[101]: GotoFalseWord(jump=582, if_false: boolean)
 575[100]: FreeStack(value=0, discard=12)
 579[88]: GotoWord(jump=608)
 582[100]: VarInt(var[76]) -> integer var=sum[76]:integer in 2
 585[104]: ConstInt(val=10) -> integer
 590[108]: MulInt(v1: integer, v2: integer) -> integer
 591[104]: VarRef(var[88]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[14] var=v[88]:ref(Elm)["db"] in 14
 594[116]: GetInt(v1: ref(reference), fld=8) -> integer
 597[108]: AddInt(v1: integer, v2: integer) -> integer
 598[104]: PutInt(var[76], value: integer)
 601[100]: FreeStack(value=0, discard=12)
 605[88]: GotoWord(jump=555)
 608[88]: FreeStack(value=0, discard=8)
 612[80]: VarInt(var[76]) -> integer var=sum[76]:integer in 2
 615[84]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
 619[68]: VarInt(var[64]) -> integer var=test_value[64]:integer in 1
 622[72]: ConstInt(val=5436) -> integer
 627[76]: EqInt(v1: integer, v2: integer) -> boolean
 628[69]: GotoFalseWord(jump=634, if_false: boolean)
 631[68]: GotoWord(jump=686)
 634[68]: ClearText(var[16]) var=__work_2[16]:text in 1
 637[68]: ConstText(_value="Test failed ") -> text
 651[84]: AppendText(var[16], v1: text)
 654[68]: VarInt(var[64]) -> integer var=test_value[64]:integer in 1
 657[72]: ConstInt(val=0) -> integer
 662[76]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 669[68]: ConstText(_value=" != 5436") -> text
 679[84]: AppendText(var[16], v1: text)
 682[68]: VarText(var[16]) -> text var=__work_2[16]:text in 1
 685[84]: Panic(message: text)
 686[68]: FreeText(var[40])
 689[68]: FreeText(var[16])
 692[68]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[15] var=__ref_1[4]:ref(Db) in 1
 695[80]: FreeRef(v1: ref(reference))
 696[68]: Return(ret=0, value=0, discard=68)

