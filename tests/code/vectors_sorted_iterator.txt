struct Elm {nr: integer, key: text, value: integer}
struct Db {map: sorted<Elm[-nr,key]>}

pub fn test() {
    test_value = {db=Db {map: [
  Elm {nr: 101, key: "One", value: 1},
  Elm {nr: 92, key: "Two", value: 2},
  Elm {nr: 83, key: "Three", value: 3},
  Elm {nr: 83, key: "Four", value: 4},
  Elm {nr: 83, key: "Five", value: 5},
  Elm {nr: 63, key: "Six", value: 6},
]};
sum = 0;
assert(db.map[83,"Five"].value == 5, "Incorrect element {db.map[83,"Five"].value}");
for v in db.map[84..=63,"Six"] {
  sum = sum * 10 + v.value;
};
sum};
    assert(
        test_value == 5436,
        "Test failed {test_value} != 5436"
    );
}
Type 12:Elm[12]:
    nr:integer[0]
    key:text[4]
    value:integer[8]

Type 13:Db[8]:
    map:sorted<Elm[-nr,key]>[4]

Type 14:sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ]

Type 15:vector<Elm>[4]:Vector(12)

fn test() {#1 block
  __ref_1:ref(Db) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:integer = {#2 block
    db:ref(Db)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 13i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      {#4 vector
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#5 object
          OpSetInt(_elm_1, 0i32, 101i32);
          OpSetText(_elm_1, 4i32, "One");
          OpSetInt(_elm_1, 8i32, 1i32);
        }#5;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#6 object
          OpSetInt(_elm_1, 0i32, 92i32);
          OpSetText(_elm_1, 4i32, "Two");
          OpSetInt(_elm_1, 8i32, 2i32);
        }#6;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#7 object
          OpSetInt(_elm_1, 0i32, 83i32);
          OpSetText(_elm_1, 4i32, "Three");
          OpSetInt(_elm_1, 8i32, 3i32);
        }#7;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#8 object
          OpSetInt(_elm_1, 0i32, 83i32);
          OpSetText(_elm_1, 4i32, "Four");
          OpSetInt(_elm_1, 8i32, 4i32);
        }#8;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#9 object
          OpSetInt(_elm_1, 0i32, 83i32);
          OpSetText(_elm_1, 4i32, "Five");
          OpSetInt(_elm_1, 8i32, 5i32);
        }#9;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
        _elm_1:ref(Elm)["__ref_1"] = OpNewRecord(__ref_1, 13i32, 0i32);
        {#10 object
          OpSetInt(_elm_1, 0i32, 63i32);
          OpSetText(_elm_1, 4i32, "Six");
          OpSetInt(_elm_1, 8i32, 6i32);
        }#10;
        OpFinishRecord(__ref_1, _elm_1, 13i32, 0i32);
      }#4;
      __ref_1;
    }#3:ref(Db)["__ref_1"];
    sum:integer = 0i32;
    if OpEqInt(OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 83i32, "Five"), 8i32), 5i32) null else OpPanic({#11 formatting string
      __work_1:text = "Incorrect element ";
      OpFormatInt(__work_1, OpGetInt(OpGetRecord(OpGetField(db, 4i32, 14i32), 14i32, 2i32, 83i32, "Five"), 8i32), 10i32, 0i32, 32i32, false, false);
      __work_1;
    }#11:text);
    {#12 for
      _iter_2:long = OpIterate(OpGetField(db, 4i32, 14i32), 2i32, 12i32, &[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], 1i32, 84i32, 2i32, 63i32, "Six");
      loop {#13 for loop
        v:ref(Elm)["db"] = {#14 for next
          OpStep(_iter_2, OpGetField(db, 4i32, 14i32), 2i32, 12i32);
        }#14:ref(Elm)["db"];
        if OpNot(OpConvBoolFromRef(v)) break(0) else null;
        {#15 block
          sum:integer = OpAddInt(OpMulInt(sum, 10i32), OpGetInt(v, 8i32));
        }#15;
      }#13;
    }#12;
    sum;
  }#2:integer;
  if OpEqInt(test_value, 5436i32) null else OpPanic({#16 formatting string
    __work_2:text = "Test failed ";
    OpFormatInt(__work_2, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " != 5436");
    __work_2;
  }#16:text);
}#1

byte-code for sorted_iterator:test()
 655[0]: return-address
 655[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Db) in 1
 656[16]: Text() var=__work_2[16]:text in 1
 657[40]: Text() var=__work_1[40]:text in 1
 658[64]: Database(var[4], db_tp=13) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
 663[64]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 666[76]: ConstInt(val=0) -> integer
 671[80]: SetInt(v1: ref(reference), fld=4, val: integer)
 674[64]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 677[76]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 682[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 685[88]: ConstInt(val=101) -> integer
 690[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 693[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 696[88]: ConstText(_value="One") -> text
 701[104]: SetText(v1: ref(reference), fld=4, val: text)
 704[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 707[88]: ConstInt(val=1) -> integer
 712[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 715[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 718[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 721[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 726[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 729[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 734[88]: PutRef(var[64], value: ref(reference))
 737[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 740[88]: ConstInt(val=92) -> integer
 745[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 748[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 751[88]: ConstText(_value="Two") -> text
 756[104]: SetText(v1: ref(reference), fld=4, val: text)
 759[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 762[88]: ConstInt(val=2) -> integer
 767[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 770[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 773[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 776[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 781[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 784[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 789[88]: PutRef(var[64], value: ref(reference))
 792[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 795[88]: ConstInt(val=83) -> integer
 800[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 803[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 806[88]: ConstText(_value="Three") -> text
 813[104]: SetText(v1: ref(reference), fld=4, val: text)
 816[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 819[88]: ConstInt(val=3) -> integer
 824[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 827[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 830[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 833[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 838[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 841[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 846[88]: PutRef(var[64], value: ref(reference))
 849[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 852[88]: ConstInt(val=83) -> integer
 857[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 860[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 863[88]: ConstText(_value="Four") -> text
 869[104]: SetText(v1: ref(reference), fld=4, val: text)
 872[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 875[88]: ConstInt(val=4) -> integer
 880[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 883[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 886[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 889[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 894[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 897[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 902[88]: PutRef(var[64], value: ref(reference))
 905[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 908[88]: ConstInt(val=83) -> integer
 913[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 916[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 919[88]: ConstText(_value="Five") -> text
 925[104]: SetText(v1: ref(reference), fld=4, val: text)
 928[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 931[88]: ConstInt(val=5) -> integer
 936[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 939[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 942[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 945[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
 950[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 953[88]: NewRecord(data: ref(reference), parent_tp=13, fld=0) -> ref(reference)
 958[88]: PutRef(var[64], value: ref(reference))
 961[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 964[88]: ConstInt(val=63) -> integer
 969[92]: SetInt(v1: ref(reference), fld=0, val: integer)
 972[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 975[88]: ConstText(_value="Six") -> text
 980[104]: SetText(v1: ref(reference), fld=4, val: text)
 983[76]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
 986[88]: ConstInt(val=6) -> integer
 991[92]: SetInt(v1: ref(reference), fld=8, val: integer)
 994[76]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
 997[88]: VarRef(var[64]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=_elm_1[64]:ref(Elm)["__ref_1"] in 4
1000[100]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=13, fld=0)
1005[76]: FreeStack(value=0, discard=12)
1009[64]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1012[76]: ConstInt(val=0) -> integer var=sum[76]:integer in 2
1017[80]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
1020[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][14]
1023[92]: ConstText(_value="Five") -> text
1029[108]: ConstInt(val=83) -> integer
1034[112]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1038[92]: GetInt(v1: ref(reference), fld=8) -> integer
1041[84]: ConstInt(val=5) -> integer
1046[88]: EqInt(v1: integer, v2: integer) -> boolean
1047[81]: GotoFalseWord(jump=1053, if_false: boolean)
1050[80]: GotoWord(jump=1119)
1053[80]: ClearText(var[40]) var=__work_1[40]:text in 1
1056[80]: ConstText(_value="Incorrect element ") -> text
1076[96]: AppendText(var[40], v1: text)
1079[80]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
1082[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][14]
1085[92]: ConstText(_value="Five") -> text
1091[108]: ConstInt(val=83) -> integer
1096[112]: GetRecord(data: ref(reference), db_tp=14, no_keys=2) -> ref(reference)
1100[92]: GetInt(v1: ref(reference), fld=8) -> integer
1103[84]: ConstInt(val=0) -> integer
1108[88]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1115[80]: VarText(var[40]) -> text var=__work_1[40]:text in 1
1118[96]: Panic(message: text)
1119[80]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
1122[92]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][14]
1125[92]: ConstInt(val=84) -> integer
1130[96]: ConstText(_value="Six") -> text
1135[112]: ConstInt(val=63) -> integer
1140[116]: Iterate(data: ref(reference), on=2, arg=12, keys=[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], from_key=1, till_key=84) -> long
1153[88]: VarRef(var[64]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=db[64]:ref(Db)["__ref_1"] in 2
1156[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(12, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][14]
1159[100]: Step(state_var=20, data: ref(reference), on=2, arg=12) -> ref(reference)
1165[100]: VarRef(var[88]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=v[88]:ref(Elm)["db"] in 13
1168[112]: ConvBoolFromRef(val: ref(reference)) -> boolean
1169[101]: Not(v1: boolean) -> boolean
1170[101]: GotoFalseWord(jump=1180, if_false: boolean)
1173[100]: FreeStack(value=0, discard=12)
1177[88]: GotoWord(jump=1206)
1180[100]: VarInt(var[76]) -> integer var=sum[76]:integer in 2
1183[104]: ConstInt(val=10) -> integer
1188[108]: MulInt(v1: integer, v2: integer) -> integer
1189[104]: VarRef(var[88]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[12] var=v[88]:ref(Elm)["db"] in 13
1192[116]: GetInt(v1: ref(reference), fld=8) -> integer
1195[108]: AddInt(v1: integer, v2: integer) -> integer
1196[104]: PutInt(var[76], value: integer)
1199[100]: FreeStack(value=0, discard=12)
1203[88]: GotoWord(jump=1153)
1206[88]: FreeStack(value=0, discard=8)
1210[80]: VarInt(var[76]) -> integer var=sum[76]:integer in 2
1213[84]: FreeStack(value=4, discard=20) type=integer[4]:Base[0]
1217[68]: VarInt(var[64]) -> integer var=test_value[64]:integer in 1
1220[72]: ConstInt(val=5436) -> integer
1225[76]: EqInt(v1: integer, v2: integer) -> boolean
1226[69]: GotoFalseWord(jump=1232, if_false: boolean)
1229[68]: GotoWord(jump=1284)
1232[68]: ClearText(var[16]) var=__work_2[16]:text in 1
1235[68]: ConstText(_value="Test failed ") -> text
1249[84]: AppendText(var[16], v1: text)
1252[68]: VarInt(var[64]) -> integer var=test_value[64]:integer in 1
1255[72]: ConstInt(val=0) -> integer
1260[76]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1267[68]: ConstText(_value=" != 5436") -> text
1277[84]: AppendText(var[16], v1: text)
1280[68]: VarText(var[16]) -> text var=__work_2[16]:text in 1
1283[84]: Panic(message: text)
1284[68]: FreeText(var[40])
1287[68]: FreeText(var[16])
1290[68]: VarRef(var[4]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[13] var=__ref_1[4]:ref(Db) in 1
1293[80]: FreeRef(v1: ref(reference))
1294[68]: Return(ret=0, value=0, discard=68)

Execute test:
  655:[8] ConvRefFromNull() -> ref(1,0,0)[8]
  656:[20] Text()
  657:[44] Text()
  658:[68] Database(var[8], db_tp=13)
  663:[68] VarRef(var[8]) -> ref(1,1,0)={map:[]}[68]
  666:[80] ConstInt(val=0) -> 0[80]
  671:[84] SetInt(v1=ref(1,1,0)[68], fld=4, val=0[80])
  674:[68] VarRef(var[8]) -> ref(1,1,0)={map:[]}[68]
  677:[80] NewRecord(data=ref(1,1,0)[68], parent_tp=13, fld=0) -> ref(1,9,8)[68]
  682:[80] VarRef(var[68]) -> ref(1,9,8)={}[80]
  685:[92] ConstInt(val=101) -> 101[92]
  690:[96] SetInt(v1=ref(1,9,8)[80], fld=0, val=101[92])
  693:[80] VarRef(var[68]) -> ref(1,9,8)={nr:101}[80]
  696:[92] ConstText(_value="One") -> "One"[92]
  701:[108] SetText(v1=ref(1,9,8)[80], fld=4, val="One"[92])
  704:[80] VarRef(var[68]) -> ref(1,9,8)={nr:101,key:"One"}[80]
  707:[92] ConstInt(val=1) -> 1[92]
  712:[96] SetInt(v1=ref(1,9,8)[80], fld=8, val=1[92])
  715:[80] VarRef(var[8]) -> ref(1,1,0)={map:[]}[80]
  718:[92] VarRef(var[68]) -> ref(1,9,8)={nr:101,key:"One",value:1}[92]
  721:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,8)[92], parent_tp=13, fld=0)
  726:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[80]
  729:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,32)[80]
  734:[92] PutRef(var[68], value=ref(1,9,32)[80])
  737:[80] VarRef(var[68]) -> ref(1,9,32)={}[80]
  740:[92] ConstInt(val=92) -> 92[92]
  745:[96] SetInt(v1=ref(1,9,32)[80], fld=0, val=92[92])
  748:[80] VarRef(var[68]) -> ref(1,9,32)={nr:92}[80]
  751:[92] ConstText(_value="Two") -> "Two"[92]
  756:[108] SetText(v1=ref(1,9,32)[80], fld=4, val="Two"[92])
  759:[80] VarRef(var[68]) -> ref(1,9,32)={nr:92,key:"Two"}[80]
  762:[92] ConstInt(val=2) -> 2[92]
  767:[96] SetInt(v1=ref(1,9,32)[80], fld=8, val=2[92])
  770:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[80]
  773:[92] VarRef(var[68]) -> ref(1,9,32)={nr:92,key:"Two",value:2}[92]
  776:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,32)[92], parent_tp=13, fld=0)
  781:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2}]}[80]
  784:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,44)[80]
  789:[92] PutRef(var[68], value=ref(1,9,44)[80])
  792:[80] VarRef(var[68]) -> ref(1,9,44)={}[80]
  795:[92] ConstInt(val=83) -> 83[92]
  800:[96] SetInt(v1=ref(1,9,44)[80], fld=0, val=83[92])
  803:[80] VarRef(var[68]) -> ref(1,9,44)={nr:83}[80]
  806:[92] ConstText(_value="Three") -> "Three"[92]
  813:[108] SetText(v1=ref(1,9,44)[80], fld=4, val="Three"[92])
  816:[80] VarRef(var[68]) -> ref(1,9,44)={nr:83,key:"Three"}[80]
  819:[92] ConstInt(val=3) -> 3[92]
  824:[96] SetInt(v1=ref(1,9,44)[80], fld=8, val=3[92])
  827:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2}]}[80]
  830:[92] VarRef(var[68]) -> ref(1,9,44)={nr:83,key:"Three",value:3}[92]
  833:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,44)[92], parent_tp=13, fld=0)
  838:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Three",value:3}]}[80]
  841:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,56)[80]
  846:[92] PutRef(var[68], value=ref(1,9,56)[80])
  849:[80] VarRef(var[68]) -> ref(1,9,56)={}[80]
  852:[92] ConstInt(val=83) -> 83[92]
  857:[96] SetInt(v1=ref(1,9,56)[80], fld=0, val=83[92])
  860:[80] VarRef(var[68]) -> ref(1,9,56)={nr:83}[80]
  863:[92] ConstText(_value="Four") -> "Four"[92]
  869:[108] SetText(v1=ref(1,9,56)[80], fld=4, val="Four"[92])
  872:[80] VarRef(var[68]) -> ref(1,9,56)={nr:83,key:"Four"}[80]
  875:[92] ConstInt(val=4) -> 4[92]
  880:[96] SetInt(v1=ref(1,9,56)[80], fld=8, val=4[92])
  883:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Three",value:3}]}[80]
  886:[92] VarRef(var[68]) -> ref(1,9,56)={nr:83,key:"Four",value:4}[92]
  889:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,56)[92], parent_tp=13, fld=0)
  894:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  897:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,68)[80]
  902:[92] PutRef(var[68], value=ref(1,9,68)[80])
  905:[80] VarRef(var[68]) -> ref(1,9,68)={}[80]
  908:[92] ConstInt(val=83) -> 83[92]
  913:[96] SetInt(v1=ref(1,9,68)[80], fld=0, val=83[92])
  916:[80] VarRef(var[68]) -> ref(1,9,68)={nr:83}[80]
  919:[92] ConstText(_value="Five") -> "Five"[92]
  925:[108] SetText(v1=ref(1,9,68)[80], fld=4, val="Five"[92])
  928:[80] VarRef(var[68]) -> ref(1,9,68)={nr:83,key:"Five"}[80]
  931:[92] ConstInt(val=5) -> 5[92]
  936:[96] SetInt(v1=ref(1,9,68)[80], fld=8, val=5[92])
  939:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  942:[92] VarRef(var[68]) -> ref(1,9,68)={nr:83,key:"Five",value:5}[92]
  945:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,68)[92], parent_tp=13, fld=0)
  950:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  953:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=13, fld=0) -> ref(1,9,80)[80]
  958:[92] PutRef(var[68], value=ref(1,9,80)[80])
  961:[80] VarRef(var[68]) -> ref(1,9,80)={}[80]
  964:[92] ConstInt(val=63) -> 63[92]
  969:[96] SetInt(v1=ref(1,9,80)[80], fld=0, val=63[92])
  972:[80] VarRef(var[68]) -> ref(1,9,80)={nr:63}[80]
  975:[92] ConstText(_value="Six") -> "Six"[92]
  980:[108] SetText(v1=ref(1,9,80)[80], fld=4, val="Six"[92])
  983:[80] VarRef(var[68]) -> ref(1,9,80)={nr:63,key:"Six"}[80]
  986:[92] ConstInt(val=6) -> 6[92]
  991:[96] SetInt(v1=ref(1,9,80)[80], fld=8, val=6[92])
  994:[80] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  997:[92] VarRef(var[68]) -> ref(1,9,80)={nr:63,key:"Six",value:6}[92]
 1000:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,80)[92], parent_tp=13, fld=0)
 1005:[80] FreeStack(value=0, discard=12)
 1009:[68] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[68]
 1012:[80] ConstInt(val=0) -> 0[80]
 1017:[84] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[84]
 1020:[96] GetField(v1=ref(1,1,0)[84], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}][84]
 1023:[96] ConstText(_value="Five") -> "Five"[96]
 1029:[112] ConstInt(val=83) -> 83[112]
 1034:[116] GetRecord(data=ref(1,1,4)[84], db_tp=14, no_keys=2, key1=83[112], key2="Five"[96]) -> ref(1,9,32)[84]
 1038:[96] GetInt(v1=ref(1,9,32)[84], fld=8) -> 5[84]
 1041:[88] ConstInt(val=5) -> 5[88]
 1046:[92] EqInt(v1=5[84], v2=5[88]) -> true[84]
 1047:[85] GotoFalseWord(jump=1053, if_false=true[84])
 1050:[84] GotoWord(jump=1119)
 1119:[84] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[84]
 1122:[96] GetField(v1=ref(1,1,0)[84], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}][84]
 1125:[96] ConstInt(val=84) -> 84[96]
 1130:[100] ConstText(_value="Six") -> "Six"[100]
 1135:[116] ConstInt(val=63) -> 63[116]
 1140:[120] Iterate(data=ref(63,3,0)[108], on=2, arg=12, keys=[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], from_key=1, till_key=84) -> 21474836481[84]
 1153:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[92]
 1156:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}][92]
 1159:[104] Step(state_var=20, data=ref(1,1,4)[92], on=2, arg=12) -> ref(1,9,32)[92]
 1165:[104] VarRef(var[92]) -> ref(1,9,32)={nr:83,key:"Five",value:5}[104]
 1168:[116] ConvBoolFromRef(val=ref(1,9,32)[104]) -> true[104]
 1169:[105] Not(v1=true[104]) -> false[104]
 1170:[105] GotoFalseWord(jump=1180, if_false=false[104])
 1180:[104] VarInt(var[80]) -> 0[104]
 1183:[108] ConstInt(val=10) -> 10[108]
 1188:[112] MulInt(v1=0[104], v2=10[108]) -> 0[104]
 1189:[108] VarRef(var[92]) -> ref(1,9,32)={nr:83,key:"Five",value:5}[108]
 1192:[120] GetInt(v1=ref(1,9,32)[108], fld=8) -> 5[108]
 1195:[112] AddInt(v1=0[104], v2=5[108]) -> 5[104]
 1196:[108] PutInt(var[80], value=5[104])
 1199:[104] FreeStack(value=0, discard=12)
 1203:[92] GotoWord(jump=1153)
 1153:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[92]
 1156:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}][92]
 1159:[104] Step(state_var=20, data=ref(1,1,4)[92], on=2, arg=12) -> ref(1,9,44)[92]
 1165:[104] VarRef(var[92]) -> ref(1,9,44)={nr:83,key:"Four",value:4}[104]
 1168:[116] ConvBoolFromRef(val=ref(1,9,44)[104]) -> true[104]
 1169:[105] Not(v1=true[104]) -> false[104]
 1170:[105] GotoFalseWord(jump=1180, if_false=false[104])
 1180:[104] VarInt(var[80]) -> 5[104]
 1183:[108] ConstInt(val=10) -> 10[108]
 1188:[112] MulInt(v1=5[104], v2=10[108]) -> 50[104]
 1189:[108] VarRef(var[92]) -> ref(1,9,44)={nr:83,key:"Four",value:4}[108]
 1192:[120] GetInt(v1=ref(1,9,44)[108], fld=8) -> 4[108]
 1195:[112] AddInt(v1=50[104], v2=4[108]) -> 54[104]
 1196:[108] PutInt(var[80], value=54[104])
 1199:[104] FreeStack(value=0, discard=12)
 1203:[92] GotoWord(jump=1153)
 1153:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[92]
 1156:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}][92]
 1159:[104] Step(state_var=20, data=ref(1,1,4)[92], on=2, arg=12) -> ref(1,9,56)[92]
 1165:[104] VarRef(var[92]) -> ref(1,9,56)={nr:83,key:"Three",value:3}[104]
 1168:[116] ConvBoolFromRef(val=ref(1,9,56)[104]) -> true[104]
 1169:[105] Not(v1=true[104]) -> false[104]
 1170:[105] GotoFalseWord(jump=1180, if_false=false[104])
 1180:[104] VarInt(var[80]) -> 54[104]
 1183:[108] ConstInt(val=10) -> 10[108]
 1188:[112] MulInt(v1=54[104], v2=10[108]) -> 540[104]
 1189:[108] VarRef(var[92]) -> ref(1,9,56)={nr:83,key:"Three",value:3}[108]
 1192:[120] GetInt(v1=ref(1,9,56)[108], fld=8) -> 3[108]
 1195:[112] AddInt(v1=540[104], v2=3[108]) -> 543[104]
 1196:[108] PutInt(var[80], value=543[104])
 1199:[104] FreeStack(value=0, discard=12)
 1203:[92] GotoWord(jump=1153)
 1153:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[92]
 1156:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}][92]
 1159:[104] Step(state_var=20, data=ref(1,1,4)[92], on=2, arg=12) -> ref(1,9,68)[92]
 1165:[104] VarRef(var[92]) -> ref(1,9,68)={nr:63,key:"Six",value:6}[104]
 1168:[116] ConvBoolFromRef(val=ref(1,9,68)[104]) -> true[104]
 1169:[105] Not(v1=true[104]) -> false[104]
 1170:[105] GotoFalseWord(jump=1180, if_false=false[104])
 1180:[104] VarInt(var[80]) -> 543[104]
 1183:[108] ConstInt(val=10) -> 10[108]
 1188:[112] MulInt(v1=543[104], v2=10[108]) -> 5430[104]
 1189:[108] VarRef(var[92]) -> ref(1,9,68)={nr:63,key:"Six",value:6}[108]
 1192:[120] GetInt(v1=ref(1,9,68)[108], fld=8) -> 6[108]
 1195:[112] AddInt(v1=5430[104], v2=6[108]) -> 5436[104]
 1196:[108] PutInt(var[80], value=5436[104])
 1199:[104] FreeStack(value=0, discard=12)
 1203:[92] GotoWord(jump=1153)
 1153:[92] VarRef(var[68]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[92]
 1156:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}][92]
 1159:[104] Step(state_var=20, data=ref(1,1,4)[92], on=2, arg=12) -> ref(1,0,2147483647)[92]
 1165:[104] VarRef(var[92]) -> ref(1,0,2147483647)=null[104]
 1168:[116] ConvBoolFromRef(val=ref(1,0,2147483647)[104]) -> false[104]
 1169:[105] Not(v1=false[104]) -> true[104]
 1170:[105] GotoFalseWord(jump=1180, if_false=true[104])
 1173:[104] FreeStack(value=0, discard=12)
 1177:[92] GotoWord(jump=1206)
 1206:[92] FreeStack(value=0, discard=8)
 1210:[84] VarInt(var[80]) -> 5436[84]
 1213:[88] FreeStack(value=4, discard=20)
 1217:[72] VarInt(var[68]) -> 5436[72]
 1220:[76] ConstInt(val=5436) -> 5436[76]
 1225:[80] EqInt(v1=5436[72], v2=5436[76]) -> true[72]
 1226:[73] GotoFalseWord(jump=1232, if_false=true[72])
 1229:[72] GotoWord(jump=1284)
 1284:[72] FreeText(var[44])
 1287:[72] FreeText(var[20])
 1290:[72] VarRef(var[8]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[72]
 1293:[84] FreeRef(v1=ref(1,1,0)[72])
 1294:[72] Return(ret=4294967295[4], value=0, discard=68)
Finished
