struct Elm {nr: integer, key: text, value: integer}
struct Db {map: sorted<Elm[-nr,key]>}

pub fn test() {
    test_value = {db=Db {map: [
  Elm {nr: 101, key: "One", value: 1},
  Elm {nr: 92, key: "Two", value: 2},
  Elm {nr: 83, key: "Three", value: 3},
  Elm {nr: 83, key: "Four", value: 4},
  Elm {nr: 83, key: "Five", value: 5},
  Elm {nr: 63, key: "Six", value: 6},
  Elm {nr: 61, key: "Seven", value: 7},
]};
sum = 0;
assert(db.map[83,"Five"].value == 5, "Incorrect element {db.map[83,"Five"].value}");
for v in db.map[84..=63,"Six"] {
  sum = sum * 10 + v.value;
};
sum};
    assert(
        test_value == 5436,
        "Test failed {test_value} != 5436"
    );
}
Type 17:Elm[12]:
    nr:integer[0]
    key:text[4]
    value:integer[8]

Type 18:Db[8]:
    map:sorted<Elm[-nr,key]>[4]

Type 19:sorted<Elm[-nr,key]>[4]:Sorted(17, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ]

Type 20:vector<Elm>[4]:Vector(17)

fn test() {#block(1):void
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    db(2):ref(Db) = null;
    OpDatabase(db(2), 18i32);
    OpSetInt(db(2), 4i32, 0i32);
    _elm_1(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetInt(_elm_1(2), 0i32, 101i32);
    OpSetText(_elm_1(2), 4i32, "One");
    OpSetInt(_elm_1(2), 8i32, 1i32);
    OpFinishRecord(db(2), _elm_1(2), 18i32, 0i32);
    _elm_1(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetInt(_elm_1(2), 0i32, 92i32);
    OpSetText(_elm_1(2), 4i32, "Two");
    OpSetInt(_elm_1(2), 8i32, 2i32);
    OpFinishRecord(db(2), _elm_1(2), 18i32, 0i32);
    _elm_1(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetInt(_elm_1(2), 0i32, 83i32);
    OpSetText(_elm_1(2), 4i32, "Three");
    OpSetInt(_elm_1(2), 8i32, 3i32);
    OpFinishRecord(db(2), _elm_1(2), 18i32, 0i32);
    _elm_1(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetInt(_elm_1(2), 0i32, 83i32);
    OpSetText(_elm_1(2), 4i32, "Four");
    OpSetInt(_elm_1(2), 8i32, 4i32);
    OpFinishRecord(db(2), _elm_1(2), 18i32, 0i32);
    _elm_1(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetInt(_elm_1(2), 0i32, 83i32);
    OpSetText(_elm_1(2), 4i32, "Five");
    OpSetInt(_elm_1(2), 8i32, 5i32);
    OpFinishRecord(db(2), _elm_1(2), 18i32, 0i32);
    _elm_1(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetInt(_elm_1(2), 0i32, 63i32);
    OpSetText(_elm_1(2), 4i32, "Six");
    OpSetInt(_elm_1(2), 8i32, 6i32);
    OpFinishRecord(db(2), _elm_1(2), 18i32, 0i32);
    _elm_1(2):ref(Elm)["db"] = OpNewRecord(db(2), 18i32, 0i32);
    OpSetInt(_elm_1(2), 0i32, 61i32);
    OpSetText(_elm_1(2), 4i32, "Seven");
    OpSetInt(_elm_1(2), 8i32, 7i32);
    OpFinishRecord(db(2), _elm_1(2), 18i32, 0i32);
    sum(2):integer = 0i32;
    if OpEqInt(OpGetInt(OpGetRecord(OpGetField(db(2), 4i32, 19i32), 19i32, 2i32, 83i32, "Five"), 8i32), 5i32) null else OpPanic({#Formatted string(3):text
      __work_1(1):text = "Incorrect element ";
      OpFormatInt(__work_1(1), OpGetInt(OpGetRecord(OpGetField(db(2), 4i32, 19i32), 19i32, 2i32, 83i32, "Five"), 8i32), 10i32, 0i32, 32i32, false, false);
      __work_1(1);
    }#Formatted string(3):text);
    {#For block(4):void
      _iter_2(4):long = OpIterate(OpGetField(db(2), 4i32, 19i32), 130i32, 12i32, &[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], 1i32, 84i32, 2i32, 63i32, "Six");
      loop {#For loop_5
        v(5):ref(Elm)["db"] = {#Iterate keys(6):sorted<Elm,[(0, false), (1, true)]>["db"]
          OpStep(_iter_2(4), OpGetField(db(2), 4i32, 19i32), 130i32, 12i32);
        }#Iterate keys(6):sorted<Elm,[(0, false), (1, true)]>["db"];
        if OpNot(OpConvBoolFromRef(v(5))) {#break(7):void
          break(0);
        }#break(7):void else null;
        {#block(8):void
          sum(2):integer = OpAddInt(OpMulInt(sum(2), 10i32), OpGetInt(v(5), 8i32));
        }#block(8):void;
      }#For loop_5;
    }#For block(4):void;
    OpFreeRef(db(2));
    sum(2);
  }#block(2):integer;
  if OpEqInt(test_value(1), 5436i32) null else OpPanic({#Formatted string(9):text
    __work_2(1):text = "Test failed ";
    OpFormatInt(__work_2(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2(1), " != 5436");
    __work_2(1);
  }#Formatted string(9):text);
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for sorted_iterator:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: ConvRefFromNull() -> ref(reference) var=db[56]:ref(Db)
   3[68]: Database(var[56], db_tp=18) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18]
   8[68]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
  11[80]: ConstInt(val=0) -> integer
  16[84]: SetInt(v1: ref(reference), fld=4, val: integer)
  19[68]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
  22[80]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
  27[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
  30[92]: ConstInt(val=101) -> integer
  35[96]: SetInt(v1: ref(reference), fld=0, val: integer)
  38[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
  41[92]: ConstText(_value="One") -> text
  46[108]: SetText(v1: ref(reference), fld=4, val: text)
  49[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
  52[92]: ConstInt(val=1) -> integer
  57[96]: SetInt(v1: ref(reference), fld=8, val: integer)
  60[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
  63[92]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
  66[104]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
  71[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
  74[92]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
  79[92]: PutRef(var[68], value: ref(reference))
  82[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
  85[92]: ConstInt(val=92) -> integer
  90[96]: SetInt(v1: ref(reference), fld=0, val: integer)
  93[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
  96[92]: ConstText(_value="Two") -> text
 101[108]: SetText(v1: ref(reference), fld=4, val: text)
 104[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 107[92]: ConstInt(val=2) -> integer
 112[96]: SetInt(v1: ref(reference), fld=8, val: integer)
 115[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 118[92]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 121[104]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
 126[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 129[92]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
 134[92]: PutRef(var[68], value: ref(reference))
 137[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 140[92]: ConstInt(val=83) -> integer
 145[96]: SetInt(v1: ref(reference), fld=0, val: integer)
 148[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 151[92]: ConstText(_value="Three") -> text
 158[108]: SetText(v1: ref(reference), fld=4, val: text)
 161[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 164[92]: ConstInt(val=3) -> integer
 169[96]: SetInt(v1: ref(reference), fld=8, val: integer)
 172[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 175[92]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 178[104]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
 183[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 186[92]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
 191[92]: PutRef(var[68], value: ref(reference))
 194[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 197[92]: ConstInt(val=83) -> integer
 202[96]: SetInt(v1: ref(reference), fld=0, val: integer)
 205[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 208[92]: ConstText(_value="Four") -> text
 214[108]: SetText(v1: ref(reference), fld=4, val: text)
 217[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 220[92]: ConstInt(val=4) -> integer
 225[96]: SetInt(v1: ref(reference), fld=8, val: integer)
 228[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 231[92]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 234[104]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
 239[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 242[92]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
 247[92]: PutRef(var[68], value: ref(reference))
 250[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 253[92]: ConstInt(val=83) -> integer
 258[96]: SetInt(v1: ref(reference), fld=0, val: integer)
 261[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 264[92]: ConstText(_value="Five") -> text
 270[108]: SetText(v1: ref(reference), fld=4, val: text)
 273[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 276[92]: ConstInt(val=5) -> integer
 281[96]: SetInt(v1: ref(reference), fld=8, val: integer)
 284[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 287[92]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 290[104]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
 295[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 298[92]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
 303[92]: PutRef(var[68], value: ref(reference))
 306[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 309[92]: ConstInt(val=63) -> integer
 314[96]: SetInt(v1: ref(reference), fld=0, val: integer)
 317[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 320[92]: ConstText(_value="Six") -> text
 325[108]: SetText(v1: ref(reference), fld=4, val: text)
 328[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 331[92]: ConstInt(val=6) -> integer
 336[96]: SetInt(v1: ref(reference), fld=8, val: integer)
 339[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 342[92]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 345[104]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
 350[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 353[92]: NewRecord(data: ref(reference), parent_tp=18, fld=0) -> ref(reference)
 358[92]: PutRef(var[68], value: ref(reference))
 361[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 364[92]: ConstInt(val=61) -> integer
 369[96]: SetInt(v1: ref(reference), fld=0, val: integer)
 372[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 375[92]: ConstText(_value="Seven") -> text
 382[108]: SetText(v1: ref(reference), fld=4, val: text)
 385[80]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 388[92]: ConstInt(val=7) -> integer
 393[96]: SetInt(v1: ref(reference), fld=8, val: integer)
 396[80]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 399[92]: VarRef(var[68]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=_elm_1[68]:ref(Elm)["db"]
 402[104]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=18, fld=0)
 407[80]: ConstInt(val=0) -> integer var=sum[80]:integer
 412[84]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 415[96]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(17, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][19]
 418[96]: ConstText(_value="Five") -> text
 424[112]: ConstInt(val=83) -> integer
 429[116]: GetRecord(data: ref(reference), db_tp=19, no_keys=2) -> ref(reference)
 433[96]: GetInt(v1: ref(reference), fld=8) -> integer
 436[88]: ConstInt(val=5) -> integer
 441[92]: EqInt(v1: integer, v2: integer) -> boolean
 442[85]: GotoFalseWord(jump=448, if_false: boolean)
 445[84]: GotoWord(jump=514)
 448[84]: ClearText(var[32]) var=__work_1[32]:text
 451[84]: ConstText(_value="Incorrect element ") -> text
 471[100]: AppendText(var[32], v1: text)
 474[84]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 477[96]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(17, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][19]
 480[96]: ConstText(_value="Five") -> text
 486[112]: ConstInt(val=83) -> integer
 491[116]: GetRecord(data: ref(reference), db_tp=19, no_keys=2) -> ref(reference)
 495[96]: GetInt(v1: ref(reference), fld=8) -> integer
 498[88]: ConstInt(val=0) -> integer
 503[92]: FormatInt(var[32], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 510[84]: VarText(var[32]) -> text var=__work_1[32]:text
 513[100]: Panic(message: text)
 514[84]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 517[96]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(17, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][19]
 520[96]: ConstInt(val=84) -> integer
 525[100]: ConstText(_value="Six") -> text
 530[116]: ConstInt(val=63) -> integer
 535[120]: Iterate(data: ref(reference), on=130, arg=12, keys=[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], from_key=1, till_key=84) -> long
 548[92]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 551[104]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=sorted<Elm[-nr,key]>[4]:Sorted(17, [(0, false), (1, true)]) keys [tp:1 desc:true field:0, tp:6 desc:false field:4, ][19]
 554[104]: Step(state_var=20, data: ref(reference), on=130, arg=12) -> ref(reference)
 560[104]: VarRef(var[92]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=v[92]:ref(Elm)["db"]
 563[116]: ConvBoolFromRef(val: ref(reference)) -> boolean
 564[105]: Not(v1: boolean) -> boolean
 565[105]: GotoFalseWord(jump=575, if_false: boolean)
 568[104]: FreeStack(value=0, discard=12)
 572[92]: GotoWord(jump=601)
 575[104]: VarInt(var[80]) -> integer var=sum[80]:integer
 578[108]: ConstInt(val=10) -> integer
 583[112]: MulInt(v1: integer, v2: integer) -> integer
 584[108]: VarRef(var[92]) -> ref(reference) type=Elm[12]:{nr:integer[0], key:text[4], value:integer[8]}[17] var=v[92]:ref(Elm)["db"]
 587[120]: GetInt(v1: ref(reference), fld=8) -> integer
 590[112]: AddInt(v1: integer, v2: integer) -> integer
 591[108]: PutInt(var[80], value: integer)
 594[104]: FreeStack(value=0, discard=12)
 598[92]: GotoWord(jump=548)
 601[92]: FreeStack(value=0, discard=8)
 605[84]: VarRef(var[56]) -> ref(reference) type=Db[8]:{map:sorted<Elm[-nr,key]>[4]}[18] var=db[56]:ref(Db)
 608[96]: FreeRef(v1: ref(reference))
 609[84]: VarInt(var[80]) -> integer var=sum[80]:integer
 612[88]: FreeStack(value=4, discard=32)
 616[60]: VarInt(var[56]) -> integer var=test_value[56]:integer
 619[64]: ConstInt(val=5436) -> integer
 624[68]: EqInt(v1: integer, v2: integer) -> boolean
 625[61]: GotoFalseWord(jump=631, if_false: boolean)
 628[60]: GotoWord(jump=683)
 631[60]: ClearText(var[8]) var=__work_2[8]:text
 634[60]: ConstText(_value="Test failed ") -> text
 648[76]: AppendText(var[8], v1: text)
 651[60]: VarInt(var[56]) -> integer var=test_value[56]:integer
 654[64]: ConstInt(val=0) -> integer
 659[68]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 666[60]: ConstText(_value=" != 5436") -> text
 676[76]: AppendText(var[8], v1: text)
 679[60]: VarText(var[8]) -> text var=__work_2[8]:text
 682[76]: Panic(message: text)
 683[60]: FreeText(var[32])
 686[60]: FreeText(var[8])
 689[60]: Return(ret=0, value=0, discard=56)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] ConvRefFromNull() -> ref(1,0,0)[56]
    3:[68] Database(var[56], db_tp=18)
    8:[68] VarRef(var[56]) -> ref(1,1,0)={map:[]}[68]
   11:[80] ConstInt(val=0) -> 0[80]
   16:[84] SetInt(v1=ref(1,1,0)[68], fld=4, val=0[80])
   19:[68] VarRef(var[56]) -> ref(1,1,0)={map:[]}[68]
   22:[80] NewRecord(data=ref(1,1,0)[68], parent_tp=18, fld=0) -> ref(1,9,8)[68]
   27:[80] VarRef(var[68]) -> ref(1,9,8)={}[80]
   30:[92] ConstInt(val=101) -> 101[92]
   35:[96] SetInt(v1=ref(1,9,8)[80], fld=0, val=101[92])
   38:[80] VarRef(var[68]) -> ref(1,9,8)={nr:101}[80]
   41:[92] ConstText(_value="One") -> "One"[92]
   46:[108] SetText(v1=ref(1,9,8)[80], fld=4, val="One"[92])
   49:[80] VarRef(var[68]) -> ref(1,9,8)={nr:101,key:"One"}[80]
   52:[92] ConstInt(val=1) -> 1[92]
   57:[96] SetInt(v1=ref(1,9,8)[80], fld=8, val=1[92])
   60:[80] VarRef(var[56]) -> ref(1,1,0)={map:[]}[80]
   63:[92] VarRef(var[68]) -> ref(1,9,8)={nr:101,key:"One",value:1}[92]
   66:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,8)[92], parent_tp=18, fld=0)
   71:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[80]
   74:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=18, fld=0) -> ref(1,9,32)[80]
   79:[92] PutRef(var[68], value=ref(1,9,32)[80])
   82:[80] VarRef(var[68]) -> ref(1,9,32)={}[80]
   85:[92] ConstInt(val=92) -> 92[92]
   90:[96] SetInt(v1=ref(1,9,32)[80], fld=0, val=92[92])
   93:[80] VarRef(var[68]) -> ref(1,9,32)={nr:92}[80]
   96:[92] ConstText(_value="Two") -> "Two"[92]
  101:[108] SetText(v1=ref(1,9,32)[80], fld=4, val="Two"[92])
  104:[80] VarRef(var[68]) -> ref(1,9,32)={nr:92,key:"Two"}[80]
  107:[92] ConstInt(val=2) -> 2[92]
  112:[96] SetInt(v1=ref(1,9,32)[80], fld=8, val=2[92])
  115:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1}]}[80]
  118:[92] VarRef(var[68]) -> ref(1,9,32)={nr:92,key:"Two",value:2}[92]
  121:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,32)[92], parent_tp=18, fld=0)
  126:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2}]}[80]
  129:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=18, fld=0) -> ref(1,9,44)[80]
  134:[92] PutRef(var[68], value=ref(1,9,44)[80])
  137:[80] VarRef(var[68]) -> ref(1,9,44)={}[80]
  140:[92] ConstInt(val=83) -> 83[92]
  145:[96] SetInt(v1=ref(1,9,44)[80], fld=0, val=83[92])
  148:[80] VarRef(var[68]) -> ref(1,9,44)={nr:83}[80]
  151:[92] ConstText(_value="Three") -> "Three"[92]
  158:[108] SetText(v1=ref(1,9,44)[80], fld=4, val="Three"[92])
  161:[80] VarRef(var[68]) -> ref(1,9,44)={nr:83,key:"Three"}[80]
  164:[92] ConstInt(val=3) -> 3[92]
  169:[96] SetInt(v1=ref(1,9,44)[80], fld=8, val=3[92])
  172:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2}]}[80]
  175:[92] VarRef(var[68]) -> ref(1,9,44)={nr:83,key:"Three",value:3}[92]
  178:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,44)[92], parent_tp=18, fld=0)
  183:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Three",value:3}]}[80]
  186:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=18, fld=0) -> ref(1,9,56)[80]
  191:[92] PutRef(var[68], value=ref(1,9,56)[80])
  194:[80] VarRef(var[68]) -> ref(1,9,56)={}[80]
  197:[92] ConstInt(val=83) -> 83[92]
  202:[96] SetInt(v1=ref(1,9,56)[80], fld=0, val=83[92])
  205:[80] VarRef(var[68]) -> ref(1,9,56)={nr:83}[80]
  208:[92] ConstText(_value="Four") -> "Four"[92]
  214:[108] SetText(v1=ref(1,9,56)[80], fld=4, val="Four"[92])
  217:[80] VarRef(var[68]) -> ref(1,9,56)={nr:83,key:"Four"}[80]
  220:[92] ConstInt(val=4) -> 4[92]
  225:[96] SetInt(v1=ref(1,9,56)[80], fld=8, val=4[92])
  228:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Three",value:3}]}[80]
  231:[92] VarRef(var[68]) -> ref(1,9,56)={nr:83,key:"Four",value:4}[92]
  234:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,56)[92], parent_tp=18, fld=0)
  239:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  242:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=18, fld=0) -> ref(1,9,68)[80]
  247:[92] PutRef(var[68], value=ref(1,9,68)[80])
  250:[80] VarRef(var[68]) -> ref(1,9,68)={}[80]
  253:[92] ConstInt(val=83) -> 83[92]
  258:[96] SetInt(v1=ref(1,9,68)[80], fld=0, val=83[92])
  261:[80] VarRef(var[68]) -> ref(1,9,68)={nr:83}[80]
  264:[92] ConstText(_value="Five") -> "Five"[92]
  270:[108] SetText(v1=ref(1,9,68)[80], fld=4, val="Five"[92])
  273:[80] VarRef(var[68]) -> ref(1,9,68)={nr:83,key:"Five"}[80]
  276:[92] ConstInt(val=5) -> 5[92]
  281:[96] SetInt(v1=ref(1,9,68)[80], fld=8, val=5[92])
  284:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  287:[92] VarRef(var[68]) -> ref(1,9,68)={nr:83,key:"Five",value:5}[92]
  290:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,68)[92], parent_tp=18, fld=0)
  295:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  298:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=18, fld=0) -> ref(1,9,80)[80]
  303:[92] PutRef(var[68], value=ref(1,9,80)[80])
  306:[80] VarRef(var[68]) -> ref(1,9,80)={}[80]
  309:[92] ConstInt(val=63) -> 63[92]
  314:[96] SetInt(v1=ref(1,9,80)[80], fld=0, val=63[92])
  317:[80] VarRef(var[68]) -> ref(1,9,80)={nr:63}[80]
  320:[92] ConstText(_value="Six") -> "Six"[92]
  325:[108] SetText(v1=ref(1,9,80)[80], fld=4, val="Six"[92])
  328:[80] VarRef(var[68]) -> ref(1,9,80)={nr:63,key:"Six"}[80]
  331:[92] ConstInt(val=6) -> 6[92]
  336:[96] SetInt(v1=ref(1,9,80)[80], fld=8, val=6[92])
  339:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3}]}[80]
  342:[92] VarRef(var[68]) -> ref(1,9,80)={nr:63,key:"Six",value:6}[92]
  345:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,80)[92], parent_tp=18, fld=0)
  350:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[80]
  353:[92] NewRecord(data=ref(1,1,0)[80], parent_tp=18, fld=0) -> ref(1,9,92)[80]
  358:[92] PutRef(var[68], value=ref(1,9,92)[80])
  361:[80] VarRef(var[68]) -> ref(1,9,92)={}[80]
  364:[92] ConstInt(val=61) -> 61[92]
  369:[96] SetInt(v1=ref(1,9,92)[80], fld=0, val=61[92])
  372:[80] VarRef(var[68]) -> ref(1,9,92)={nr:61}[80]
  375:[92] ConstText(_value="Seven") -> "Seven"[92]
  382:[108] SetText(v1=ref(1,9,92)[80], fld=4, val="Seven"[92])
  385:[80] VarRef(var[68]) -> ref(1,9,92)={nr:61,key:"Seven"}[80]
  388:[92] ConstInt(val=7) -> 7[92]
  393:[96] SetInt(v1=ref(1,9,92)[80], fld=8, val=7[92])
  396:[80] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6}]}[80]
  399:[92] VarRef(var[68]) -> ref(1,9,92)={nr:61,key:"Seven",value:7}[92]
  402:[104] FinishRecord(data=ref(1,1,0)[80], rec=ref(1,9,92)[92], parent_tp=18, fld=0)
  407:[80] ConstInt(val=0) -> 0[80]
  412:[84] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[84]
  415:[96] GetField(v1=ref(1,1,0)[84], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][84]
  418:[96] ConstText(_value="Five") -> "Five"[96]
  424:[112] ConstInt(val=83) -> 83[112]
  429:[116] GetRecord(data=ref(1,1,4)[84], db_tp=19, no_keys=2, key1=83[112], key2="Five"[96]) -> ref(1,9,32)[84]
  433:[96] GetInt(v1=ref(1,9,32)[84], fld=8) -> 5[84]
  436:[88] ConstInt(val=5) -> 5[88]
  441:[92] EqInt(v1=5[84], v2=5[88]) -> true[84]
  442:[85] GotoFalseWord(jump=448, if_false=true[84])
  445:[84] GotoWord(jump=514)
  514:[84] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[84]
  517:[96] GetField(v1=ref(1,1,0)[84], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][84]
  520:[96] ConstInt(val=84) -> 84[96]
  525:[100] ConstText(_value="Six") -> "Six"[100]
  530:[116] ConstInt(val=63) -> 63[116]
  535:[120] Iterate(data=ref(63,3,0)[108], on=130, arg=12, keys=[Key { type_nr: -1, position: 0 }, Key { type_nr: 6, position: 4 }], from_key=1, till_key=84) -> 25769803777[84]
  548:[92] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
  551:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
  554:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,9,32)[92]
  560:[104] VarRef(var[92]) -> ref(1,9,32)={nr:83,key:"Five",value:5}[104]
  563:[116] ConvBoolFromRef(val=ref(1,9,32)[104]) -> true[104]
  564:[105] Not(v1=true[104]) -> false[104]
  565:[105] GotoFalseWord(jump=575, if_false=false[104])
  575:[104] VarInt(var[80]) -> 0[104]
  578:[108] ConstInt(val=10) -> 10[108]
  583:[112] MulInt(v1=0[104], v2=10[108]) -> 0[104]
  584:[108] VarRef(var[92]) -> ref(1,9,32)={nr:83,key:"Five",value:5}[108]
  587:[120] GetInt(v1=ref(1,9,32)[108], fld=8) -> 5[108]
  590:[112] AddInt(v1=0[104], v2=5[108]) -> 5[104]
  591:[108] PutInt(var[80], value=5[104])
  594:[104] FreeStack(value=0, discard=12)
  598:[92] GotoWord(jump=548)
  548:[92] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
  551:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
  554:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,9,44)[92]
  560:[104] VarRef(var[92]) -> ref(1,9,44)={nr:83,key:"Four",value:4}[104]
  563:[116] ConvBoolFromRef(val=ref(1,9,44)[104]) -> true[104]
  564:[105] Not(v1=true[104]) -> false[104]
  565:[105] GotoFalseWord(jump=575, if_false=false[104])
  575:[104] VarInt(var[80]) -> 5[104]
  578:[108] ConstInt(val=10) -> 10[108]
  583:[112] MulInt(v1=5[104], v2=10[108]) -> 50[104]
  584:[108] VarRef(var[92]) -> ref(1,9,44)={nr:83,key:"Four",value:4}[108]
  587:[120] GetInt(v1=ref(1,9,44)[108], fld=8) -> 4[108]
  590:[112] AddInt(v1=50[104], v2=4[108]) -> 54[104]
  591:[108] PutInt(var[80], value=54[104])
  594:[104] FreeStack(value=0, discard=12)
  598:[92] GotoWord(jump=548)
  548:[92] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
  551:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
  554:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,9,56)[92]
  560:[104] VarRef(var[92]) -> ref(1,9,56)={nr:83,key:"Three",value:3}[104]
  563:[116] ConvBoolFromRef(val=ref(1,9,56)[104]) -> true[104]
  564:[105] Not(v1=true[104]) -> false[104]
  565:[105] GotoFalseWord(jump=575, if_false=false[104])
  575:[104] VarInt(var[80]) -> 54[104]
  578:[108] ConstInt(val=10) -> 10[108]
  583:[112] MulInt(v1=54[104], v2=10[108]) -> 540[104]
  584:[108] VarRef(var[92]) -> ref(1,9,56)={nr:83,key:"Three",value:3}[108]
  587:[120] GetInt(v1=ref(1,9,56)[108], fld=8) -> 3[108]
  590:[112] AddInt(v1=540[104], v2=3[108]) -> 543[104]
  591:[108] PutInt(var[80], value=543[104])
  594:[104] FreeStack(value=0, discard=12)
  598:[92] GotoWord(jump=548)
  548:[92] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
  551:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
  554:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,9,68)[92]
  560:[104] VarRef(var[92]) -> ref(1,9,68)={nr:63,key:"Six",value:6}[104]
  563:[116] ConvBoolFromRef(val=ref(1,9,68)[104]) -> true[104]
  564:[105] Not(v1=true[104]) -> false[104]
  565:[105] GotoFalseWord(jump=575, if_false=false[104])
  575:[104] VarInt(var[80]) -> 543[104]
  578:[108] ConstInt(val=10) -> 10[108]
  583:[112] MulInt(v1=543[104], v2=10[108]) -> 5430[104]
  584:[108] VarRef(var[92]) -> ref(1,9,68)={nr:63,key:"Six",value:6}[108]
  587:[120] GetInt(v1=ref(1,9,68)[108], fld=8) -> 6[108]
  590:[112] AddInt(v1=5430[104], v2=6[108]) -> 5436[104]
  591:[108] PutInt(var[80], value=5436[104])
  594:[104] FreeStack(value=0, discard=12)
  598:[92] GotoWord(jump=548)
  548:[92] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[92]
  551:[104] GetField(v1=ref(1,1,0)[92], fld=4) -> ref(1,1,4)=[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}][92]
  554:[104] Step(state_var=20, data=ref(1,1,4)[92], on=130, arg=12) -> ref(1,0,2147483647)[92]
  560:[104] VarRef(var[92]) -> ref(1,0,2147483647)=null[104]
  563:[116] ConvBoolFromRef(val=ref(1,0,2147483647)[104]) -> false[104]
  564:[105] Not(v1=false[104]) -> true[104]
  565:[105] GotoFalseWord(jump=575, if_false=true[104])
  568:[104] FreeStack(value=0, discard=12)
  572:[92] GotoWord(jump=601)
  601:[92] FreeStack(value=0, discard=8)
  605:[84] VarRef(var[56]) -> ref(1,1,0)={map:[{nr:101,key:"One",value:1},{nr:92,key:"Two",value:2},{nr:83,key:"Five",value:5},{nr:83,key:"Four",value:4},{nr:83,key:"Three",value:3},{nr:63,key:"Six",value:6},{nr:61,key:"Seven",value:7}]}[84]
  608:[96] FreeRef(v1=ref(1,1,0)[84])
  609:[84] VarInt(var[80]) -> 5436[84]
  612:[88] FreeStack(value=4, discard=32)
  616:[60] VarInt(var[56]) -> 5436[60]
  619:[64] ConstInt(val=5436) -> 5436[64]
  624:[68] EqInt(v1=5436[60], v2=5436[64]) -> true[60]
  625:[61] GotoFalseWord(jump=631, if_false=true[60])
  628:[60] GotoWord(jump=683)
  683:[60] FreeText(var[32])
  686:[60] FreeText(var[8])
  689:[60] Return(ret=4294967295[4], value=0, discard=56)
Finished
