pub fn test() {
    test_value = {a="12345";a.len() * 100 + len("ðŸ˜ƒ") * 10 + len("â™¥")};
    assert(
        test_value == 543,
        "Test failed {test_value} != 543"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:text = "12345";
    OpAddInt(OpAddInt(OpMulInt(_tp_text_len(a), 100i32), OpMulInt(_tp_text_len("ðŸ˜ƒ"), 10i32)), _tp_text_len("â™¥"));
  }#2:integer;
  if OpEqInt(test_value, 543i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 543");
    __work_1;
  }#3:text);
}#1

byte-code for str_len:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: Text() var=a[28]:text in 2
 657[52]: ConstText(_value="12345") -> text
 664[68]: AppendText(var[28], v1: text)
 667[52]: VarText(var[28]) -> text var=a[28]:text in 2
 670[68]: Call(size=0, to=318)
 677[56]: ConstInt(val=100) -> integer
 682[60]: MulInt(v1: integer, v2: integer) -> integer
 683[56]: ConstText(_value="ðŸ˜ƒ") -> text
 689[72]: Call(size=0, to=318)
 696[60]: ConstInt(val=10) -> integer
 701[64]: MulInt(v1: integer, v2: integer) -> integer
 702[60]: AddInt(v1: integer, v2: integer) -> integer
 703[56]: ConstText(_value="â™¥") -> text
 708[72]: Call(size=0, to=318)
 715[60]: AddInt(v1: integer, v2: integer) -> integer
 716[56]: FreeText(var[28])
 719[56]: FreeStack(value=4, discard=28) type=integer[4]:Base[0]
 723[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 726[36]: ConstInt(val=543) -> integer
 731[40]: EqInt(v1: integer, v2: integer) -> boolean
 732[33]: GotoFalseWord(jump=738, if_false: boolean)
 735[32]: GotoWord(jump=789)
 738[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 741[32]: ConstText(_value="Test failed ") -> text
 755[48]: AppendText(var[4], v1: text)
 758[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 761[36]: ConstInt(val=0) -> integer
 766[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 773[32]: ConstText(_value=" != 543") -> text
 782[48]: AppendText(var[4], v1: text)
 785[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 788[48]: Panic(message: text)
 789[32]: FreeText(var[4])
 792[32]: Return(ret=0, value=0, discard=32)

Execute test:
  655:[8] Text()
  656:[32] Text()
  657:[56] ConstText(_value="12345") -> "12345"[56]
  664:[72] AppendText(var[32], v1="12345"[56])
  667:[56] VarText(var[32]) -> "12345"[56]
  670:[72] Call(size=0, to=318)
  318:[76] ArgText(var[56]) -> "12345"[76]
  321:[92] LengthText(v1="12345"[76]) -> 5[76]
  322:[80] Return(ret=677[72], value=4, discard=24) -> 5[56]
  677:[60] ConstInt(val=100) -> 100[60]
  682:[64] MulInt(v1=5[56], v2=100[60]) -> 500[56]
  683:[60] ConstText(_value="ðŸ˜ƒ") -> "ðŸ˜ƒ"[60]
  689:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "ðŸ˜ƒ"[80]
  321:[96] LengthText(v1="ðŸ˜ƒ"[80]) -> 4[80]
  322:[84] Return(ret=696[76], value=4, discard=24) -> 4[60]
  696:[64] ConstInt(val=10) -> 10[64]
  701:[68] MulInt(v1=4[60], v2=10[64]) -> 40[60]
  702:[64] AddInt(v1=500[56], v2=40[60]) -> 540[56]
  703:[60] ConstText(_value="â™¥") -> "â™¥"[60]
  708:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "â™¥"[80]
  321:[96] LengthText(v1="â™¥"[80]) -> 3[80]
  322:[84] Return(ret=715[76], value=4, discard=24) -> 3[60]
  715:[64] AddInt(v1=540[56], v2=3[60]) -> 543[56]
  716:[60] FreeText(var[32])
  719:[60] FreeStack(value=4, discard=28)
  723:[36] VarInt(var[32]) -> 543[36]
  726:[40] ConstInt(val=543) -> 543[40]
  731:[44] EqInt(v1=543[36], v2=543[40]) -> true[36]
  732:[37] GotoFalseWord(jump=738, if_false=true[36])
  735:[36] GotoWord(jump=789)
  789:[36] FreeText(var[8])
  792:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
