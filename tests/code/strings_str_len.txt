Test code:
pub fn test() {
    test_value = {a="12345";a.len() * 100 + len("ðŸ˜ƒ") * 10 + len("â™¥")};
    assert(
        test_value == 543,
        "Test failed {test_value} != 543"
    );
}

fn test {
  let test_value = {
    let a = "12345";
    OpAddInt(OpAddInt(OpMulInt(_tp_text_len(a), 100i32), OpMulInt(_tp_text_len("ðŸ˜ƒ"), 10i32)), _tp_text_len("â™¥"));
  };
  if OpEqInt(test_value, 543i32) {null} else {OpGenPanic({
    let append_8 = "Test failed ";
    OpFormatInt(append_8, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_8, " != 543");
    append_8;
  })};
}

byte-code for str_len:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="12345") -> text
 676[44]: AppendText(var[4], v1: text)
 679[28]: VarText(var[4]) -> text
 682[44]: GenCall(size=0, to=318)
 689[32]: ConstInt(val=100) -> integer
 694[36]: MulInt(v1: integer, v2: integer) -> integer
 695[32]: ConstText(_value="ðŸ˜ƒ") -> text
 701[48]: GenCall(size=0, to=318)
 708[36]: ConstInt(val=10) -> integer
 713[40]: MulInt(v1: integer, v2: integer) -> integer
 714[36]: AddInt(v1: integer, v2: integer) -> integer
 715[32]: ConstText(_value="â™¥") -> text
 720[48]: GenCall(size=0, to=318)
 727[36]: AddInt(v1: integer, v2: integer) -> integer
 728[32]: GenFreeStack(value=4, discard=24)
 732[8]: VarInt(var[4]) -> integer
 735[12]: ConstInt(val=543) -> integer
 740[16]: EqInt(v1: integer, v2: integer) -> boolean
 741[9]: GenGotoFalseWord(jump=747, if_false: boolean)
 744[8]: GenGotoWord(jump=800)
 747[8]: Text()
 748[32]: ConstText(_value="Test failed ") -> text
 762[48]: AppendText(var[8], v1: text)
 765[32]: VarInt(var[4]) -> integer
 768[36]: ConstInt(val=0) -> integer
 773[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 780[32]: ConstText(_value=" != 543") -> text
 789[48]: AppendText(var[8], v1: text)
 792[32]: VarText(var[8]) -> text
 795[48]: GenFreeStack(value=16, discard=24)
 799[24]: GenPanic(message: text)
 800[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] Text()
  669:[28] ConstText(_value="12345") -> "12345"[28]
  676:[44] AppendText(var[4], v1="12345"[28])
  679:[28] VarText(var[4]) -> "12345"[28]
  682:[44] GenCall(size=0, to=318)
  318:[48] ArgText(var[28]) -> "12345"[48]
  321:[64] LengthText(v1="12345"[48]) -> 5[48]
  322:[52] GenReturn(ret=689[44], value=4, discard=24)
  689:[32] ConstInt(val=100) -> 100[32]
  694:[36] MulInt(v1=5[28], v2=100[32]) -> 500[28]
  695:[32] ConstText(_value="ðŸ˜ƒ") -> "ðŸ˜ƒ"[32]
  701:[48] GenCall(size=0, to=318)
  318:[52] ArgText(var[32]) -> "ðŸ˜ƒ"[52]
  321:[68] LengthText(v1="ðŸ˜ƒ"[52]) -> 4[52]
  322:[56] GenReturn(ret=708[48], value=4, discard=24)
  708:[36] ConstInt(val=10) -> 10[36]
  713:[40] MulInt(v1=4[32], v2=10[36]) -> 40[32]
  714:[36] AddInt(v1=500[28], v2=40[32]) -> 540[28]
  715:[32] ConstText(_value="â™¥") -> "â™¥"[32]
  720:[48] GenCall(size=0, to=318)
  318:[52] ArgText(var[32]) -> "â™¥"[52]
  321:[68] LengthText(v1="â™¥"[52]) -> 3[52]
  322:[56] GenReturn(ret=727[48], value=4, discard=24)
  727:[36] AddInt(v1=540[28], v2=3[32]) -> 543[28]
  728:[32] GenFreeStack(value=4, discard=24)
  732:[8] VarInt(var[4]) -> 543[8]
  735:[12] ConstInt(val=543) -> 543[12]
  740:[16] EqInt(v1=543[8], v2=543[12]) -> true[8]
  741:[9] GenGotoFalseWord(jump=747, if_false=true[8])
  744:[8] GenGotoWord(jump=800)
  800:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
