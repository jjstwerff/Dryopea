pub fn test() {
    test_value = {a="12345";a.len() * 100 + len("ðŸ˜ƒ") * 10 + len("â™¥")};
    assert(
        test_value == 543,
        "Test failed {test_value} != 543"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:text = "12345";
    OpAddInt(OpAddInt(OpMulInt(_tp_text_len(a), 100i32), OpMulInt(_tp_text_len("ðŸ˜ƒ"), 10i32)), _tp_text_len("â™¥"));
  }#2:integer;
  if OpEqInt(test_value, 543i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 543");
    __work_1;
  }#3:text);
}#1

byte-code for str_len:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Text()
 694[52]: ConstText(_value="12345") -> text
 701[68]: AppendText(var[28], v1: text)
 704[52]: VarText(var[28]) -> text
 707[68]: Call(size=0, to=318)
 714[56]: ConstInt(val=100) -> integer
 719[60]: MulInt(v1: integer, v2: integer) -> integer
 720[56]: ConstText(_value="ðŸ˜ƒ") -> text
 726[72]: Call(size=0, to=318)
 733[60]: ConstInt(val=10) -> integer
 738[64]: MulInt(v1: integer, v2: integer) -> integer
 739[60]: AddInt(v1: integer, v2: integer) -> integer
 740[56]: ConstText(_value="â™¥") -> text
 745[72]: Call(size=0, to=318)
 752[60]: AddInt(v1: integer, v2: integer) -> integer
 753[56]: FreeStack(value=4, discard=28) type=integer[4]:Base[0]
 757[32]: VarInt(var[28]) -> integer
 760[36]: ConstInt(val=543) -> integer
 765[40]: EqInt(v1: integer, v2: integer) -> boolean
 766[33]: GotoFalseWord(jump=772, if_false: boolean)
 769[32]: GotoWord(jump=823)
 772[32]: ClearText(var[4])
 775[32]: ConstText(_value="Test failed ") -> text
 789[48]: AppendText(var[4], v1: text)
 792[32]: VarInt(var[28]) -> integer
 795[36]: ConstInt(val=0) -> integer
 800[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 807[32]: ConstText(_value=" != 543") -> text
 816[48]: AppendText(var[4], v1: text)
 819[32]: VarText(var[4]) -> text
 822[48]: Panic(message: text)
 823[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] Text()
  694:[56] ConstText(_value="12345") -> "12345"[56]
  701:[72] AppendText(var[32], v1="12345"[56])
  704:[56] VarText(var[32]) -> "12345"[56]
  707:[72] Call(size=0, to=318)
  318:[76] ArgText(var[56]) -> "12345"[76]
  321:[92] LengthText(v1="12345"[76]) -> 5[76]
  322:[80] Return(ret=714[72], value=4, discard=24) -> 5[56]
  714:[60] ConstInt(val=100) -> 100[60]
  719:[64] MulInt(v1=5[56], v2=100[60]) -> 500[56]
  720:[60] ConstText(_value="ðŸ˜ƒ") -> "ðŸ˜ƒ"[60]
  726:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "ðŸ˜ƒ"[80]
  321:[96] LengthText(v1="ðŸ˜ƒ"[80]) -> 4[80]
  322:[84] Return(ret=733[76], value=4, discard=24) -> 4[60]
  733:[64] ConstInt(val=10) -> 10[64]
  738:[68] MulInt(v1=4[60], v2=10[64]) -> 40[60]
  739:[64] AddInt(v1=500[56], v2=40[60]) -> 540[56]
  740:[60] ConstText(_value="â™¥") -> "â™¥"[60]
  745:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "â™¥"[80]
  321:[96] LengthText(v1="â™¥"[80]) -> 3[80]
  322:[84] Return(ret=752[76], value=4, discard=24) -> 3[60]
  752:[64] AddInt(v1=540[56], v2=3[60]) -> 543[56]
  753:[60] FreeStack(value=4, discard=28)
  757:[36] VarInt(var[32]) -> 543[36]
  760:[40] ConstInt(val=543) -> 543[40]
  765:[44] EqInt(v1=543[36], v2=543[40]) -> true[36]
  766:[37] GotoFalseWord(jump=772, if_false=true[36])
  769:[36] GotoWord(jump=823)
  823:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
