pub fn test() {
    test_value = {a="12345";a.len() * 100 + len("ðŸ˜ƒ") * 10 + len("â™¥")};
    assert(
        test_value == 543,
        "Test failed {test_value} != 543"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    a(2):text = "12345";
    OpAddInt(OpAddInt(OpMulInt(_tp_text_len(a(2)), 100i32), OpMulInt(_tp_text_len("ðŸ˜ƒ"), 10i32)), _tp_text_len("â™¥"));
    OpFreeText(a(2));
  }#block(2):integer;
  if OpEqInt(test_value(1), 543i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 543");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for str_len:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=a[32]:text
   2[56]: ConstText(_value="12345") -> text
   9[72]: AppendText(var[32], v1: text)
  12[56]: VarText(var[32]) -> text var=a[32]:text
  15[72]: Call(size=0, to=318)
  22[60]: ConstInt(val=100) -> integer
  27[64]: MulInt(v1: integer, v2: integer) -> integer
  28[60]: ConstText(_value="ðŸ˜ƒ") -> text
  34[76]: Call(size=0, to=318)
  41[64]: ConstInt(val=10) -> integer
  46[68]: MulInt(v1: integer, v2: integer) -> integer
  47[64]: AddInt(v1: integer, v2: integer) -> integer
  48[60]: ConstText(_value="â™¥") -> text
  53[76]: Call(size=0, to=318)
  60[64]: AddInt(v1: integer, v2: integer) -> integer
  61[60]: FreeText(var[32])
  64[60]: FreeStack(value=4, discard=28)
  68[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  71[40]: ConstInt(val=543) -> integer
  76[44]: EqInt(v1: integer, v2: integer) -> boolean
  77[37]: GotoFalseWord(jump=83, if_false: boolean)
  80[36]: GotoWord(jump=134)
  83[36]: ClearText(var[8]) var=__work_1[8]:text
  86[36]: ConstText(_value="Test failed ") -> text
 100[52]: AppendText(var[8], v1: text)
 103[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
 106[40]: ConstInt(val=0) -> integer
 111[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 118[36]: ConstText(_value=" != 543") -> text
 127[52]: AppendText(var[8], v1: text)
 130[36]: VarText(var[8]) -> text var=__work_1[8]:text
 133[52]: Panic(message: text)
 134[36]: FreeText(var[8])
 137[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] ConstText(_value="12345") -> "12345"[56]
    9:[72] AppendText(var[32], v1="12345"[56])
   12:[56] VarText(var[32]) -> "12345"[56]
   15:[72] Call(size=0, to=318)
  318:[76] ArgText(var[56]) -> "12345"[76]
  321:[92] LengthText(v1="12345"[76]) -> 5[76]
  322:[80] Return(ret=1141[72], value=4, discard=24) -> 5[56]
   22:[60] ConstInt(val=100) -> 100[60]
   27:[64] MulInt(v1=5[56], v2=100[60]) -> 500[56]
   28:[60] ConstText(_value="ðŸ˜ƒ") -> "ðŸ˜ƒ"[60]
   34:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "ðŸ˜ƒ"[80]
  321:[96] LengthText(v1="ðŸ˜ƒ"[80]) -> 4[80]
  322:[84] Return(ret=1160[76], value=4, discard=24) -> 4[60]
   41:[64] ConstInt(val=10) -> 10[64]
   46:[68] MulInt(v1=4[60], v2=10[64]) -> 40[60]
   47:[64] AddInt(v1=500[56], v2=40[60]) -> 540[56]
   48:[60] ConstText(_value="â™¥") -> "â™¥"[60]
   53:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "â™¥"[80]
  321:[96] LengthText(v1="â™¥"[80]) -> 3[80]
  322:[84] Return(ret=1179[76], value=4, discard=24) -> 3[60]
   60:[64] AddInt(v1=540[56], v2=3[60]) -> 543[56]
   61:[60] FreeText(var[32])
   64:[60] FreeStack(value=4, discard=28)
   68:[36] VarInt(var[32]) -> 543[36]
   71:[40] ConstInt(val=543) -> 543[40]
   76:[44] EqInt(v1=543[36], v2=543[40]) -> true[36]
   77:[37] GotoFalseWord(jump=83, if_false=true[36])
   80:[36] GotoWord(jump=134)
  134:[36] FreeText(var[8])
  137:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
