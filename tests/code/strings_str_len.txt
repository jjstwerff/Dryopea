Test code:
pub fn test() {
    test_value = {a="12345";a.len() * 100 + len("ðŸ˜ƒ") * 10 + len("â™¥")};
    assert(
        test_value == 543,
        "Test failed {test_value} != 543"
    );
}

fn test {
  let __work_2 = "";
  let test_value = {
    let a = "12345";
    OpAddInt(OpAddInt(OpMulInt(_tp_text_len(a), 100i32), OpMulInt(_tp_text_len("ðŸ˜ƒ"), 10i32)), _tp_text_len("â™¥"));
  };
  if OpEqInt(test_value, 543i32) {null} else {OpGenPanic({
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatInt(__work_2, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " != 543");
    __work_2;
  })};
}

byte-code for str_len:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: Text()
 675[52]: ConstText(_value="12345") -> text(false)
 682[68]: AppendText(var[28], v1: text(false))
 685[52]: VarText(var[28]) -> text(false)
 688[68]: GenCall(size=0, to=318)
 695[56]: ConstInt(val=100) -> integer
 700[60]: MulInt(v1: integer, v2: integer) -> integer
 701[56]: ConstText(_value="ðŸ˜ƒ") -> text(false)
 707[72]: GenCall(size=0, to=318)
 714[60]: ConstInt(val=10) -> integer
 719[64]: MulInt(v1: integer, v2: integer) -> integer
 720[60]: AddInt(v1: integer, v2: integer) -> integer
 721[56]: ConstText(_value="â™¥") -> text(false)
 726[72]: GenCall(size=0, to=318)
 733[60]: AddInt(v1: integer, v2: integer) -> integer
 734[56]: GenFreeStack(value=4, discard=24)
 738[32]: VarInt(var[28]) -> integer
 741[36]: ConstInt(val=543) -> integer
 746[40]: EqInt(v1: integer, v2: integer) -> boolean
 747[33]: GenGotoFalseWord(jump=753, if_false: boolean)
 750[32]: GenGotoWord(jump=804)
 753[32]: ClearText(var[4])
 756[32]: ConstText(_value="Test failed ") -> text(false)
 770[48]: AppendText(var[4], v1: text(false))
 773[32]: VarInt(var[28]) -> integer
 776[36]: ConstInt(val=0) -> integer
 781[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 788[32]: ConstText(_value=" != 543") -> text(false)
 797[48]: AppendText(var[4], v1: text(false))
 800[32]: VarText(var[4]) -> text(false)
 803[48]: GenPanic(message: text(false))
 804[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] Text()
  675:[56] ConstText(_value="12345") -> "12345"[56]
  682:[72] AppendText(var[32], v1="12345"[56])
  685:[56] VarText(var[32]) -> "12345"[56]
  688:[72] GenCall(size=0, to=318)
  318:[76] ArgText(var[56]) -> "12345"[76]
  321:[92] LengthText(v1="12345"[76]) -> 5[76]
  322:[80] GenReturn(ret=695[72], value=4, discard=24)
  695:[60] ConstInt(val=100) -> 100[60]
  700:[64] MulInt(v1=5[56], v2=100[60]) -> 500[56]
  701:[60] ConstText(_value="ðŸ˜ƒ") -> "ðŸ˜ƒ"[60]
  707:[76] GenCall(size=0, to=318)
  318:[80] ArgText(var[60]) -> "ðŸ˜ƒ"[80]
  321:[96] LengthText(v1="ðŸ˜ƒ"[80]) -> 4[80]
  322:[84] GenReturn(ret=714[76], value=4, discard=24)
  714:[64] ConstInt(val=10) -> 10[64]
  719:[68] MulInt(v1=4[60], v2=10[64]) -> 40[60]
  720:[64] AddInt(v1=500[56], v2=40[60]) -> 540[56]
  721:[60] ConstText(_value="â™¥") -> "â™¥"[60]
  726:[76] GenCall(size=0, to=318)
  318:[80] ArgText(var[60]) -> "â™¥"[80]
  321:[96] LengthText(v1="â™¥"[80]) -> 3[80]
  322:[84] GenReturn(ret=733[76], value=4, discard=24)
  733:[64] AddInt(v1=540[56], v2=3[60]) -> 543[56]
  734:[60] GenFreeStack(value=4, discard=24)
  738:[36] VarInt(var[32]) -> 543[36]
  741:[40] ConstInt(val=543) -> 543[40]
  746:[44] EqInt(v1=543[36], v2=543[40]) -> true[36]
  747:[37] GenGotoFalseWord(jump=753, if_false=true[36])
  750:[36] GenGotoWord(jump=804)
  804:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
