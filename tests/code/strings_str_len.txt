pub fn test() {
    test_value = {a="12345";a.len() * 100 + len("ðŸ˜ƒ") * 10 + len("â™¥")};
    assert(
        test_value == 543,
        "Test failed {test_value} != 543"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:text = "12345";
    OpAddInt(OpAddInt(OpMulInt(_tp_text_len(a), 100i32), OpMulInt(_tp_text_len("ðŸ˜ƒ"), 10i32)), _tp_text_len("â™¥"));
  }#2:integer;
  if OpEqInt(test_value, 543i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 543");
    __work_1;
  }#3:text);
}#1

byte-code for str_len:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Text()
 684[52]: ConstText(_value="12345") -> text
 691[68]: AppendText(var[28], v1: text)
 694[52]: VarText(var[28]) -> text
 697[68]: Call(size=0, to=318)
 704[56]: ConstInt(val=100) -> integer
 709[60]: MulInt(v1: integer, v2: integer) -> integer
 710[56]: ConstText(_value="ðŸ˜ƒ") -> text
 716[72]: Call(size=0, to=318)
 723[60]: ConstInt(val=10) -> integer
 728[64]: MulInt(v1: integer, v2: integer) -> integer
 729[60]: AddInt(v1: integer, v2: integer) -> integer
 730[56]: ConstText(_value="â™¥") -> text
 735[72]: Call(size=0, to=318)
 742[60]: AddInt(v1: integer, v2: integer) -> integer
 743[56]: FreeStack(value=4, discard=24) type=integer[4]:Base[0]
 747[32]: VarInt(var[28]) -> integer
 750[36]: ConstInt(val=543) -> integer
 755[40]: EqInt(v1: integer, v2: integer) -> boolean
 756[33]: GotoFalseWord(jump=762, if_false: boolean)
 759[32]: GotoWord(jump=813)
 762[32]: ClearText(var[4])
 765[32]: ConstText(_value="Test failed ") -> text
 779[48]: AppendText(var[4], v1: text)
 782[32]: VarInt(var[28]) -> integer
 785[36]: ConstInt(val=0) -> integer
 790[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 797[32]: ConstText(_value=" != 543") -> text
 806[48]: AppendText(var[4], v1: text)
 809[32]: VarText(var[4]) -> text
 812[48]: Panic(message: text)
 813[32]: Return(ret=0, value=0, discard=32)

Execute test:
  682:[8] Text()
  683:[32] Text()
  684:[56] ConstText(_value="12345") -> "12345"[56]
  691:[72] AppendText(var[32], v1="12345"[56])
  694:[56] VarText(var[32]) -> "12345"[56]
  697:[72] Call(size=0, to=318)
  318:[76] ArgText(var[56]) -> "12345"[76]
  321:[92] LengthText(v1="12345"[76]) -> 5[76]
  322:[80] Return(ret=704[72], value=4, discard=24) -> 5[56]
  704:[60] ConstInt(val=100) -> 100[60]
  709:[64] MulInt(v1=5[56], v2=100[60]) -> 500[56]
  710:[60] ConstText(_value="ðŸ˜ƒ") -> "ðŸ˜ƒ"[60]
  716:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "ðŸ˜ƒ"[80]
  321:[96] LengthText(v1="ðŸ˜ƒ"[80]) -> 4[80]
  322:[84] Return(ret=723[76], value=4, discard=24) -> 4[60]
  723:[64] ConstInt(val=10) -> 10[64]
  728:[68] MulInt(v1=4[60], v2=10[64]) -> 40[60]
  729:[64] AddInt(v1=500[56], v2=40[60]) -> 540[56]
  730:[60] ConstText(_value="â™¥") -> "â™¥"[60]
  735:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "â™¥"[80]
  321:[96] LengthText(v1="â™¥"[80]) -> 3[80]
  322:[84] Return(ret=742[76], value=4, discard=24) -> 3[60]
  742:[64] AddInt(v1=540[56], v2=3[60]) -> 543[56]
  743:[60] FreeStack(value=4, discard=24)
  747:[36] VarInt(var[32]) -> 543[36]
  750:[40] ConstInt(val=543) -> 543[40]
  755:[44] EqInt(v1=543[36], v2=543[40]) -> true[36]
  756:[37] GotoFalseWord(jump=762, if_false=true[36])
  759:[36] GotoWord(jump=813)
  813:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
