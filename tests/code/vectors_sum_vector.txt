fn sum(v: vector<integer>) -> integer { t = 0; for i in v { t += i }; t}

pub fn test() {
    test_value = {sum([1, 2, 3, 4, 5])};
    assert(
        test_value == 15,
        "Test failed {test_value} != 15"
    );
}
Type 14:vector<integer>[4]:Vector(0)

Type 15:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn sum(v:vector<integer>) -> integer {#1 block
  t:integer = 0i32;
  {#2 for
    _vector_1:vector<integer>["v"] = v;
    i#index:integer = -1i32;
    loop {#3 for loop
      i:integer = {#4 iter next
        i#index:integer = OpAddInt(i#index, 1i32);
        OpGetInt(OpGetVector(_vector_1, 4i32, i#index), 0i32);
      }#4:integer;
      if OpNot(OpConvBoolFromInt(i)) break(0) else null;
      {#5 block
        t:integer = OpAddInt(t, i);
      }#5;
    }#3;
  }#2;
  t;
}#1:integer

byte-code for sum_vector:sum(v: vector<integer>[0]) [1073] -> integer
   0[12]: return-address
   0[16]: ConstInt(val=0) -> integer var=t[16]:integer in 1
   5[20]: VarVector(var[0]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[0]:vector<integer> in 0
   8[32]: ConstInt(val=-1) -> integer var=i#index[32]:integer in 2
  13[36]: VarInt(var[32]) -> integer var=i#index[32]:integer in 2
  16[40]: ConstInt(val=1) -> integer
  21[44]: AddInt(v1: integer, v2: integer) -> integer
  22[40]: PutInt(var[32], value: integer)
  25[36]: VarVector(var[20]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vector_1[20]:vector<integer>["v"] in 2
  28[48]: VarInt(var[32]) -> integer var=i#index[32]:integer in 2
  31[52]: GetVector(r: vector, size=4, index: integer) -> ref(reference) type=integer[4]:Base[0]
  34[48]: GetInt(v1: ref(reference), fld=0) -> integer
  37[40]: VarInt(var[36]) -> integer var=i[36]:integer in 3
  40[44]: ConvBoolFromInt(v1: integer) -> boolean
  41[41]: Not(v1: boolean) -> boolean
  42[41]: GotoFalseWord(jump=52, if_false: boolean)
  45[40]: FreeStack(value=0, discard=4)
  49[36]: GotoWord(jump=69)
  52[40]: VarInt(var[16]) -> integer var=t[16]:integer in 1
  55[44]: VarInt(var[36]) -> integer var=i[36]:integer in 3
  58[48]: AddInt(v1: integer, v2: integer) -> integer
  59[44]: PutInt(var[16], value: integer)
  62[40]: FreeStack(value=0, discard=4)
  66[36]: GotoWord(jump=13)
  69[36]: FreeStack(value=0, discard=16)
  73[20]: VarInt(var[16]) -> integer var=t[16]:integer in 1
  76[24]: Return(ret=12, value=4, discard=24) type=integer[4]:Base[0]

fn test() {#1 block
  __ref_1:ref(main_vector<integer>) = null;
  __work_1:text = "";
  test_value:integer = {#2 block
    sum({#3 vector
      OpDatabase(__ref_1, 15i32);
      _vec_1:vector<integer>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 1i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 2i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 3i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 4i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 5i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _vec_1;
    }#3:vector<integer>["__ref_1"]);
  }#2:integer;
  if OpEqInt(test_value, 15i32) null else OpPanic({#4 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 15");
    __work_1;
  }#4:text);
}#1

byte-code for sum_vector:test() [1155]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<integer>) in 1
   1[16]: Text() var=__work_1[16]:text in 1
   2[40]: Database(var[4], db_tp=15) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=test_value[40]:integer in 1
   7[40]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=__ref_1[4]:ref(main_vector<integer>) in 1
  10[52]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  13[52]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=__ref_1[4]:ref(main_vector<integer>) in 1
  16[64]: ConstInt(val=0) -> integer
  21[68]: SetInt(v1: ref(reference), fld=4, val: integer)
  24[52]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
  27[64]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
  32[64]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
  35[76]: ConstInt(val=1) -> integer
  40[80]: SetInt(v1: ref(reference), fld=0, val: integer)
  43[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
  46[76]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
  49[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
  54[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
  57[76]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
  62[76]: PutRef(var[52], value: ref(reference))
  65[64]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
  68[76]: ConstInt(val=2) -> integer
  73[80]: SetInt(v1: ref(reference), fld=0, val: integer)
  76[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
  79[76]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
  82[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
  87[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
  90[76]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
  95[76]: PutRef(var[52], value: ref(reference))
  98[64]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
 101[76]: ConstInt(val=3) -> integer
 106[80]: SetInt(v1: ref(reference), fld=0, val: integer)
 109[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
 112[76]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
 115[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 120[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
 123[76]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 128[76]: PutRef(var[52], value: ref(reference))
 131[64]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
 134[76]: ConstInt(val=4) -> integer
 139[80]: SetInt(v1: ref(reference), fld=0, val: integer)
 142[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
 145[76]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
 148[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 153[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
 156[76]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 161[76]: PutRef(var[52], value: ref(reference))
 164[64]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
 167[76]: ConstInt(val=5) -> integer
 172[80]: SetInt(v1: ref(reference), fld=0, val: integer)
 175[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
 178[76]: VarRef(var[52]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[52]:ref(boolean)["__ref_1"] in 3
 181[88]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 186[64]: VarVector(var[40]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[40]:vector<integer>["__ref_1"] in 3
 189[76]: FreeStack(value=12, discard=36) type=vector<text>[4]:Vector(5)[6]
 193[52]: Call(size=0, to=1073)
 200[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 203[48]: ConstInt(val=15) -> integer
 208[52]: EqInt(v1: integer, v2: integer) -> boolean
 209[45]: GotoFalseWord(jump=215, if_false: boolean)
 212[44]: GotoWord(jump=265)
 215[44]: ClearText(var[16]) var=__work_1[16]:text in 1
 218[44]: ConstText(_value="Test failed ") -> text
 232[60]: AppendText(var[16], v1: text)
 235[44]: VarInt(var[40]) -> integer var=test_value[40]:integer in 1
 238[48]: ConstInt(val=0) -> integer
 243[52]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 250[44]: ConstText(_value=" != 15") -> text
 258[60]: AppendText(var[16], v1: text)
 261[44]: VarText(var[16]) -> text var=__work_1[16]:text in 1
 264[60]: Panic(message: text)
 265[44]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=__ref_1[4]:ref(main_vector<integer>) in 1
 268[56]: FreeRef(v1: ref(reference))
 269[44]: FreeText(var[16])
 272[44]: Return(ret=0, value=0, discard=44)

