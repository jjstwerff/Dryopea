Test code:
fn sum(v: vector<integer>) -> integer { t = 0; for i in v { t += i }; t}

pub fn test() {
    test_value = {sum([1, 2, 3, 4, 5])};
    assert(
        test_value == 15,
        "Test failed {test_value} != 15"
    );
}

Type 13:main_vector<integer>[8]:
    vector:vector<integer>[4]

Type 14:vector<integer>[4]:Vector(0)

fn sum {
  let t = 0i32;
  {
    let i#index = 0i32;
    loop {
      let i = if OpGeInt(i#index, OpLengthVector(v)) {{
        OpConvIntFromNull();
      }} else {{
        let res_10 = OpGetInt(OpGetVector(v, 4i32, i#index), 0i32);
        i#index = OpAddInt(i#index, 1i32);
        res_10;
      }};
      if OpNot(OpConvBoolFromInt(i)) {break(0)} else {null};
      {
        t = OpAddInt(t, i);
      };
    };
  };
  t;
}

byte-code for sum_vector:sum(v: vector<integer>[0]) -> integer
 664[12]: return-address
 664[16]: ConstInt(val=0) -> integer
 669[20]: ConstInt(val=0) -> integer
 674[24]: VarInt(var[20]) -> integer
 677[28]: VarVector(var[0]) -> vector type=vector<integer>[4]:Vector(0)[14]
 680[40]: LengthVector(r: vector) -> integer
 681[32]: GeInt(v1: integer, v2: integer) -> boolean
 682[25]: GenGotoFalseWord(jump=689, if_false: boolean)
 685[24]: ConvIntFromNull() -> integer
 686[28]: GenGotoWord(jump=720)
 689[24]: VarVector(var[0]) -> vector type=vector<integer>[4]:Vector(0)[14]
 692[36]: VarInt(var[20]) -> integer
 695[40]: GetVector(r: vector, size=4, index: integer) -> reference type=integer[4]:Base[0]
 698[36]: GetInt(v1: reference, fld=0) -> integer
 701[28]: VarInt(var[20]) -> integer
 704[32]: ConstInt(val=1) -> integer
 709[36]: AddInt(v1: integer, v2: integer) -> integer
 710[32]: PutInt(var[20], value: integer)
 713[28]: VarInt(var[24]) -> integer
 716[32]: GenFreeStack(value=4, discard=4)
 720[28]: VarInt(var[24]) -> integer
 723[32]: ConvBoolFromInt(v1: integer) -> boolean
 724[29]: Not(v1: boolean) -> boolean
 725[29]: GenGotoFalseWord(jump=735, if_false: boolean)
 728[28]: GenFreeStack(value=0, discard=4)
 732[24]: GenGotoWord(jump=752)
 735[28]: VarInt(var[16]) -> integer
 738[32]: VarInt(var[24]) -> integer
 741[36]: AddInt(v1: integer, v2: integer) -> integer
 742[32]: PutInt(var[16], value: integer)
 745[28]: GenFreeStack(value=0, discard=4)
 749[24]: GenGotoWord(jump=674)
 752[24]: GenFreeStack(value=0, discard=4)
 756[20]: VarInt(var[16]) -> integer
 759[24]: GenReturn(ret=12, value=4, discard=24)

fn test {
  let test_value = {
    sum({
      let db_11 = OpDatabase(4i32, 13i32);
      let vec_10 = OpGetField(db_11, 4i32, 14i32);
      OpSetInt(db_11, 4i32, 0i32);
      let elm_9 = OpNewRecord(vec_10, 14i32, 65535i32);
      OpSetInt(elm_9, 0i32, 1i32);
      OpFinishRecord(vec_10, elm_9, 14i32, 65535i32);
      elm_9 = OpNewRecord(vec_10, 14i32, 65535i32);
      OpSetInt(elm_9, 0i32, 2i32);
      OpFinishRecord(vec_10, elm_9, 14i32, 65535i32);
      elm_9 = OpNewRecord(vec_10, 14i32, 65535i32);
      OpSetInt(elm_9, 0i32, 3i32);
      OpFinishRecord(vec_10, elm_9, 14i32, 65535i32);
      elm_9 = OpNewRecord(vec_10, 14i32, 65535i32);
      OpSetInt(elm_9, 0i32, 4i32);
      OpFinishRecord(vec_10, elm_9, 14i32, 65535i32);
      elm_9 = OpNewRecord(vec_10, 14i32, 65535i32);
      OpSetInt(elm_9, 0i32, 5i32);
      OpFinishRecord(vec_10, elm_9, 14i32, 65535i32);
      vec_10;
    });
  };
  if OpEqInt(test_value, 15i32) {null} else {OpGenPanic({
    let append_12 = "Test failed ";
    OpFormatInt(append_12, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_12, " != 15");
    append_12;
  })};
}

byte-code for sum_vector:test()
 765[0]: return-address
 765[4]: Database(size=4, db_tp=13) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 770[16]: VarRef(var[4]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 773[28]: GetField(v1: reference, fld=4) -> reference type=vector<integer>[4]:Vector(0)[14]
 776[28]: VarRef(var[4]) -> reference type=main_vector<integer>[8]:{vector:vector<integer>[4]}[13]
 779[40]: ConstInt(val=0) -> integer
 784[44]: SetInt(v1: reference, fld=4, val: integer)
 787[28]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 790[40]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 795[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 798[52]: ConstInt(val=1) -> integer
 803[56]: SetInt(v1: reference, fld=0, val: integer)
 806[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 809[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 812[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 817[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 820[52]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 825[52]: PutRef(var[28], value: reference)
 828[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 831[52]: ConstInt(val=2) -> integer
 836[56]: SetInt(v1: reference, fld=0, val: integer)
 839[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 842[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 845[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 850[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 853[52]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 858[52]: PutRef(var[28], value: reference)
 861[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 864[52]: ConstInt(val=3) -> integer
 869[56]: SetInt(v1: reference, fld=0, val: integer)
 872[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 875[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 878[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 883[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 886[52]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 891[52]: PutRef(var[28], value: reference)
 894[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 897[52]: ConstInt(val=4) -> integer
 902[56]: SetInt(v1: reference, fld=0, val: integer)
 905[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 908[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 911[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 916[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 919[52]: NewRecord(data: reference, parent_tp=14, fld=65535) -> reference
 924[52]: PutRef(var[28], value: reference)
 927[40]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 930[52]: ConstInt(val=5) -> integer
 935[56]: SetInt(v1: reference, fld=0, val: integer)
 938[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 941[52]: VarRef(var[28]) -> reference type=boolean[1]:Base[4]
 944[64]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=65535)
 949[40]: VarVector(var[16]) -> vector type=vector<integer>[4]:Vector(0)[14]
 952[52]: GenFreeStack(value=12, discard=36)
 956[16]: GenCall(size=0, to=664)
 963[8]: VarInt(var[4]) -> integer
 966[12]: ConstInt(val=15) -> integer
 971[16]: EqInt(v1: integer, v2: integer) -> boolean
 972[9]: GenGotoFalseWord(jump=978, if_false: boolean)
 975[8]: GenGotoWord(jump=1030)
 978[8]: Text()
 979[32]: ConstText(_value="Test failed ") -> text
 993[48]: AppendText(var[8], v1: text)
 996[32]: VarInt(var[4]) -> integer
 999[36]: ConstInt(val=0) -> integer
1004[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1011[32]: ConstText(_value=" != 15") -> text
1019[48]: AppendText(var[8], v1: text)
1022[32]: VarText(var[8]) -> text
1025[48]: GenFreeStack(value=16, discard=24)
1029[24]: GenPanic(message: text)
1030[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  765:[4] Database(size=4, db_tp=13) -> ref(1,1,0)={}[4]
  770:[16] VarRef(var[4]) -> ref(1,1,0)={}[16]
  773:[28] GetField(v1=ref(1,1,0)[16], fld=4) -> ref(1,1,4)=[][16]
  776:[28] VarRef(var[4]) -> ref(1,1,0)={}[28]
  779:[40] ConstInt(val=0) -> 0[40]
  784:[44] SetInt(v1=ref(1,1,0)[28], fld=4, val=0[40])
  787:[28] VarVector(var[16]) -> ref(1,1,4)=[][28]
  790:[40] NewRecord(data=ref(1,1,4)[28], parent_tp=14, fld=65535) -> ref(1,5,8)[28]
  795:[40] VarRef(var[28]) -> ref(1,5,8)=false[40]
  798:[52] ConstInt(val=1) -> 1[52]
  803:[56] SetInt(v1=ref(1,5,8)[40], fld=0, val=1[52])
  806:[40] VarVector(var[16]) -> ref(1,1,4)=[1][40]
  809:[52] VarRef(var[28]) -> ref(1,5,8)=true[52]
  812:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,8)[52], parent_tp=14, fld=65535)
  817:[40] VarVector(var[16]) -> ref(1,1,4)=[1][40]
  820:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=14, fld=65535) -> ref(1,5,12)[40]
  825:[52] PutRef(var[28], value=ref(1,5,12)[40])
  828:[40] VarRef(var[28]) -> ref(1,5,12)=false[40]
  831:[52] ConstInt(val=2) -> 2[52]
  836:[56] SetInt(v1=ref(1,5,12)[40], fld=0, val=2[52])
  839:[40] VarVector(var[16]) -> ref(1,1,4)=[1,2][40]
  842:[52] VarRef(var[28]) -> ref(1,5,12)=true[52]
  845:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,12)[52], parent_tp=14, fld=65535)
  850:[40] VarVector(var[16]) -> ref(1,1,4)=[1,2][40]
  853:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=14, fld=65535) -> ref(1,5,16)[40]
  858:[52] PutRef(var[28], value=ref(1,5,16)[40])
  861:[40] VarRef(var[28]) -> ref(1,5,16)=false[40]
  864:[52] ConstInt(val=3) -> 3[52]
  869:[56] SetInt(v1=ref(1,5,16)[40], fld=0, val=3[52])
  872:[40] VarVector(var[16]) -> ref(1,1,4)=[1,2,3][40]
  875:[52] VarRef(var[28]) -> ref(1,5,16)=true[52]
  878:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,16)[52], parent_tp=14, fld=65535)
  883:[40] VarVector(var[16]) -> ref(1,1,4)=[1,2,3][40]
  886:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=14, fld=65535) -> ref(1,5,20)[40]
  891:[52] PutRef(var[28], value=ref(1,5,20)[40])
  894:[40] VarRef(var[28]) -> ref(1,5,20)=false[40]
  897:[52] ConstInt(val=4) -> 4[52]
  902:[56] SetInt(v1=ref(1,5,20)[40], fld=0, val=4[52])
  905:[40] VarVector(var[16]) -> ref(1,1,4)=[1,2,3,4][40]
  908:[52] VarRef(var[28]) -> ref(1,5,20)=true[52]
  911:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,20)[52], parent_tp=14, fld=65535)
  916:[40] VarVector(var[16]) -> ref(1,1,4)=[1,2,3,4][40]
  919:[52] NewRecord(data=ref(1,1,4)[40], parent_tp=14, fld=65535) -> ref(1,5,24)[40]
  924:[52] PutRef(var[28], value=ref(1,5,24)[40])
  927:[40] VarRef(var[28]) -> ref(1,5,24)=false[40]
  930:[52] ConstInt(val=5) -> 5[52]
  935:[56] SetInt(v1=ref(1,5,24)[40], fld=0, val=5[52])
  938:[40] VarVector(var[16]) -> ref(1,1,4)=[1,2,3,4,5][40]
  941:[52] VarRef(var[28]) -> ref(1,5,24)=true[52]
  944:[64] FinishRecord(data=ref(1,1,4)[40], rec=ref(1,5,24)[52], parent_tp=14, fld=65535)
  949:[40] VarVector(var[16]) -> ref(1,1,4)=[1,2,3,4,5][40]
  952:[52] GenFreeStack(value=12, discard=36)
  956:[16] GenCall(size=0, to=664)
  664:[20] ConstInt(val=0) -> 0[20]
  669:[24] ConstInt(val=0) -> 0[24]
  674:[28] VarInt(var[24]) -> 0[28]
  677:[32] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][32]
  680:[44] LengthVector(r=ref(1,1,4)=true[32]) -> 5[32]
  681:[36] GeInt(v1=0[28], v2=5[32]) -> false[28]
  682:[29] GenGotoFalseWord(jump=689, if_false=false[28])
  689:[28] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][28]
  692:[40] VarInt(var[24]) -> 0[40]
  695:[44] GetVector(r=ref(1,1,4)=true[28], size=4, index=0[40]) -> ref(1,5,8)=1[28]
  698:[40] GetInt(v1=ref(1,5,8)[28], fld=0) -> 1[28]
  701:[32] VarInt(var[24]) -> 0[32]
  704:[36] ConstInt(val=1) -> 1[36]
  709:[40] AddInt(v1=0[32], v2=1[36]) -> 1[32]
  710:[36] PutInt(var[24], value=1[32])
  713:[32] VarInt(var[28]) -> 1[32]
  716:[36] GenFreeStack(value=4, discard=4)
  720:[32] VarInt(var[28]) -> 1[32]
  723:[36] ConvBoolFromInt(v1=1[32]) -> true[32]
  724:[33] Not(v1=true[32]) -> false[32]
  725:[33] GenGotoFalseWord(jump=735, if_false=false[32])
  735:[32] VarInt(var[20]) -> 0[32]
  738:[36] VarInt(var[28]) -> 1[36]
  741:[40] AddInt(v1=0[32], v2=1[36]) -> 1[32]
  742:[36] PutInt(var[20], value=1[32])
  745:[32] GenFreeStack(value=0, discard=4)
  749:[28] GenGotoWord(jump=674)
  674:[28] VarInt(var[24]) -> 1[28]
  677:[32] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][32]
  680:[44] LengthVector(r=ref(1,1,4)=true[32]) -> 5[32]
  681:[36] GeInt(v1=1[28], v2=5[32]) -> false[28]
  682:[29] GenGotoFalseWord(jump=689, if_false=false[28])
  689:[28] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][28]
  692:[40] VarInt(var[24]) -> 1[40]
  695:[44] GetVector(r=ref(1,1,4)=true[28], size=4, index=1[40]) -> ref(1,5,12)=2[28]
  698:[40] GetInt(v1=ref(1,5,12)[28], fld=0) -> 2[28]
  701:[32] VarInt(var[24]) -> 1[32]
  704:[36] ConstInt(val=1) -> 1[36]
  709:[40] AddInt(v1=1[32], v2=1[36]) -> 2[32]
  710:[36] PutInt(var[24], value=2[32])
  713:[32] VarInt(var[28]) -> 2[32]
  716:[36] GenFreeStack(value=4, discard=4)
  720:[32] VarInt(var[28]) -> 2[32]
  723:[36] ConvBoolFromInt(v1=2[32]) -> true[32]
  724:[33] Not(v1=true[32]) -> false[32]
  725:[33] GenGotoFalseWord(jump=735, if_false=false[32])
  735:[32] VarInt(var[20]) -> 1[32]
  738:[36] VarInt(var[28]) -> 2[36]
  741:[40] AddInt(v1=1[32], v2=2[36]) -> 3[32]
  742:[36] PutInt(var[20], value=3[32])
  745:[32] GenFreeStack(value=0, discard=4)
  749:[28] GenGotoWord(jump=674)
  674:[28] VarInt(var[24]) -> 2[28]
  677:[32] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][32]
  680:[44] LengthVector(r=ref(1,1,4)=true[32]) -> 5[32]
  681:[36] GeInt(v1=2[28], v2=5[32]) -> false[28]
  682:[29] GenGotoFalseWord(jump=689, if_false=false[28])
  689:[28] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][28]
  692:[40] VarInt(var[24]) -> 2[40]
  695:[44] GetVector(r=ref(1,1,4)=true[28], size=4, index=2[40]) -> ref(1,5,16)=3[28]
  698:[40] GetInt(v1=ref(1,5,16)[28], fld=0) -> 3[28]
  701:[32] VarInt(var[24]) -> 2[32]
  704:[36] ConstInt(val=1) -> 1[36]
  709:[40] AddInt(v1=2[32], v2=1[36]) -> 3[32]
  710:[36] PutInt(var[24], value=3[32])
  713:[32] VarInt(var[28]) -> 3[32]
  716:[36] GenFreeStack(value=4, discard=4)
  720:[32] VarInt(var[28]) -> 3[32]
  723:[36] ConvBoolFromInt(v1=3[32]) -> true[32]
  724:[33] Not(v1=true[32]) -> false[32]
  725:[33] GenGotoFalseWord(jump=735, if_false=false[32])
  735:[32] VarInt(var[20]) -> 3[32]
  738:[36] VarInt(var[28]) -> 3[36]
  741:[40] AddInt(v1=3[32], v2=3[36]) -> 6[32]
  742:[36] PutInt(var[20], value=6[32])
  745:[32] GenFreeStack(value=0, discard=4)
  749:[28] GenGotoWord(jump=674)
  674:[28] VarInt(var[24]) -> 3[28]
  677:[32] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][32]
  680:[44] LengthVector(r=ref(1,1,4)=true[32]) -> 5[32]
  681:[36] GeInt(v1=3[28], v2=5[32]) -> false[28]
  682:[29] GenGotoFalseWord(jump=689, if_false=false[28])
  689:[28] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][28]
  692:[40] VarInt(var[24]) -> 3[40]
  695:[44] GetVector(r=ref(1,1,4)=true[28], size=4, index=3[40]) -> ref(1,5,20)=4[28]
  698:[40] GetInt(v1=ref(1,5,20)[28], fld=0) -> 4[28]
  701:[32] VarInt(var[24]) -> 3[32]
  704:[36] ConstInt(val=1) -> 1[36]
  709:[40] AddInt(v1=3[32], v2=1[36]) -> 4[32]
  710:[36] PutInt(var[24], value=4[32])
  713:[32] VarInt(var[28]) -> 4[32]
  716:[36] GenFreeStack(value=4, discard=4)
  720:[32] VarInt(var[28]) -> 4[32]
  723:[36] ConvBoolFromInt(v1=4[32]) -> true[32]
  724:[33] Not(v1=true[32]) -> false[32]
  725:[33] GenGotoFalseWord(jump=735, if_false=false[32])
  735:[32] VarInt(var[20]) -> 6[32]
  738:[36] VarInt(var[28]) -> 4[36]
  741:[40] AddInt(v1=6[32], v2=4[36]) -> 10[32]
  742:[36] PutInt(var[20], value=10[32])
  745:[32] GenFreeStack(value=0, discard=4)
  749:[28] GenGotoWord(jump=674)
  674:[28] VarInt(var[24]) -> 4[28]
  677:[32] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][32]
  680:[44] LengthVector(r=ref(1,1,4)=true[32]) -> 5[32]
  681:[36] GeInt(v1=4[28], v2=5[32]) -> false[28]
  682:[29] GenGotoFalseWord(jump=689, if_false=false[28])
  689:[28] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][28]
  692:[40] VarInt(var[24]) -> 4[40]
  695:[44] GetVector(r=ref(1,1,4)=true[28], size=4, index=4[40]) -> ref(1,5,24)=5[28]
  698:[40] GetInt(v1=ref(1,5,24)[28], fld=0) -> 5[28]
  701:[32] VarInt(var[24]) -> 4[32]
  704:[36] ConstInt(val=1) -> 1[36]
  709:[40] AddInt(v1=4[32], v2=1[36]) -> 5[32]
  710:[36] PutInt(var[24], value=5[32])
  713:[32] VarInt(var[28]) -> 5[32]
  716:[36] GenFreeStack(value=4, discard=4)
  720:[32] VarInt(var[28]) -> 5[32]
  723:[36] ConvBoolFromInt(v1=5[32]) -> true[32]
  724:[33] Not(v1=true[32]) -> false[32]
  725:[33] GenGotoFalseWord(jump=735, if_false=false[32])
  735:[32] VarInt(var[20]) -> 10[32]
  738:[36] VarInt(var[28]) -> 5[36]
  741:[40] AddInt(v1=10[32], v2=5[36]) -> 15[32]
  742:[36] PutInt(var[20], value=15[32])
  745:[32] GenFreeStack(value=0, discard=4)
  749:[28] GenGotoWord(jump=674)
  674:[28] VarInt(var[24]) -> 5[28]
  677:[32] VarVector(var[4]) -> ref(1,1,4)=[1,2,3,4,5][32]
  680:[44] LengthVector(r=ref(1,1,4)=true[32]) -> 5[32]
  681:[36] GeInt(v1=5[28], v2=5[32]) -> true[28]
  682:[29] GenGotoFalseWord(jump=689, if_false=true[28])
  685:[28] ConvIntFromNull() -> -2147483648[28]
  686:[32] GenGotoWord(jump=720)
  720:[32] VarInt(var[28]) -> -2147483648[32]
  723:[36] ConvBoolFromInt(v1=-2147483648[32]) -> false[32]
  724:[33] Not(v1=false[32]) -> true[32]
  725:[33] GenGotoFalseWord(jump=735, if_false=true[32])
  728:[32] GenFreeStack(value=0, discard=4)
  732:[28] GenGotoWord(jump=752)
  752:[28] GenFreeStack(value=0, discard=4)
  756:[24] VarInt(var[20]) -> 15[24]
  759:[28] GenReturn(ret=963[16], value=4, discard=24)
  963:[8] VarInt(var[4]) -> 15[8]
  966:[12] ConstInt(val=15) -> 15[12]
  971:[16] EqInt(v1=15[8], v2=15[12]) -> true[8]
  972:[9] GenGotoFalseWord(jump=978, if_false=true[8])
  975:[8] GenGotoWord(jump=1030)
 1030:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
