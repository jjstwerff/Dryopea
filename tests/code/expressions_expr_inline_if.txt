Test code:
pub fn test() {
    test_value = {if 2 + 2 > 3 {"A"} else {"B"}};
    assert(
        test_value == "A",
        "Test failed {test_value} != \"A\""
    );
}

fn test {
  let test_value = {
    if OpGtInt(OpAddInt(2i32, 2i32), 3i32) {{
      "A";
    }} else {{
      "B";
    }};
  };
  if OpEqText(test_value, "A") {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatText(append_7, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_7, " != "A"");
    append_7;
  })};
}

byte-code for expr_inline_if:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: ConstInt(val=2) -> integer
 670[32]: ConstInt(val=2) -> integer
 675[36]: AddInt(v1: integer, v2: integer) -> integer
 676[32]: ConstInt(val=3) -> integer
 681[36]: GtInt(v1: integer, v2: integer) -> boolean
 682[29]: GenGotoFalseWord(jump=691, if_false: boolean)
 685[28]: ConstText(_value="A") -> text
 688[44]: GenGotoWord(jump=694)
 691[28]: ConstText(_value="B") -> text
 694[44]: AppendText(var[4], v1: text)
 697[28]: VarText(var[4]) -> text
 700[44]: ConstText(_value="A") -> text
 703[60]: EqText(v1: text, v2: text) -> boolean
 704[29]: GenGotoFalseWord(jump=710, if_false: boolean)
 707[28]: GenGotoWord(jump=761)
 710[28]: Text()
 711[52]: ConstText(_value="Test failed ") -> text
 725[68]: AppendText(var[28], v1: text)
 728[52]: VarText(var[4]) -> text
 731[68]: ConstInt(val=0) -> integer
 736[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 741[52]: ConstText(_value=" != "A"") -> text
 750[68]: AppendText(var[28], v1: text)
 753[52]: VarText(var[28]) -> text
 756[68]: GenFreeStack(value=16, discard=24)
 760[44]: GenPanic(message: text)
 761[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] ConstInt(val=2) -> 2[28]
  670:[32] ConstInt(val=2) -> 2[32]
  675:[36] AddInt(v1=2[28], v2=2[32]) -> 4[28]
  676:[32] ConstInt(val=3) -> 3[32]
  681:[36] GtInt(v1=4[28], v2=3[32]) -> true[28]
  682:[29] GenGotoFalseWord(jump=691, if_false=true[28])
  685:[28] ConstText(_value="A") -> "A"[28]
  688:[44] GenGotoWord(jump=694)
  694:[44] AppendText(var[4], v1="A"[28])
  697:[28] VarText(var[4]) -> "A"[28]
  700:[44] ConstText(_value="A") -> "A"[44]
  703:[60] EqText(v1="A"[28], v2="A"[44]) -> true[28]
  704:[29] GenGotoFalseWord(jump=710, if_false=true[28])
  707:[28] GenGotoWord(jump=761)
  761:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
