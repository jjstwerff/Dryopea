pub fn test() {
    test_value = {if 2 + 2 > 3 {"A"} else {"B"}};
    assert(
        test_value == "A",
        "Test failed {test_value} != \"A\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text = {#2 block
    if OpGtInt(OpAddInt(2i32, 2i32), 3i32) {#3 block
      "A";
    }#3:text else {#4 block
      "B";
    }#4:text;
  }#2:text;
  if OpEqText(test_value, "A") null else OpPanic({#5 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "A"");
    __work_1;
  }#5:text);
}#1

byte-code for expr_inline_if:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=test_value[28]:text in 1
   2[52]: ConstInt(val=2) -> integer
   7[56]: ConstInt(val=2) -> integer
  12[60]: AddInt(v1: integer, v2: integer) -> integer
  13[56]: ConstInt(val=3) -> integer
  18[60]: GtInt(v1: integer, v2: integer) -> boolean
  19[53]: GotoFalseWord(jump=28, if_false: boolean)
  22[52]: ConstText(_value="A") -> text
  25[68]: GotoWord(jump=31)
  28[52]: ConstText(_value="B") -> text
  31[68]: AppendText(var[28], v1: text)
  34[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
  37[68]: ConstText(_value="A") -> text
  40[84]: EqText(v1: text, v2: text) -> boolean
  41[53]: GotoFalseWord(jump=47, if_false: boolean)
  44[52]: GotoWord(jump=96)
  47[52]: ClearText(var[4]) var=__work_1[4]:text in 1
  50[52]: ConstText(_value="Test failed ") -> text
  64[68]: AppendText(var[4], v1: text)
  67[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
  70[68]: ConstInt(val=0) -> integer
  75[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  80[52]: ConstText(_value=" != "A"") -> text
  89[68]: AppendText(var[4], v1: text)
  92[52]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  95[68]: Panic(message: text)
  96[52]: FreeText(var[28])
  99[52]: FreeText(var[4])
 102[52]: Return(ret=0, value=0, discard=52)

