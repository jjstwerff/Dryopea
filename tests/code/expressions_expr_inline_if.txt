pub fn test() {
    test_value = {if 2 + 2 > 3 {"A"} else {"B"}};
    assert(
        test_value == "A",
        "Test failed {test_value} != \"A\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text = {#2 block
    if OpGtInt(OpAddInt(2i32, 2i32), 3i32) {#3 block
      "A";
    }#3:text else {#4 block
      "B";
    }#4:text;
  }#2:text;
  if OpEqText(test_value, "A") null else OpPanic({#5 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "A"");
    __work_1;
  }#5:text);
}#1

byte-code for expr_inline_if:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: Text() var=test_value[28]:text in 1
 657[52]: ConstInt(val=2) -> integer
 662[56]: ConstInt(val=2) -> integer
 667[60]: AddInt(v1: integer, v2: integer) -> integer
 668[56]: ConstInt(val=3) -> integer
 673[60]: GtInt(v1: integer, v2: integer) -> boolean
 674[53]: GotoFalseWord(jump=683, if_false: boolean)
 677[52]: ConstText(_value="A") -> text
 680[68]: GotoWord(jump=686)
 683[52]: ConstText(_value="B") -> text
 686[68]: AppendText(var[28], v1: text)
 689[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
 692[68]: ConstText(_value="A") -> text
 695[84]: EqText(v1: text, v2: text) -> boolean
 696[53]: GotoFalseWord(jump=702, if_false: boolean)
 699[52]: GotoWord(jump=751)
 702[52]: ClearText(var[4]) var=__work_1[4]:text in 1
 705[52]: ConstText(_value="Test failed ") -> text
 719[68]: AppendText(var[4], v1: text)
 722[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
 725[68]: ConstInt(val=0) -> integer
 730[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 735[52]: ConstText(_value=" != "A"") -> text
 744[68]: AppendText(var[4], v1: text)
 747[52]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 750[68]: Panic(message: text)
 751[52]: FreeText(var[28])
 754[52]: FreeText(var[4])
 757[52]: Return(ret=0, value=0, discard=52)

Execute test:
  655:[8] Text()
  656:[32] Text()
  657:[56] ConstInt(val=2) -> 2[56]
  662:[60] ConstInt(val=2) -> 2[60]
  667:[64] AddInt(v1=2[56], v2=2[60]) -> 4[56]
  668:[60] ConstInt(val=3) -> 3[60]
  673:[64] GtInt(v1=4[56], v2=3[60]) -> true[56]
  674:[57] GotoFalseWord(jump=683, if_false=true[56])
  677:[56] ConstText(_value="A") -> "A"[56]
  680:[72] GotoWord(jump=686)
  686:[72] AppendText(var[32], v1="A"[56])
  689:[56] VarText(var[32]) -> "A"[56]
  692:[72] ConstText(_value="A") -> "A"[72]
  695:[88] EqText(v1="A"[56], v2="A"[72]) -> true[56]
  696:[57] GotoFalseWord(jump=702, if_false=true[56])
  699:[56] GotoWord(jump=751)
  751:[56] FreeText(var[32])
  754:[56] FreeText(var[8])
  757:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
