enum En {V1, V2, V3}

pub fn test() {
    test_value = {sizeof(En) + 10 * sizeof(V1)};
    assert(
        test_value == 11,
        "Test failed {test_value} != 11"
    );
}
Type 17:En[1]:Enum(["V1", "V2", "V3"])

fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    OpAddInt(1i32, OpMulInt(10i32, 1i32));
  }#block_2:integer;
  if OpEqInt(test_value, 11i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 11");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for expr_enum:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=1) -> integer var=test_value[32]:integer
   6[36]: ConstInt(val=10) -> integer
  11[40]: ConstInt(val=1) -> integer
  16[44]: MulInt(v1: integer, v2: integer) -> integer
  17[40]: AddInt(v1: integer, v2: integer) -> integer
  18[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  21[40]: ConstInt(val=11) -> integer
  26[44]: EqInt(v1: integer, v2: integer) -> boolean
  27[37]: GotoFalseWord(jump=33, if_false: boolean)
  30[36]: GotoWord(jump=83)
  33[36]: ClearText(var[8]) var=__work_1[8]:text
  36[36]: ConstText(_value="Test failed ") -> text
  50[52]: AppendText(var[8], v1: text)
  53[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  56[40]: ConstInt(val=0) -> integer
  61[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  68[36]: ConstText(_value=" != 11") -> text
  76[52]: AppendText(var[8], v1: text)
  79[36]: VarText(var[8]) -> text var=__work_1[8]:text
  82[52]: Panic(message: text)
  83[36]: FreeText(var[8])
  86[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=1) -> 1[32]
    6:[36] ConstInt(val=10) -> 10[36]
   11:[40] ConstInt(val=1) -> 1[40]
   16:[44] MulInt(v1=10[36], v2=1[40]) -> 10[36]
   17:[40] AddInt(v1=1[32], v2=10[36]) -> 11[32]
   18:[36] VarInt(var[32]) -> 11[36]
   21:[40] ConstInt(val=11) -> 11[40]
   26:[44] EqInt(v1=11[36], v2=11[40]) -> true[36]
   27:[37] GotoFalseWord(jump=1201, if_false=true[36])
   30:[36] GotoWord(jump=1251)
   83:[36] FreeText(var[8])
   86:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
