Test code:
enum En {V1, V2, V3}

pub fn test() {
    test_value = {sizeof(En) + 10 * sizeof(V1)};
    assert(
        test_value == 11,
        "Test failed {test_value} != 11"
    );
}

Type 13:En[1]:Enum(["V1", "V2", "V3"])

fn test {
  let test_value = {
    OpAddInt(1i32, OpMulInt(10i32, 1i32));
  };
  if OpEqInt(test_value, 11i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 11");
    append_7;
  })};
}

byte-code for expr_enum:test()
 668[0]: return-address
 668[4]: ConstInt(val=1) -> integer
 673[8]: ConstInt(val=10) -> integer
 678[12]: ConstInt(val=1) -> integer
 683[16]: MulInt(v1: integer, v2: integer) -> integer
 684[12]: AddInt(v1: integer, v2: integer) -> integer
 685[8]: VarInt(var[4]) -> integer
 688[12]: ConstInt(val=11) -> integer
 693[16]: EqInt(v1: integer, v2: integer) -> boolean
 694[9]: GenGotoFalseWord(jump=700, if_false: boolean)
 697[8]: GenGotoWord(jump=752)
 700[8]: Text()
 701[32]: ConstText(_value="Test failed ") -> text
 715[48]: AppendText(var[8], v1: text)
 718[32]: VarInt(var[4]) -> integer
 721[36]: ConstInt(val=0) -> integer
 726[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 733[32]: ConstText(_value=" != 11") -> text
 741[48]: AppendText(var[8], v1: text)
 744[32]: VarText(var[8]) -> text
 747[48]: GenFreeStack(value=16, discard=24)
 751[24]: GenPanic(message: text)
 752[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] ConstInt(val=1) -> 1[4]
  673:[8] ConstInt(val=10) -> 10[8]
  678:[12] ConstInt(val=1) -> 1[12]
  683:[16] MulInt(v1=10[8], v2=1[12]) -> 10[8]
  684:[12] AddInt(v1=1[4], v2=10[8]) -> 11[4]
  685:[8] VarInt(var[4]) -> 11[8]
  688:[12] ConstInt(val=11) -> 11[12]
  693:[16] EqInt(v1=11[8], v2=11[12]) -> true[8]
  694:[9] GenGotoFalseWord(jump=700, if_false=true[8])
  697:[8] GenGotoWord(jump=752)
  752:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
