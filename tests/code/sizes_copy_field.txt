Test code:
struct S {a: integer, b: integer, c:integer};
struct Main { s: vector<S>, biggest: S };

pub fn test() {
    test_value = {m = Main{};
sizeof(S) + 100 * sizeof(Main) + 10000 * sizeof(m) + 100000 * sizeof(vector<S>)};
    assert(
        test_value == 1242012,
        "Test failed {test_value} != 1242012"
    );
}

Type 13:S[12]:
    a:integer[0]
    b:integer[4]
    c:integer[8]

Type 14:Main[20]:
    s:vector<S>[4]
    biggest:S[8]

Type 15:vector<S>[4]:Vector(13)

fn test {
  let test_value = {
    let m = {
      let val = OpDatabase(20i32, 14i32);
      OpSetInt(val, 4i32, 0i32);
      OpSetInt(val, 8i32, null);
      val;
    };
    OpAddInt(OpAddInt(OpAddInt(12i32, OpMulInt(100i32, 20i32)), OpMulInt(10000i32, 20i32)), OpMulInt(100000i32, 12i32));
  };
  if OpEqInt(test_value, 1242012i32) {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatInt(append_9, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_9, " != 1242012");
    append_9;
  })};
}

byte-code for copy_field:test()
 664[0]: return-address
 664[4]: Database(size=20, db_tp=14) -> reference type=Main[20]:{s:vector<S>[4], biggest:S[8]}[14]
 669[16]: VarRef(var[4]) -> reference type=Main[20]:{s:vector<S>[4], biggest:S[8]}[14]
 672[28]: ConstInt(val=0) -> integer
 677[32]: SetInt(v1: reference, fld=4, val: integer)
 680[16]: VarRef(var[4]) -> reference type=Main[20]:{s:vector<S>[4], biggest:S[8]}[14]
 683[28]: SetInt(v1: reference, fld=8, val: integer)
 686[12]: VarRef(var[4]) -> reference type=Main[20]:{s:vector<S>[4], biggest:S[8]}[14]
 689[24]: GenFreeStack(value=12, discard=8)
 693[16]: ConstInt(val=12) -> integer
 698[20]: ConstInt(val=100) -> integer
 703[24]: ConstInt(val=20) -> integer
 708[28]: MulInt(v1: integer, v2: integer) -> integer
 709[24]: AddInt(v1: integer, v2: integer) -> integer
 710[20]: ConstInt(val=10000) -> integer
 715[24]: ConstInt(val=20) -> integer
 720[28]: MulInt(v1: integer, v2: integer) -> integer
 721[24]: AddInt(v1: integer, v2: integer) -> integer
 722[20]: ConstInt(val=100000) -> integer
 727[24]: ConstInt(val=12) -> integer
 732[28]: MulInt(v1: integer, v2: integer) -> integer
 733[24]: AddInt(v1: integer, v2: integer) -> integer
 734[20]: GenFreeStack(value=4, discard=12)
 738[8]: VarInt(var[4]) -> integer
 741[12]: ConstInt(val=1242012) -> integer
 746[16]: EqInt(v1: integer, v2: integer) -> boolean
 747[9]: GenGotoFalseWord(jump=753, if_false: boolean)
 750[8]: GenGotoWord(jump=810)
 753[8]: Text()
 754[32]: ConstText(_value="Test failed ") -> text
 768[48]: AppendText(var[8], v1: text)
 771[32]: VarInt(var[4]) -> integer
 774[36]: ConstInt(val=0) -> integer
 779[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 786[32]: ConstText(_value=" != 1242012") -> text
 799[48]: AppendText(var[8], v1: text)
 802[32]: VarText(var[8]) -> text
 805[48]: GenFreeStack(value=16, discard=24)
 809[24]: GenPanic(message: text)
 810[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] Database(size=20, db_tp=14) -> ref(1,1,0)={biggest:{}}[4]
  669:[16] VarRef(var[4]) -> ref(1,1,0)={biggest:{}}[16]
  672:[28] ConstInt(val=0) -> 0[28]
  677:[32] SetInt(v1=ref(1,1,0)[16], fld=4, val=0[28])
  680:[16] VarRef(var[4]) -> ref(1,1,0)={biggest:{}}[16]
  683:[28] SetInt(v1=ref(0,1,1)[12], fld=8, val=1[24])