pub fn test() {
    test_value = {t = "longer"; v = "a longer text"; v.contains("a {t}")};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:boolean = {#2 block
    t:text = "longer";
    v:text = "a longer text";
    _tp_text_contains(v, {#3 formatting string
      __work_1:text = "a ";
      OpFormatText(__work_1, t, 0i32, -1i32, 32i32);
      __work_1;
    }#3:text);
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatBool(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != true");
    __work_2;
  }#4:text);
}#1

byte-code for contains:test()
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=t[52]:text in 2
   3[76]: ConstText(_value="longer") -> text
  11[92]: AppendText(var[52], v1: text)
  14[76]: Text() var=v[76]:text in 2
  15[100]: ConstText(_value="a longer text") -> text
  30[116]: AppendText(var[76], v1: text)
  33[100]: VarText(var[76]) -> text var=v[76]:text in 2
  36[116]: ClearText(var[28]) var=__work_1[28]:text in 1
  39[116]: ConstText(_value="a ") -> text
  43[132]: AppendText(var[28], v1: text)
  46[116]: VarText(var[52]) -> text var=t[52]:text in 2
  49[132]: ConstInt(val=0) -> integer
  54[136]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
  59[116]: VarText(var[28]) -> text var=__work_1[28]:text in 1
  62[132]: StaticCall(_tp_text_contains)
  65[101]: FreeText(var[52])
  68[101]: FreeText(var[76])
  71[101]: FreeStack(value=1, discard=49) type=boolean[1]:Base[4]
  75[53]: VarBool(var[52]) -> boolean var=test_value[52]:boolean in 1
  78[54]: ConstTrue() -> boolean
  79[55]: EqBool(v1: boolean, v2: boolean) -> boolean
  80[54]: GotoFalseWord(jump=86, if_false: boolean)
  83[53]: GotoWord(jump=136)
  86[53]: ClearText(var[4]) var=__work_2[4]:text in 1
  89[53]: ConstText(_value="Test failed ") -> text
 103[69]: AppendText(var[4], v1: text)
 106[53]: VarBool(var[52]) -> boolean var=test_value[52]:boolean in 1
 109[54]: ConstInt(val=0) -> integer
 114[58]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 119[53]: ConstText(_value=" != true") -> text
 129[69]: AppendText(var[4], v1: text)
 132[53]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 135[69]: Panic(message: text)
 136[53]: FreeText(var[28])
 139[53]: FreeText(var[4])
 142[53]: Return(ret=0, value=0, discard=53)

