fn main() {
  __work_7:text = "";
  __work_6:text = "";
  __work_5:text = "";
  __work_4:text = "";
  __work_3:text = "";
  __work_2:text = "";
  __work_1:text = "";
  if OpGtInt(2i32, 5i32) {
    panic("Incorrect test");
  } else null;
  a:integer = 12i32;
  if if OpGtInt(a, 10i32) OpEqInt(OpLandInt(a, 7i32), 4i32) else false {
    a:integer = OpAddInt(a, 1i32);
  } else {
    a:integer = OpMinInt(a, 1i32);
  };
  if OpEqInt(a, 13i32) null else OpPanic({
    __work_1:text = "Incorrect value ";
    OpFormatInt(__work_1, a, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 13");
    __work_1;
  });
  b:text = if OpEqInt(a, 13i32) {
    "Correct";
  } else {
    "Wrong";
  };
  if OpEqText(b, "Correct") null else OpPanic("Logic expression");
  t:integer = 0i32;
  {
    a#index:integer = OpConvIntFromNull();
    loop {
      a:integer = {
        a#index:integer = if OpNot(OpConvBoolFromInt(a#index)) 1i32 else OpAddInt(a#index, 1i32);
        if OpGeInt(a#index, 6i32) break(0) else null;
        a#index;
      };
      {
        t:integer = OpAddInt(t, a);
      };
    };
  };
  if OpEqInt(t, 15i32) null else OpPanic({
    __work_2:text = "Total was ";
    OpFormatInt(__work_2, t, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " instead of 15");
    __work_2;
  });
  t:integer = 0i32;
  {
    a#index:integer = OpConvIntFromNull();
    loop {
      a:integer = {
        a#index:integer = if OpNot(OpConvBoolFromInt(a#index)) 5i32 else OpMinInt(a#index, 1i32);
        if OpLtInt(a#index, 1i32) break(0) else null;
        a#index;
      };
      {
        t:integer = OpAddInt(OpMulInt(t, 10i32), a);
      };
    };
  };
  if OpEqInt(t, 54321i32) null else OpPanic({
    __work_3:text = "Result was ";
    OpFormatInt(__work_3, t, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_3, " instead of 54321");
    __work_3;
  });
  b:text = "";
  {
    x#index:integer = OpConvIntFromNull();
    loop {
      x:integer = {
        x#index:integer = if OpNot(OpConvBoolFromInt(x#index)) 1i32 else OpAddInt(x#index, 1i32);
        if OpGeInt(x#index, 5i32) break(0) else null;
        x#index;
      };
      {
        {
          y#index:integer = OpConvIntFromNull();
          loop {
            y:integer = {
              y#index:integer = if OpNot(OpConvBoolFromInt(y#index)) 1i32 else OpAddInt(y#index, 1i32);
              if OpGeInt(y#index, 5i32) break(0) else null;
              y#index;
            };
            {
              if OpGtInt(y, x) {
                break(0);
              } else null;
              if OpGeInt(OpMulInt(x, y), 16i32) {
                break(1);
              } else null;
              if OpGtInt(_tp_text_len(b), 0i32) {
                OpAppendText(b, "; ");
              } else null;
              OpAppendText(b, {
                __work_4:text = "";
                OpFormatInt(__work_4, x, 10i32, 0i32, 32i32, false, false);
                OpAppendText(__work_4, ":");
                OpFormatInt(__work_4, y, 10i32, 0i32, 32i32, false, false);
                __work_4;
              });
            };
          };
        };
      };
    };
  };
  if OpEqText(b, "1:1; 2:1; 2:2; 3:1; 3:2; 3:3; 4:1; 4:2; 4:3") null else OpPanic({
    __work_5:text = "Incorrect sequence '";
    OpFormatText(__work_5, b, 0i32, -1i32, 32i32);
    OpAppendText(__work_5, "'");
    __work_5;
  });
  b:text = "";
  {
    x#count:integer = 0i32;
    x#index:integer = OpConvIntFromNull();
    loop {
      x:integer = {
        x#index:integer = if OpNot(OpConvBoolFromInt(x#index)) 1i32 else OpAddInt(x#index, 1i32);
        if OpGtInt(x#index, 9i32) break(0) else null;
        x#index;
      };
      if OpNeInt(OpRemInt(x, 3i32), 1i32) null else continue(0);
      {
        if OpNot(OpEqInt(x#count, 0i32)) {
          OpAppendText(b, ", ");
        } else null;
        OpAppendText(b, {
          __work_6:text = "";
          OpFormatInt(__work_6, x#count, 10i32, 0i32, 32i32, false, false);
          OpAppendText(__work_6, ":");
          OpFormatInt(__work_6, x, 10i32, 0i32, 32i32, false, false);
          __work_6;
        });
      };
      x#count:integer = OpAddInt(x#count, 1i32);
    };
  };
  if OpEqText(b, "0:2, 1:3, 2:5, 3:6, 4:8, 5:9") null else OpPanic({
    __work_7:text = "Sequence '";
    OpFormatText(__work_7, b, 0i32, -1i32, 32i32);
    OpAppendText(__work_7, "'");
    __work_7;
  });
}

byte-code for tests/suite/01-keywords.lav:main() [1050]
   0[0]: return-address
   0[4]: Text() var=__work_7[4]:text in 1
   1[28]: Text() var=__work_6[28]:text in 1
   2[52]: Text() var=__work_5[52]:text in 1
   3[76]: Text() var=__work_4[76]:text in 1
   4[100]: Text() var=__work_3[100]:text in 1
   5[124]: Text() var=__work_2[124]:text in 1
   6[148]: Text() var=__work_1[148]:text in 1
   7[172]: ConstInt(val=2) -> integer
  12[176]: ConstInt(val=5) -> integer
  17[180]: GtInt(v1: integer, v2: integer) -> boolean
  18[173]: GotoFalseWord(jump=40, if_false: boolean)
  21[172]: ConstText(_value="Incorrect test") -> text
  37[188]: StaticCall(panic)
  40[172]: ConstInt(val=12) -> integer var=a[172]:integer in 1
  45[176]: VarInt(var[172]) -> integer var=a[172]:integer in 1
  48[180]: ConstInt(val=10) -> integer
  53[184]: GtInt(v1: integer, v2: integer) -> boolean
  54[177]: GotoFalseWord(jump=75, if_false: boolean)
  57[176]: VarInt(var[172]) -> integer var=a[172]:integer in 1
  60[180]: ConstInt(val=7) -> integer
  65[184]: LandInt(v1: integer, v2: integer) -> integer
  66[180]: ConstInt(val=4) -> integer
  71[184]: EqInt(v1: integer, v2: integer) -> boolean
  72[177]: GotoWord(jump=76)
  75[176]: ConstFalse() -> boolean
  76[177]: GotoFalseWord(jump=94, if_false: boolean)
  79[176]: VarInt(var[172]) -> integer var=a[172]:integer in 1
  82[180]: ConstInt(val=1) -> integer
  87[184]: AddInt(v1: integer, v2: integer) -> integer
  88[180]: PutInt(var[172], value: integer)
  91[176]: GotoWord(jump=106)
  94[176]: VarInt(var[172]) -> integer var=a[172]:integer in 1
  97[180]: ConstInt(val=1) -> integer
 102[184]: MinInt(v1: integer, v2: integer) -> integer
 103[180]: PutInt(var[172], value: integer)
 106[176]: VarInt(var[172]) -> integer var=a[172]:integer in 1
 109[180]: ConstInt(val=13) -> integer
 114[184]: EqInt(v1: integer, v2: integer) -> boolean
 115[177]: GotoFalseWord(jump=121, if_false: boolean)
 118[176]: GotoWord(jump=175)
 121[176]: ClearText(var[148]) var=__work_1[148]:text in 1
 124[176]: ConstText(_value="Incorrect value ") -> text
 142[192]: AppendText(var[148], v1: text)
 145[176]: VarInt(var[172]) -> integer var=a[172]:integer in 1
 148[180]: ConstInt(val=0) -> integer
 153[184]: FormatInt(var[148], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 160[176]: ConstText(_value=" != 13") -> text
 168[192]: AppendText(var[148], v1: text)
 171[176]: VarText(var[148]) -> text var=__work_1[148]:text in 1
 174[192]: Panic(message: text)
 175[176]: Text() var=b[176]:text in 1
 176[200]: VarInt(var[172]) -> integer var=a[172]:integer in 1
 179[204]: ConstInt(val=13) -> integer
 184[208]: EqInt(v1: integer, v2: integer) -> boolean
 185[201]: GotoFalseWord(jump=200, if_false: boolean)
 188[200]: ConstText(_value="Correct") -> text
 197[216]: GotoWord(jump=207)
 200[200]: ConstText(_value="Wrong") -> text
 207[216]: AppendText(var[176], v1: text)
 210[200]: VarText(var[176]) -> text var=b[176]:text in 1
 213[216]: ConstText(_value="Correct") -> text
 222[232]: EqText(v1: text, v2: text) -> boolean
 223[201]: GotoFalseWord(jump=229, if_false: boolean)
 226[200]: GotoWord(jump=248)
 229[200]: ConstText(_value="Logic expression") -> text
 247[216]: Panic(message: text)
 248[200]: ConstInt(val=0) -> integer var=t[200]:integer in 1
 253[204]: ConvIntFromNull() -> integer var=a#index[204]:integer in 8
 254[208]: VarInt(var[204]) -> integer var=a#index[204]:integer in 8
 257[212]: ConvBoolFromInt(v1: integer) -> boolean
 258[209]: Not(v1: boolean) -> boolean
 259[209]: GotoFalseWord(jump=270, if_false: boolean)
 262[208]: ConstInt(val=1) -> integer
 267[212]: GotoWord(jump=279)
 270[208]: VarInt(var[204]) -> integer var=a#index[204]:integer in 8
 273[212]: ConstInt(val=1) -> integer
 278[216]: AddInt(v1: integer, v2: integer) -> integer
 279[212]: PutInt(var[204], value: integer)
 282[208]: VarInt(var[204]) -> integer var=a#index[204]:integer in 8
 285[212]: ConstInt(val=6) -> integer
 290[216]: GeInt(v1: integer, v2: integer) -> boolean
 291[209]: GotoFalseWord(jump=297, if_false: boolean)
 294[208]: GotoWord(jump=316)
 297[208]: VarInt(var[204]) -> integer var=a#index[204]:integer in 8
 300[212]: PutInt(var[172], value: integer)
 303[208]: VarInt(var[200]) -> integer var=t[200]:integer in 1
 306[212]: VarInt(var[172]) -> integer var=a[172]:integer in 1
 309[216]: AddInt(v1: integer, v2: integer) -> integer
 310[212]: PutInt(var[200], value: integer)
 313[208]: GotoWord(jump=254)
 316[208]: FreeStack(value=0, discard=4)
 320[204]: VarInt(var[200]) -> integer var=t[200]:integer in 1
 323[208]: ConstInt(val=15) -> integer
 328[212]: EqInt(v1: integer, v2: integer) -> boolean
 329[205]: GotoFalseWord(jump=335, if_false: boolean)
 332[204]: GotoWord(jump=391)
 335[204]: ClearText(var[124]) var=__work_2[124]:text in 1
 338[204]: ConstText(_value="Total was ") -> text
 350[220]: AppendText(var[124], v1: text)
 353[204]: VarInt(var[200]) -> integer var=t[200]:integer in 1
 356[208]: ConstInt(val=0) -> integer
 361[212]: FormatInt(var[124], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 368[204]: ConstText(_value=" instead of 15") -> text
 384[220]: AppendText(var[124], v1: text)
 387[204]: VarText(var[124]) -> text var=__work_2[124]:text in 1
 390[220]: Panic(message: text)
 391[204]: ConstInt(val=0) -> integer var=t[200]:integer in 1
 396[208]: PutInt(var[200], value: integer)
 399[204]: ConvIntFromNull() -> integer var=a#index[204]:integer in 13
 400[208]: VarInt(var[204]) -> integer var=a#index[204]:integer in 13
 403[212]: ConvBoolFromInt(v1: integer) -> boolean
 404[209]: Not(v1: boolean) -> boolean
 405[209]: GotoFalseWord(jump=416, if_false: boolean)
 408[208]: ConstInt(val=5) -> integer
 413[212]: GotoWord(jump=425)
 416[208]: VarInt(var[204]) -> integer var=a#index[204]:integer in 13
 419[212]: ConstInt(val=1) -> integer
 424[216]: MinInt(v1: integer, v2: integer) -> integer
 425[212]: PutInt(var[204], value: integer)
 428[208]: VarInt(var[204]) -> integer var=a#index[204]:integer in 13
 431[212]: ConstInt(val=1) -> integer
 436[216]: LtInt(v1: integer, v2: integer) -> boolean
 437[209]: GotoFalseWord(jump=443, if_false: boolean)
 440[208]: GotoWord(jump=468)
 443[208]: VarInt(var[204]) -> integer var=a#index[204]:integer in 13
 446[212]: PutInt(var[172], value: integer)
 449[208]: VarInt(var[200]) -> integer var=t[200]:integer in 1
 452[212]: ConstInt(val=10) -> integer
 457[216]: MulInt(v1: integer, v2: integer) -> integer
 458[212]: VarInt(var[172]) -> integer var=a[172]:integer in 1
 461[216]: AddInt(v1: integer, v2: integer) -> integer
 462[212]: PutInt(var[200], value: integer)
 465[208]: GotoWord(jump=400)
 468[208]: FreeStack(value=0, discard=4)
 472[204]: VarInt(var[200]) -> integer var=t[200]:integer in 1
 475[208]: ConstInt(val=54321) -> integer
 480[212]: EqInt(v1: integer, v2: integer) -> boolean
 481[205]: GotoFalseWord(jump=487, if_false: boolean)
 484[204]: GotoWord(jump=547)
 487[204]: ClearText(var[100]) var=__work_3[100]:text in 1
 490[204]: ConstText(_value="Result was ") -> text
 503[220]: AppendText(var[100], v1: text)
 506[204]: VarInt(var[200]) -> integer var=t[200]:integer in 1
 509[208]: ConstInt(val=0) -> integer
 514[212]: FormatInt(var[100], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 521[204]: ConstText(_value=" instead of 54321") -> text
 540[220]: AppendText(var[100], v1: text)
 543[204]: VarText(var[100]) -> text var=__work_3[100]:text in 1
 546[220]: Panic(message: text)
 547[204]: ClearText(var[176]) var=b[176]:text in 1
 550[204]: ConstText(_value="") -> text
 552[220]: AppendText(var[176], v1: text)
 555[204]: ConvIntFromNull() -> integer var=x#index[204]:integer in 18
 556[208]: VarInt(var[204]) -> integer var=x#index[204]:integer in 18
 559[212]: ConvBoolFromInt(v1: integer) -> boolean
 560[209]: Not(v1: boolean) -> boolean
 561[209]: GotoFalseWord(jump=572, if_false: boolean)
 564[208]: ConstInt(val=1) -> integer
 569[212]: GotoWord(jump=581)
 572[208]: VarInt(var[204]) -> integer var=x#index[204]:integer in 18
 575[212]: ConstInt(val=1) -> integer
 580[216]: AddInt(v1: integer, v2: integer) -> integer
 581[212]: PutInt(var[204], value: integer)
 584[208]: VarInt(var[204]) -> integer var=x#index[204]:integer in 18
 587[212]: ConstInt(val=5) -> integer
 592[216]: GeInt(v1: integer, v2: integer) -> boolean
 593[209]: GotoFalseWord(jump=599, if_false: boolean)
 596[208]: GotoWord(jump=783)
 599[208]: VarInt(var[204]) -> integer var=x#index[204]:integer in 18
 602[212]: ConvIntFromNull() -> integer var=y#index[212]:integer in 22
 603[216]: VarInt(var[212]) -> integer var=y#index[212]:integer in 22
 606[220]: ConvBoolFromInt(v1: integer) -> boolean
 607[217]: Not(v1: boolean) -> boolean
 608[217]: GotoFalseWord(jump=619, if_false: boolean)
 611[216]: ConstInt(val=1) -> integer
 616[220]: GotoWord(jump=628)
 619[216]: VarInt(var[212]) -> integer var=y#index[212]:integer in 22
 622[220]: ConstInt(val=1) -> integer
 627[224]: AddInt(v1: integer, v2: integer) -> integer
 628[220]: PutInt(var[212], value: integer)
 631[216]: VarInt(var[212]) -> integer var=y#index[212]:integer in 22
 634[220]: ConstInt(val=5) -> integer
 639[224]: GeInt(v1: integer, v2: integer) -> boolean
 640[217]: GotoFalseWord(jump=646, if_false: boolean)
 643[216]: GotoWord(jump=772)
 646[216]: VarInt(var[212]) -> integer var=y#index[212]:integer in 22
 649[220]: VarInt(var[216]) -> integer var=y[216]:integer in 23
 652[224]: VarInt(var[208]) -> integer var=x[208]:integer in 19
 655[228]: GtInt(v1: integer, v2: integer) -> boolean
 656[221]: GotoFalseWord(jump=666, if_false: boolean)
 659[220]: FreeStack(value=0, discard=4)
 663[216]: GotoWord(jump=772)
 666[220]: VarInt(var[208]) -> integer var=x[208]:integer in 19
 669[224]: VarInt(var[216]) -> integer var=y[216]:integer in 23
 672[228]: MulInt(v1: integer, v2: integer) -> integer
 673[224]: ConstInt(val=16) -> integer
 678[228]: GeInt(v1: integer, v2: integer) -> boolean
 679[221]: GotoFalseWord(jump=689, if_false: boolean)
 682[220]: FreeStack(value=0, discard=12)
 686[208]: GotoWord(jump=783)
 689[220]: VarText(var[176]) -> text var=b[176]:text in 1
 692[236]: Call(size=0, to=318)
 699[224]: ConstInt(val=0) -> integer
 704[228]: GtInt(v1: integer, v2: integer) -> boolean
 705[221]: GotoFalseWord(jump=715, if_false: boolean)
 708[220]: ConstText(_value="; ") -> text
 712[236]: AppendText(var[176], v1: text)
 715[220]: ClearText(var[76]) var=__work_4[76]:text in 1
 718[220]: ConstText(_value="") -> text
 720[236]: AppendText(var[76], v1: text)
 723[220]: VarInt(var[208]) -> integer var=x[208]:integer in 19
 726[224]: ConstInt(val=0) -> integer
 731[228]: FormatInt(var[76], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 738[220]: ConstText(_value=":") -> text
 741[236]: AppendText(var[76], v1: text)
 744[220]: VarInt(var[216]) -> integer var=y[216]:integer in 23
 747[224]: ConstInt(val=0) -> integer
 752[228]: FormatInt(var[76], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 759[220]: VarText(var[76]) -> text var=__work_4[76]:text in 1
 762[236]: AppendText(var[176], v1: text)
 765[220]: FreeStack(value=0, discard=4)
 769[216]: GotoWord(jump=603)
 772[216]: FreeStack(value=0, discard=4)
 776[212]: FreeStack(value=0, discard=4)
 780[208]: GotoWord(jump=556)
 783[208]: FreeStack(value=0, discard=4)
 787[204]: VarText(var[176]) -> text var=b[176]:text in 1
 790[220]: ConstText(_value="1:1; 2:1; 2:2; 3:1; 3:2; 3:3; 4:1; 4:2; 4:3") -> text
 835[236]: EqText(v1: text, v2: text) -> boolean
 836[205]: GotoFalseWord(jump=842, if_false: boolean)
 839[204]: GotoWord(jump=893)
 842[204]: ClearText(var[52]) var=__work_5[52]:text in 1
 845[204]: ConstText(_value="Incorrect sequence '") -> text
 867[220]: AppendText(var[52], v1: text)
 870[204]: VarText(var[176]) -> text var=b[176]:text in 1
 873[220]: ConstInt(val=0) -> integer
 878[224]: FormatText(var[52], val: text, width: integer, dir=-1, token=32)
 883[204]: ConstText(_value="'") -> text
 886[220]: AppendText(var[52], v1: text)
 889[204]: VarText(var[52]) -> text var=__work_5[52]:text in 1
 892[220]: Panic(message: text)
 893[204]: ClearText(var[176]) var=b[176]:text in 1
 896[204]: ConstText(_value="") -> text
 898[220]: AppendText(var[176], v1: text)
 901[204]: ConstInt(val=0) -> integer var=x#count[204]:integer in 31
 906[208]: ConvIntFromNull() -> integer var=x#index[208]:integer in 31
 907[212]: VarInt(var[208]) -> integer var=x#index[208]:integer in 31
 910[216]: ConvBoolFromInt(v1: integer) -> boolean
 911[213]: Not(v1: boolean) -> boolean
 912[213]: GotoFalseWord(jump=923, if_false: boolean)
 915[212]: ConstInt(val=1) -> integer
 920[216]: GotoWord(jump=932)
 923[212]: VarInt(var[208]) -> integer var=x#index[208]:integer in 31
 926[216]: ConstInt(val=1) -> integer
 931[220]: AddInt(v1: integer, v2: integer) -> integer
 932[216]: PutInt(var[208], value: integer)
 935[212]: VarInt(var[208]) -> integer var=x#index[208]:integer in 31
 938[216]: ConstInt(val=9) -> integer
 943[220]: GtInt(v1: integer, v2: integer) -> boolean
 944[213]: GotoFalseWord(jump=950, if_false: boolean)
 947[212]: GotoWord(jump=1070)
 950[212]: VarInt(var[208]) -> integer var=x#index[208]:integer in 31
 953[216]: VarInt(var[212]) -> integer var=x[212]:integer in 32
 956[220]: ConstInt(val=3) -> integer
 961[224]: RemInt(v1: integer, v2: integer) -> integer
 962[220]: ConstInt(val=1) -> integer
 967[224]: NeInt(v1: integer, v2: integer) -> boolean
 968[217]: GotoFalseWord(jump=974, if_false: boolean)
 971[216]: GotoWord(jump=981)
 974[216]: FreeStack(value=0, discard=4)
 978[212]: GotoWord(jump=907)
 981[216]: VarInt(var[204]) -> integer var=x#count[204]:integer in 31
 984[220]: ConstInt(val=0) -> integer
 989[224]: EqInt(v1: integer, v2: integer) -> boolean
 990[217]: Not(v1: boolean) -> boolean
 991[217]: GotoFalseWord(jump=1001, if_false: boolean)
 994[216]: ConstText(_value=", ") -> text
 998[232]: AppendText(var[176], v1: text)
1001[216]: ClearText(var[28]) var=__work_6[28]:text in 1
1004[216]: ConstText(_value="") -> text
1006[232]: AppendText(var[28], v1: text)
1009[216]: VarInt(var[204]) -> integer var=x#count[204]:integer in 31
1012[220]: ConstInt(val=0) -> integer
1017[224]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1024[216]: ConstText(_value=":") -> text
1027[232]: AppendText(var[28], v1: text)
1030[216]: VarInt(var[212]) -> integer var=x[212]:integer in 32
1033[220]: ConstInt(val=0) -> integer
1038[224]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1045[216]: VarText(var[28]) -> text var=__work_6[28]:text in 1
1048[232]: AppendText(var[176], v1: text)
1051[216]: VarInt(var[204]) -> integer var=x#count[204]:integer in 31
1054[220]: ConstInt(val=1) -> integer
1059[224]: AddInt(v1: integer, v2: integer) -> integer
1060[220]: PutInt(var[204], value: integer)
1063[216]: FreeStack(value=0, discard=4)
1067[212]: GotoWord(jump=907)
1070[212]: FreeStack(value=0, discard=8)
1074[204]: VarText(var[176]) -> text var=b[176]:text in 1
1077[220]: ConstText(_value="0:2, 1:3, 2:5, 3:6, 4:8, 5:9") -> text
1107[236]: EqText(v1: text, v2: text) -> boolean
1108[205]: GotoFalseWord(jump=1114, if_false: boolean)
1111[204]: GotoWord(jump=1155)
1114[204]: ClearText(var[4]) var=__work_7[4]:text in 1
1117[204]: ConstText(_value="Sequence '") -> text
1129[220]: AppendText(var[4], v1: text)
1132[204]: VarText(var[176]) -> text var=b[176]:text in 1
1135[220]: ConstInt(val=0) -> integer
1140[224]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
1145[204]: ConstText(_value="'") -> text
1148[220]: AppendText(var[4], v1: text)
1151[204]: VarText(var[4]) -> text var=__work_7[4]:text in 1
1154[220]: Panic(message: text)
1155[204]: FreeText(var[148])
1158[204]: FreeText(var[176])
1161[204]: FreeText(var[124])
1164[204]: FreeText(var[100])
1167[204]: FreeText(var[76])
1170[204]: FreeText(var[52])
1173[204]: FreeText(var[28])
1176[204]: FreeText(var[4])
1179[204]: Return(ret=0, value=0, discard=204)

