fn main() {#block(1):void
  __work_7(1):text = "";
  __work_6(1):text = "";
  __work_5(1):text = "";
  __work_4(1):text = "";
  __work_3(1):text = "";
  __work_2(1):text = "";
  __work_1(1):text = "";
  if OpGtInt(2i32, 5i32) {#block(2):void
    panic("Incorrect test");
  }#block(2):void else null;
  a(1):integer = 12i32;
  if if OpGtInt(a(1), 10i32) OpEqInt(OpLandInt(a(1), 7i32), 4i32) else false {#block(3):void
    a(1):integer = OpAddInt(a(1), 1i32);
  }#block(3):void else {#block(4):void
    a(1):integer = OpMinInt(a(1), 1i32);
  }#block(4):void;
  if OpEqInt(a(1), 13i32) null else OpPanic({#Formatted string(5):text
    __work_1(1):text = "Incorrect value ";
    OpFormatInt(__work_1(1), a(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 13");
    __work_1(1);
  }#Formatted string(5):text);
  b(1):text = if OpEqInt(a(1), 13i32) {#block(6):text
    "Correct";
  }#block(6):text else {#block(7):text
    "Wrong";
  }#block(7):text;
  if OpEqText(b(1), "Correct") null else OpPanic("Logic expression");
  t(1):integer = 0i32;
  {#For block(8):void
    a#index(8):integer = OpConvIntFromNull();
    loop {#For loop_9
      a(1):integer = {#Iter range(10):integer
        a#index(8):integer = if OpNot(OpConvBoolFromInt(a#index(8))) 1i32 else OpAddInt(a#index(8), 1i32);
        if OpGeInt(a#index(8), 6i32) break(0) else null;
        a#index(8);
      }#Iter range(10):integer;
      {#block(11):void
        t(1):integer = OpAddInt(t(1), a(1));
      }#block(11):void;
    }#For loop_9;
  }#For block(8):void;
  if OpEqInt(t(1), 15i32) null else OpPanic({#Formatted string(12):text
    __work_2(1):text = "Total was ";
    OpFormatInt(__work_2(1), t(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2(1), " instead of 15");
    __work_2(1);
  }#Formatted string(12):text);
  t(1):integer = 0i32;
  {#For block(13):void
    a#index(13):integer = OpConvIntFromNull();
    loop {#For loop_14
      a(1):integer = {#Iter range(15):integer
        a#index(13):integer = if OpNot(OpConvBoolFromInt(a#index(13))) 5i32 else OpMinInt(a#index(13), 1i32);
        if OpLtInt(a#index(13), 1i32) break(0) else null;
        a#index(13);
      }#Iter range(15):integer;
      {#block(16):void
        t(1):integer = OpAddInt(OpMulInt(t(1), 10i32), a(1));
      }#block(16):void;
    }#For loop_14;
  }#For block(13):void;
  if OpEqInt(t(1), 54321i32) null else OpPanic({#Formatted string(17):text
    __work_3(1):text = "Result was ";
    OpFormatInt(__work_3(1), t(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_3(1), " instead of 54321");
    __work_3(1);
  }#Formatted string(17):text);
  b(1):text = "";
  {#For block(18):void
    x#index(18):integer = OpConvIntFromNull();
    loop {#For loop_19
      x(19):integer = {#Iter range(20):integer
        x#index(18):integer = if OpNot(OpConvBoolFromInt(x#index(18))) 1i32 else OpAddInt(x#index(18), 1i32);
        if OpGeInt(x#index(18), 5i32) break(0) else null;
        x#index(18);
      }#Iter range(20):integer;
      {#block(21):void
        {#For block(22):void
          y#index(22):integer = OpConvIntFromNull();
          loop {#For loop_23
            y(23):integer = {#Iter range(24):integer
              y#index(22):integer = if OpNot(OpConvBoolFromInt(y#index(22))) 1i32 else OpAddInt(y#index(22), 1i32);
              if OpGeInt(y#index(22), 5i32) break(0) else null;
              y#index(22);
            }#Iter range(24):integer;
            {#block(25):void
              if OpGtInt(y(23), x(19)) {#block(26):void
                break(0);
              }#block(26):void else null;
              if OpGeInt(OpMulInt(x(19), y(23)), 16i32) {#block(27):void
                break(1);
              }#block(27):void else null;
              if OpGtInt(_tp_text_len(b(1)), 0i32) {#block(28):void
                OpAppendText(b(1), "; ");
              }#block(28):void else null;
              OpAppendText(b(1), {#Formatted string(29):text
                __work_4(1):text = "";
                OpFormatInt(__work_4(1), x(19), 10i32, 0i32, 32i32, false, false);
                OpAppendText(__work_4(1), ":");
                OpFormatInt(__work_4(1), y(23), 10i32, 0i32, 32i32, false, false);
                __work_4(1);
              }#Formatted string(29):text);
            }#block(25):void;
          }#For loop_23;
        }#For block(22):void;
      }#block(21):void;
    }#For loop_19;
  }#For block(18):void;
  if OpEqText(b(1), "1:1; 2:1; 2:2; 3:1; 3:2; 3:3; 4:1; 4:2; 4:3") null else OpPanic({#Formatted string(30):text
    __work_5(1):text = "Incorrect sequence '";
    OpFormatText(__work_5(1), b(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_5(1), "'");
    __work_5(1);
  }#Formatted string(30):text);
  b(1):text = "";
  {#For block(31):void
    x#count(31):integer = 0i32;
    x#index(31):integer = OpConvIntFromNull();
    loop {#For loop_32
      x(32):integer = {#Iter range(33):integer
        x#index(31):integer = if OpNot(OpConvBoolFromInt(x#index(31))) 1i32 else OpAddInt(x#index(31), 1i32);
        if OpGtInt(x#index(31), 9i32) break(0) else null;
        x#index(31);
      }#Iter range(33):integer;
      if OpNeInt(OpRemInt(x(32), 3i32), 1i32) null else continue(0);
      {#block(34):void
        if OpNot(OpEqInt(x#count(31), 0i32)) {#block(35):void
          OpAppendText(b(1), ", ");
        }#block(35):void else null;
        OpAppendText(b(1), {#Formatted string(36):text
          __work_6(1):text = "";
          OpFormatInt(__work_6(1), x#count(31), 10i32, 0i32, 32i32, false, false);
          OpAppendText(__work_6(1), ":");
          OpFormatInt(__work_6(1), x(32), 10i32, 0i32, 32i32, false, false);
          __work_6(1);
        }#Formatted string(36):text);
      }#block(34):void;
      x#count(31):integer = OpAddInt(x#count(31), 1i32);
    }#For loop_32;
  }#For block(31):void;
  if OpEqText(b(1), "0:2, 1:3, 2:5, 3:6, 4:8, 5:9") null else OpPanic({#Formatted string(37):text
    __work_7(1):text = "Sequence '";
    OpFormatText(__work_7(1), b(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_7(1), "'");
    __work_7(1);
  }#Formatted string(37):text);
  OpFreeText(__work_1(1));
  OpFreeText(b(1));
  OpFreeText(__work_2(1));
  OpFreeText(__work_3(1));
  OpFreeText(__work_4(1));
  OpFreeText(__work_5(1));
  OpFreeText(__work_6(1));
  OpFreeText(__work_7(1));
}#block(1):void

byte-code for tests/suite/01-keywords.lav:main() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_7[8]:text
   1[32]: Text() var=__work_6[32]:text
   2[56]: Text() var=__work_5[56]:text
   3[80]: Text() var=__work_4[80]:text
   4[104]: Text() var=__work_3[104]:text
   5[128]: Text() var=__work_2[128]:text
   6[152]: Text() var=__work_1[152]:text
   7[176]: ConstInt(val=2) -> integer
  12[180]: ConstInt(val=5) -> integer
  17[184]: GtInt(v1: integer, v2: integer) -> boolean
  18[177]: GotoFalseWord(jump=40, if_false: boolean)
  21[176]: ConstText(_value="Incorrect test") -> text
  37[192]: StaticCall(panic)
  40[176]: ConstInt(val=12) -> integer var=a[176]:integer
  45[180]: VarInt(var[176]) -> integer var=a[176]:integer
  48[184]: ConstInt(val=10) -> integer
  53[188]: GtInt(v1: integer, v2: integer) -> boolean
  54[181]: GotoFalseWord(jump=75, if_false: boolean)
  57[180]: VarInt(var[176]) -> integer var=a[176]:integer
  60[184]: ConstInt(val=7) -> integer
  65[188]: LandInt(v1: integer, v2: integer) -> integer
  66[184]: ConstInt(val=4) -> integer
  71[188]: EqInt(v1: integer, v2: integer) -> boolean
  72[181]: GotoWord(jump=76)
  75[180]: ConstFalse() -> boolean
  76[181]: GotoFalseWord(jump=94, if_false: boolean)
  79[180]: VarInt(var[176]) -> integer var=a[176]:integer
  82[184]: ConstInt(val=1) -> integer
  87[188]: AddInt(v1: integer, v2: integer) -> integer
  88[184]: PutInt(var[176], value: integer)
  91[180]: GotoWord(jump=106)
  94[180]: VarInt(var[176]) -> integer var=a[176]:integer
  97[184]: ConstInt(val=1) -> integer
 102[188]: MinInt(v1: integer, v2: integer) -> integer
 103[184]: PutInt(var[176], value: integer)
 106[180]: VarInt(var[176]) -> integer var=a[176]:integer
 109[184]: ConstInt(val=13) -> integer
 114[188]: EqInt(v1: integer, v2: integer) -> boolean
 115[181]: GotoFalseWord(jump=121, if_false: boolean)
 118[180]: GotoWord(jump=175)
 121[180]: ClearText(var[152]) var=__work_1[152]:text
 124[180]: ConstText(_value="Incorrect value ") -> text
 142[196]: AppendText(var[152], v1: text)
 145[180]: VarInt(var[176]) -> integer var=a[176]:integer
 148[184]: ConstInt(val=0) -> integer
 153[188]: FormatInt(var[152], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 160[180]: ConstText(_value=" != 13") -> text
 168[196]: AppendText(var[152], v1: text)
 171[180]: VarText(var[152]) -> text var=__work_1[152]:text
 174[196]: Panic(message: text)
 175[180]: Text() var=b[180]:text
 176[204]: VarInt(var[176]) -> integer var=a[176]:integer
 179[208]: ConstInt(val=13) -> integer
 184[212]: EqInt(v1: integer, v2: integer) -> boolean
 185[205]: GotoFalseWord(jump=200, if_false: boolean)
 188[204]: ConstText(_value="Correct") -> text
 197[220]: GotoWord(jump=207)
 200[204]: ConstText(_value="Wrong") -> text
 207[220]: AppendText(var[180], v1: text)
 210[204]: VarText(var[180]) -> text var=b[180]:text
 213[220]: ConstText(_value="Correct") -> text
 222[236]: EqText(v1: text, v2: text) -> boolean
 223[205]: GotoFalseWord(jump=229, if_false: boolean)
 226[204]: GotoWord(jump=248)
 229[204]: ConstText(_value="Logic expression") -> text
 247[220]: Panic(message: text)
 248[204]: ConstInt(val=0) -> integer var=t[204]:integer
 253[208]: ConvIntFromNull() -> integer var=a#index[208]:integer
 254[212]: VarInt(var[208]) -> integer var=a#index[208]:integer
 257[216]: ConvBoolFromInt(v1: integer) -> boolean
 258[213]: Not(v1: boolean) -> boolean
 259[213]: GotoFalseWord(jump=270, if_false: boolean)
 262[212]: ConstInt(val=1) -> integer
 267[216]: GotoWord(jump=279)
 270[212]: VarInt(var[208]) -> integer var=a#index[208]:integer
 273[216]: ConstInt(val=1) -> integer
 278[220]: AddInt(v1: integer, v2: integer) -> integer
 279[216]: PutInt(var[208], value: integer)
 282[212]: VarInt(var[208]) -> integer var=a#index[208]:integer
 285[216]: ConstInt(val=6) -> integer
 290[220]: GeInt(v1: integer, v2: integer) -> boolean
 291[213]: GotoFalseWord(jump=297, if_false: boolean)
 294[212]: GotoWord(jump=316)
 297[212]: VarInt(var[208]) -> integer var=a#index[208]:integer
 300[216]: PutInt(var[176], value: integer)
 303[212]: VarInt(var[204]) -> integer var=t[204]:integer
 306[216]: VarInt(var[176]) -> integer var=a[176]:integer
 309[220]: AddInt(v1: integer, v2: integer) -> integer
 310[216]: PutInt(var[204], value: integer)
 313[212]: GotoWord(jump=254)
 316[212]: FreeStack(value=0, discard=4)
 320[208]: VarInt(var[204]) -> integer var=t[204]:integer
 323[212]: ConstInt(val=15) -> integer
 328[216]: EqInt(v1: integer, v2: integer) -> boolean
 329[209]: GotoFalseWord(jump=335, if_false: boolean)
 332[208]: GotoWord(jump=391)
 335[208]: ClearText(var[128]) var=__work_2[128]:text
 338[208]: ConstText(_value="Total was ") -> text
 350[224]: AppendText(var[128], v1: text)
 353[208]: VarInt(var[204]) -> integer var=t[204]:integer
 356[212]: ConstInt(val=0) -> integer
 361[216]: FormatInt(var[128], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 368[208]: ConstText(_value=" instead of 15") -> text
 384[224]: AppendText(var[128], v1: text)
 387[208]: VarText(var[128]) -> text var=__work_2[128]:text
 390[224]: Panic(message: text)
 391[208]: ConstInt(val=0) -> integer var=t[204]:integer
 396[212]: PutInt(var[204], value: integer)
 399[208]: ConvIntFromNull() -> integer var=a#index[208]:integer
 400[212]: VarInt(var[208]) -> integer var=a#index[208]:integer
 403[216]: ConvBoolFromInt(v1: integer) -> boolean
 404[213]: Not(v1: boolean) -> boolean
 405[213]: GotoFalseWord(jump=416, if_false: boolean)
 408[212]: ConstInt(val=5) -> integer
 413[216]: GotoWord(jump=425)
 416[212]: VarInt(var[208]) -> integer var=a#index[208]:integer
 419[216]: ConstInt(val=1) -> integer
 424[220]: MinInt(v1: integer, v2: integer) -> integer
 425[216]: PutInt(var[208], value: integer)
 428[212]: VarInt(var[208]) -> integer var=a#index[208]:integer
 431[216]: ConstInt(val=1) -> integer
 436[220]: LtInt(v1: integer, v2: integer) -> boolean
 437[213]: GotoFalseWord(jump=443, if_false: boolean)
 440[212]: GotoWord(jump=468)
 443[212]: VarInt(var[208]) -> integer var=a#index[208]:integer
 446[216]: PutInt(var[176], value: integer)
 449[212]: VarInt(var[204]) -> integer var=t[204]:integer
 452[216]: ConstInt(val=10) -> integer
 457[220]: MulInt(v1: integer, v2: integer) -> integer
 458[216]: VarInt(var[176]) -> integer var=a[176]:integer
 461[220]: AddInt(v1: integer, v2: integer) -> integer
 462[216]: PutInt(var[204], value: integer)
 465[212]: GotoWord(jump=400)
 468[212]: FreeStack(value=0, discard=4)
 472[208]: VarInt(var[204]) -> integer var=t[204]:integer
 475[212]: ConstInt(val=54321) -> integer
 480[216]: EqInt(v1: integer, v2: integer) -> boolean
 481[209]: GotoFalseWord(jump=487, if_false: boolean)
 484[208]: GotoWord(jump=547)
 487[208]: ClearText(var[104]) var=__work_3[104]:text
 490[208]: ConstText(_value="Result was ") -> text
 503[224]: AppendText(var[104], v1: text)
 506[208]: VarInt(var[204]) -> integer var=t[204]:integer
 509[212]: ConstInt(val=0) -> integer
 514[216]: FormatInt(var[104], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 521[208]: ConstText(_value=" instead of 54321") -> text
 540[224]: AppendText(var[104], v1: text)
 543[208]: VarText(var[104]) -> text var=__work_3[104]:text
 546[224]: Panic(message: text)
 547[208]: ClearText(var[180]) var=b[180]:text
 550[208]: ConstText(_value="") -> text
 552[224]: AppendText(var[180], v1: text)
 555[208]: ConvIntFromNull() -> integer var=x#index[208]:integer
 556[212]: VarInt(var[208]) -> integer var=x#index[208]:integer
 559[216]: ConvBoolFromInt(v1: integer) -> boolean
 560[213]: Not(v1: boolean) -> boolean
 561[213]: GotoFalseWord(jump=572, if_false: boolean)
 564[212]: ConstInt(val=1) -> integer
 569[216]: GotoWord(jump=581)
 572[212]: VarInt(var[208]) -> integer var=x#index[208]:integer
 575[216]: ConstInt(val=1) -> integer
 580[220]: AddInt(v1: integer, v2: integer) -> integer
 581[216]: PutInt(var[208], value: integer)
 584[212]: VarInt(var[208]) -> integer var=x#index[208]:integer
 587[216]: ConstInt(val=5) -> integer
 592[220]: GeInt(v1: integer, v2: integer) -> boolean
 593[213]: GotoFalseWord(jump=599, if_false: boolean)
 596[212]: GotoWord(jump=783)
 599[212]: VarInt(var[208]) -> integer var=x#index[208]:integer
 602[216]: ConvIntFromNull() -> integer var=y#index[216]:integer
 603[220]: VarInt(var[216]) -> integer var=y#index[216]:integer
 606[224]: ConvBoolFromInt(v1: integer) -> boolean
 607[221]: Not(v1: boolean) -> boolean
 608[221]: GotoFalseWord(jump=619, if_false: boolean)
 611[220]: ConstInt(val=1) -> integer
 616[224]: GotoWord(jump=628)
 619[220]: VarInt(var[216]) -> integer var=y#index[216]:integer
 622[224]: ConstInt(val=1) -> integer
 627[228]: AddInt(v1: integer, v2: integer) -> integer
 628[224]: PutInt(var[216], value: integer)
 631[220]: VarInt(var[216]) -> integer var=y#index[216]:integer
 634[224]: ConstInt(val=5) -> integer
 639[228]: GeInt(v1: integer, v2: integer) -> boolean
 640[221]: GotoFalseWord(jump=646, if_false: boolean)
 643[220]: GotoWord(jump=772)
 646[220]: VarInt(var[216]) -> integer var=y#index[216]:integer
 649[224]: VarInt(var[220]) -> integer var=y[220]:integer
 652[228]: VarInt(var[212]) -> integer var=x[212]:integer
 655[232]: GtInt(v1: integer, v2: integer) -> boolean
 656[225]: GotoFalseWord(jump=666, if_false: boolean)
 659[224]: FreeStack(value=0, discard=4)
 663[220]: GotoWord(jump=772)
 666[224]: VarInt(var[212]) -> integer var=x[212]:integer
 669[228]: VarInt(var[220]) -> integer var=y[220]:integer
 672[232]: MulInt(v1: integer, v2: integer) -> integer
 673[228]: ConstInt(val=16) -> integer
 678[232]: GeInt(v1: integer, v2: integer) -> boolean
 679[225]: GotoFalseWord(jump=689, if_false: boolean)
 682[224]: FreeStack(value=0, discard=12)
 686[212]: GotoWord(jump=783)
 689[224]: VarText(var[180]) -> text var=b[180]:text
 692[240]: Call(size=0, to=318)
 699[228]: ConstInt(val=0) -> integer
 704[232]: GtInt(v1: integer, v2: integer) -> boolean
 705[225]: GotoFalseWord(jump=715, if_false: boolean)
 708[224]: ConstText(_value="; ") -> text
 712[240]: AppendText(var[180], v1: text)
 715[224]: ClearText(var[80]) var=__work_4[80]:text
 718[224]: ConstText(_value="") -> text
 720[240]: AppendText(var[80], v1: text)
 723[224]: VarInt(var[212]) -> integer var=x[212]:integer
 726[228]: ConstInt(val=0) -> integer
 731[232]: FormatInt(var[80], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 738[224]: ConstText(_value=":") -> text
 741[240]: AppendText(var[80], v1: text)
 744[224]: VarInt(var[220]) -> integer var=y[220]:integer
 747[228]: ConstInt(val=0) -> integer
 752[232]: FormatInt(var[80], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 759[224]: VarText(var[80]) -> text var=__work_4[80]:text
 762[240]: AppendText(var[180], v1: text)
 765[224]: FreeStack(value=0, discard=4)
 769[220]: GotoWord(jump=603)
 772[220]: FreeStack(value=0, discard=4)
 776[216]: FreeStack(value=0, discard=4)
 780[212]: GotoWord(jump=556)
 783[212]: FreeStack(value=0, discard=4)
 787[208]: VarText(var[180]) -> text var=b[180]:text
 790[224]: ConstText(_value="1:1; 2:1; 2:2; 3:1; 3:2; 3:3; 4:1; 4:2; 4:3") -> text
 835[240]: EqText(v1: text, v2: text) -> boolean
 836[209]: GotoFalseWord(jump=842, if_false: boolean)
 839[208]: GotoWord(jump=893)
 842[208]: ClearText(var[56]) var=__work_5[56]:text
 845[208]: ConstText(_value="Incorrect sequence '") -> text
 867[224]: AppendText(var[56], v1: text)
 870[208]: VarText(var[180]) -> text var=b[180]:text
 873[224]: ConstInt(val=0) -> integer
 878[228]: FormatText(var[56], val: text, width: integer, dir=-1, token=32)
 883[208]: ConstText(_value="'") -> text
 886[224]: AppendText(var[56], v1: text)
 889[208]: VarText(var[56]) -> text var=__work_5[56]:text
 892[224]: Panic(message: text)
 893[208]: ClearText(var[180]) var=b[180]:text
 896[208]: ConstText(_value="") -> text
 898[224]: AppendText(var[180], v1: text)
 901[208]: ConstInt(val=0) -> integer var=x#count[208]:integer
 906[212]: ConvIntFromNull() -> integer var=x#index[212]:integer
 907[216]: VarInt(var[212]) -> integer var=x#index[212]:integer
 910[220]: ConvBoolFromInt(v1: integer) -> boolean
 911[217]: Not(v1: boolean) -> boolean
 912[217]: GotoFalseWord(jump=923, if_false: boolean)
 915[216]: ConstInt(val=1) -> integer
 920[220]: GotoWord(jump=932)
 923[216]: VarInt(var[212]) -> integer var=x#index[212]:integer
 926[220]: ConstInt(val=1) -> integer
 931[224]: AddInt(v1: integer, v2: integer) -> integer
 932[220]: PutInt(var[212], value: integer)
 935[216]: VarInt(var[212]) -> integer var=x#index[212]:integer
 938[220]: ConstInt(val=9) -> integer
 943[224]: GtInt(v1: integer, v2: integer) -> boolean
 944[217]: GotoFalseWord(jump=950, if_false: boolean)
 947[216]: GotoWord(jump=1070)
 950[216]: VarInt(var[212]) -> integer var=x#index[212]:integer
 953[220]: VarInt(var[216]) -> integer var=x[216]:integer
 956[224]: ConstInt(val=3) -> integer
 961[228]: RemInt(v1: integer, v2: integer) -> integer
 962[224]: ConstInt(val=1) -> integer
 967[228]: NeInt(v1: integer, v2: integer) -> boolean
 968[221]: GotoFalseWord(jump=974, if_false: boolean)
 971[220]: GotoWord(jump=981)
 974[220]: FreeStack(value=0, discard=4)
 978[216]: GotoWord(jump=907)
 981[220]: VarInt(var[208]) -> integer var=x#count[208]:integer
 984[224]: ConstInt(val=0) -> integer
 989[228]: EqInt(v1: integer, v2: integer) -> boolean
 990[221]: Not(v1: boolean) -> boolean
 991[221]: GotoFalseWord(jump=1001, if_false: boolean)
 994[220]: ConstText(_value=", ") -> text
 998[236]: AppendText(var[180], v1: text)
1001[220]: ClearText(var[32]) var=__work_6[32]:text
1004[220]: ConstText(_value="") -> text
1006[236]: AppendText(var[32], v1: text)
1009[220]: VarInt(var[208]) -> integer var=x#count[208]:integer
1012[224]: ConstInt(val=0) -> integer
1017[228]: FormatInt(var[32], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1024[220]: ConstText(_value=":") -> text
1027[236]: AppendText(var[32], v1: text)
1030[220]: VarInt(var[216]) -> integer var=x[216]:integer
1033[224]: ConstInt(val=0) -> integer
1038[228]: FormatInt(var[32], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1045[220]: VarText(var[32]) -> text var=__work_6[32]:text
1048[236]: AppendText(var[180], v1: text)
1051[220]: VarInt(var[208]) -> integer var=x#count[208]:integer
1054[224]: ConstInt(val=1) -> integer
1059[228]: AddInt(v1: integer, v2: integer) -> integer
1060[224]: PutInt(var[208], value: integer)
1063[220]: FreeStack(value=0, discard=4)
1067[216]: GotoWord(jump=907)
1070[216]: FreeStack(value=0, discard=8)
1074[208]: VarText(var[180]) -> text var=b[180]:text
1077[224]: ConstText(_value="0:2, 1:3, 2:5, 3:6, 4:8, 5:9") -> text
1107[240]: EqText(v1: text, v2: text) -> boolean
1108[209]: GotoFalseWord(jump=1114, if_false: boolean)
1111[208]: GotoWord(jump=1155)
1114[208]: ClearText(var[8]) var=__work_7[8]:text
1117[208]: ConstText(_value="Sequence '") -> text
1129[224]: AppendText(var[8], v1: text)
1132[208]: VarText(var[180]) -> text var=b[180]:text
1135[224]: ConstInt(val=0) -> integer
1140[228]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
1145[208]: ConstText(_value="'") -> text
1148[224]: AppendText(var[8], v1: text)
1151[208]: VarText(var[8]) -> text var=__work_7[8]:text
1154[224]: Panic(message: text)
1155[208]: FreeText(var[152])
1158[208]: FreeText(var[180])
1161[208]: FreeText(var[128])
1164[208]: FreeText(var[104])
1167[208]: FreeText(var[80])
1170[208]: FreeText(var[56])
1173[208]: FreeText(var[32])
1176[208]: FreeText(var[8])
1179[208]: Return(ret=0, value=0, discard=204)

