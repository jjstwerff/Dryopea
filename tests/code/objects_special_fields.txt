enum Gender { Male, Female, Fluid }
struct Object{a: vector<integer>, b: Gender}
fn sum(o: Object) -> integer {
  r = 0;
  for v in o.a { r += v; };
  r
}

pub fn test() {
    test_value = {  o = Object {a: [1,4,3], b: Fluid};
  o.a += [sum(o)];
  "{o}"};
    assert(
        test_value == "{{a:[1,4,3,8],b:Fluid}}",
        "Test failed {test_value} != \"{{a:[1,4,3,8],b:Fluid}}\""
    );
}
Type 11:vector<integer>[4]:Vector(0)

Type 12:Gender[1]:Enum(["Male", "Female", "Fluid"])

Type 13:Object[9]:
    a:vector<integer>[4]
    b:Gender[8]

fn sum(o:Object) -> integer {#1 block
  r:integer = 0i32;
  {#2 for
    v#index:integer = 0i32;
    loop {#3 for loop
      v:integer = if OpGeInt(v#index, OpLengthVector(OpGetField(o, 4i32, 11i32))) OpConvIntFromNull() else {#4 iter next
        _res_1:integer = OpGetInt(OpGetVector(OpGetField(o, 4i32, 11i32), 4i32, v#index), 0i32);
        v#index:integer = OpAddInt(v#index, 1i32);
        _res_1;
      }#4:integer;
      if OpNot(OpConvBoolFromInt(v)) break(0) else null;
      {#5 block
        r:integer = OpAddInt(r, v);
      }#5;
    }#3;
  }#2;
  r;
}#1:integer

byte-code for special_fields:sum(o: Object[0]) -> integer
 682[12]: return-address
 682[16]: ConstInt(val=0) -> integer
 687[20]: ConstInt(val=0) -> integer
 692[24]: VarInt(var[20]) -> integer
 695[28]: VarRef(var[0]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 698[40]: GetField(v1: reference, fld=4) -> reference type=vector<integer>[4]:Vector(0)[11]
 701[40]: LengthVector(r: vector#[]) -> integer
 702[32]: GeInt(v1: integer, v2: integer) -> boolean
 703[25]: GotoFalseWord(jump=710, if_false: boolean)
 706[24]: ConvIntFromNull() -> integer
 707[28]: GotoWord(jump=744)
 710[24]: VarRef(var[0]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 713[36]: GetField(v1: reference, fld=4) -> reference type=vector<integer>[4]:Vector(0)[11]
 716[36]: VarInt(var[20]) -> integer
 719[40]: GetVector(r: vector#[], size=4, index: integer) -> reference
 722[36]: GetInt(v1: reference, fld=0) -> integer
 725[28]: VarInt(var[20]) -> integer
 728[32]: ConstInt(val=1) -> integer
 733[36]: AddInt(v1: integer, v2: integer) -> integer
 734[32]: PutInt(var[20], value: integer)
 737[28]: VarInt(var[24]) -> integer
 740[32]: FreeStack(value=4, discard=4) type=integer[4]:Base[0]
 744[28]: VarInt(var[24]) -> integer
 747[32]: ConvBoolFromInt(v1: integer) -> boolean
 748[29]: Not(v1: boolean) -> boolean
 749[29]: GotoFalseWord(jump=759, if_false: boolean)
 752[28]: FreeStack(value=0, discard=4)
 756[24]: GotoWord(jump=776)
 759[28]: VarInt(var[16]) -> integer
 762[32]: VarInt(var[24]) -> integer
 765[36]: AddInt(v1: integer, v2: integer) -> integer
 766[32]: PutInt(var[16], value: integer)
 769[28]: FreeStack(value=0, discard=4)
 773[24]: GotoWord(jump=692)
 776[24]: FreeStack(value=0, discard=4)
 780[20]: VarInt(var[16]) -> integer
 783[24]: Return(ret=12, value=4, discard=24) type=integer[4]:Base[0]

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    o:Object = {#3 object
      _val_1:Object = OpDatabase(9i32, 13i32);
      OpSetInt(_val_1, 4i32, 0i32);
      {#4 vector
        _elm_2:boolean = OpNewRecord(_val_1, 13i32, 0i32);
        OpSetInt(_elm_2, 0i32, 1i32);
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2:boolean = OpNewRecord(_val_1, 13i32, 0i32);
        OpSetInt(_elm_2, 0i32, 4i32);
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2:boolean = OpNewRecord(_val_1, 13i32, 0i32);
        OpSetInt(_elm_2, 0i32, 3i32);
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
      }#4;
      OpSetEnum(_val_1, 8i32, 3u8(12));
      _val_1;
    }#3:Object;
    {#5 vector
      _elm_3:boolean = OpNewRecord(o, 13i32, 0i32);
      OpSetInt(_elm_3, 0i32, sum(o));
      OpFinishRecord(o, _elm_3, 13i32, 0i32);
    }#5;
    {#6 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, o, 13i32, false);
      __work_1;
    }#6:text;
  }#2:text;
  if OpEqText(test_value, "{a:[1,4,3,8],b:Fluid}") null else OpPanic({#7 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "{a:[1,4,3,8],b:Fluid}"");
    __work_2;
  }#7:text);
}#1

byte-code for special_fields:test()
 789[0]: return-address
 789[4]: Text()
 790[28]: Text()
 791[52]: Text()
 792[76]: Database(size=9, db_tp=13) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 797[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 800[100]: ConstInt(val=0) -> integer
 805[104]: SetInt(v1: reference, fld=4, val: integer)
 808[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 811[100]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 816[100]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 819[112]: ConstInt(val=1) -> integer
 824[116]: SetInt(v1: reference, fld=0, val: integer)
 827[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 830[112]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 833[124]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 838[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 841[112]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 846[112]: PutRef(var[88], value: reference)
 849[100]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 852[112]: ConstInt(val=4) -> integer
 857[116]: SetInt(v1: reference, fld=0, val: integer)
 860[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 863[112]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 866[124]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 871[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 874[112]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 879[112]: PutRef(var[88], value: reference)
 882[100]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 885[112]: ConstInt(val=3) -> integer
 890[116]: SetInt(v1: reference, fld=0, val: integer)
 893[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 896[112]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 899[124]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 904[100]: FreeStack(value=0, discard=12)
 908[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 911[100]: ConstEnum(val=3) -> enumerate type=Gender[1]:Enum(["Male", "Female", "Fluid"])[12]
 913[101]: SetEnum(v1: reference, fld=8, val: enumerate)
 916[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 919[100]: FreeStack(value=12, discard=12) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 923[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 926[100]: NewRecord(data: reference, parent_tp=13, fld=0) -> reference
 931[100]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 934[112]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 937[124]: Call(size=0, to=682)
 944[116]: SetInt(v1: reference, fld=0, val: integer)
 947[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 950[112]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 953[124]: FinishRecord(data: reference, rec: reference, parent_tp=13, fld=0)
 958[100]: FreeStack(value=0, discard=12)
 962[88]: ClearText(var[28])
 965[88]: ConstText(_value="") -> text
 967[104]: AppendText(var[28], v1: text)
 970[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 973[100]: FormatDatabase(var[28], val: reference, db_tp=13, pretty=false)
 979[88]: VarText(var[28]) -> text
 982[104]: FreeStack(value=16, discard=12) type=text[4]:Base[5]
 986[92]: AppendText(var[52], v1: text)
 989[76]: VarText(var[52]) -> text
 992[92]: ConstText(_value="{a:[1,4,3,8],b:Fluid}") -> text
1015[108]: EqText(v1: text, v2: text) -> boolean
1016[77]: GotoFalseWord(jump=1022, if_false: boolean)
1019[76]: GotoWord(jump=1091)
1022[76]: ClearText(var[4])
1025[76]: ConstText(_value="Test failed ") -> text
1039[92]: AppendText(var[4], v1: text)
1042[76]: VarText(var[52]) -> text
1045[92]: ConstInt(val=0) -> integer
1050[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
1055[76]: ConstText(_value=" != "{a:[1,4,3,8],b:Fluid}"") -> text
1084[92]: AppendText(var[4], v1: text)
1087[76]: VarText(var[4]) -> text
1090[92]: Panic(message: text)
1091[76]: Return(ret=0, value=0, discard=76)

Execute test:
  789:[8] Text()
  790:[32] Text()
  791:[56] Text()
  792:[80] Database(size=9, db_tp=13) -> ref(1,1,0)={}[80]
  797:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  800:[104] ConstInt(val=0) -> 0[104]
  805:[108] SetInt(v1=ref(1,1,0)[92], fld=4, val=0[104])
  808:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  811:[104] NewRecord(data=ref(1,1,0)[92], parent_tp=13, fld=0) -> ref(1,10,8)[92]
  816:[104] VarRef(var[92]) -> ref(1,10,8)=false[104]
  819:[116] ConstInt(val=1) -> 1[116]
  824:[120] SetInt(v1=ref(1,10,8)[104], fld=0, val=1[116])
  827:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1]}[104]
  830:[116] VarRef(var[92]) -> ref(1,10,8)=true[116]
  833:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,8)[116], parent_tp=13, fld=0)
  838:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1]}[104]
  841:[116] NewRecord(data=ref(1,1,0)[104], parent_tp=13, fld=0) -> ref(1,10,12)[104]
  846:[116] PutRef(var[92], value=ref(1,10,12)[104])
  849:[104] VarRef(var[92]) -> ref(1,10,12)=false[104]
  852:[116] ConstInt(val=4) -> 4[116]
  857:[120] SetInt(v1=ref(1,10,12)[104], fld=0, val=4[116])
  860:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4]}[104]
  863:[116] VarRef(var[92]) -> ref(1,10,12)=true[116]
  866:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,12)[116], parent_tp=13, fld=0)
  871:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4]}[104]
  874:[116] NewRecord(data=ref(1,1,0)[104], parent_tp=13, fld=0) -> ref(1,10,16)[104]
  879:[116] PutRef(var[92], value=ref(1,10,16)[104])
  882:[104] VarRef(var[92]) -> ref(1,10,16)=false[104]
  885:[116] ConstInt(val=3) -> 3[116]
  890:[120] SetInt(v1=ref(1,10,16)[104], fld=0, val=3[116])
  893:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3]}[104]
  896:[116] VarRef(var[92]) -> ref(1,10,16)=true[116]
  899:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,16)[116], parent_tp=13, fld=0)
  904:[104] FreeStack(value=0, discard=12)
  908:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3]}[92]
  911:[104] ConstEnum(val=3) -> Fluid(3)[104]
  913:[105] SetEnum(v1=ref(1,1,0)[92], fld=8, val=3[104])
  916:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3],b:Fluid}[92]
  919:[104] FreeStack(value=12, discard=12)
  923:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3],b:Fluid}[92]
  926:[104] NewRecord(data=ref(1,1,0)[92], parent_tp=13, fld=0) -> ref(1,10,20)[92]
  931:[104] VarRef(var[92]) -> ref(1,10,20)=false[104]
  934:[116] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[116]
  937:[128] Call(size=0, to=682)
  682:[132] ConstInt(val=0) -> 0[132]
  687:[136] ConstInt(val=0) -> 0[136]
  692:[140] VarInt(var[136]) -> 0[140]
  695:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  698:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  701:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  702:[148] GeInt(v1=0[140], v2=4[144]) -> false[140]
  703:[141] GotoFalseWord(jump=710, if_false=false[140])
  710:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  713:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  716:[152] VarInt(var[136]) -> 0[152]
  719:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=0[152]) -> ref(1,10,8)[140]
  722:[152] GetInt(v1=ref(1,10,8)[140], fld=0) -> 1[140]
  725:[144] VarInt(var[136]) -> 0[144]
  728:[148] ConstInt(val=1) -> 1[148]
  733:[152] AddInt(v1=0[144], v2=1[148]) -> 1[144]
  734:[148] PutInt(var[136], value=1[144])
  737:[144] VarInt(var[140]) -> 1[144]
  740:[148] FreeStack(value=4, discard=4)
  744:[144] VarInt(var[140]) -> 1[144]
  747:[148] ConvBoolFromInt(v1=1[144]) -> true[144]
  748:[145] Not(v1=true[144]) -> false[144]
  749:[145] GotoFalseWord(jump=759, if_false=false[144])
  759:[144] VarInt(var[132]) -> 0[144]
  762:[148] VarInt(var[140]) -> 1[148]
  765:[152] AddInt(v1=0[144], v2=1[148]) -> 1[144]
  766:[148] PutInt(var[132], value=1[144])
  769:[144] FreeStack(value=0, discard=4)
  773:[140] GotoWord(jump=692)
  692:[140] VarInt(var[136]) -> 1[140]
  695:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  698:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  701:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  702:[148] GeInt(v1=1[140], v2=4[144]) -> false[140]
  703:[141] GotoFalseWord(jump=710, if_false=false[140])
  710:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  713:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  716:[152] VarInt(var[136]) -> 1[152]
  719:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=1[152]) -> ref(1,10,12)[140]
  722:[152] GetInt(v1=ref(1,10,12)[140], fld=0) -> 4[140]
  725:[144] VarInt(var[136]) -> 1[144]
  728:[148] ConstInt(val=1) -> 1[148]
  733:[152] AddInt(v1=1[144], v2=1[148]) -> 2[144]
  734:[148] PutInt(var[136], value=2[144])
  737:[144] VarInt(var[140]) -> 4[144]
  740:[148] FreeStack(value=4, discard=4)
  744:[144] VarInt(var[140]) -> 4[144]
  747:[148] ConvBoolFromInt(v1=4[144]) -> true[144]
  748:[145] Not(v1=true[144]) -> false[144]
  749:[145] GotoFalseWord(jump=759, if_false=false[144])
  759:[144] VarInt(var[132]) -> 1[144]
  762:[148] VarInt(var[140]) -> 4[148]
  765:[152] AddInt(v1=1[144], v2=4[148]) -> 5[144]
  766:[148] PutInt(var[132], value=5[144])
  769:[144] FreeStack(value=0, discard=4)
  773:[140] GotoWord(jump=692)
  692:[140] VarInt(var[136]) -> 2[140]
  695:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  698:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  701:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  702:[148] GeInt(v1=2[140], v2=4[144]) -> false[140]
  703:[141] GotoFalseWord(jump=710, if_false=false[140])
  710:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  713:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  716:[152] VarInt(var[136]) -> 2[152]
  719:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=2[152]) -> ref(1,10,16)[140]
  722:[152] GetInt(v1=ref(1,10,16)[140], fld=0) -> 3[140]
  725:[144] VarInt(var[136]) -> 2[144]
  728:[148] ConstInt(val=1) -> 1[148]
  733:[152] AddInt(v1=2[144], v2=1[148]) -> 3[144]
  734:[148] PutInt(var[136], value=3[144])
  737:[144] VarInt(var[140]) -> 3[144]
  740:[148] FreeStack(value=4, discard=4)
  744:[144] VarInt(var[140]) -> 3[144]
  747:[148] ConvBoolFromInt(v1=3[144]) -> true[144]
  748:[145] Not(v1=true[144]) -> false[144]
  749:[145] GotoFalseWord(jump=759, if_false=false[144])
  759:[144] VarInt(var[132]) -> 5[144]
  762:[148] VarInt(var[140]) -> 3[148]
  765:[152] AddInt(v1=5[144], v2=3[148]) -> 8[144]
  766:[148] PutInt(var[132], value=8[144])
  769:[144] FreeStack(value=0, discard=4)
  773:[140] GotoWord(jump=692)
  692:[140] VarInt(var[136]) -> 3[140]
  695:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  698:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  701:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  702:[148] GeInt(v1=3[140], v2=4[144]) -> false[140]
  703:[141] GotoFalseWord(jump=710, if_false=false[140])
  710:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  713:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  716:[152] VarInt(var[136]) -> 3[152]
  719:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=3[152]) -> ref(1,10,20)[140]
  722:[152] GetInt(v1=ref(1,10,20)[140], fld=0) -> -2147483648[140]
  725:[144] VarInt(var[136]) -> 3[144]
  728:[148] ConstInt(val=1) -> 1[148]
  733:[152] AddInt(v1=3[144], v2=1[148]) -> 4[144]
  734:[148] PutInt(var[136], value=4[144])
  737:[144] VarInt(var[140]) -> -2147483648[144]
  740:[148] FreeStack(value=4, discard=4)
  744:[144] VarInt(var[140]) -> -2147483648[144]
  747:[148] ConvBoolFromInt(v1=-2147483648[144]) -> false[144]
  748:[145] Not(v1=false[144]) -> true[144]
  749:[145] GotoFalseWord(jump=759, if_false=true[144])
  752:[144] FreeStack(value=0, discard=4)
  756:[140] GotoWord(jump=776)
  776:[140] FreeStack(value=0, discard=4)
  780:[136] VarInt(var[132]) -> 8[136]
  783:[140] Return(ret=944[128], value=4, discard=24) -> 8[116]
  944:[120] SetInt(v1=ref(1,10,20)[104], fld=0, val=8[116])
  947:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3,8],b:Fluid}[104]
  950:[116] VarRef(var[92]) -> ref(1,10,20)=true[116]
  953:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,20)[116], parent_tp=13, fld=0)
  958:[104] FreeStack(value=0, discard=12)
  962:[92] ClearText(var[32])
  965:[92] ConstText(_value="") -> ""[92]
  967:[108] AppendText(var[32], v1=""[92])
  970:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3,8],b:Fluid}[92]
  973:[104] FormatDatabase(var[32], val=ref(1,1,0)[92], db_tp=13, pretty=false)
  979:[92] VarText(var[32]) -> "{a:[1,4,3,8],b:Fluid}"[92]
  982:[108] FreeStack(value=16, discard=12)
  986:[96] AppendText(var[56], v1="{a:[1,4,3,8],b:Fluid}"[80])
  989:[80] VarText(var[56]) -> "{a:[1,4,3,8],b:Fluid}"[80]
  992:[96] ConstText(_value="{a:[1,4,3,8],b:Fluid}") -> "{a:[1,4,3,8],b:Fluid}"[96]
 1015:[112] EqText(v1="{a:[1,4,3,8],b:Fluid}"[80], v2="{a:[1,4,3,8],b:Fluid}"[96]) -> true[80]
 1016:[81] GotoFalseWord(jump=1022, if_false=true[80])
 1019:[80] GotoWord(jump=1091)
 1091:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
