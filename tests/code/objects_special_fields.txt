enum Gender { Male, Female, Fluid }
struct Object{a: vector<integer>, b: Gender}
fn sum(o: Object) -> integer {
  r = 0;
  for v in o.a { r += v; };
  r
}

pub fn test() {
    test_value = {  o = Object {a: [1,4,3], b: Fluid};
  o.a += [sum(o)];
  "{o}"};
    assert(
        test_value == "{{a:[1,4,3,8],b:Fluid}}",
        "Test failed {test_value} != \"{{a:[1,4,3,8],b:Fluid}}\""
    );
}
Type 17:vector<integer>[4]:Vector(0)

Type 18:Gender[1]:Enum(["Male", "Female", "Fluid"])

Type 19:Object[9]:
    a:vector<integer>[4]
    b:Gender[8]

fn sum(o:Object) -> integer {#1 block
  r:integer = 0i32;
  {#2 for
    _vector_1:vector<integer>["o"] = OpGetField(o, 4i32, 17i32);
    v#index:integer = -1i32;
    loop {#3 for loop
      v:integer = {#4 iter next
        v#index:integer = OpAddInt(v#index, 1i32);
        OpGetInt(OpGetVector(_vector_1, 4i32, v#index), 0i32);
      }#4:integer;
      if OpNot(OpConvBoolFromInt(v)) break(0) else null;
      {#5 block
        r:integer = OpAddInt(r, v);
      }#5;
    }#3;
  }#2;
  r;
}#1:integer

byte-code for special_fields:sum(o: ref(Object)[0]) [1176] -> integer
   0[12]: return-address
   0[16]: ConstInt(val=0) -> integer var=r[16]:integer in 1
   5[20]: VarRef(var[0]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[0]:ref(Object) in 0
   8[32]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=vector<integer>[4]:Vector(0)[17]
  11[32]: ConstInt(val=-1) -> integer var=v#index[32]:integer in 2
  16[36]: VarInt(var[32]) -> integer var=v#index[32]:integer in 2
  19[40]: ConstInt(val=1) -> integer
  24[44]: AddInt(v1: integer, v2: integer) -> integer
  25[40]: PutInt(var[32], value: integer)
  28[36]: VarVector(var[20]) -> vector type=vector<integer>[4]:Vector(0)[17] var=_vector_1[20]:vector<integer>["o"] in 2
  31[48]: VarInt(var[32]) -> integer var=v#index[32]:integer in 2
  34[52]: GetVector(r: vector, size=4, index: integer) -> ref(reference) type=integer[4]:Base[0]
  37[48]: GetInt(v1: ref(reference), fld=0) -> integer
  40[40]: VarInt(var[36]) -> integer var=v[36]:integer in 3
  43[44]: ConvBoolFromInt(v1: integer) -> boolean
  44[41]: Not(v1: boolean) -> boolean
  45[41]: GotoFalseWord(jump=55, if_false: boolean)
  48[40]: FreeStack(value=0, discard=4)
  52[36]: GotoWord(jump=72)
  55[40]: VarInt(var[16]) -> integer var=r[16]:integer in 1
  58[44]: VarInt(var[36]) -> integer var=v[36]:integer in 3
  61[48]: AddInt(v1: integer, v2: integer) -> integer
  62[44]: PutInt(var[16], value: integer)
  65[40]: FreeStack(value=0, discard=4)
  69[36]: GotoWord(jump=16)
  72[36]: FreeStack(value=0, discard=16)
  76[20]: VarInt(var[16]) -> integer var=r[16]:integer in 1
  79[24]: Return(ret=12, value=4, discard=24) type=integer[4]:Base[0]

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    o:ref(Object)["o"] = OpConvRefFromNull();
    OpDatabase(o, 19i32);
    OpSetInt(o, 4i32, 0i32);
    _elm_1:ref(boolean)["o"] = OpNewRecord(o, 19i32, 0i32);
    OpSetInt(_elm_1, 0i32, 1i32);
    OpFinishRecord(o, _elm_1, 19i32, 0i32);
    _elm_1:ref(boolean)["o"] = OpNewRecord(o, 19i32, 0i32);
    OpSetInt(_elm_1, 0i32, 4i32);
    OpFinishRecord(o, _elm_1, 19i32, 0i32);
    _elm_1:ref(boolean)["o"] = OpNewRecord(o, 19i32, 0i32);
    OpSetInt(_elm_1, 0i32, 3i32);
    OpFinishRecord(o, _elm_1, 19i32, 0i32);
    OpSetEnum(o, 8i32, 3u8(18));
    _elm_2:ref(boolean)["o"] = OpNewRecord(o, 19i32, 0i32);
    OpSetInt(_elm_2, 0i32, sum(o));
    OpFinishRecord(o, _elm_2, 19i32, 0i32);
    {#3 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, o, 19i32, false);
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "{a:[1,4,3,8],b:Fluid}") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "{a:[1,4,3,8],b:Fluid}"");
    __work_2;
  }#4:text);
}#1

byte-code for special_fields:test() [1261]
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=test_value[52]:text in 1
   3[76]: ConvRefFromNull() -> ref(reference) var=o[76]:ref(Object)["o"] in 2
   4[88]: Database(var[76], db_tp=19) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19]
   9[88]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
  12[100]: ConstInt(val=0) -> integer
  17[104]: SetInt(v1: ref(reference), fld=4, val: integer)
  20[88]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
  23[100]: NewRecord(data: ref(reference), parent_tp=19, fld=0) -> ref(reference)
  28[100]: VarRef(var[88]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[88]:ref(boolean)["o"] in 2
  31[112]: ConstInt(val=1) -> integer
  36[116]: SetInt(v1: ref(reference), fld=0, val: integer)
  39[100]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
  42[112]: VarRef(var[88]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[88]:ref(boolean)["o"] in 2
  45[124]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=0)
  50[100]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
  53[112]: NewRecord(data: ref(reference), parent_tp=19, fld=0) -> ref(reference)
  58[112]: PutRef(var[88], value: ref(reference))
  61[100]: VarRef(var[88]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[88]:ref(boolean)["o"] in 2
  64[112]: ConstInt(val=4) -> integer
  69[116]: SetInt(v1: ref(reference), fld=0, val: integer)
  72[100]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
  75[112]: VarRef(var[88]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[88]:ref(boolean)["o"] in 2
  78[124]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=0)
  83[100]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
  86[112]: NewRecord(data: ref(reference), parent_tp=19, fld=0) -> ref(reference)
  91[112]: PutRef(var[88], value: ref(reference))
  94[100]: VarRef(var[88]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[88]:ref(boolean)["o"] in 2
  97[112]: ConstInt(val=3) -> integer
 102[116]: SetInt(v1: ref(reference), fld=0, val: integer)
 105[100]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
 108[112]: VarRef(var[88]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_1[88]:ref(boolean)["o"] in 2
 111[124]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=0)
 116[100]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
 119[112]: ConstEnum(val=3) -> enumerate type=Gender[1]:Enum(["Male", "Female", "Fluid"])[18]
 121[113]: SetEnum(v1: ref(reference), fld=8, val: enumerate)
 124[100]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
 127[112]: NewRecord(data: ref(reference), parent_tp=19, fld=0) -> ref(reference)
 132[112]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["o"] in 2
 135[124]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
 138[136]: Call(size=0, to=1176)
 145[128]: SetInt(v1: ref(reference), fld=0, val: integer)
 148[112]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
 151[124]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["o"] in 2
 154[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=19, fld=0)
 159[112]: ClearText(var[28]) var=__work_1[28]:text in 1
 162[112]: ConstText(_value="") -> text
 164[128]: AppendText(var[28], v1: text)
 167[112]: VarRef(var[76]) -> ref(reference) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[19] var=o[76]:ref(Object)["o"] in 2
 170[124]: FormatDatabase(var[28], val: ref(reference), db_tp=19, pretty=false)
 176[112]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 179[128]: FreeStack(value=16, discard=52) type=text[4]:Base[5]
 183[92]: AppendText(var[52], v1: text)
 186[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 189[92]: ConstText(_value="{a:[1,4,3,8],b:Fluid}") -> text
 212[108]: EqText(v1: text, v2: text) -> boolean
 213[77]: GotoFalseWord(jump=219, if_false: boolean)
 216[76]: GotoWord(jump=288)
 219[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 222[76]: ConstText(_value="Test failed ") -> text
 236[92]: AppendText(var[4], v1: text)
 239[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 242[92]: ConstInt(val=0) -> integer
 247[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 252[76]: ConstText(_value=" != "{a:[1,4,3,8],b:Fluid}"") -> text
 281[92]: AppendText(var[4], v1: text)
 284[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 287[92]: Panic(message: text)
 288[76]: FreeText(var[52])
 291[76]: FreeText(var[28])
 294[76]: FreeText(var[4])
 297[76]: Return(ret=0, value=0, discard=76)

