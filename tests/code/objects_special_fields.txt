enum Gender { Male, Female, Fluid }
struct Object{a: vector<integer>, b: Gender}
fn sum(o: Object) -> integer {
  r = 0;
  for v in o.a { r += v; };
  r
}

pub fn test() {
    test_value = {  o = Object {a: [1,4,3], b: Fluid};
  o.a += [sum(o)];
  "{o}"};
    assert(
        test_value == "{{a:[1,4,3,8],b:Fluid}}",
        "Test failed {test_value} != \"{{a:[1,4,3,8],b:Fluid}}\""
    );
}
Type 12:vector<integer>[4]:Vector(0)

Type 13:Gender[1]:Enum(["Male", "Female", "Fluid"])

Type 14:Object[9]:
    a:vector<integer>[4]
    b:Gender[8]

fn sum(o:Object) -> integer {#1 block
  r:integer = 0i32;
  {#2 for
    v#index:integer = 0i32;
    loop {#3 for loop
      v:integer = if OpGeInt(v#index, OpLengthVector(OpGetField(o, 4i32, 12i32))) OpConvIntFromNull() else {#4 iter next
        _res_1:integer = OpGetInt(OpGetVector(OpGetField(o, 4i32, 12i32), 4i32, v#index), 0i32);
        v#index:integer = OpAddInt(v#index, 1i32);
        _res_1;
      }#4:integer;
      if OpNot(OpConvBoolFromInt(v)) break(0) else null;
      {#5 block
        r:integer = OpAddInt(r, v);
      }#5;
    }#3;
  }#2;
  r;
}#1:integer

byte-code for special_fields:sum(o: Object[0]) -> integer
 692[12]: return-address
 692[16]: ConstInt(val=0) -> integer
 697[20]: ConstInt(val=0) -> integer
 702[24]: VarInt(var[20]) -> integer
 705[28]: VarRef(var[0]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 708[40]: GetField(v1: reference, fld=4) -> reference type=vector<integer>[4]:Vector(0)[12]
 711[40]: LengthVector(r: vector[]) -> integer
 712[32]: GeInt(v1: integer, v2: integer) -> boolean
 713[25]: GotoFalseWord(jump=720, if_false: boolean)
 716[24]: ConvIntFromNull() -> integer
 717[28]: GotoWord(jump=754)
 720[24]: VarRef(var[0]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 723[36]: GetField(v1: reference, fld=4) -> reference type=vector<integer>[4]:Vector(0)[12]
 726[36]: VarInt(var[20]) -> integer
 729[40]: GetVector(r: vector[], size=4, index: integer) -> reference
 732[36]: GetInt(v1: reference, fld=0) -> integer
 735[28]: VarInt(var[20]) -> integer
 738[32]: ConstInt(val=1) -> integer
 743[36]: AddInt(v1: integer, v2: integer) -> integer
 744[32]: PutInt(var[20], value: integer)
 747[28]: VarInt(var[24]) -> integer
 750[32]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 754[28]: VarInt(var[24]) -> integer
 757[32]: ConvBoolFromInt(v1: integer) -> boolean
 758[29]: Not(v1: boolean) -> boolean
 759[29]: GotoFalseWord(jump=769, if_false: boolean)
 762[28]: FreeStack(value=0, discard=4)
 766[24]: GotoWord(jump=786)
 769[28]: VarInt(var[16]) -> integer
 772[32]: VarInt(var[24]) -> integer
 775[36]: AddInt(v1: integer, v2: integer) -> integer
 776[32]: PutInt(var[16], value: integer)
 779[28]: FreeStack(value=0, discard=4)
 783[24]: GotoWord(jump=702)
 786[24]: FreeStack(value=0, discard=4)
 790[20]: VarInt(var[16]) -> integer
 793[24]: Return(ret=12, value=4, discard=24) type=integer[4]:Base[0]

fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    o:Object = {#3 object
      _val_1:Object = OpDatabase(9i32, 14i32);
      OpSetInt(_val_1, 4i32, 0i32);
      {#4 vector
        _elm_2:boolean = OpNewRecord(_val_1, 14i32, 0i32);
        OpSetInt(_elm_2, 0i32, 1i32);
        OpFinishRecord(_val_1, _elm_2, 14i32, 0i32);
        _elm_2:boolean = OpNewRecord(_val_1, 14i32, 0i32);
        OpSetInt(_elm_2, 0i32, 4i32);
        OpFinishRecord(_val_1, _elm_2, 14i32, 0i32);
        _elm_2:boolean = OpNewRecord(_val_1, 14i32, 0i32);
        OpSetInt(_elm_2, 0i32, 3i32);
        OpFinishRecord(_val_1, _elm_2, 14i32, 0i32);
      }#4;
      OpSetEnum(_val_1, 8i32, 3u8(13));
      _val_1;
    }#3:Object;
    {#5 vector
      _elm_3:boolean = OpNewRecord(o, 14i32, 0i32);
      OpSetInt(_elm_3, 0i32, sum(o));
      OpFinishRecord(o, _elm_3, 14i32, 0i32);
    }#5;
    {#6 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, o, 14i32, false);
      __work_1;
    }#6:text;
  }#2:text;
  if OpEqText(test_value, "{a:[1,4,3,8],b:Fluid}") null else OpPanic({#7 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "{a:[1,4,3,8],b:Fluid}"");
    __work_2;
  }#7:text);
}#1

byte-code for special_fields:test()
 799[0]: return-address
 799[4]: Text()
 800[28]: Text()
 801[52]: Text()
 802[76]: Database(size=9, db_tp=14) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 807[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 810[100]: ConstInt(val=0) -> integer
 815[104]: SetInt(v1: reference, fld=4, val: integer)
 818[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 821[100]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 826[100]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 829[112]: ConstInt(val=1) -> integer
 834[116]: SetInt(v1: reference, fld=0, val: integer)
 837[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 840[112]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 843[124]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 848[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 851[112]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 856[112]: PutRef(var[88], value: reference)
 859[100]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 862[112]: ConstInt(val=4) -> integer
 867[116]: SetInt(v1: reference, fld=0, val: integer)
 870[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 873[112]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 876[124]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 881[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 884[112]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 889[112]: PutRef(var[88], value: reference)
 892[100]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 895[112]: ConstInt(val=3) -> integer
 900[116]: SetInt(v1: reference, fld=0, val: integer)
 903[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 906[112]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 909[124]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 914[100]: FreeStack(value=0, discard=12)
 918[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 921[100]: ConstEnum(val=3) -> enumerate type=Gender[1]:Enum(["Male", "Female", "Fluid"])[13]
 923[101]: SetEnum(v1: reference, fld=8, val: enumerate)
 926[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 929[100]: FreeStack(value=12, discard=24) type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 933[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 936[100]: NewRecord(data: reference, parent_tp=14, fld=0) -> reference
 941[100]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 944[112]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 947[124]: Call(size=0, to=692)
 954[116]: SetInt(v1: reference, fld=0, val: integer)
 957[100]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 960[112]: VarRef(var[88]) -> reference type=boolean[1]:Base[4]
 963[124]: FinishRecord(data: reference, rec: reference, parent_tp=14, fld=0)
 968[100]: FreeStack(value=0, discard=12)
 972[88]: ClearText(var[28])
 975[88]: ConstText(_value="") -> text
 977[104]: AppendText(var[28], v1: text)
 980[88]: VarRef(var[76]) -> reference type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[14]
 983[100]: FormatDatabase(var[28], val: reference, db_tp=14, pretty=false)
 989[88]: VarText(var[28]) -> text
 992[104]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 996[92]: AppendText(var[52], v1: text)
 999[76]: VarText(var[52]) -> text
1002[92]: ConstText(_value="{a:[1,4,3,8],b:Fluid}") -> text
1025[108]: EqText(v1: text, v2: text) -> boolean
1026[77]: GotoFalseWord(jump=1032, if_false: boolean)
1029[76]: GotoWord(jump=1101)
1032[76]: ClearText(var[4])
1035[76]: ConstText(_value="Test failed ") -> text
1049[92]: AppendText(var[4], v1: text)
1052[76]: VarText(var[52]) -> text
1055[92]: ConstInt(val=0) -> integer
1060[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
1065[76]: ConstText(_value=" != "{a:[1,4,3,8],b:Fluid}"") -> text
1094[92]: AppendText(var[4], v1: text)
1097[76]: VarText(var[4]) -> text
1100[92]: Panic(message: text)
1101[76]: Return(ret=0, value=0, discard=76)

Execute test:
  799:[8] Text()
  800:[32] Text()
  801:[56] Text()
  802:[80] Database(size=9, db_tp=14) -> ref(1,1,0)={}[80]
  807:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  810:[104] ConstInt(val=0) -> 0[104]
  815:[108] SetInt(v1=ref(1,1,0)[92], fld=4, val=0[104])
  818:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  821:[104] NewRecord(data=ref(1,1,0)[92], parent_tp=14, fld=0) -> ref(1,10,8)[92]
  826:[104] VarRef(var[92]) -> ref(1,10,8)=false[104]
  829:[116] ConstInt(val=1) -> 1[116]
  834:[120] SetInt(v1=ref(1,10,8)[104], fld=0, val=1[116])
  837:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1]}[104]
  840:[116] VarRef(var[92]) -> ref(1,10,8)=true[116]
  843:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,8)[116], parent_tp=14, fld=0)
  848:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1]}[104]
  851:[116] NewRecord(data=ref(1,1,0)[104], parent_tp=14, fld=0) -> ref(1,10,12)[104]
  856:[116] PutRef(var[92], value=ref(1,10,12)[104])
  859:[104] VarRef(var[92]) -> ref(1,10,12)=false[104]
  862:[116] ConstInt(val=4) -> 4[116]
  867:[120] SetInt(v1=ref(1,10,12)[104], fld=0, val=4[116])
  870:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4]}[104]
  873:[116] VarRef(var[92]) -> ref(1,10,12)=true[116]
  876:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,12)[116], parent_tp=14, fld=0)
  881:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4]}[104]
  884:[116] NewRecord(data=ref(1,1,0)[104], parent_tp=14, fld=0) -> ref(1,10,16)[104]
  889:[116] PutRef(var[92], value=ref(1,10,16)[104])
  892:[104] VarRef(var[92]) -> ref(1,10,16)=false[104]
  895:[116] ConstInt(val=3) -> 3[116]
  900:[120] SetInt(v1=ref(1,10,16)[104], fld=0, val=3[116])
  903:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3]}[104]
  906:[116] VarRef(var[92]) -> ref(1,10,16)=true[116]
  909:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,16)[116], parent_tp=14, fld=0)
  914:[104] FreeStack(value=0, discard=12)
  918:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3]}[92]
  921:[104] ConstEnum(val=3) -> Fluid(3)[104]
  923:[105] SetEnum(v1=ref(1,1,0)[92], fld=8, val=3[104])
  926:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3],b:Fluid}[92]
  929:[104] FreeStack(value=12, discard=24)
  933:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3],b:Fluid}[92]
  936:[104] NewRecord(data=ref(1,1,0)[92], parent_tp=14, fld=0) -> ref(1,10,20)[92]
  941:[104] VarRef(var[92]) -> ref(1,10,20)=false[104]
  944:[116] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[116]
  947:[128] Call(size=0, to=692)
  692:[132] ConstInt(val=0) -> 0[132]
  697:[136] ConstInt(val=0) -> 0[136]
  702:[140] VarInt(var[136]) -> 0[140]
  705:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  708:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  711:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  712:[148] GeInt(v1=0[140], v2=4[144]) -> false[140]
  713:[141] GotoFalseWord(jump=720, if_false=false[140])
  720:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  723:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  726:[152] VarInt(var[136]) -> 0[152]
  729:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=0[152]) -> ref(1,10,8)[140]
  732:[152] GetInt(v1=ref(1,10,8)[140], fld=0) -> 1[140]
  735:[144] VarInt(var[136]) -> 0[144]
  738:[148] ConstInt(val=1) -> 1[148]
  743:[152] AddInt(v1=0[144], v2=1[148]) -> 1[144]
  744:[148] PutInt(var[136], value=1[144])
  747:[144] VarInt(var[140]) -> 1[144]
  750:[148] FreeStack(value=4, discard=8)
  754:[144] VarInt(var[140]) -> 1[144]
  757:[148] ConvBoolFromInt(v1=1[144]) -> true[144]
  758:[145] Not(v1=true[144]) -> false[144]
  759:[145] GotoFalseWord(jump=769, if_false=false[144])
  769:[144] VarInt(var[132]) -> 0[144]
  772:[148] VarInt(var[140]) -> 1[148]
  775:[152] AddInt(v1=0[144], v2=1[148]) -> 1[144]
  776:[148] PutInt(var[132], value=1[144])
  779:[144] FreeStack(value=0, discard=4)
  783:[140] GotoWord(jump=702)
  702:[140] VarInt(var[136]) -> 1[140]
  705:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  708:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  711:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  712:[148] GeInt(v1=1[140], v2=4[144]) -> false[140]
  713:[141] GotoFalseWord(jump=720, if_false=false[140])
  720:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  723:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  726:[152] VarInt(var[136]) -> 1[152]
  729:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=1[152]) -> ref(1,10,12)[140]
  732:[152] GetInt(v1=ref(1,10,12)[140], fld=0) -> 4[140]
  735:[144] VarInt(var[136]) -> 1[144]
  738:[148] ConstInt(val=1) -> 1[148]
  743:[152] AddInt(v1=1[144], v2=1[148]) -> 2[144]
  744:[148] PutInt(var[136], value=2[144])
  747:[144] VarInt(var[140]) -> 4[144]
  750:[148] FreeStack(value=4, discard=8)
  754:[144] VarInt(var[140]) -> 4[144]
  757:[148] ConvBoolFromInt(v1=4[144]) -> true[144]
  758:[145] Not(v1=true[144]) -> false[144]
  759:[145] GotoFalseWord(jump=769, if_false=false[144])
  769:[144] VarInt(var[132]) -> 1[144]
  772:[148] VarInt(var[140]) -> 4[148]
  775:[152] AddInt(v1=1[144], v2=4[148]) -> 5[144]
  776:[148] PutInt(var[132], value=5[144])
  779:[144] FreeStack(value=0, discard=4)
  783:[140] GotoWord(jump=702)
  702:[140] VarInt(var[136]) -> 2[140]
  705:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  708:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  711:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  712:[148] GeInt(v1=2[140], v2=4[144]) -> false[140]
  713:[141] GotoFalseWord(jump=720, if_false=false[140])
  720:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  723:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  726:[152] VarInt(var[136]) -> 2[152]
  729:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=2[152]) -> ref(1,10,16)[140]
  732:[152] GetInt(v1=ref(1,10,16)[140], fld=0) -> 3[140]
  735:[144] VarInt(var[136]) -> 2[144]
  738:[148] ConstInt(val=1) -> 1[148]
  743:[152] AddInt(v1=2[144], v2=1[148]) -> 3[144]
  744:[148] PutInt(var[136], value=3[144])
  747:[144] VarInt(var[140]) -> 3[144]
  750:[148] FreeStack(value=4, discard=8)
  754:[144] VarInt(var[140]) -> 3[144]
  757:[148] ConvBoolFromInt(v1=3[144]) -> true[144]
  758:[145] Not(v1=true[144]) -> false[144]
  759:[145] GotoFalseWord(jump=769, if_false=false[144])
  769:[144] VarInt(var[132]) -> 5[144]
  772:[148] VarInt(var[140]) -> 3[148]
  775:[152] AddInt(v1=5[144], v2=3[148]) -> 8[144]
  776:[148] PutInt(var[132], value=8[144])
  779:[144] FreeStack(value=0, discard=4)
  783:[140] GotoWord(jump=702)
  702:[140] VarInt(var[136]) -> 3[140]
  705:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  708:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  711:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  712:[148] GeInt(v1=3[140], v2=4[144]) -> false[140]
  713:[141] GotoFalseWord(jump=720, if_false=false[140])
  720:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  723:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  726:[152] VarInt(var[136]) -> 3[152]
  729:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=3[152]) -> ref(1,10,20)[140]
  732:[152] GetInt(v1=ref(1,10,20)[140], fld=0) -> -2147483648[140]
  735:[144] VarInt(var[136]) -> 3[144]
  738:[148] ConstInt(val=1) -> 1[148]
  743:[152] AddInt(v1=3[144], v2=1[148]) -> 4[144]
  744:[148] PutInt(var[136], value=4[144])
  747:[144] VarInt(var[140]) -> -2147483648[144]
  750:[148] FreeStack(value=4, discard=8)
  754:[144] VarInt(var[140]) -> -2147483648[144]
  757:[148] ConvBoolFromInt(v1=-2147483648[144]) -> false[144]
  758:[145] Not(v1=false[144]) -> true[144]
  759:[145] GotoFalseWord(jump=769, if_false=true[144])
  762:[144] FreeStack(value=0, discard=4)
  766:[140] GotoWord(jump=786)
  786:[140] FreeStack(value=0, discard=4)
  790:[136] VarInt(var[132]) -> 8[136]
  793:[140] Return(ret=954[128], value=4, discard=24) -> 8[116]
  954:[120] SetInt(v1=ref(1,10,20)[104], fld=0, val=8[116])
  957:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3,8],b:Fluid}[104]
  960:[116] VarRef(var[92]) -> ref(1,10,20)=true[116]
  963:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,20)[116], parent_tp=14, fld=0)
  968:[104] FreeStack(value=0, discard=12)
  972:[92] ClearText(var[32])
  975:[92] ConstText(_value="") -> ""[92]
  977:[108] AppendText(var[32], v1=""[92])
  980:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3,8],b:Fluid}[92]
  983:[104] FormatDatabase(var[32], val=ref(1,1,0)[92], db_tp=14, pretty=false)
  989:[92] VarText(var[32]) -> "{a:[1,4,3,8],b:Fluid}"[92]
  992:[108] FreeStack(value=16, discard=28)
  996:[96] AppendText(var[56], v1="{a:[1,4,3,8],b:Fluid}"[80])
  999:[80] VarText(var[56]) -> "{a:[1,4,3,8],b:Fluid}"[80]
 1002:[96] ConstText(_value="{a:[1,4,3,8],b:Fluid}") -> "{a:[1,4,3,8],b:Fluid}"[96]
 1025:[112] EqText(v1="{a:[1,4,3,8],b:Fluid}"[80], v2="{a:[1,4,3,8],b:Fluid}"[96]) -> true[80]
 1026:[81] GotoFalseWord(jump=1032, if_false=true[80])
 1029:[80] GotoWord(jump=1101)
 1101:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
