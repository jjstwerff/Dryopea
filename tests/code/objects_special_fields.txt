enum Gender { Male, Female, Fluid }
struct Object{a: vector<integer>, b: Gender}
fn sum(o: Object) -> integer {
  r = 0;
  for v in o.a { r += v; };
  r
}

pub fn test() {
    test_value = {  o = Object {a: [1,4,3], b: Fluid};
  o.a += [sum(o)];
  "{o}"};
    assert(
        test_value == "{{a:[1,4,3,8],b:Fluid}}",
        "Test failed {test_value} != \"{{a:[1,4,3,8],b:Fluid}}\""
    );
}
Type 11:vector<integer>[4]:Vector(0)

Type 12:Gender[1]:Enum(["Male", "Female", "Fluid"])

Type 13:Object[9]:
    a:vector<integer>[4]
    b:Gender[8]

fn sum {#1 block
  let r = 0i32;
  {#2 for
    let v#index = 0i32;
    loop {#3 for loop
      let v = if OpGeInt(v#index, OpLengthVector(OpGetField(o, 4i32, 11i32))) OpConvIntFromNull() else {#4 iter next
        let _res_1 = OpGetInt(OpGetVector(OpGetField(o, 4i32, 11i32), 4i32, v#index), 0i32);
        v#index = OpAddInt(v#index, 1i32);
        _res_1;
      }#4;
      if OpNot(OpConvBoolFromInt(v)) break(0) else null;
      {#5 block
        r = OpAddInt(r, v);
      }#5;
    }#3;
  }#2;
  r;
}#1

byte-code for special_fields:sum(o: Object#[][0]) -> integer
 668[12]: return-address
 668[16]: ConstInt(val=0) -> integer
 673[20]: ConstInt(val=0) -> integer
 678[24]: VarInt(var[20]) -> integer
 681[28]: VarRef(var[0]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 684[40]: GetField(v1: reference#[], fld=4) -> reference#[] type=vector<integer>[4]:Vector(0)[11]
 687[40]: LengthVector(r: vector#[]) -> integer
 688[32]: GeInt(v1: integer, v2: integer) -> boolean
 689[25]: GenGotoFalseWord(jump=696, if_false: boolean)
 692[24]: ConvIntFromNull() -> integer
 693[28]: GenGotoWord(jump=730)
 696[24]: VarRef(var[0]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 699[36]: GetField(v1: reference#[], fld=4) -> reference#[] type=vector<integer>[4]:Vector(0)[11]
 702[36]: VarInt(var[20]) -> integer
 705[40]: GetVector(r: vector#[], size=4, index: integer) -> reference#[]
 708[36]: GetInt(v1: reference#[], fld=0) -> integer
 711[28]: VarInt(var[20]) -> integer
 714[32]: ConstInt(val=1) -> integer
 719[36]: AddInt(v1: integer, v2: integer) -> integer
 720[32]: PutInt(var[20], value: integer)
 723[28]: VarInt(var[24]) -> integer
 726[32]: GenFreeStack(value=4, discard=4)
 730[28]: VarInt(var[24]) -> integer
 733[32]: ConvBoolFromInt(v1: integer) -> boolean
 734[29]: Not(v1: boolean) -> boolean
 735[29]: GenGotoFalseWord(jump=745, if_false: boolean)
 738[28]: GenFreeStack(value=0, discard=4)
 742[24]: GenGotoWord(jump=762)
 745[28]: VarInt(var[16]) -> integer
 748[32]: VarInt(var[24]) -> integer
 751[36]: AddInt(v1: integer, v2: integer) -> integer
 752[32]: PutInt(var[16], value: integer)
 755[28]: GenFreeStack(value=0, discard=4)
 759[24]: GenGotoWord(jump=678)
 762[24]: GenFreeStack(value=0, discard=4)
 766[20]: VarInt(var[16]) -> integer
 769[24]: GenReturn(ret=12, value=4, discard=24)

fn test {#1 block
  let __work_2 = "";
  let __work_1 = "";
  let test_value = {#2 block
    let o = {#3 object
      let _val_1 = OpDatabase(9i32, 13i32);
      OpSetInt(_val_1, 4i32, 0i32);
      {#4 vector
        let _elm_2 = OpNewRecord(_val_1, 13i32, 0i32);
        OpSetInt(_elm_2, 0i32, 1i32);
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2 = OpNewRecord(_val_1, 13i32, 0i32);
        OpSetInt(_elm_2, 0i32, 4i32);
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
        _elm_2 = OpNewRecord(_val_1, 13i32, 0i32);
        OpSetInt(_elm_2, 0i32, 3i32);
        OpFinishRecord(_val_1, _elm_2, 13i32, 0i32);
      }#4;
      OpSetEnum(_val_1, 8i32, 3u8(12));
      _val_1;
    }#3;
    {#5 vector
      let _elm_3 = OpNewRecord(o, 13i32, 0i32);
      OpSetInt(_elm_3, 0i32, sum(o));
      OpFinishRecord(o, _elm_3, 13i32, 0i32);
    }#5;
    {#6 formatting string
      OpClearText(__work_1);
      OpAppendText(__work_1, "");
      OpFormatDatabase(__work_1, o, 13i32, false);
      __work_1;
    }#6;
  }#2;
  if OpEqText(test_value, "{a:[1,4,3,8],b:Fluid}") null else OpGenPanic({#7 formatting string
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "{a:[1,4,3,8],b:Fluid}"");
    __work_2;
  }#7);
}#1

byte-code for special_fields:test()
 775[0]: return-address
 775[4]: Text()
 776[28]: Text()
 777[52]: Text()
 778[76]: Database(size=9, db_tp=13) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 783[88]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 786[100]: ConstInt(val=0) -> integer
 791[104]: SetInt(v1: reference#[], fld=4, val: integer)
 794[88]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 797[100]: NewRecord(data: reference#[], parent_tp=13, fld=0) -> reference#[]
 802[100]: VarRef(var[88]) -> reference#[] type=boolean[1]:Base[4]
 805[112]: ConstInt(val=1) -> integer
 810[116]: SetInt(v1: reference#[], fld=0, val: integer)
 813[100]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 816[112]: VarRef(var[88]) -> reference#[] type=boolean[1]:Base[4]
 819[124]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=0)
 824[100]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 827[112]: NewRecord(data: reference#[], parent_tp=13, fld=0) -> reference#[]
 832[112]: PutRef(var[88], value: reference#[])
 835[100]: VarRef(var[88]) -> reference#[] type=boolean[1]:Base[4]
 838[112]: ConstInt(val=4) -> integer
 843[116]: SetInt(v1: reference#[], fld=0, val: integer)
 846[100]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 849[112]: VarRef(var[88]) -> reference#[] type=boolean[1]:Base[4]
 852[124]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=0)
 857[100]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 860[112]: NewRecord(data: reference#[], parent_tp=13, fld=0) -> reference#[]
 865[112]: PutRef(var[88], value: reference#[])
 868[100]: VarRef(var[88]) -> reference#[] type=boolean[1]:Base[4]
 871[112]: ConstInt(val=3) -> integer
 876[116]: SetInt(v1: reference#[], fld=0, val: integer)
 879[100]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 882[112]: VarRef(var[88]) -> reference#[] type=boolean[1]:Base[4]
 885[124]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=0)
 890[100]: GenFreeStack(value=0, discard=12)
 894[88]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 897[100]: ConstEnum(val=3) -> enumerate type=Gender[1]:Enum(["Male", "Female", "Fluid"])[12]
 899[101]: SetEnum(v1: reference#[], fld=8, val: enumerate)
 902[88]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 905[100]: GenFreeStack(value=12, discard=12)
 909[88]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 912[100]: NewRecord(data: reference#[], parent_tp=13, fld=0) -> reference#[]
 917[100]: VarRef(var[88]) -> reference#[] type=boolean[1]:Base[4]
 920[112]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 923[124]: GenCall(size=0, to=668)
 930[116]: SetInt(v1: reference#[], fld=0, val: integer)
 933[100]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 936[112]: VarRef(var[88]) -> reference#[] type=boolean[1]:Base[4]
 939[124]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=13, fld=0)
 944[100]: GenFreeStack(value=0, discard=12)
 948[88]: ClearText(var[28])
 951[88]: ConstText(_value="") -> text(false, [])
 953[104]: AppendText(var[28], v1: text(false, []))
 956[88]: VarRef(var[76]) -> reference#[] type=Object[9]:{a:vector<integer>[4], b:Gender[8]}[13]
 959[100]: FormatDatabase(var[28], val: reference#[], db_tp=13, pretty=false)
 965[88]: VarText(var[28]) -> text(false, [])
 968[104]: GenFreeStack(value=16, discard=12)
 972[92]: AppendText(var[52], v1: text(false, []))
 975[76]: VarText(var[52]) -> text(false, [])
 978[92]: ConstText(_value="{a:[1,4,3,8],b:Fluid}") -> text(false, [])
1001[108]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
1002[77]: GenGotoFalseWord(jump=1008, if_false: boolean)
1005[76]: GenGotoWord(jump=1077)
1008[76]: ClearText(var[4])
1011[76]: ConstText(_value="Test failed ") -> text(false, [])
1025[92]: AppendText(var[4], v1: text(false, []))
1028[76]: VarText(var[52]) -> text(false, [])
1031[92]: ConstInt(val=0) -> integer
1036[96]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
1041[76]: ConstText(_value=" != "{a:[1,4,3,8],b:Fluid}"") -> text(false, [])
1070[92]: AppendText(var[4], v1: text(false, []))
1073[76]: VarText(var[4]) -> text(false, [])
1076[92]: GenPanic(message: text(false, []))
1077[76]: GenReturn(ret=0, value=0, discard=76)

Execute test:
  775:[8] Text()
  776:[32] Text()
  777:[56] Text()
  778:[80] Database(size=9, db_tp=13) -> ref(1,1,0)={}[80]
  783:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  786:[104] ConstInt(val=0) -> 0[104]
  791:[108] SetInt(v1=ref(1,1,0)[92], fld=4, val=0[104])
  794:[92] VarRef(var[80]) -> ref(1,1,0)={}[92]
  797:[104] NewRecord(data=ref(1,1,0)[92], parent_tp=13, fld=0) -> ref(1,10,8)[92]
  802:[104] VarRef(var[92]) -> ref(1,10,8)=false[104]
  805:[116] ConstInt(val=1) -> 1[116]
  810:[120] SetInt(v1=ref(1,10,8)[104], fld=0, val=1[116])
  813:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1]}[104]
  816:[116] VarRef(var[92]) -> ref(1,10,8)=true[116]
  819:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,8)[116], parent_tp=13, fld=0)
  824:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1]}[104]
  827:[116] NewRecord(data=ref(1,1,0)[104], parent_tp=13, fld=0) -> ref(1,10,12)[104]
  832:[116] PutRef(var[92], value=ref(1,10,12)[104])
  835:[104] VarRef(var[92]) -> ref(1,10,12)=false[104]
  838:[116] ConstInt(val=4) -> 4[116]
  843:[120] SetInt(v1=ref(1,10,12)[104], fld=0, val=4[116])
  846:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4]}[104]
  849:[116] VarRef(var[92]) -> ref(1,10,12)=true[116]
  852:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,12)[116], parent_tp=13, fld=0)
  857:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4]}[104]
  860:[116] NewRecord(data=ref(1,1,0)[104], parent_tp=13, fld=0) -> ref(1,10,16)[104]
  865:[116] PutRef(var[92], value=ref(1,10,16)[104])
  868:[104] VarRef(var[92]) -> ref(1,10,16)=false[104]
  871:[116] ConstInt(val=3) -> 3[116]
  876:[120] SetInt(v1=ref(1,10,16)[104], fld=0, val=3[116])
  879:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3]}[104]
  882:[116] VarRef(var[92]) -> ref(1,10,16)=true[116]
  885:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,16)[116], parent_tp=13, fld=0)
  890:[104] GenFreeStack(value=0, discard=12)
  894:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3]}[92]
  897:[104] ConstEnum(val=3) -> Fluid(3)[104]
  899:[105] SetEnum(v1=ref(1,1,0)[92], fld=8, val=3[104])
  902:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3],b:Fluid}[92]
  905:[104] GenFreeStack(value=12, discard=12)
  909:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3],b:Fluid}[92]
  912:[104] NewRecord(data=ref(1,1,0)[92], parent_tp=13, fld=0) -> ref(1,10,20)[92]
  917:[104] VarRef(var[92]) -> ref(1,10,20)=false[104]
  920:[116] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[116]
  923:[128] GenCall(size=0, to=668)
  668:[132] ConstInt(val=0) -> 0[132]
  673:[136] ConstInt(val=0) -> 0[136]
  678:[140] VarInt(var[136]) -> 0[140]
  681:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  684:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  687:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  688:[148] GeInt(v1=0[140], v2=4[144]) -> false[140]
  689:[141] GenGotoFalseWord(jump=696, if_false=false[140])
  696:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  699:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  702:[152] VarInt(var[136]) -> 0[152]
  705:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=0[152]) -> ref(1,10,8)[140]
  708:[152] GetInt(v1=ref(1,10,8)[140], fld=0) -> 1[140]
  711:[144] VarInt(var[136]) -> 0[144]
  714:[148] ConstInt(val=1) -> 1[148]
  719:[152] AddInt(v1=0[144], v2=1[148]) -> 1[144]
  720:[148] PutInt(var[136], value=1[144])
  723:[144] VarInt(var[140]) -> 1[144]
  726:[148] GenFreeStack(value=4, discard=4)
  730:[144] VarInt(var[140]) -> 1[144]
  733:[148] ConvBoolFromInt(v1=1[144]) -> true[144]
  734:[145] Not(v1=true[144]) -> false[144]
  735:[145] GenGotoFalseWord(jump=745, if_false=false[144])
  745:[144] VarInt(var[132]) -> 0[144]
  748:[148] VarInt(var[140]) -> 1[148]
  751:[152] AddInt(v1=0[144], v2=1[148]) -> 1[144]
  752:[148] PutInt(var[132], value=1[144])
  755:[144] GenFreeStack(value=0, discard=4)
  759:[140] GenGotoWord(jump=678)
  678:[140] VarInt(var[136]) -> 1[140]
  681:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  684:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  687:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  688:[148] GeInt(v1=1[140], v2=4[144]) -> false[140]
  689:[141] GenGotoFalseWord(jump=696, if_false=false[140])
  696:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  699:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  702:[152] VarInt(var[136]) -> 1[152]
  705:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=1[152]) -> ref(1,10,12)[140]
  708:[152] GetInt(v1=ref(1,10,12)[140], fld=0) -> 4[140]
  711:[144] VarInt(var[136]) -> 1[144]
  714:[148] ConstInt(val=1) -> 1[148]
  719:[152] AddInt(v1=1[144], v2=1[148]) -> 2[144]
  720:[148] PutInt(var[136], value=2[144])
  723:[144] VarInt(var[140]) -> 4[144]
  726:[148] GenFreeStack(value=4, discard=4)
  730:[144] VarInt(var[140]) -> 4[144]
  733:[148] ConvBoolFromInt(v1=4[144]) -> true[144]
  734:[145] Not(v1=true[144]) -> false[144]
  735:[145] GenGotoFalseWord(jump=745, if_false=false[144])
  745:[144] VarInt(var[132]) -> 1[144]
  748:[148] VarInt(var[140]) -> 4[148]
  751:[152] AddInt(v1=1[144], v2=4[148]) -> 5[144]
  752:[148] PutInt(var[132], value=5[144])
  755:[144] GenFreeStack(value=0, discard=4)
  759:[140] GenGotoWord(jump=678)
  678:[140] VarInt(var[136]) -> 2[140]
  681:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  684:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  687:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  688:[148] GeInt(v1=2[140], v2=4[144]) -> false[140]
  689:[141] GenGotoFalseWord(jump=696, if_false=false[140])
  696:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  699:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  702:[152] VarInt(var[136]) -> 2[152]
  705:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=2[152]) -> ref(1,10,16)[140]
  708:[152] GetInt(v1=ref(1,10,16)[140], fld=0) -> 3[140]
  711:[144] VarInt(var[136]) -> 2[144]
  714:[148] ConstInt(val=1) -> 1[148]
  719:[152] AddInt(v1=2[144], v2=1[148]) -> 3[144]
  720:[148] PutInt(var[136], value=3[144])
  723:[144] VarInt(var[140]) -> 3[144]
  726:[148] GenFreeStack(value=4, discard=4)
  730:[144] VarInt(var[140]) -> 3[144]
  733:[148] ConvBoolFromInt(v1=3[144]) -> true[144]
  734:[145] Not(v1=true[144]) -> false[144]
  735:[145] GenGotoFalseWord(jump=745, if_false=false[144])
  745:[144] VarInt(var[132]) -> 5[144]
  748:[148] VarInt(var[140]) -> 3[148]
  751:[152] AddInt(v1=5[144], v2=3[148]) -> 8[144]
  752:[148] PutInt(var[132], value=8[144])
  755:[144] GenFreeStack(value=0, discard=4)
  759:[140] GenGotoWord(jump=678)
  678:[140] VarInt(var[136]) -> 3[140]
  681:[144] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[144]
  684:[156] GetField(v1=ref(1,1,0)[144], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][144]
  687:[156] LengthVector(r=ref(1,1,4)=true[144]) -> 4[144]
  688:[148] GeInt(v1=3[140], v2=4[144]) -> false[140]
  689:[141] GenGotoFalseWord(jump=696, if_false=false[140])
  696:[140] VarRef(var[116]) -> ref(1,1,0)={a:[1,4,3,-2147483648],b:Fluid}[140]
  699:[152] GetField(v1=ref(1,1,0)[140], fld=4) -> ref(1,1,4)=[1,4,3,-2147483648][140]
  702:[152] VarInt(var[136]) -> 3[152]
  705:[156] GetVector(r=ref(1,1,4)=true[140], size=4, index=3[152]) -> ref(1,10,20)[140]
  708:[152] GetInt(v1=ref(1,10,20)[140], fld=0) -> -2147483648[140]
  711:[144] VarInt(var[136]) -> 3[144]
  714:[148] ConstInt(val=1) -> 1[148]
  719:[152] AddInt(v1=3[144], v2=1[148]) -> 4[144]
  720:[148] PutInt(var[136], value=4[144])
  723:[144] VarInt(var[140]) -> -2147483648[144]
  726:[148] GenFreeStack(value=4, discard=4)
  730:[144] VarInt(var[140]) -> -2147483648[144]
  733:[148] ConvBoolFromInt(v1=-2147483648[144]) -> false[144]
  734:[145] Not(v1=false[144]) -> true[144]
  735:[145] GenGotoFalseWord(jump=745, if_false=true[144])
  738:[144] GenFreeStack(value=0, discard=4)
  742:[140] GenGotoWord(jump=762)
  762:[140] GenFreeStack(value=0, discard=4)
  766:[136] VarInt(var[132]) -> 8[136]
  769:[140] GenReturn(ret=930[128], value=4, discard=24)
  930:[120] SetInt(v1=ref(1,10,20)[104], fld=0, val=8[116])
  933:[104] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3,8],b:Fluid}[104]
  936:[116] VarRef(var[92]) -> ref(1,10,20)=true[116]
  939:[128] FinishRecord(data=ref(1,1,0)[104], rec=ref(1,10,20)[116], parent_tp=13, fld=0)
  944:[104] GenFreeStack(value=0, discard=12)
  948:[92] ClearText(var[32])
  951:[92] ConstText(_value="") -> ""[92]
  953:[108] AppendText(var[32], v1=""[92])
  956:[92] VarRef(var[80]) -> ref(1,1,0)={a:[1,4,3,8],b:Fluid}[92]
  959:[104] FormatDatabase(var[32], val=ref(1,1,0)[92], db_tp=13, pretty=false)
  965:[92] VarText(var[32]) -> "{a:[1,4,3,8],b:Fluid}"[92]
  968:[108] GenFreeStack(value=16, discard=12)
  972:[96] AppendText(var[56], v1="{a:[1,4,3,8],b:Fluid}"[80])
  975:[80] VarText(var[56]) -> "{a:[1,4,3,8],b:Fluid}"[80]
  978:[96] ConstText(_value="{a:[1,4,3,8],b:Fluid}") -> "{a:[1,4,3,8],b:Fluid}"[96]
 1001:[112] EqText(v1="{a:[1,4,3,8],b:Fluid}"[80], v2="{a:[1,4,3,8],b:Fluid}"[96]) -> true[80]
 1002:[81] GenGotoFalseWord(jump=1008, if_false=true[80])
 1005:[80] GenGotoWord(jump=1077)
 1077:[80] GenReturn(ret=4294967295[4], value=0, discard=76)
Finished
