pub fn test() {
    test_value = {a="â™¥ðŸ˜ƒ" + "1" + "2"; a};
    assert(
        test_value == "â™¥ðŸ˜ƒ12",
        "Test failed {test_value} != \"â™¥ðŸ˜ƒ12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  a:text = "";
  test_value:text["a"] = {#2 block
    a:text = "â™¥ðŸ˜ƒ";
    OpAppendText(a, "1");
    OpAppendText(a, "2");
    a;
  }#2:text["a"];
  if OpEqText(test_value, "â™¥ðŸ˜ƒ12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "â™¥ðŸ˜ƒ12"");
    __work_1;
  }#3:text);
}#1

byte-code for append:test()
 645[0]: return-address
 645[4]: Text() var=__work_1[4]:text in 1
 646[28]: Text() var=a[28]:text in 1
 647[52]: Text() var=test_value[52]:text["a"] in 1
 648[76]: ClearText(var[28]) var=a[28]:text in 1
 651[76]: ConstText(_value="â™¥ðŸ˜ƒ") -> text
 660[92]: AppendText(var[28], v1: text)
 663[76]: ConstText(_value="1") -> text
 666[92]: AppendText(var[28], v1: text)
 669[76]: ConstText(_value="2") -> text
 672[92]: AppendText(var[28], v1: text)
 675[76]: VarText(var[28]) -> text var=a[28]:text in 1
 678[92]: AppendText(var[52], v1: text)
 681[76]: VarText(var[52]) -> text var=test_value[52]:text["a"] in 1
 684[92]: ConstText(_value="â™¥ðŸ˜ƒ12") -> text
 695[108]: EqText(v1: text, v2: text) -> boolean
 696[77]: GotoFalseWord(jump=702, if_false: boolean)
 699[76]: GotoWord(jump=759)
 702[76]: ClearText(var[4]) var=__work_1[4]:text in 1
 705[76]: ConstText(_value="Test failed ") -> text
 719[92]: AppendText(var[4], v1: text)
 722[76]: VarText(var[52]) -> text var=test_value[52]:text["a"] in 1
 725[92]: ConstInt(val=0) -> integer
 730[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 735[76]: ConstText(_value=" != "â™¥ðŸ˜ƒ12"") -> text
 752[92]: AppendText(var[4], v1: text)
 755[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 758[92]: Panic(message: text)
 759[76]: FreeText(var[52])
 762[76]: FreeText(var[28])
 765[76]: FreeText(var[4])
 768[76]: Return(ret=0, value=0, discard=76)

Execute test:
  645:[8] Text()
  646:[32] Text()
  647:[56] Text()
  648:[80] ClearText(var[32])
  651:[80] ConstText(_value="â™¥ðŸ˜ƒ") -> "â™¥ðŸ˜ƒ"[80]
  660:[96] AppendText(var[32], v1="â™¥ðŸ˜ƒ"[80])
  663:[80] ConstText(_value="1") -> "1"[80]
  666:[96] AppendText(var[32], v1="1"[80])
  669:[80] ConstText(_value="2") -> "2"[80]
  672:[96] AppendText(var[32], v1="2"[80])
  675:[80] VarText(var[32]) -> "â™¥ðŸ˜ƒ12"[80]
  678:[96] AppendText(var[56], v1="â™¥ðŸ˜ƒ12"[80])
  681:[80] VarText(var[56]) -> "â™¥ðŸ˜ƒ12"[80]
  684:[96] ConstText(_value="â™¥ðŸ˜ƒ12") -> "â™¥ðŸ˜ƒ12"[96]
  695:[112] EqText(v1="â™¥ðŸ˜ƒ12"[80], v2="â™¥ðŸ˜ƒ12"[96]) -> true[80]
  696:[81] GotoFalseWord(jump=702, if_false=true[80])
  699:[80] GotoWord(jump=759)
  759:[80] FreeText(var[56])
  762:[80] FreeText(var[32])
  765:[80] FreeText(var[8])
  768:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
