Test code:
pub fn test() {
    test_value = {a="â™¥ðŸ˜ƒ" + "1" + "2"; a};
    assert(
        test_value == "â™¥ðŸ˜ƒ12",
        "Test failed {test_value} != \"â™¥ðŸ˜ƒ12\""
    );
}

fn test {
  let test_value = {
    let a = "";
    OpAppendText(a, "â™¥ðŸ˜ƒ");
    OpAppendText(a, "1");
    OpAppendText(a, "2");
    a;
  };
  if OpEqText(test_value, "â™¥ðŸ˜ƒ12") {null} else {OpGenPanic({
    let append_8 = "Test failed ";
    OpFormatText(append_8, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_8, " != "â™¥ðŸ˜ƒ12"");
    append_8;
  })};
}

byte-code for append:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: Text()
 666[52]: ConstText(_value="") -> text
 668[68]: AppendText(var[28], v1: text)
 671[52]: ConstText(_value="â™¥ðŸ˜ƒ") -> text
 680[68]: AppendText(var[28], v1: text)
 683[52]: ConstText(_value="1") -> text
 686[68]: AppendText(var[28], v1: text)
 689[52]: ConstText(_value="2") -> text
 692[68]: AppendText(var[28], v1: text)
 695[52]: VarText(var[28]) -> text
 698[68]: GenFreeStack(value=16, discard=24)
 702[44]: AppendText(var[4], v1: text)
 705[28]: VarText(var[4]) -> text
 708[44]: ConstText(_value="â™¥ðŸ˜ƒ12") -> text
 719[60]: EqText(v1: text, v2: text) -> boolean
 720[29]: GenGotoFalseWord(jump=726, if_false: boolean)
 723[28]: GenGotoWord(jump=785)
 726[28]: Text()
 727[52]: ConstText(_value="Test failed ") -> text
 741[68]: AppendText(var[28], v1: text)
 744[52]: VarText(var[4]) -> text
 747[68]: ConstInt(val=0) -> integer
 752[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 757[52]: ConstText(_value=" != "â™¥ðŸ˜ƒ12"") -> text
 774[68]: AppendText(var[28], v1: text)
 777[52]: VarText(var[28]) -> text
 780[68]: GenFreeStack(value=16, discard=24)
 784[44]: GenPanic(message: text)
 785[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] Text()
  666:[52] ConstText(_value="") -> ""[52]
  668:[68] AppendText(var[28], v1=""[52])
  671:[52] ConstText(_value="â™¥ðŸ˜ƒ") -> "â™¥ðŸ˜ƒ"[52]
  680:[68] AppendText(var[28], v1="â™¥ðŸ˜ƒ"[52])
  683:[52] ConstText(_value="1") -> "1"[52]
  686:[68] AppendText(var[28], v1="1"[52])
  689:[52] ConstText(_value="2") -> "2"[52]
  692:[68] AppendText(var[28], v1="2"[52])
  695:[52] VarText(var[28]) -> "â™¥ðŸ˜ƒ12"[52]
  698:[68] GenFreeStack(value=16, discard=24)
  702:[44] AppendText(var[4], v1="â™¥ðŸ˜ƒ12"[28])
  705:[28] VarText(var[4]) -> "â™¥ðŸ˜ƒ12"[28]
  708:[44] ConstText(_value="â™¥ðŸ˜ƒ12") -> "â™¥ðŸ˜ƒ12"[44]
  719:[60] EqText(v1="â™¥ðŸ˜ƒ12"[28], v2="â™¥ðŸ˜ƒ12"[44]) -> true[28]
  720:[29] GenGotoFalseWord(jump=726, if_false=true[28])
  723:[28] GenGotoWord(jump=785)
  785:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
