pub fn test() {
    test_value = {a="â™¥ðŸ˜ƒ" + "1" + "2"; a};
    assert(
        test_value == "â™¥ðŸ˜ƒ12",
        "Test failed {test_value} != \"â™¥ðŸ˜ƒ12\""
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    let a = "";
    OpAppendText(a, "â™¥ðŸ˜ƒ");
    OpAppendText(a, "1");
    OpAppendText(a, "2");
    a;
  }#2;
  if OpEqText(test_value, "â™¥ðŸ˜ƒ12") null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "â™¥ðŸ˜ƒ12"");
    __work_1;
  }#3);
}#1

byte-code for append:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: Text()
 671[76]: ConstText(_value="â™¥ðŸ˜ƒ") -> text(false, [])
 680[92]: AppendText(var[52], v1: text(false, []))
 683[76]: ConstText(_value="1") -> text(false, [])
 686[92]: AppendText(var[52], v1: text(false, []))
 689[76]: ConstText(_value="2") -> text(false, [])
 692[92]: AppendText(var[52], v1: text(false, []))
 695[76]: VarText(var[52]) -> text(false, [])
 698[92]: GenFreeStack(value=16, discard=24)
 702[68]: AppendText(var[28], v1: text(false, []))
 705[52]: VarText(var[28]) -> text(false, [])
 708[68]: ConstText(_value="â™¥ðŸ˜ƒ12") -> text(false, [])
 719[84]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 720[53]: GenGotoFalseWord(jump=726, if_false: boolean)
 723[52]: GenGotoWord(jump=783)
 726[52]: ClearText(var[4])
 729[52]: ConstText(_value="Test failed ") -> text(false, [])
 743[68]: AppendText(var[4], v1: text(false, []))
 746[52]: VarText(var[28]) -> text(false, [])
 749[68]: ConstInt(val=0) -> integer
 754[72]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 759[52]: ConstText(_value=" != "â™¥ðŸ˜ƒ12"") -> text(false, [])
 776[68]: AppendText(var[4], v1: text(false, []))
 779[52]: VarText(var[4]) -> text(false, [])
 782[68]: GenPanic(message: text(false, []))
 783[52]: GenReturn(ret=0, value=0, discard=52)

Execute test:
  668:[8] Text()
  669:[32] Text()
  670:[56] Text()
  671:[80] ConstText(_value="â™¥ðŸ˜ƒ") -> "â™¥ðŸ˜ƒ"[80]
  680:[96] AppendText(var[56], v1="â™¥ðŸ˜ƒ"[80])
  683:[80] ConstText(_value="1") -> "1"[80]
  686:[96] AppendText(var[56], v1="1"[80])
  689:[80] ConstText(_value="2") -> "2"[80]
  692:[96] AppendText(var[56], v1="2"[80])
  695:[80] VarText(var[56]) -> "â™¥ðŸ˜ƒ12"[80]
  698:[96] GenFreeStack(value=16, discard=24)
  702:[72] AppendText(var[32], v1="â™¥ðŸ˜ƒ12"[56])
  705:[56] VarText(var[32]) -> "â™¥ðŸ˜ƒ12"[56]
  708:[72] ConstText(_value="â™¥ðŸ˜ƒ12") -> "â™¥ðŸ˜ƒ12"[72]
  719:[88] EqText(v1="â™¥ðŸ˜ƒ12"[56], v2="â™¥ðŸ˜ƒ12"[72]) -> true[56]
  720:[57] GenGotoFalseWord(jump=726, if_false=true[56])
  723:[56] GenGotoWord(jump=783)
  783:[56] GenReturn(ret=4294967295[4], value=0, discard=52)
Finished
