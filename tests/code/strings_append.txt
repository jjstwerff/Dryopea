Test code:
pub fn test() {
    test_value = {a="â™¥ðŸ˜ƒ" + "1" + "2"; a};
    assert(
        test_value == "â™¥ðŸ˜ƒ12",
        "Test failed {test_value} != \"â™¥ðŸ˜ƒ12\""
    );
}

fn test {
  let test_value = {
    let a = "";
    OpAppendText(a, "â™¥ðŸ˜ƒ");
    OpAppendText(a, "1");
    OpAppendText(a, "2");
    a;
  };
  if OpEqText(test_value, "â™¥ðŸ˜ƒ12") {null} else {OpGenPanic({
    let append_8 = "Test failed ";
    OpFormatText(append_8, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_8, " != "â™¥ðŸ˜ƒ12"");
    append_8;
  })};
}

byte-code for append:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="") -> text
 672[68]: AppendText(var[28], v1: text)
 675[52]: ConstText(_value="â™¥ðŸ˜ƒ") -> text
 684[68]: AppendText(var[28], v1: text)
 687[52]: ConstText(_value="1") -> text
 690[68]: AppendText(var[28], v1: text)
 693[52]: ConstText(_value="2") -> text
 696[68]: AppendText(var[28], v1: text)
 699[52]: VarText(var[28]) -> text
 702[68]: GenFreeStack(value=16, discard=24)
 706[44]: AppendText(var[4], v1: text)
 709[28]: VarText(var[4]) -> text
 712[44]: ConstText(_value="â™¥ðŸ˜ƒ12") -> text
 723[60]: EqText(v1: text, v2: text) -> boolean
 724[29]: GenGotoFalseWord(jump=730, if_false: boolean)
 727[28]: GenGotoWord(jump=789)
 730[28]: Text()
 731[52]: ConstText(_value="Test failed ") -> text
 745[68]: AppendText(var[28], v1: text)
 748[52]: VarText(var[4]) -> text
 751[68]: ConstInt(val=0) -> integer
 756[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 761[52]: ConstText(_value=" != "â™¥ðŸ˜ƒ12"") -> text
 778[68]: AppendText(var[28], v1: text)
 781[52]: VarText(var[28]) -> text
 784[68]: GenFreeStack(value=16, discard=24)
 788[44]: GenPanic(message: text)
 789[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Text()
  670:[52] ConstText(_value="") -> ""[52]
  672:[68] AppendText(var[28], v1=""[52])
  675:[52] ConstText(_value="â™¥ðŸ˜ƒ") -> "â™¥ðŸ˜ƒ"[52]
  684:[68] AppendText(var[28], v1="â™¥ðŸ˜ƒ"[52])
  687:[52] ConstText(_value="1") -> "1"[52]
  690:[68] AppendText(var[28], v1="1"[52])
  693:[52] ConstText(_value="2") -> "2"[52]
  696:[68] AppendText(var[28], v1="2"[52])
  699:[52] VarText(var[28]) -> "â™¥ðŸ˜ƒ12"[52]
  702:[68] GenFreeStack(value=16, discard=24)
  706:[44] AppendText(var[4], v1="â™¥ðŸ˜ƒ12"[28])
  709:[28] VarText(var[4]) -> "â™¥ðŸ˜ƒ12"[28]
  712:[44] ConstText(_value="â™¥ðŸ˜ƒ12") -> "â™¥ðŸ˜ƒ12"[44]
  723:[60] EqText(v1="â™¥ðŸ˜ƒ12"[28], v2="â™¥ðŸ˜ƒ12"[44]) -> true[28]
  724:[29] GenGotoFalseWord(jump=730, if_false=true[28])
  727:[28] GenGotoWord(jump=789)
  789:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
