pub fn test() {
    test_value = {a="â™¥ðŸ˜ƒ" + "1" + "2"; a};
    assert(
        test_value == "â™¥ðŸ˜ƒ12",
        "Test failed {test_value} != \"â™¥ðŸ˜ƒ12\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  a:text = "";
  test_value:text["a"] = {#2 block
    a:text = "â™¥ðŸ˜ƒ";
    OpAppendText(a, "1");
    OpAppendText(a, "2");
    a;
  }#2:text["a"];
  if OpEqText(test_value, "â™¥ðŸ˜ƒ12") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "â™¥ðŸ˜ƒ12"");
    __work_1;
  }#3:text);
}#1

byte-code for append:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: Text() var=a[28]:text in 1
 657[52]: Text() var=test_value[52]:text["a"] in 1
 658[76]: ClearText(var[28]) var=a[28]:text in 1
 661[76]: ConstText(_value="â™¥ðŸ˜ƒ") -> text
 670[92]: AppendText(var[28], v1: text)
 673[76]: ConstText(_value="1") -> text
 676[92]: AppendText(var[28], v1: text)
 679[76]: ConstText(_value="2") -> text
 682[92]: AppendText(var[28], v1: text)
 685[76]: VarText(var[28]) -> text var=a[28]:text in 1
 688[92]: AppendText(var[52], v1: text)
 691[76]: VarText(var[52]) -> text var=test_value[52]:text["a"] in 1
 694[92]: ConstText(_value="â™¥ðŸ˜ƒ12") -> text
 705[108]: EqText(v1: text, v2: text) -> boolean
 706[77]: GotoFalseWord(jump=712, if_false: boolean)
 709[76]: GotoWord(jump=769)
 712[76]: ClearText(var[4]) var=__work_1[4]:text in 1
 715[76]: ConstText(_value="Test failed ") -> text
 729[92]: AppendText(var[4], v1: text)
 732[76]: VarText(var[52]) -> text var=test_value[52]:text["a"] in 1
 735[92]: ConstInt(val=0) -> integer
 740[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 745[76]: ConstText(_value=" != "â™¥ðŸ˜ƒ12"") -> text
 762[92]: AppendText(var[4], v1: text)
 765[76]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 768[92]: Panic(message: text)
 769[76]: FreeText(var[52])
 772[76]: FreeText(var[28])
 775[76]: FreeText(var[4])
 778[76]: Return(ret=0, value=0, discard=76)

Execute test:
  655:[8] Text()
  656:[32] Text()
  657:[56] Text()
  658:[80] ClearText(var[32])
  661:[80] ConstText(_value="â™¥ðŸ˜ƒ") -> "â™¥ðŸ˜ƒ"[80]
  670:[96] AppendText(var[32], v1="â™¥ðŸ˜ƒ"[80])
  673:[80] ConstText(_value="1") -> "1"[80]
  676:[96] AppendText(var[32], v1="1"[80])
  679:[80] ConstText(_value="2") -> "2"[80]
  682:[96] AppendText(var[32], v1="2"[80])
  685:[80] VarText(var[32]) -> "â™¥ðŸ˜ƒ12"[80]
  688:[96] AppendText(var[56], v1="â™¥ðŸ˜ƒ12"[80])
  691:[80] VarText(var[56]) -> "â™¥ðŸ˜ƒ12"[80]
  694:[96] ConstText(_value="â™¥ðŸ˜ƒ12") -> "â™¥ðŸ˜ƒ12"[96]
  705:[112] EqText(v1="â™¥ðŸ˜ƒ12"[80], v2="â™¥ðŸ˜ƒ12"[96]) -> true[80]
  706:[81] GotoFalseWord(jump=712, if_false=true[80])
  709:[80] GotoWord(jump=769)
  769:[80] FreeText(var[56])
  772:[80] FreeText(var[32])
  775:[80] FreeText(var[8])
  778:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
