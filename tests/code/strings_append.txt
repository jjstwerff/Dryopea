pub fn test() {
    test_value = {a="â™¥ðŸ˜ƒ" + "1" + "2"; a};
    assert(
        test_value == "â™¥ðŸ˜ƒ12",
        "Test failed {test_value} != \"â™¥ðŸ˜ƒ12\""
    );
}
fn test() {#block_1:void
  __work_1:text(1) = "";
  a:text["a"](1) = "";
  test_value:text["a"](1) = {#block_2:text["a"]
    a:text["a"](1) = "";
    OpAppendText(a, "â™¥ðŸ˜ƒ");
    OpAppendText(a, "1");
    OpAppendText(a, "2");
    a;
  }#block_2:text["a"];
  if OpEqText(test_value, "â™¥ðŸ˜ƒ12") null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "â™¥ðŸ˜ƒ12"");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(test_value);
  OpFreeText(a);
  OpFreeText(__work_1);
}#block_1:void

byte-code for append:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Text() var=a[32]:text["a"]
   2[56]: Text() var=test_value[56]:text["a"]
   3[80]: ClearText(var[32]) var=a[32]:text["a"]
   6[80]: ConstText(_value="") -> text
   8[96]: AppendText(var[32], v1: text)
  11[80]: ConstText(_value="â™¥ðŸ˜ƒ") -> text
  20[96]: AppendText(var[32], v1: text)
  23[80]: ConstText(_value="1") -> text
  26[96]: AppendText(var[32], v1: text)
  29[80]: ConstText(_value="2") -> text
  32[96]: AppendText(var[32], v1: text)
  35[80]: VarText(var[32]) -> text var=a[32]:text["a"]
  38[96]: AppendText(var[56], v1: text)
  41[80]: VarText(var[56]) -> text var=test_value[56]:text["a"]
  44[96]: ConstText(_value="â™¥ðŸ˜ƒ12") -> text
  55[112]: EqText(v1: text, v2: text) -> boolean
  56[81]: GotoFalseWord(jump=62, if_false: boolean)
  59[80]: GotoWord(jump=119)
  62[80]: ClearText(var[8]) var=__work_1[8]:text
  65[80]: ConstText(_value="Test failed ") -> text
  79[96]: AppendText(var[8], v1: text)
  82[80]: VarText(var[56]) -> text var=test_value[56]:text["a"]
  85[96]: ConstInt(val=0) -> integer
  90[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  95[80]: ConstText(_value=" != "â™¥ðŸ˜ƒ12"") -> text
 112[96]: AppendText(var[8], v1: text)
 115[80]: VarText(var[8]) -> text var=__work_1[8]:text
 118[96]: Panic(message: text)
 119[80]: FreeText(var[56])
 122[80]: FreeText(var[32])
 125[80]: FreeText(var[8])
 128[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value="") -> ""[80]
    8:[96] AppendText(var[32], v1=""[80])
   11:[80] ConstText(_value="â™¥ðŸ˜ƒ") -> "â™¥ðŸ˜ƒ"[80]
   20:[96] AppendText(var[32], v1="â™¥ðŸ˜ƒ"[80])
   23:[80] ConstText(_value="1") -> "1"[80]
   26:[96] AppendText(var[32], v1="1"[80])
   29:[80] ConstText(_value="2") -> "2"[80]
   32:[96] AppendText(var[32], v1="2"[80])
   35:[80] VarText(var[32]) -> "â™¥ðŸ˜ƒ12"[80]
   38:[96] AppendText(var[56], v1="â™¥ðŸ˜ƒ12"[80])
   41:[80] VarText(var[56]) -> "â™¥ðŸ˜ƒ12"[80]
   44:[96] ConstText(_value="â™¥ðŸ˜ƒ12") -> "â™¥ðŸ˜ƒ12"[96]
   55:[112] EqText(v1="â™¥ðŸ˜ƒ12"[80], v2="â™¥ðŸ˜ƒ12"[96]) -> true[80]
   56:[81] GotoFalseWord(jump=1230, if_false=true[80])
   59:[80] GotoWord(jump=1287)
  119:[80] FreeText(var[56])
  122:[80] FreeText(var[32])
  125:[80] FreeText(var[8])
  128:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
