fn add(a: &integer, b: integer, c: integer=0) {
    a += b + c;
}

pub fn test() {
    test_value = {v = 1; add(v, 2); add(v, 4, 1); v};
    assert(
        test_value == 8,
        "Test failed {test_value} != 8"
    );
}
fn add(a:&integer, b:integer, c:integer) {#1 block
  a:&integer = OpAddInt(a, OpAddInt(b, c));
}#1

byte-code for reference:add(a: &integer[0], b: integer[12], c: integer[16]) [1073]
   0[20]: return-address
   0[24]: VarRef(var[0]) -> ref(reference) var=a[0]:&integer in 0
   3[36]: VarRef(var[0]) -> ref(reference) var=a[0]:&integer in 0
   6[48]: GetInt(v1: ref(reference), fld=0) -> integer
   9[40]: VarInt(var[12]) -> integer var=b[12]:integer in 0
  12[44]: VarInt(var[16]) -> integer var=c[16]:integer in 0
  15[48]: AddInt(v1: integer, v2: integer) -> integer
  16[44]: AddInt(v1: integer, v2: integer) -> integer
  17[40]: SetInt(v1: ref(reference), fld=0, val: integer)
  20[24]: Return(ret=20, value=0, discard=24)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    v:integer = 1i32;
    add(OpCreateRef(v), 2i32, 0i32);
    add(OpCreateRef(v), 4i32, 1i32);
    v;
  }#2:integer;
  if OpEqInt(test_value, 8i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 8");
    __work_1;
  }#3:text);
}#1

byte-code for reference:test() [1099]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=1) -> integer var=v[28]:integer in 2
   6[32]: CreateRef(var[28]) -> ref(reference)
   9[44]: ConstInt(val=2) -> integer
  14[48]: ConstInt(val=0) -> integer
  19[52]: Call(size=0, to=1073)
  26[32]: CreateRef(var[28]) -> ref(reference)
  29[44]: ConstInt(val=4) -> integer
  34[48]: ConstInt(val=1) -> integer
  39[52]: Call(size=0, to=1073)
  46[32]: VarInt(var[28]) -> integer var=v[28]:integer in 2
  49[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
  53[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  56[36]: ConstInt(val=8) -> integer
  61[40]: EqInt(v1: integer, v2: integer) -> boolean
  62[33]: GotoFalseWord(jump=68, if_false: boolean)
  65[32]: GotoWord(jump=117)
  68[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  71[32]: ConstText(_value="Test failed ") -> text
  85[48]: AppendText(var[4], v1: text)
  88[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  91[36]: ConstInt(val=0) -> integer
  96[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 103[32]: ConstText(_value=" != 8") -> text
 110[48]: AppendText(var[4], v1: text)
 113[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 116[48]: Panic(message: text)
 117[32]: FreeText(var[4])
 120[32]: Return(ret=0, value=0, discard=32)

