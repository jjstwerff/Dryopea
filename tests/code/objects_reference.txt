fn add(a: &integer, b: integer, c: integer=0) {
    a += b + c;
}

pub fn test() {
    test_value = {v = 1; add(v, 2); add(v, 4, 1); v};
    assert(
        test_value == 8,
        "Test failed {test_value} != 8"
    );
}
fn add(a:refvar(integer(-2147483647, 2147483647)), b:integer, c:integer) {#1 block
  a:refvar(integer(-2147483647, 2147483647)) = OpAddInt(a, OpAddInt(b, c));
}#1

byte-code for reference:add(a: refvar(integer(-2147483647, 2147483647))[0], b: integer[12], c: integer[16])
 675[20]: return-address
 675[24]: VarRef(var[0]) -> reference
 678[36]: VarRef(var[0]) -> reference
 681[48]: GetInt(v1: reference, fld=0) -> integer
 684[40]: VarInt(var[12]) -> integer
 687[44]: VarInt(var[16]) -> integer
 690[48]: AddInt(v1: integer, v2: integer) -> integer
 691[44]: AddInt(v1: integer, v2: integer) -> integer
 692[40]: SetInt(v1: reference, fld=0, val: integer)
 695[24]: Return(ret=20, value=0, discard=24)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    v:integer = 1i32;
    add(OpCreateRef(v), 2i32, 0i32);
    add(OpCreateRef(v), 4i32, 1i32);
    v;
  }#2:integer;
  if OpEqInt(test_value, 8i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 8");
    __work_1;
  }#3:text);
}#1

byte-code for reference:test()
 701[0]: return-address
 701[4]: Text()
 702[28]: ConstInt(val=1) -> integer
 707[32]: CreateRef(var[28]) -> reference
 710[44]: ConstInt(val=2) -> integer
 715[48]: ConstInt(val=0) -> integer
 720[52]: Call(size=0, to=675)
 727[32]: CreateRef(var[28]) -> reference
 730[44]: ConstInt(val=4) -> integer
 735[48]: ConstInt(val=1) -> integer
 740[52]: Call(size=0, to=675)
 747[32]: VarInt(var[28]) -> integer
 750[36]: FreeStack(value=4, discard=4) type=integer[4]:Base[0]
 754[32]: VarInt(var[28]) -> integer
 757[36]: ConstInt(val=8) -> integer
 762[40]: EqInt(v1: integer, v2: integer) -> boolean
 763[33]: GotoFalseWord(jump=769, if_false: boolean)
 766[32]: GotoWord(jump=818)
 769[32]: ClearText(var[4])
 772[32]: ConstText(_value="Test failed ") -> text
 786[48]: AppendText(var[4], v1: text)
 789[32]: VarInt(var[28]) -> integer
 792[36]: ConstInt(val=0) -> integer
 797[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 804[32]: ConstText(_value=" != 8") -> text
 811[48]: AppendText(var[4], v1: text)
 814[32]: VarText(var[4]) -> text
 817[48]: Panic(message: text)
 818[32]: Return(ret=0, value=0, discard=32)

Execute test:
  701:[8] Text()
  702:[32] ConstInt(val=1) -> 1[32]
  707:[36] CreateRef(var[32]) -> ref(0,1,32)[36]
  710:[48] ConstInt(val=2) -> 2[48]
  715:[52] ConstInt(val=0) -> 0[52]
  720:[56] Call(size=0, to=675)
  675:[60] VarRef(var[36]) -> ref(0,1,32)[60]
  678:[72] VarRef(var[36]) -> ref(0,1,32)[72]
  681:[84] GetInt(v1=ref(0,1,32)[72], fld=0) -> 1[72]
  684:[76] VarInt(var[48]) -> 2[76]
  687:[80] VarInt(var[52]) -> 0[80]
  690:[84] AddInt(v1=2[76], v2=0[80]) -> 2[76]
  691:[80] AddInt(v1=1[72], v2=2[76]) -> 3[72]
  692:[76] SetInt(v1=ref(0,1,32)[60], fld=0, val=3[72])
  695:[60] Return(ret=727[56], value=0, discard=24)
  727:[36] CreateRef(var[32]) -> ref(0,1,32)[36]
  730:[48] ConstInt(val=4) -> 4[48]
  735:[52] ConstInt(val=1) -> 1[52]
  740:[56] Call(size=0, to=675)
  675:[60] VarRef(var[36]) -> ref(0,1,32)[60]
  678:[72] VarRef(var[36]) -> ref(0,1,32)[72]
  681:[84] GetInt(v1=ref(0,1,32)[72], fld=0) -> 3[72]
  684:[76] VarInt(var[48]) -> 4[76]
  687:[80] VarInt(var[52]) -> 1[80]
  690:[84] AddInt(v1=4[76], v2=1[80]) -> 5[76]
  691:[80] AddInt(v1=3[72], v2=5[76]) -> 8[72]
  692:[76] SetInt(v1=ref(0,1,32)[60], fld=0, val=8[72])
  695:[60] Return(ret=747[56], value=0, discard=24)
  747:[36] VarInt(var[32]) -> 8[36]
  750:[40] FreeStack(value=4, discard=4)
  754:[36] VarInt(var[32]) -> 8[36]
  757:[40] ConstInt(val=8) -> 8[40]
  762:[44] EqInt(v1=8[36], v2=8[40]) -> true[36]
  763:[37] GotoFalseWord(jump=769, if_false=true[36])
  766:[36] GotoWord(jump=818)
  818:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
