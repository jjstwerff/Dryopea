fn add(a: &integer, b: integer, c: integer=0) {
    a += b + c;
}

pub fn test() {
    test_value = {v = 1; add(v, 2); add(v, 4, 1); v};
    assert(
        test_value == 8,
        "Test failed {test_value} != 8"
    );
}
fn add(a:&integer, b:integer, c:integer) {#block_1:void
  a:&integer(0) = OpAddInt(a, OpAddInt(b, c));
}#block_1:void

byte-code for reference:add(a: &integer[4], b: integer[16], c: integer[20]) [1168]
   0[24]: return-address
   0[28]: VarRef(var[4]) -> ref(reference) var=a[4]:&integer
   3[40]: VarRef(var[4]) -> ref(reference) var=a[4]:&integer
   6[52]: GetInt(v1: ref(reference), fld=0) -> integer
   9[44]: VarInt(var[16]) -> integer var=b[16]:integer
  12[48]: VarInt(var[20]) -> integer var=c[20]:integer
  15[52]: AddInt(v1: integer, v2: integer) -> integer
  16[48]: AddInt(v1: integer, v2: integer) -> integer
  17[44]: SetInt(v1: ref(reference), fld=0, val: integer)
  20[28]: Return(ret=20, value=0, discard=24)

fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    v:integer(2) = 1i32;
    add(OpCreateRef(v), 2i32, 0i32);
    add(OpCreateRef(v), 4i32, 1i32);
    v;
  }#block_2:integer;
  if OpEqInt(test_value, 8i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 8");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for reference:test() [1194]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=1) -> integer var=v[32]:integer
   6[36]: CreateRef(var[32]) -> ref(reference)
   9[48]: ConstInt(val=2) -> integer
  14[52]: ConstInt(val=0) -> integer
  19[56]: Call(size=0, to=1168)
  26[36]: CreateRef(var[32]) -> ref(reference)
  29[48]: ConstInt(val=4) -> integer
  34[52]: ConstInt(val=1) -> integer
  39[56]: Call(size=0, to=1168)
  46[36]: VarInt(var[32]) -> integer var=v[32]:integer
  49[40]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
  53[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  56[40]: ConstInt(val=8) -> integer
  61[44]: EqInt(v1: integer, v2: integer) -> boolean
  62[37]: GotoFalseWord(jump=68, if_false: boolean)
  65[36]: GotoWord(jump=117)
  68[36]: ClearText(var[8]) var=__work_1[8]:text
  71[36]: ConstText(_value="Test failed ") -> text
  85[52]: AppendText(var[8], v1: text)
  88[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  91[40]: ConstInt(val=0) -> integer
  96[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 103[36]: ConstText(_value=" != 8") -> text
 110[52]: AppendText(var[8], v1: text)
 113[36]: VarText(var[8]) -> text var=__work_1[8]:text
 116[52]: Panic(message: text)
 117[36]: FreeText(var[8])
 120[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=1) -> 1[32]
    6:[36] CreateRef(var[32]) -> ref(0,1,32)[36]
    9:[48] ConstInt(val=2) -> 2[48]
   14:[52] ConstInt(val=0) -> 0[52]
   19:[56] Call(size=0, to=1168)
 1168:[60] VarRef(var[36]) -> ref(0,1,32)[60]
 1171:[72] VarRef(var[36]) -> ref(0,1,32)[72]
 1174:[84] GetInt(v1=ref(0,1,32)[72], fld=0) -> 1[72]
 1177:[76] VarInt(var[48]) -> 2[76]
 1180:[80] VarInt(var[52]) -> 0[80]
 1183:[84] AddInt(v1=2[76], v2=0[80]) -> 2[76]
 1184:[80] AddInt(v1=1[72], v2=2[76]) -> 3[72]
 1185:[76] SetInt(v1=ref(0,1,32)[60], fld=0, val=3[72])
 1188:[60] Return(ret=1220[56], value=0, discard=24)
   26:[36] CreateRef(var[32]) -> ref(0,1,32)[36]
   29:[48] ConstInt(val=4) -> 4[48]
   34:[52] ConstInt(val=1) -> 1[52]
   39:[56] Call(size=0, to=1168)
 1168:[60] VarRef(var[36]) -> ref(0,1,32)[60]
 1171:[72] VarRef(var[36]) -> ref(0,1,32)[72]
 1174:[84] GetInt(v1=ref(0,1,32)[72], fld=0) -> 3[72]
 1177:[76] VarInt(var[48]) -> 4[76]
 1180:[80] VarInt(var[52]) -> 1[80]
 1183:[84] AddInt(v1=4[76], v2=1[80]) -> 5[76]
 1184:[80] AddInt(v1=3[72], v2=5[76]) -> 8[72]
 1185:[76] SetInt(v1=ref(0,1,32)[60], fld=0, val=8[72])
 1188:[60] Return(ret=1240[56], value=0, discard=24)
   46:[36] VarInt(var[32]) -> 8[36]
   49:[40] FreeStack(value=4, discard=8)
   53:[36] VarInt(var[32]) -> 8[36]
   56:[40] ConstInt(val=8) -> 8[40]
   61:[44] EqInt(v1=8[36], v2=8[40]) -> true[36]
   62:[37] GotoFalseWord(jump=1262, if_false=true[36])
   65:[36] GotoWord(jump=1311)
  117:[36] FreeText(var[8])
  120:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
