fn add(a: &integer, b: integer, c: integer=0) {
    a += b + c;
}

pub fn test() {
    test_value = {v = 1; add(v, 2); add(v, 4, 1); v};
    assert(
        test_value == 8,
        "Test failed {test_value} != 8"
    );
}
fn add(a:&integer, b:integer, c:integer) {#1 block
  a:&integer = OpAddInt(a, OpAddInt(b, c));
}#1

byte-code for reference:add(a: &integer[0], b: integer[12], c: integer[16])
 691[20]: return-address
 691[24]: VarRef(var[0]) -> reference
 694[36]: VarRef(var[0]) -> reference
 697[48]: GetInt(v1: reference, fld=0) -> integer
 700[40]: VarInt(var[12]) -> integer
 703[44]: VarInt(var[16]) -> integer
 706[48]: AddInt(v1: integer, v2: integer) -> integer
 707[44]: AddInt(v1: integer, v2: integer) -> integer
 708[40]: SetInt(v1: reference, fld=0, val: integer)
 711[24]: Return(ret=20, value=0, discard=24)

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    v:integer = 1i32;
    add(OpCreateRef(v), 2i32, 0i32);
    add(OpCreateRef(v), 4i32, 1i32);
    v;
  }#2:integer;
  if OpEqInt(test_value, 8i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 8");
    __work_1;
  }#3:text);
}#1

byte-code for reference:test()
 717[0]: return-address
 717[4]: Text()
 718[28]: ConstInt(val=1) -> integer
 723[32]: CreateRef(var[28]) -> reference
 726[44]: ConstInt(val=2) -> integer
 731[48]: ConstInt(val=0) -> integer
 736[52]: Call(size=0, to=691)
 743[32]: CreateRef(var[28]) -> reference
 746[44]: ConstInt(val=4) -> integer
 751[48]: ConstInt(val=1) -> integer
 756[52]: Call(size=0, to=691)
 763[32]: VarInt(var[28]) -> integer
 766[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 770[32]: VarInt(var[28]) -> integer
 773[36]: ConstInt(val=8) -> integer
 778[40]: EqInt(v1: integer, v2: integer) -> boolean
 779[33]: GotoFalseWord(jump=785, if_false: boolean)
 782[32]: GotoWord(jump=834)
 785[32]: ClearText(var[4])
 788[32]: ConstText(_value="Test failed ") -> text
 802[48]: AppendText(var[4], v1: text)
 805[32]: VarInt(var[28]) -> integer
 808[36]: ConstInt(val=0) -> integer
 813[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 820[32]: ConstText(_value=" != 8") -> text
 827[48]: AppendText(var[4], v1: text)
 830[32]: VarText(var[4]) -> text
 833[48]: Panic(message: text)
 834[32]: FreeText(var[4])
 837[32]: Return(ret=0, value=0, discard=32)

Execute test:
  717:[8] Text()
  718:[32] ConstInt(val=1) -> 1[32]
  723:[36] CreateRef(var[32]) -> ref(0,1,32)[36]
  726:[48] ConstInt(val=2) -> 2[48]
  731:[52] ConstInt(val=0) -> 0[52]
  736:[56] Call(size=0, to=691)
  691:[60] VarRef(var[36]) -> ref(0,1,32)[60]
  694:[72] VarRef(var[36]) -> ref(0,1,32)[72]
  697:[84] GetInt(v1=ref(0,1,32)[72], fld=0) -> 1[72]
  700:[76] VarInt(var[48]) -> 2[76]
  703:[80] VarInt(var[52]) -> 0[80]
  706:[84] AddInt(v1=2[76], v2=0[80]) -> 2[76]
  707:[80] AddInt(v1=1[72], v2=2[76]) -> 3[72]
  708:[76] SetInt(v1=ref(0,1,32)[60], fld=0, val=3[72])
  711:[60] Return(ret=743[56], value=0, discard=24)
  743:[36] CreateRef(var[32]) -> ref(0,1,32)[36]
  746:[48] ConstInt(val=4) -> 4[48]
  751:[52] ConstInt(val=1) -> 1[52]
  756:[56] Call(size=0, to=691)
  691:[60] VarRef(var[36]) -> ref(0,1,32)[60]
  694:[72] VarRef(var[36]) -> ref(0,1,32)[72]
  697:[84] GetInt(v1=ref(0,1,32)[72], fld=0) -> 3[72]
  700:[76] VarInt(var[48]) -> 4[76]
  703:[80] VarInt(var[52]) -> 1[80]
  706:[84] AddInt(v1=4[76], v2=1[80]) -> 5[76]
  707:[80] AddInt(v1=3[72], v2=5[76]) -> 8[72]
  708:[76] SetInt(v1=ref(0,1,32)[60], fld=0, val=8[72])
  711:[60] Return(ret=763[56], value=0, discard=24)
  763:[36] VarInt(var[32]) -> 8[36]
  766:[40] FreeStack(value=4, discard=8)
  770:[36] VarInt(var[32]) -> 8[36]
  773:[40] ConstInt(val=8) -> 8[40]
  778:[44] EqInt(v1=8[36], v2=8[40]) -> true[36]
  779:[37] GotoFalseWord(jump=785, if_false=true[36])
  782:[36] GotoWord(jump=834)
  834:[36] FreeText(var[8])
  837:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
