Test code:
enum T{A, C, B}
fn count(v: T) -> integer { if v > C { 2 } else { 1 } }

pub fn test() {
    test_value = {count(A) + count(B) + count(B)};
    assert(
        test_value == 5,
        "Test failed {test_value} != 5"
    );
}

Type 13:T[1]:Enum(["A", "C", "B"])

fn count {
  if OpGtEnum(v, 2u8(13)) {{
    2i32;
  }} else {{
    1i32;
  }};
}

byte-code for compare:count(v: T[0]) -> integer
 668[1]: return-address
 668[5]: VarEnum(var[0]) -> enumerate type=T[1]:Enum(["A", "C", "B"])[13]
 671[6]: ConstEnum(val=2) -> enumerate type=T[1]:Enum(["A", "C", "B"])[13]
 673[7]: GtEnum(v1: enumerate, v2: enumerate) -> boolean
 674[6]: GenGotoFalseWord(jump=685, if_false: boolean)
 677[5]: ConstInt(val=2) -> integer
 682[9]: GenGotoWord(jump=690)
 685[5]: ConstInt(val=1) -> integer
 690[9]: GenReturn(ret=1, value=4, discard=9)

fn test {
  let test_value = {
    OpAddInt(OpAddInt(count(1u8(13)), count(3u8(13))), count(3u8(13)));
  };
  if OpEqInt(test_value, 5i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 5");
    append_7;
  })};
}

byte-code for compare:test()
 696[0]: return-address
 696[4]: ConstEnum(val=1) -> enumerate type=T[1]:Enum(["A", "C", "B"])[13]
 698[5]: GenCall(size=0, to=668)
 705[8]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[13]
 707[9]: GenCall(size=0, to=668)
 714[12]: AddInt(v1: integer, v2: integer) -> integer
 715[8]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[13]
 717[9]: GenCall(size=0, to=668)
 724[12]: AddInt(v1: integer, v2: integer) -> integer
 725[8]: VarInt(var[4]) -> integer
 728[12]: ConstInt(val=5) -> integer
 733[16]: EqInt(v1: integer, v2: integer) -> boolean
 734[9]: GenGotoFalseWord(jump=740, if_false: boolean)
 737[8]: GenGotoWord(jump=791)
 740[8]: Text()
 741[32]: ConstText(_value="Test failed ") -> text
 755[48]: AppendText(var[8], v1: text)
 758[32]: VarInt(var[4]) -> integer
 761[36]: ConstInt(val=0) -> integer
 766[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 773[32]: ConstText(_value=" != 5") -> text
 780[48]: AppendText(var[8], v1: text)
 783[32]: VarText(var[8]) -> text
 786[48]: GenFreeStack(value=16, discard=24)
 790[24]: GenPanic(message: text)
 791[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  696:[4] ConstEnum(val=1) -> A(1)[4]
  698:[5] GenCall(size=0, to=668)
  668:[9] VarEnum(var[4]) -> A(1)[9]
  671:[10] ConstEnum(val=2) -> C(2)[10]
  673:[11] GtEnum(v1=1[9], v2=2[10]) -> false[9]
  674:[10] GenGotoFalseWord(jump=685, if_false=false[9])
  685:[9] ConstInt(val=1) -> 1[9]
  690:[13] GenReturn(ret=705[5], value=4, discard=9)
  705:[8] ConstEnum(val=3) -> B(3)[8]
  707:[9] GenCall(size=0, to=668)
  668:[13] VarEnum(var[8]) -> B(3)[13]
  671:[14] ConstEnum(val=2) -> C(2)[14]
  673:[15] GtEnum(v1=3[13], v2=2[14]) -> true[13]
  674:[14] GenGotoFalseWord(jump=685, if_false=true[13])
  677:[13] ConstInt(val=2) -> 2[13]
  682:[17] GenGotoWord(jump=690)
  690:[17] GenReturn(ret=714[9], value=4, discard=9)
  714:[12] AddInt(v1=1[4], v2=2[8]) -> 3[4]
  715:[8] ConstEnum(val=3) -> B(3)[8]
  717:[9] GenCall(size=0, to=668)
  668:[13] VarEnum(var[8]) -> B(3)[13]
  671:[14] ConstEnum(val=2) -> C(2)[14]
  673:[15] GtEnum(v1=3[13], v2=2[14]) -> true[13]
  674:[14] GenGotoFalseWord(jump=685, if_false=true[13])
  677:[13] ConstInt(val=2) -> 2[13]
  682:[17] GenGotoWord(jump=690)
  690:[17] GenReturn(ret=724[9], value=4, discard=9)
  724:[12] AddInt(v1=3[4], v2=2[8]) -> 5[4]
  725:[8] VarInt(var[4]) -> 5[8]
  728:[12] ConstInt(val=5) -> 5[12]
  733:[16] EqInt(v1=5[8], v2=5[12]) -> true[8]
  734:[9] GenGotoFalseWord(jump=740, if_false=true[8])
  737:[8] GenGotoWord(jump=791)
  791:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
