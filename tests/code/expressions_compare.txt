enum T{A, C, B}
fn count(v: T) -> integer { if v > C { 2 } else { 1 } }

pub fn test() {
    test_value = {count(A) + count(B) + count(B)};
    assert(
        test_value == 5,
        "Test failed {test_value} != 5"
    );
}
Type 12:T[1]:Enum(["A", "C", "B"])

fn count(v:T) -> integer {#1 block
  if OpGtEnum(v, 2u8(12)) {#2 block
    2i32;
  }#2:integer else {#3 block
    1i32;
  }#3:integer;
}#1:integer

byte-code for compare:count(v: T[0]) -> integer
 692[1]: return-address
 692[5]: VarEnum(var[0]) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 695[6]: ConstEnum(val=2) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 697[7]: GtEnum(v1: enumerate, v2: enumerate) -> boolean
 698[6]: GotoFalseWord(jump=709, if_false: boolean)
 701[5]: ConstInt(val=2) -> integer
 706[9]: GotoWord(jump=714)
 709[5]: ConstInt(val=1) -> integer
 714[9]: Return(ret=1, value=4, discard=9) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpAddInt(count(1u8(12)), count(3u8(12))), count(3u8(12)));
  }#2:integer;
  if OpEqInt(test_value, 5i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 5");
    __work_1;
  }#3:text);
}#1

byte-code for compare:test()
 720[0]: return-address
 720[4]: Text()
 721[28]: ConstEnum(val=1) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 723[29]: Call(size=0, to=692)
 730[32]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 732[33]: Call(size=0, to=692)
 739[36]: AddInt(v1: integer, v2: integer) -> integer
 740[32]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 742[33]: Call(size=0, to=692)
 749[36]: AddInt(v1: integer, v2: integer) -> integer
 750[32]: VarInt(var[28]) -> integer
 753[36]: ConstInt(val=5) -> integer
 758[40]: EqInt(v1: integer, v2: integer) -> boolean
 759[33]: GotoFalseWord(jump=765, if_false: boolean)
 762[32]: GotoWord(jump=814)
 765[32]: ClearText(var[4])
 768[32]: ConstText(_value="Test failed ") -> text
 782[48]: AppendText(var[4], v1: text)
 785[32]: VarInt(var[28]) -> integer
 788[36]: ConstInt(val=0) -> integer
 793[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 800[32]: ConstText(_value=" != 5") -> text
 807[48]: AppendText(var[4], v1: text)
 810[32]: VarText(var[4]) -> text
 813[48]: Panic(message: text)
 814[32]: Return(ret=0, value=0, discard=32)

Execute test:
  720:[8] Text()
  721:[32] ConstEnum(val=1) -> A(1)[32]
  723:[33] Call(size=0, to=692)
  692:[37] VarEnum(var[32]) -> A(1)[37]
  695:[38] ConstEnum(val=2) -> C(2)[38]
  697:[39] GtEnum(v1=1[37], v2=2[38]) -> false[37]
  698:[38] GotoFalseWord(jump=709, if_false=false[37])
  709:[37] ConstInt(val=1) -> 1[37]
  714:[41] Return(ret=730[33], value=4, discard=9) -> 1[32]
  730:[36] ConstEnum(val=3) -> B(3)[36]
  732:[37] Call(size=0, to=692)
  692:[41] VarEnum(var[36]) -> B(3)[41]
  695:[42] ConstEnum(val=2) -> C(2)[42]
  697:[43] GtEnum(v1=3[41], v2=2[42]) -> true[41]
  698:[42] GotoFalseWord(jump=709, if_false=true[41])
  701:[41] ConstInt(val=2) -> 2[41]
  706:[45] GotoWord(jump=714)
  714:[45] Return(ret=739[37], value=4, discard=9) -> 2[36]
  739:[40] AddInt(v1=1[32], v2=2[36]) -> 3[32]
  740:[36] ConstEnum(val=3) -> B(3)[36]
  742:[37] Call(size=0, to=692)
  692:[41] VarEnum(var[36]) -> B(3)[41]
  695:[42] ConstEnum(val=2) -> C(2)[42]
  697:[43] GtEnum(v1=3[41], v2=2[42]) -> true[41]
  698:[42] GotoFalseWord(jump=709, if_false=true[41])
  701:[41] ConstInt(val=2) -> 2[41]
  706:[45] GotoWord(jump=714)
  714:[45] Return(ret=749[37], value=4, discard=9) -> 2[36]
  749:[40] AddInt(v1=3[32], v2=2[36]) -> 5[32]
  750:[36] VarInt(var[32]) -> 5[36]
  753:[40] ConstInt(val=5) -> 5[40]
  758:[44] EqInt(v1=5[36], v2=5[40]) -> true[36]
  759:[37] GotoFalseWord(jump=765, if_false=true[36])
  762:[36] GotoWord(jump=814)
  814:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
