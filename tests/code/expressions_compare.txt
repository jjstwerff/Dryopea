enum T{A, C, B}
fn count(v: T) -> integer { if v > C { 2 } else { 1 } }

pub fn test() {
    test_value = {count(A) + count(B) + count(B)};
    assert(
        test_value == 5,
        "Test failed {test_value} != 5"
    );
}
Type 12:T[1]:Enum(["A", "C", "B"])

fn count(v:T) -> integer {#1 block
  if OpGtEnum(v, 2u8(12)) {#2 block
    2i32;
  }#2:integer else {#3 block
    1i32;
  }#3:integer;
}#1:integer

byte-code for compare:count(v: T[0]) -> integer
 691[1]: return-address
 691[5]: VarEnum(var[0]) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 694[6]: ConstEnum(val=2) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 696[7]: GtEnum(v1: enumerate, v2: enumerate) -> boolean
 697[6]: GotoFalseWord(jump=708, if_false: boolean)
 700[5]: ConstInt(val=2) -> integer
 705[9]: GotoWord(jump=713)
 708[5]: ConstInt(val=1) -> integer
 713[9]: Return(ret=1, value=4, discard=9) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpAddInt(count(1u8(12)), count(3u8(12))), count(3u8(12)));
  }#2:integer;
  if OpEqInt(test_value, 5i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 5");
    __work_1;
  }#3:text);
}#1

byte-code for compare:test()
 719[0]: return-address
 719[4]: Text()
 720[28]: ConstEnum(val=1) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 722[29]: Call(size=0, to=691)
 729[32]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 731[33]: Call(size=0, to=691)
 738[36]: AddInt(v1: integer, v2: integer) -> integer
 739[32]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[12]
 741[33]: Call(size=0, to=691)
 748[36]: AddInt(v1: integer, v2: integer) -> integer
 749[32]: VarInt(var[28]) -> integer
 752[36]: ConstInt(val=5) -> integer
 757[40]: EqInt(v1: integer, v2: integer) -> boolean
 758[33]: GotoFalseWord(jump=764, if_false: boolean)
 761[32]: GotoWord(jump=813)
 764[32]: ClearText(var[4])
 767[32]: ConstText(_value="Test failed ") -> text
 781[48]: AppendText(var[4], v1: text)
 784[32]: VarInt(var[28]) -> integer
 787[36]: ConstInt(val=0) -> integer
 792[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 799[32]: ConstText(_value=" != 5") -> text
 806[48]: AppendText(var[4], v1: text)
 809[32]: VarText(var[4]) -> text
 812[48]: Panic(message: text)
 813[32]: FreeText(var[4])
 816[32]: Return(ret=0, value=0, discard=32)

Execute test:
  719:[8] Text()
  720:[32] ConstEnum(val=1) -> A(1)[32]
  722:[33] Call(size=0, to=691)
  691:[37] VarEnum(var[32]) -> A(1)[37]
  694:[38] ConstEnum(val=2) -> C(2)[38]
  696:[39] GtEnum(v1=1[37], v2=2[38]) -> false[37]
  697:[38] GotoFalseWord(jump=708, if_false=false[37])
  708:[37] ConstInt(val=1) -> 1[37]
  713:[41] Return(ret=729[33], value=4, discard=9) -> 1[32]
  729:[36] ConstEnum(val=3) -> B(3)[36]
  731:[37] Call(size=0, to=691)
  691:[41] VarEnum(var[36]) -> B(3)[41]
  694:[42] ConstEnum(val=2) -> C(2)[42]
  696:[43] GtEnum(v1=3[41], v2=2[42]) -> true[41]
  697:[42] GotoFalseWord(jump=708, if_false=true[41])
  700:[41] ConstInt(val=2) -> 2[41]
  705:[45] GotoWord(jump=713)
  713:[45] Return(ret=738[37], value=4, discard=9) -> 2[36]
  738:[40] AddInt(v1=1[32], v2=2[36]) -> 3[32]
  739:[36] ConstEnum(val=3) -> B(3)[36]
  741:[37] Call(size=0, to=691)
  691:[41] VarEnum(var[36]) -> B(3)[41]
  694:[42] ConstEnum(val=2) -> C(2)[42]
  696:[43] GtEnum(v1=3[41], v2=2[42]) -> true[41]
  697:[42] GotoFalseWord(jump=708, if_false=true[41])
  700:[41] ConstInt(val=2) -> 2[41]
  705:[45] GotoWord(jump=713)
  713:[45] Return(ret=748[37], value=4, discard=9) -> 2[36]
  748:[40] AddInt(v1=3[32], v2=2[36]) -> 5[32]
  749:[36] VarInt(var[32]) -> 5[36]
  752:[40] ConstInt(val=5) -> 5[40]
  757:[44] EqInt(v1=5[36], v2=5[40]) -> true[36]
  758:[37] GotoFalseWord(jump=764, if_false=true[36])
  761:[36] GotoWord(jump=813)
  813:[36] FreeText(var[8])
  816:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
