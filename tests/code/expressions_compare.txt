enum T{A, C, B}
fn count(v: T) -> integer { if v > C { 2 } else { 1 } }

pub fn test() {
    test_value = {count(A) + count(B) + count(B)};
    assert(
        test_value == 5,
        "Test failed {test_value} != 5"
    );
}
Type 15:T[1]:Enum(["A", "C", "B"])

fn count(v:T) -> integer {#1 block
  if OpGtEnum(v, 2u8(15)) {#2 block
    2i32;
  }#2:integer else {#3 block
    1i32;
  }#3:integer;
}#1:integer

byte-code for compare:count(v: T[0]) [1067] -> integer
   0[1]: return-address
   0[5]: VarEnum(var[0]) -> enumerate type=T[1]:Enum(["A", "C", "B"])[15] var=v[0]:T in 0
   3[6]: ConstEnum(val=2) -> enumerate type=T[1]:Enum(["A", "C", "B"])[15]
   5[7]: GtEnum(v1: enumerate, v2: enumerate) -> boolean
   6[6]: GotoFalseWord(jump=17, if_false: boolean)
   9[5]: ConstInt(val=2) -> integer
  14[9]: GotoWord(jump=22)
  17[5]: ConstInt(val=1) -> integer
  22[9]: Return(ret=1, value=4, discard=9) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpAddInt(count(1u8(15)), count(3u8(15))), count(3u8(15)));
  }#2:integer;
  if OpEqInt(test_value, 5i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 5");
    __work_1;
  }#3:text);
}#1

byte-code for compare:test() [1095]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstEnum(val=1) -> enumerate type=T[1]:Enum(["A", "C", "B"])[15] var=test_value[28]:integer in 1
   3[29]: Call(size=0, to=1067)
  10[32]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[15]
  12[33]: Call(size=0, to=1067)
  19[36]: AddInt(v1: integer, v2: integer) -> integer
  20[32]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[15]
  22[33]: Call(size=0, to=1067)
  29[36]: AddInt(v1: integer, v2: integer) -> integer
  30[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  33[36]: ConstInt(val=5) -> integer
  38[40]: EqInt(v1: integer, v2: integer) -> boolean
  39[33]: GotoFalseWord(jump=45, if_false: boolean)
  42[32]: GotoWord(jump=94)
  45[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  48[32]: ConstText(_value="Test failed ") -> text
  62[48]: AppendText(var[4], v1: text)
  65[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  68[36]: ConstInt(val=0) -> integer
  73[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  80[32]: ConstText(_value=" != 5") -> text
  87[48]: AppendText(var[4], v1: text)
  90[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  93[48]: Panic(message: text)
  94[32]: FreeText(var[4])
  97[32]: Return(ret=0, value=0, discard=32)

