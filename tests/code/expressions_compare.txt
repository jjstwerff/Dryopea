enum T{A, C, B}
fn count(v: T) -> integer { if v > C { 2 } else { 1 } }

pub fn test() {
    test_value = {count(A) + count(B) + count(B)};
    assert(
        test_value == 5,
        "Test failed {test_value} != 5"
    );
}
Type 11:T[1]:Enum(["A", "C", "B"])

fn count(v:T) -> integer {#1 block
  if OpGtEnum(v, 2u8(11)) {#2 block
    2i32;
  }#2:integer else {#3 block
    1i32;
  }#3:integer;
}#1:integer

byte-code for compare:count(v: T[0]) -> integer
 682[1]: return-address
 682[5]: VarEnum(var[0]) -> enumerate type=T[1]:Enum(["A", "C", "B"])[11]
 685[6]: ConstEnum(val=2) -> enumerate type=T[1]:Enum(["A", "C", "B"])[11]
 687[7]: GtEnum(v1: enumerate, v2: enumerate) -> boolean
 688[6]: GotoFalseWord(jump=699, if_false: boolean)
 691[5]: ConstInt(val=2) -> integer
 696[9]: GotoWord(jump=704)
 699[5]: ConstInt(val=1) -> integer
 704[9]: Return(ret=1, value=4, discard=9) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(OpAddInt(count(1u8(11)), count(3u8(11))), count(3u8(11)));
  }#2:integer;
  if OpEqInt(test_value, 5i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 5");
    __work_1;
  }#3:text);
}#1

byte-code for compare:test()
 710[0]: return-address
 710[4]: Text()
 711[28]: ConstEnum(val=1) -> enumerate type=T[1]:Enum(["A", "C", "B"])[11]
 713[29]: Call(size=0, to=682)
 720[32]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[11]
 722[33]: Call(size=0, to=682)
 729[36]: AddInt(v1: integer, v2: integer) -> integer
 730[32]: ConstEnum(val=3) -> enumerate type=T[1]:Enum(["A", "C", "B"])[11]
 732[33]: Call(size=0, to=682)
 739[36]: AddInt(v1: integer, v2: integer) -> integer
 740[32]: VarInt(var[28]) -> integer
 743[36]: ConstInt(val=5) -> integer
 748[40]: EqInt(v1: integer, v2: integer) -> boolean
 749[33]: GotoFalseWord(jump=755, if_false: boolean)
 752[32]: GotoWord(jump=804)
 755[32]: ClearText(var[4])
 758[32]: ConstText(_value="Test failed ") -> text
 772[48]: AppendText(var[4], v1: text)
 775[32]: VarInt(var[28]) -> integer
 778[36]: ConstInt(val=0) -> integer
 783[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 790[32]: ConstText(_value=" != 5") -> text
 797[48]: AppendText(var[4], v1: text)
 800[32]: VarText(var[4]) -> text
 803[48]: Panic(message: text)
 804[32]: Return(ret=0, value=0, discard=32)

Execute test:
  710:[8] Text()
  711:[32] ConstEnum(val=1) -> A(1)[32]
  713:[33] Call(size=0, to=682)
  682:[37] VarEnum(var[32]) -> A(1)[37]
  685:[38] ConstEnum(val=2) -> C(2)[38]
  687:[39] GtEnum(v1=1[37], v2=2[38]) -> false[37]
  688:[38] GotoFalseWord(jump=699, if_false=false[37])
  699:[37] ConstInt(val=1) -> 1[37]
  704:[41] Return(ret=720[33], value=4, discard=9) -> 1[32]
  720:[36] ConstEnum(val=3) -> B(3)[36]
  722:[37] Call(size=0, to=682)
  682:[41] VarEnum(var[36]) -> B(3)[41]
  685:[42] ConstEnum(val=2) -> C(2)[42]
  687:[43] GtEnum(v1=3[41], v2=2[42]) -> true[41]
  688:[42] GotoFalseWord(jump=699, if_false=true[41])
  691:[41] ConstInt(val=2) -> 2[41]
  696:[45] GotoWord(jump=704)
  704:[45] Return(ret=729[37], value=4, discard=9) -> 2[36]
  729:[40] AddInt(v1=1[32], v2=2[36]) -> 3[32]
  730:[36] ConstEnum(val=3) -> B(3)[36]
  732:[37] Call(size=0, to=682)
  682:[41] VarEnum(var[36]) -> B(3)[41]
  685:[42] ConstEnum(val=2) -> C(2)[42]
  687:[43] GtEnum(v1=3[41], v2=2[42]) -> true[41]
  688:[42] GotoFalseWord(jump=699, if_false=true[41])
  691:[41] ConstInt(val=2) -> 2[41]
  696:[45] GotoWord(jump=704)
  704:[45] Return(ret=739[37], value=4, discard=9) -> 2[36]
  739:[40] AddInt(v1=3[32], v2=2[36]) -> 5[32]
  740:[36] VarInt(var[32]) -> 5[36]
  743:[40] ConstInt(val=5) -> 5[40]
  748:[44] EqInt(v1=5[36], v2=5[40]) -> true[36]
  749:[37] GotoFalseWord(jump=755, if_false=true[36])
  752:[36] GotoWord(jump=804)
  804:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
