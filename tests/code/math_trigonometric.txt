pub fn test() {
    test_value = {ceil(sin(PI) + cos(PI) * 1000)};
    assert(
        test_value == -1000,
        "Test failed {test_value} != -1000"
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    _tp_float_ceil(OpAddFloat(_tp_float_sin(OpMathPiFloat()), OpMulFloat(_tp_float_cos(OpMathPiFloat()), OpConvFloatFromInt(1000i32))));
  }#2;
  if OpEqFloat(test_value, OpConvFloatFromInt(OpMinSingleInt(1000i32))) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != -1000");
    __work_1;
  }#3);
}#1

byte-code for trigonometric:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: MathPiFloat() -> float
 670[36]: GenCall(size=0, to=189)
 677[36]: MathPiFloat() -> float
 678[44]: GenCall(size=0, to=179)
 685[44]: ConstInt(val=1000) -> integer
 690[48]: ConvFloatFromInt(v1: integer) -> float
 691[52]: MulFloat(v1: float, v2: float) -> float
 692[44]: AddFloat(v1: float, v2: float) -> float
 693[36]: GenCall(size=0, to=252)
 700[36]: VarFloat(var[28]) -> float
 703[44]: ConstInt(val=1000) -> integer
 708[48]: MinSingleInt(v1: integer) -> integer
 709[48]: ConvFloatFromInt(v1: integer) -> float
 710[52]: EqFloat(v1: float, v2: float) -> boolean
 711[37]: GenGotoFalseWord(jump=717, if_false: boolean)
 714[36]: GenGotoWord(jump=771)
 717[36]: ClearText(var[4])
 720[36]: ConstText(_value="Test failed ") -> text(false, [])
 734[52]: AppendText(var[4], v1: text(false, []))
 737[36]: VarFloat(var[28]) -> float
 740[44]: ConstInt(val=0) -> integer
 745[48]: ConstInt(val=0) -> integer
 750[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 753[36]: ConstText(_value=" != -1000") -> text(false, [])
 764[52]: AppendText(var[4], v1: text(false, []))
 767[36]: VarText(var[4]) -> text(false, [])
 770[52]: GenPanic(message: text(false, []))
 771[36]: GenReturn(ret=0, value=0, discard=36)

Execute test:
  668:[8] Text()
  669:[32] MathPiFloat() -> 3.141592653589793[32]
  670:[40] GenCall(size=0, to=189)
  189:[44] VarFloat(var[32]) -> 3.141592653589793[44]
  192:[52] MathSinFloat(v1=3.141592653589793[44]) -> 0.00000000000000012246467991473532[44]
  193:[52] GenReturn(ret=677[40], value=8, discard=20)
  677:[40] MathPiFloat() -> 3.141592653589793[40]
  678:[48] GenCall(size=0, to=179)
  179:[52] VarFloat(var[40]) -> 3.141592653589793[52]
  182:[60] MathCosFloat(v1=3.141592653589793[52]) -> -1[52]
  183:[60] GenReturn(ret=685[48], value=8, discard=20)
  685:[48] ConstInt(val=1000) -> 1000[48]
  690:[52] ConvFloatFromInt(v1=1000[48]) -> 1000[48]
  691:[56] MulFloat(v1=-1[40], v2=1000[48]) -> -1000[40]
  692:[48] AddFloat(v1=0.00000000000000012246467991473532[32], v2=-1000[40]) -> -1000[32]
  693:[40] GenCall(size=0, to=252)
  252:[44] VarFloat(var[32]) -> -1000[44]
  255:[52] MathCeilFloat(v1=-1000[44]) -> -1000[44]
  256:[52] GenReturn(ret=700[40], value=8, discard=20)
  700:[40] VarFloat(var[32]) -> -1000[40]
  703:[48] ConstInt(val=1000) -> 1000[48]
  708:[52] MinSingleInt(v1=1000[48]) -> -1000[48]
  709:[52] ConvFloatFromInt(v1=-1000[48]) -> -1000[48]
  710:[56] EqFloat(v1=-1000[40], v2=-1000[48]) -> true[40]
  711:[41] GenGotoFalseWord(jump=717, if_false=true[40])
  714:[40] GenGotoWord(jump=771)
  771:[40] GenReturn(ret=4294967295[4], value=0, discard=36)
Finished
