pub fn test() {
    test_value = {ceil(sin(PI) + cos(PI) * 1000)};
    assert(
        test_value == -1000,
        "Test failed {test_value} != -1000"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_ceil(OpAddFloat(_tp_float_sin(OpMathPiFloat()), OpMulFloat(_tp_float_cos(OpMathPiFloat()), OpConvFloatFromInt(1000i32))));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(OpMinSingleInt(1000i32))) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != -1000");
    __work_1;
  }#3:text);
}#1

byte-code for trigonometric:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: MathPiFloat() -> float
 684[36]: Call(size=0, to=189)
 691[36]: MathPiFloat() -> float
 692[44]: Call(size=0, to=179)
 699[44]: ConstInt(val=1000) -> integer
 704[48]: ConvFloatFromInt(v1: integer) -> float
 705[52]: MulFloat(v1: float, v2: float) -> float
 706[44]: AddFloat(v1: float, v2: float) -> float
 707[36]: Call(size=0, to=252)
 714[36]: VarFloat(var[28]) -> float
 717[44]: ConstInt(val=1000) -> integer
 722[48]: MinSingleInt(v1: integer) -> integer
 723[48]: ConvFloatFromInt(v1: integer) -> float
 724[52]: EqFloat(v1: float, v2: float) -> boolean
 725[37]: GotoFalseWord(jump=731, if_false: boolean)
 728[36]: GotoWord(jump=785)
 731[36]: ClearText(var[4])
 734[36]: ConstText(_value="Test failed ") -> text
 748[52]: AppendText(var[4], v1: text)
 751[36]: VarFloat(var[28]) -> float
 754[44]: ConstInt(val=0) -> integer
 759[48]: ConstInt(val=0) -> integer
 764[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 767[36]: ConstText(_value=" != -1000") -> text
 778[52]: AppendText(var[4], v1: text)
 781[36]: VarText(var[4]) -> text
 784[52]: Panic(message: text)
 785[36]: Return(ret=0, value=0, discard=36)

Execute test:
  682:[8] Text()
  683:[32] MathPiFloat() -> 3.141592653589793[32]
  684:[40] Call(size=0, to=189)
  189:[44] VarFloat(var[32]) -> 3.141592653589793[44]
  192:[52] MathSinFloat(v1=3.141592653589793[44]) -> 0.00000000000000012246467991473532[44]
  193:[52] Return(ret=691[40], value=8, discard=20) -> 0.00000000000000012246467991473532[32]
  691:[40] MathPiFloat() -> 3.141592653589793[40]
  692:[48] Call(size=0, to=179)
  179:[52] VarFloat(var[40]) -> 3.141592653589793[52]
  182:[60] MathCosFloat(v1=3.141592653589793[52]) -> -1[52]
  183:[60] Return(ret=699[48], value=8, discard=20) -> -1[40]
  699:[48] ConstInt(val=1000) -> 1000[48]
  704:[52] ConvFloatFromInt(v1=1000[48]) -> 1000[48]
  705:[56] MulFloat(v1=-1[40], v2=1000[48]) -> -1000[40]
  706:[48] AddFloat(v1=0.00000000000000012246467991473532[32], v2=-1000[40]) -> -1000[32]
  707:[40] Call(size=0, to=252)
  252:[44] VarFloat(var[32]) -> -1000[44]
  255:[52] MathCeilFloat(v1=-1000[44]) -> -1000[44]
  256:[52] Return(ret=714[40], value=8, discard=20) -> -1000[32]
  714:[40] VarFloat(var[32]) -> -1000[40]
  717:[48] ConstInt(val=1000) -> 1000[48]
  722:[52] MinSingleInt(v1=1000[48]) -> -1000[48]
  723:[52] ConvFloatFromInt(v1=-1000[48]) -> -1000[48]
  724:[56] EqFloat(v1=-1000[40], v2=-1000[48]) -> true[40]
  725:[41] GotoFalseWord(jump=731, if_false=true[40])
  728:[40] GotoWord(jump=785)
  785:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
