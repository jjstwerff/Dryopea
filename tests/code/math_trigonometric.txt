Test code:
pub fn test() {
    test_value = {ceil(sin(PI) + cos(PI) * 1000)};
    assert(
        test_value == -1000,
        "Test failed {test_value} != -1000"
    );
}

fn test {
  let test_value = {
    _tp_float_ceil(OpAddFloat(_tp_float_sin(OpMathPiFloat()), OpMulFloat(_tp_float_cos(OpMathPiFloat()), OpConvFloatFromInt(1000i32))));
  };
  if OpEqFloat(test_value, OpConvFloatFromInt(OpMinSingleInt(1000i32))) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatFloat(append_7, test_value, 0i32, 0i32);
    OpAppendText(append_7, " != -1000");
    append_7;
  })};
}

byte-code for trigonometric:test()
 668[0]: return-address
 668[4]: MathPiFloat() -> float
 669[12]: GenCall(size=0, to=189)
 676[12]: MathPiFloat() -> float
 677[20]: GenCall(size=0, to=179)
 684[20]: ConstInt(val=1000) -> integer
 689[24]: ConvFloatFromInt(v1: integer) -> float
 690[28]: MulFloat(v1: float, v2: float) -> float
 691[20]: AddFloat(v1: float, v2: float) -> float
 692[12]: GenCall(size=0, to=252)
 699[12]: VarFloat(var[4]) -> float
 702[20]: ConstInt(val=1000) -> integer
 707[24]: MinSingleInt(v1: integer) -> integer
 708[24]: ConvFloatFromInt(v1: integer) -> float
 709[28]: EqFloat(v1: float, v2: float) -> boolean
 710[13]: GenGotoFalseWord(jump=716, if_false: boolean)
 713[12]: GenGotoWord(jump=772)
 716[12]: Text()
 717[36]: ConstText(_value="Test failed ") -> text
 731[52]: AppendText(var[12], v1: text)
 734[36]: VarFloat(var[4]) -> float
 737[44]: ConstInt(val=0) -> integer
 742[48]: ConstInt(val=0) -> integer
 747[52]: FormatFloat(var[12], val: float, width: integer, precision: integer)
 750[36]: ConstText(_value=" != -1000") -> text
 761[52]: AppendText(var[12], v1: text)
 764[36]: VarText(var[12]) -> text
 767[52]: GenFreeStack(value=16, discard=24)
 771[28]: GenPanic(message: text)
 772[12]: GenReturn(ret=0, value=0, discard=12)

Execute test:
  668:[4] MathPiFloat() -> 3.141592653589793[4]
  669:[12] GenCall(size=0, to=189)
  189:[16] VarFloat(var[4]) -> 3.141592653589793[16]
  192:[24] MathSinFloat(v1=3.141592653589793[16]) -> 0.00000000000000012246467991473532[16]
  193:[24] GenReturn(ret=676[12], value=8, discard=20)
  676:[12] MathPiFloat() -> 3.141592653589793[12]
  677:[20] GenCall(size=0, to=179)
  179:[24] VarFloat(var[12]) -> 3.141592653589793[24]
  182:[32] MathCosFloat(v1=3.141592653589793[24]) -> -1[24]
  183:[32] GenReturn(ret=684[20], value=8, discard=20)
  684:[20] ConstInt(val=1000) -> 1000[20]
  689:[24] ConvFloatFromInt(v1=1000[20]) -> 1000[20]
  690:[28] MulFloat(v1=-1[12], v2=1000[20]) -> -1000[12]
  691:[20] AddFloat(v1=0.00000000000000012246467991473532[4], v2=-1000[12]) -> -1000[4]
  692:[12] GenCall(size=0, to=252)
  252:[16] VarFloat(var[4]) -> -1000[16]
  255:[24] MathCeilFloat(v1=-1000[16]) -> -1000[16]
  256:[24] GenReturn(ret=699[12], value=8, discard=20)
  699:[12] VarFloat(var[4]) -> -1000[12]
  702:[20] ConstInt(val=1000) -> 1000[20]
  707:[24] MinSingleInt(v1=1000[20]) -> -1000[20]
  708:[24] ConvFloatFromInt(v1=-1000[20]) -> -1000[20]
  709:[28] EqFloat(v1=-1000[12], v2=-1000[20]) -> true[12]
  710:[13] GenGotoFalseWord(jump=716, if_false=true[12])
  713:[12] GenGotoWord(jump=772)
  772:[12] GenReturn(ret=4294967295[0], value=0, discard=12)
Finished
