pub fn test() {
    test_value = {ceil(sin(PI) + cos(PI) * 1000)};
    assert(
        test_value == -1000,
        "Test failed {test_value} != -1000"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_ceil(OpAddFloat(_tp_float_sin(OpMathPiFloat()), OpMulFloat(_tp_float_cos(OpMathPiFloat()), OpConvFloatFromInt(1000i32))));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(OpMinSingleInt(1000i32))) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != -1000");
    __work_1;
  }#3:text);
}#1

byte-code for trigonometric:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: MathPiFloat() -> float
 694[36]: Call(size=0, to=189)
 701[36]: MathPiFloat() -> float
 702[44]: Call(size=0, to=179)
 709[44]: ConstInt(val=1000) -> integer
 714[48]: ConvFloatFromInt(v1: integer) -> float
 715[52]: MulFloat(v1: float, v2: float) -> float
 716[44]: AddFloat(v1: float, v2: float) -> float
 717[36]: Call(size=0, to=252)
 724[36]: VarFloat(var[28]) -> float
 727[44]: ConstInt(val=1000) -> integer
 732[48]: MinSingleInt(v1: integer) -> integer
 733[48]: ConvFloatFromInt(v1: integer) -> float
 734[52]: EqFloat(v1: float, v2: float) -> boolean
 735[37]: GotoFalseWord(jump=741, if_false: boolean)
 738[36]: GotoWord(jump=795)
 741[36]: ClearText(var[4])
 744[36]: ConstText(_value="Test failed ") -> text
 758[52]: AppendText(var[4], v1: text)
 761[36]: VarFloat(var[28]) -> float
 764[44]: ConstInt(val=0) -> integer
 769[48]: ConstInt(val=0) -> integer
 774[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 777[36]: ConstText(_value=" != -1000") -> text
 788[52]: AppendText(var[4], v1: text)
 791[36]: VarText(var[4]) -> text
 794[52]: Panic(message: text)
 795[36]: FreeText(var[4])
 798[36]: Return(ret=0, value=0, discard=36)

Execute test:
  692:[8] Text()
  693:[32] MathPiFloat() -> 3.141592653589793[32]
  694:[40] Call(size=0, to=189)
  189:[44] VarFloat(var[32]) -> 3.141592653589793[44]
  192:[52] MathSinFloat(v1=3.141592653589793[44]) -> 0.00000000000000012246467991473532[44]
  193:[52] Return(ret=701[40], value=8, discard=20) -> 0.00000000000000012246467991473532[32]
  701:[40] MathPiFloat() -> 3.141592653589793[40]
  702:[48] Call(size=0, to=179)
  179:[52] VarFloat(var[40]) -> 3.141592653589793[52]
  182:[60] MathCosFloat(v1=3.141592653589793[52]) -> -1[52]
  183:[60] Return(ret=709[48], value=8, discard=20) -> -1[40]
  709:[48] ConstInt(val=1000) -> 1000[48]
  714:[52] ConvFloatFromInt(v1=1000[48]) -> 1000[48]
  715:[56] MulFloat(v1=-1[40], v2=1000[48]) -> -1000[40]
  716:[48] AddFloat(v1=0.00000000000000012246467991473532[32], v2=-1000[40]) -> -1000[32]
  717:[40] Call(size=0, to=252)
  252:[44] VarFloat(var[32]) -> -1000[44]
  255:[52] MathCeilFloat(v1=-1000[44]) -> -1000[44]
  256:[52] Return(ret=724[40], value=8, discard=20) -> -1000[32]
  724:[40] VarFloat(var[32]) -> -1000[40]
  727:[48] ConstInt(val=1000) -> 1000[48]
  732:[52] MinSingleInt(v1=1000[48]) -> -1000[48]
  733:[52] ConvFloatFromInt(v1=-1000[48]) -> -1000[48]
  734:[56] EqFloat(v1=-1000[40], v2=-1000[48]) -> true[40]
  735:[41] GotoFalseWord(jump=741, if_false=true[40])
  738:[40] GotoWord(jump=795)
  795:[40] FreeText(var[8])
  798:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
