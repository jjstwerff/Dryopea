pub fn test() {
    test_value = {ceil(sin(PI) + cos(PI) * 1000)};
    assert(
        test_value == -1000,
        "Test failed {test_value} != -1000"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_ceil(OpAddFloat(_tp_float_sin(OpMathPiFloat()), OpMulFloat(_tp_float_cos(OpMathPiFloat()), OpConvFloatFromInt(1000i32))));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(OpMinSingleInt(1000i32))) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != -1000");
    __work_1;
  }#3:text);
}#1

byte-code for trigonometric:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: MathPiFloat() -> float
 693[36]: Call(size=0, to=189)
 700[36]: MathPiFloat() -> float
 701[44]: Call(size=0, to=179)
 708[44]: ConstInt(val=1000) -> integer
 713[48]: ConvFloatFromInt(v1: integer) -> float
 714[52]: MulFloat(v1: float, v2: float) -> float
 715[44]: AddFloat(v1: float, v2: float) -> float
 716[36]: Call(size=0, to=252)
 723[36]: VarFloat(var[28]) -> float
 726[44]: ConstInt(val=1000) -> integer
 731[48]: MinSingleInt(v1: integer) -> integer
 732[48]: ConvFloatFromInt(v1: integer) -> float
 733[52]: EqFloat(v1: float, v2: float) -> boolean
 734[37]: GotoFalseWord(jump=740, if_false: boolean)
 737[36]: GotoWord(jump=794)
 740[36]: ClearText(var[4])
 743[36]: ConstText(_value="Test failed ") -> text
 757[52]: AppendText(var[4], v1: text)
 760[36]: VarFloat(var[28]) -> float
 763[44]: ConstInt(val=0) -> integer
 768[48]: ConstInt(val=0) -> integer
 773[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 776[36]: ConstText(_value=" != -1000") -> text
 787[52]: AppendText(var[4], v1: text)
 790[36]: VarText(var[4]) -> text
 793[52]: Panic(message: text)
 794[36]: FreeText(var[4])
 797[36]: Return(ret=0, value=0, discard=36)

Execute test:
  691:[8] Text()
  692:[32] MathPiFloat() -> 3.141592653589793[32]
  693:[40] Call(size=0, to=189)
  189:[44] VarFloat(var[32]) -> 3.141592653589793[44]
  192:[52] MathSinFloat(v1=3.141592653589793[44]) -> 0.00000000000000012246467991473532[44]
  193:[52] Return(ret=700[40], value=8, discard=20) -> 0.00000000000000012246467991473532[32]
  700:[40] MathPiFloat() -> 3.141592653589793[40]
  701:[48] Call(size=0, to=179)
  179:[52] VarFloat(var[40]) -> 3.141592653589793[52]
  182:[60] MathCosFloat(v1=3.141592653589793[52]) -> -1[52]
  183:[60] Return(ret=708[48], value=8, discard=20) -> -1[40]
  708:[48] ConstInt(val=1000) -> 1000[48]
  713:[52] ConvFloatFromInt(v1=1000[48]) -> 1000[48]
  714:[56] MulFloat(v1=-1[40], v2=1000[48]) -> -1000[40]
  715:[48] AddFloat(v1=0.00000000000000012246467991473532[32], v2=-1000[40]) -> -1000[32]
  716:[40] Call(size=0, to=252)
  252:[44] VarFloat(var[32]) -> -1000[44]
  255:[52] MathCeilFloat(v1=-1000[44]) -> -1000[44]
  256:[52] Return(ret=723[40], value=8, discard=20) -> -1000[32]
  723:[40] VarFloat(var[32]) -> -1000[40]
  726:[48] ConstInt(val=1000) -> 1000[48]
  731:[52] MinSingleInt(v1=1000[48]) -> -1000[48]
  732:[52] ConvFloatFromInt(v1=-1000[48]) -> -1000[48]
  733:[56] EqFloat(v1=-1000[40], v2=-1000[48]) -> true[40]
  734:[41] GotoFalseWord(jump=740, if_false=true[40])
  737:[40] GotoWord(jump=794)
  794:[40] FreeText(var[8])
  797:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
