pub fn test() {
    test_value = {ceil(sin(PI) + cos(PI) * 1000)};
    assert(
        test_value == -1000,
        "Test failed {test_value} != -1000"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_ceil(OpAddFloat(_tp_float_sin(OpMathPiFloat()), OpMulFloat(_tp_float_cos(OpMathPiFloat()), OpConvFloatFromInt(1000i32))));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(OpMinSingleInt(1000i32))) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != -1000");
    __work_1;
  }#3:text);
}#1

byte-code for trigonometric:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: MathPiFloat() -> float var=test_value[28]:float in 1
   2[36]: Call(size=0, to=189)
   9[36]: MathPiFloat() -> float
  10[44]: Call(size=0, to=179)
  17[44]: ConstInt(val=1000) -> integer
  22[48]: ConvFloatFromInt(v1: integer) -> float
  23[52]: MulFloat(v1: float, v2: float) -> float
  24[44]: AddFloat(v1: float, v2: float) -> float
  25[36]: Call(size=0, to=252)
  32[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
  35[44]: ConstInt(val=1000) -> integer
  40[48]: MinSingleInt(v1: integer) -> integer
  41[48]: ConvFloatFromInt(v1: integer) -> float
  42[52]: EqFloat(v1: float, v2: float) -> boolean
  43[37]: GotoFalseWord(jump=49, if_false: boolean)
  46[36]: GotoWord(jump=103)
  49[36]: ClearText(var[4]) var=__work_1[4]:text in 1
  52[36]: ConstText(_value="Test failed ") -> text
  66[52]: AppendText(var[4], v1: text)
  69[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
  72[44]: ConstInt(val=0) -> integer
  77[48]: ConstInt(val=0) -> integer
  82[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
  85[36]: ConstText(_value=" != -1000") -> text
  96[52]: AppendText(var[4], v1: text)
  99[36]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 102[52]: Panic(message: text)
 103[36]: FreeText(var[4])
 106[36]: Return(ret=0, value=0, discard=36)

