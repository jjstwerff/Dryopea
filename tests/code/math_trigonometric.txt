pub fn test() {
    test_value = {ceil(sin(PI) + cos(PI) * 1000)};
    assert(
        test_value == -1000,
        "Test failed {test_value} != -1000"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_ceil(OpAddFloat(_tp_float_sin(OpMathPiFloat()), OpMulFloat(_tp_float_cos(OpMathPiFloat()), OpConvFloatFromInt(1000i32))));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(OpMinSingleInt(1000i32))) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != -1000");
    __work_1;
  }#3:text);
}#1

byte-code for trigonometric:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: MathPiFloat() -> float var=test_value[28]:float in 1
 657[36]: Call(size=0, to=189)
 664[36]: MathPiFloat() -> float
 665[44]: Call(size=0, to=179)
 672[44]: ConstInt(val=1000) -> integer
 677[48]: ConvFloatFromInt(v1: integer) -> float
 678[52]: MulFloat(v1: float, v2: float) -> float
 679[44]: AddFloat(v1: float, v2: float) -> float
 680[36]: Call(size=0, to=252)
 687[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
 690[44]: ConstInt(val=1000) -> integer
 695[48]: MinSingleInt(v1: integer) -> integer
 696[48]: ConvFloatFromInt(v1: integer) -> float
 697[52]: EqFloat(v1: float, v2: float) -> boolean
 698[37]: GotoFalseWord(jump=704, if_false: boolean)
 701[36]: GotoWord(jump=758)
 704[36]: ClearText(var[4]) var=__work_1[4]:text in 1
 707[36]: ConstText(_value="Test failed ") -> text
 721[52]: AppendText(var[4], v1: text)
 724[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
 727[44]: ConstInt(val=0) -> integer
 732[48]: ConstInt(val=0) -> integer
 737[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
 740[36]: ConstText(_value=" != -1000") -> text
 751[52]: AppendText(var[4], v1: text)
 754[36]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 757[52]: Panic(message: text)
 758[36]: FreeText(var[4])
 761[36]: Return(ret=0, value=0, discard=36)

Execute test:
  655:[8] Text()
  656:[32] MathPiFloat() -> 3.141592653589793[32]
  657:[40] Call(size=0, to=189)
  189:[44] VarFloat(var[32]) -> 3.141592653589793[44]
  192:[52] MathSinFloat(v1=3.141592653589793[44]) -> 0.00000000000000012246467991473532[44]
  193:[52] Return(ret=664[40], value=8, discard=20) -> 0.00000000000000012246467991473532[32]
  664:[40] MathPiFloat() -> 3.141592653589793[40]
  665:[48] Call(size=0, to=179)
  179:[52] VarFloat(var[40]) -> 3.141592653589793[52]
  182:[60] MathCosFloat(v1=3.141592653589793[52]) -> -1[52]
  183:[60] Return(ret=672[48], value=8, discard=20) -> -1[40]
  672:[48] ConstInt(val=1000) -> 1000[48]
  677:[52] ConvFloatFromInt(v1=1000[48]) -> 1000[48]
  678:[56] MulFloat(v1=-1[40], v2=1000[48]) -> -1000[40]
  679:[48] AddFloat(v1=0.00000000000000012246467991473532[32], v2=-1000[40]) -> -1000[32]
  680:[40] Call(size=0, to=252)
  252:[44] VarFloat(var[32]) -> -1000[44]
  255:[52] MathCeilFloat(v1=-1000[44]) -> -1000[44]
  256:[52] Return(ret=687[40], value=8, discard=20) -> -1000[32]
  687:[40] VarFloat(var[32]) -> -1000[40]
  690:[48] ConstInt(val=1000) -> 1000[48]
  695:[52] MinSingleInt(v1=1000[48]) -> -1000[48]
  696:[52] ConvFloatFromInt(v1=-1000[48]) -> -1000[48]
  697:[56] EqFloat(v1=-1000[40], v2=-1000[48]) -> true[40]
  698:[41] GotoFalseWord(jump=704, if_false=true[40])
  701:[40] GotoWord(jump=758)
  758:[40] FreeText(var[8])
  761:[40] Return(ret=4294967295[4], value=0, discard=36)
Finished
