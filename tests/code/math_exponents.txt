Test code:
pub fn test() {
    test_value = {log(4.0^5, 2)};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}

fn test {
  let test_value = {
    _tp_float_log(OpPowFloat(4f64, OpConvFloatFromInt(5i32)), OpConvFloatFromInt(2i32));
  };
  if OpEqFloat(test_value, OpConvFloatFromInt(10i32)) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatFloat(append_7, test_value, 0i32, 0i32);
    OpAppendText(append_7, " != 10");
    append_7;
  })};
}

byte-code for exponents:test()
 668[0]: return-address
 668[4]: ConstFloat(val=4) -> float
 677[12]: ConstInt(val=5) -> integer
 682[16]: ConvFloatFromInt(v1: integer) -> float
 683[20]: PowFloat(v1: float, v2: float) -> float
 684[12]: ConstInt(val=2) -> integer
 689[16]: ConvFloatFromInt(v1: integer) -> float
 690[20]: GenCall(size=0, to=292)
 697[12]: VarFloat(var[4]) -> float
 700[20]: ConstInt(val=10) -> integer
 705[24]: ConvFloatFromInt(v1: integer) -> float
 706[28]: EqFloat(v1: float, v2: float) -> boolean
 707[13]: GenGotoFalseWord(jump=713, if_false: boolean)
 710[12]: GenGotoWord(jump=766)
 713[12]: Text()
 714[36]: ConstText(_value="Test failed ") -> text
 728[52]: AppendText(var[12], v1: text)
 731[36]: VarFloat(var[4]) -> float
 734[44]: ConstInt(val=0) -> integer
 739[48]: ConstInt(val=0) -> integer
 744[52]: FormatFloat(var[12], val: float, width: integer, precision: integer)
 747[36]: ConstText(_value=" != 10") -> text
 755[52]: AppendText(var[12], v1: text)
 758[36]: VarText(var[12]) -> text
 761[52]: GenFreeStack(value=16, discard=24)
 765[28]: GenPanic(message: text)
 766[12]: GenReturn(ret=0, value=0, discard=12)

Execute test:
  668:[4] ConstFloat(val=4) -> 4[4]
  677:[12] ConstInt(val=5) -> 5[12]
  682:[16] ConvFloatFromInt(v1=5[12]) -> 5[12]
  683:[20] PowFloat(v1=4[4], v2=5[12]) -> 1024[4]
  684:[12] ConstInt(val=2) -> 2[12]
  689:[16] ConvFloatFromInt(v1=2[12]) -> 2[12]
  690:[20] GenCall(size=0, to=292)
  292:[24] VarFloat(var[4]) -> 1024[24]
  295:[32] VarFloat(var[12]) -> 2[32]
  298:[40] MathLogFloat(v1=1024[24], v2=2[32]) -> 10[24]
  299:[32] GenReturn(ret=697[20], value=8, discard=28)
  697:[12] VarFloat(var[4]) -> 10[12]
  700:[20] ConstInt(val=10) -> 10[20]
  705:[24] ConvFloatFromInt(v1=10[20]) -> 10[20]
  706:[28] EqFloat(v1=10[12], v2=10[20]) -> true[12]
  707:[13] GenGotoFalseWord(jump=713, if_false=true[12])
  710:[12] GenGotoWord(jump=766)
  766:[12] GenReturn(ret=4294967295[0], value=0, discard=12)
Finished
