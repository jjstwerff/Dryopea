pub fn test() {
    test_value = {log(4.0^5, 2)};
    assert(
        test_value == 10,
        "Test failed {test_value} != 10"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:float = {#2 block
    _tp_float_log(OpPowFloat(4f64, OpConvFloatFromInt(5i32)), OpConvFloatFromInt(2i32));
  }#2:float;
  if OpEqFloat(test_value, OpConvFloatFromInt(10i32)) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatFloat(__work_1, test_value, 0i32, 0i32);
    OpAppendText(__work_1, " != 10");
    __work_1;
  }#3:text);
}#1

byte-code for exponents:test()
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstFloat(val=4) -> float var=test_value[28]:float in 1
  10[36]: ConstInt(val=5) -> integer
  15[40]: ConvFloatFromInt(v1: integer) -> float
  16[44]: PowFloat(v1: float, v2: float) -> float
  17[36]: ConstInt(val=2) -> integer
  22[40]: ConvFloatFromInt(v1: integer) -> float
  23[44]: Call(size=0, to=292)
  30[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
  33[44]: ConstInt(val=10) -> integer
  38[48]: ConvFloatFromInt(v1: integer) -> float
  39[52]: EqFloat(v1: float, v2: float) -> boolean
  40[37]: GotoFalseWord(jump=46, if_false: boolean)
  43[36]: GotoWord(jump=97)
  46[36]: ClearText(var[4]) var=__work_1[4]:text in 1
  49[36]: ConstText(_value="Test failed ") -> text
  63[52]: AppendText(var[4], v1: text)
  66[36]: VarFloat(var[28]) -> float var=test_value[28]:float in 1
  69[44]: ConstInt(val=0) -> integer
  74[48]: ConstInt(val=0) -> integer
  79[52]: FormatFloat(var[4], val: float, width: integer, precision: integer)
  82[36]: ConstText(_value=" != 10") -> text
  90[52]: AppendText(var[4], v1: text)
  93[36]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  96[52]: Panic(message: text)
  97[36]: FreeText(var[4])
 100[36]: Return(ret=0, value=0, discard=36)

