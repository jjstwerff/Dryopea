pub fn test() {
    test_value = {1};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    1i32;
  }#2:integer;
  if OpEqInt(test_value, 1i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1");
    __work_1;
  }#3:text);
}#1

byte-code for expr_integer:test()
 645[0]: return-address
 645[4]: Text() var=__work_1[4]:text in 1
 646[28]: ConstInt(val=1) -> integer var=test_value[28]:integer in 1
 651[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 654[36]: ConstInt(val=1) -> integer
 659[40]: EqInt(v1: integer, v2: integer) -> boolean
 660[33]: GotoFalseWord(jump=666, if_false: boolean)
 663[32]: GotoWord(jump=715)
 666[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 669[32]: ConstText(_value="Test failed ") -> text
 683[48]: AppendText(var[4], v1: text)
 686[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 689[36]: ConstInt(val=0) -> integer
 694[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 701[32]: ConstText(_value=" != 1") -> text
 708[48]: AppendText(var[4], v1: text)
 711[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 714[48]: Panic(message: text)
 715[32]: FreeText(var[4])
 718[32]: Return(ret=0, value=0, discard=32)

Execute test:
  645:[8] Text()
  646:[32] ConstInt(val=1) -> 1[32]
  651:[36] VarInt(var[32]) -> 1[36]
  654:[40] ConstInt(val=1) -> 1[40]
  659:[44] EqInt(v1=1[36], v2=1[40]) -> true[36]
  660:[37] GotoFalseWord(jump=666, if_false=true[36])
  663:[36] GotoWord(jump=715)
  715:[36] FreeText(var[8])
  718:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
