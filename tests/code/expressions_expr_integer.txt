Test code:
pub fn test() {
    test_value = {1};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}

fn test {
  let test_value = {
    1i32;
  };
  if OpEqInt(test_value, 1i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 1");
    append_7;
  })};
}

byte-code for expr_integer:test()
 668[0]: return-address
 668[4]: ConstInt(val=1) -> integer
 673[8]: VarInt(var[4]) -> integer
 676[12]: ConstInt(val=1) -> integer
 681[16]: EqInt(v1: integer, v2: integer) -> boolean
 682[9]: GenGotoFalseWord(jump=688, if_false: boolean)
 685[8]: GenGotoWord(jump=739)
 688[8]: Text()
 689[32]: ConstText(_value="Test failed ") -> text
 703[48]: AppendText(var[8], v1: text)
 706[32]: VarInt(var[4]) -> integer
 709[36]: ConstInt(val=0) -> integer
 714[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 721[32]: ConstText(_value=" != 1") -> text
 728[48]: AppendText(var[8], v1: text)
 731[32]: VarText(var[8]) -> text
 734[48]: GenFreeStack(value=16, discard=24)
 738[24]: GenPanic(message: text)
 739[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] ConstInt(val=1) -> 1[4]
  673:[8] VarInt(var[4]) -> 1[8]
  676:[12] ConstInt(val=1) -> 1[12]
  681:[16] EqInt(v1=1[8], v2=1[12]) -> true[8]
  682:[9] GenGotoFalseWord(jump=688, if_false=true[8])
  685:[8] GenGotoWord(jump=739)
  739:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
