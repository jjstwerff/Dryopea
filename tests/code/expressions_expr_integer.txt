pub fn test() {
    test_value = {1};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
fn test() {#1 block
  let __work_1:text = "";
  let test_value:integer = {#2 block
    1i32;
  }#2:integer;
  if OpEqInt(test_value, 1i32) null else OpPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1");
    __work_1;
  }#3:text);
}#1

byte-code for expr_integer:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: ConstInt(val=1) -> integer
 681[32]: VarInt(var[28]) -> integer
 684[36]: ConstInt(val=1) -> integer
 689[40]: EqInt(v1: integer, v2: integer) -> boolean
 690[33]: GotoFalseWord(jump=696, if_false: boolean)
 693[32]: GotoWord(jump=745)
 696[32]: ClearText(var[4])
 699[32]: ConstText(_value="Test failed ") -> text
 713[48]: AppendText(var[4], v1: text)
 716[32]: VarInt(var[28]) -> integer
 719[36]: ConstInt(val=0) -> integer
 724[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 731[32]: ConstText(_value=" != 1") -> text
 738[48]: AppendText(var[4], v1: text)
 741[32]: VarText(var[4]) -> text
 744[48]: Panic(message: text)
 745[32]: Return(ret=0, value=0, discard=32)

Execute test:
  675:[8] Text()
  676:[32] ConstInt(val=1) -> 1[32]
  681:[36] VarInt(var[32]) -> 1[36]
  684:[40] ConstInt(val=1) -> 1[40]
  689:[44] EqInt(v1=1[36], v2=1[40]) -> true[36]
  690:[37] GotoFalseWord(jump=696, if_false=true[36])
  693:[36] GotoWord(jump=745)
  745:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
