pub fn test() {
    test_value = {1};
    assert(
        test_value == 1,
        "Test failed {test_value} != 1"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    1i32;
  }#2:integer;
  if OpEqInt(test_value, 1i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 1");
    __work_1;
  }#3:text);
}#1

byte-code for expr_integer:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstInt(val=1) -> integer
 698[32]: VarInt(var[28]) -> integer
 701[36]: ConstInt(val=1) -> integer
 706[40]: EqInt(v1: integer, v2: integer) -> boolean
 707[33]: GotoFalseWord(jump=713, if_false: boolean)
 710[32]: GotoWord(jump=762)
 713[32]: ClearText(var[4])
 716[32]: ConstText(_value="Test failed ") -> text
 730[48]: AppendText(var[4], v1: text)
 733[32]: VarInt(var[28]) -> integer
 736[36]: ConstInt(val=0) -> integer
 741[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 748[32]: ConstText(_value=" != 1") -> text
 755[48]: AppendText(var[4], v1: text)
 758[32]: VarText(var[4]) -> text
 761[48]: Panic(message: text)
 762[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] ConstInt(val=1) -> 1[32]
  698:[36] VarInt(var[32]) -> 1[36]
  701:[40] ConstInt(val=1) -> 1[40]
  706:[44] EqInt(v1=1[36], v2=1[40]) -> true[36]
  707:[37] GotoFalseWord(jump=713, if_false=true[36])
  710:[36] GotoWord(jump=762)
  762:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
