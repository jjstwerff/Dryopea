Test code:
pub fn test() {
    test_value = {a = 1; sizeof(1+2+3) + sizeof(integer) + 10 * sizeof(a)};
    assert(
        test_value == 48,
        "Test failed {test_value} != 48"
    );
}

fn test {
  let test_value = {
    let a = 1i32;
    OpAddInt(OpAddInt(4i32, 4i32), OpMulInt(10i32, 4i32));
  };
  if OpEqInt(test_value, 48i32) {null} else {OpGenPanic({
    let append_8 = "Test failed ";
    OpFormatInt(append_8, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_8, " != 48");
    append_8;
  })};
}

byte-code for expr_integer:test()
 668[0]: return-address
 668[4]: ConstInt(val=1) -> integer
 673[8]: ConstInt(val=4) -> integer
 678[12]: ConstInt(val=4) -> integer
 683[16]: AddInt(v1: integer, v2: integer) -> integer
 684[12]: ConstInt(val=10) -> integer
 689[16]: ConstInt(val=4) -> integer
 694[20]: MulInt(v1: integer, v2: integer) -> integer
 695[16]: AddInt(v1: integer, v2: integer) -> integer
 696[12]: GenFreeStack(value=4, discard=4)
 700[8]: VarInt(var[4]) -> integer
 703[12]: ConstInt(val=48) -> integer
 708[16]: EqInt(v1: integer, v2: integer) -> boolean
 709[9]: GenGotoFalseWord(jump=715, if_false: boolean)
 712[8]: GenGotoWord(jump=767)
 715[8]: Text()
 716[32]: ConstText(_value="Test failed ") -> text
 730[48]: AppendText(var[8], v1: text)
 733[32]: VarInt(var[4]) -> integer
 736[36]: ConstInt(val=0) -> integer
 741[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 748[32]: ConstText(_value=" != 48") -> text
 756[48]: AppendText(var[8], v1: text)
 759[32]: VarText(var[8]) -> text
 762[48]: GenFreeStack(value=16, discard=24)
 766[24]: GenPanic(message: text)
 767[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] ConstInt(val=1) -> 1[4]
  673:[8] ConstInt(val=4) -> 4[8]
  678:[12] ConstInt(val=4) -> 4[12]
  683:[16] AddInt(v1=4[8], v2=4[12]) -> 8[8]
  684:[12] ConstInt(val=10) -> 10[12]
  689:[16] ConstInt(val=4) -> 4[16]
  694:[20] MulInt(v1=10[12], v2=4[16]) -> 40[12]
  695:[16] AddInt(v1=8[8], v2=40[12]) -> 48[8]
  696:[12] GenFreeStack(value=4, discard=4)
  700:[8] VarInt(var[4]) -> 48[8]
  703:[12] ConstInt(val=48) -> 48[12]
  708:[16] EqInt(v1=48[8], v2=48[12]) -> true[8]
  709:[9] GenGotoFalseWord(jump=715, if_false=true[8])
  712:[8] GenGotoWord(jump=767)
  767:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
