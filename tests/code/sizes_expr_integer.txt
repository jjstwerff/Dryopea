Test code:
pub fn test() {
    test_value = {a = 1; sizeof(1+2+3) + sizeof(integer) + 10 * sizeof(a)};
    assert(
        test_value == 48,
        "Test failed {test_value} != 48"
    );
}

fn test {
  let __work_2 = "";
  let test_value = {
    let a = 1i32;
    OpAddInt(OpAddInt(4i32, 4i32), OpMulInt(10i32, 4i32));
  };
  if OpEqInt(test_value, 48i32) {null} else {OpGenPanic({
    OpClearText(__work_2);
    OpAppendText(__work_2, "Test failed ");
    OpFormatInt(__work_2, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, " != 48");
    __work_2;
  })};
}

byte-code for expr_integer:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: ConstInt(val=1) -> integer
 679[32]: ConstInt(val=4) -> integer
 684[36]: ConstInt(val=4) -> integer
 689[40]: AddInt(v1: integer, v2: integer) -> integer
 690[36]: ConstInt(val=10) -> integer
 695[40]: ConstInt(val=4) -> integer
 700[44]: MulInt(v1: integer, v2: integer) -> integer
 701[40]: AddInt(v1: integer, v2: integer) -> integer
 702[36]: GenFreeStack(value=4, discard=4)
 706[32]: VarInt(var[28]) -> integer
 709[36]: ConstInt(val=48) -> integer
 714[40]: EqInt(v1: integer, v2: integer) -> boolean
 715[33]: GenGotoFalseWord(jump=721, if_false: boolean)
 718[32]: GenGotoWord(jump=771)
 721[32]: ClearText(var[4])
 724[32]: ConstText(_value="Test failed ") -> text(false)
 738[48]: AppendText(var[4], v1: text(false))
 741[32]: VarInt(var[28]) -> integer
 744[36]: ConstInt(val=0) -> integer
 749[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 756[32]: ConstText(_value=" != 48") -> text(false)
 764[48]: AppendText(var[4], v1: text(false))
 767[32]: VarText(var[4]) -> text(false)
 770[48]: GenPanic(message: text(false))
 771[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] ConstInt(val=1) -> 1[32]
  679:[36] ConstInt(val=4) -> 4[36]
  684:[40] ConstInt(val=4) -> 4[40]
  689:[44] AddInt(v1=4[36], v2=4[40]) -> 8[36]
  690:[40] ConstInt(val=10) -> 10[40]
  695:[44] ConstInt(val=4) -> 4[44]
  700:[48] MulInt(v1=10[40], v2=4[44]) -> 40[40]
  701:[44] AddInt(v1=8[36], v2=40[40]) -> 48[36]
  702:[40] GenFreeStack(value=4, discard=4)
  706:[36] VarInt(var[32]) -> 48[36]
  709:[40] ConstInt(val=48) -> 48[40]
  714:[44] EqInt(v1=48[36], v2=48[40]) -> true[36]
  715:[37] GenGotoFalseWord(jump=721, if_false=true[36])
  718:[36] GenGotoWord(jump=771)
  771:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
