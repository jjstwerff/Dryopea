pub fn test() {
    test_value = {a = 1; sizeof(1+2+3) + sizeof(integer) + 10 * sizeof(a)};
    assert(
        test_value == 48,
        "Test failed {test_value} != 48"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 1i32;
    OpAddInt(OpAddInt(4i32, 4i32), OpMulInt(10i32, 4i32));
  }#2:integer;
  if OpEqInt(test_value, 48i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 48");
    __work_1;
  }#3:text);
}#1

byte-code for expr_integer:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: ConstInt(val=1) -> integer
 688[32]: ConstInt(val=4) -> integer
 693[36]: ConstInt(val=4) -> integer
 698[40]: AddInt(v1: integer, v2: integer) -> integer
 699[36]: ConstInt(val=10) -> integer
 704[40]: ConstInt(val=4) -> integer
 709[44]: MulInt(v1: integer, v2: integer) -> integer
 710[40]: AddInt(v1: integer, v2: integer) -> integer
 711[36]: FreeStack(value=4, discard=4) type=integer[4]:Base[0]
 715[32]: VarInt(var[28]) -> integer
 718[36]: ConstInt(val=48) -> integer
 723[40]: EqInt(v1: integer, v2: integer) -> boolean
 724[33]: GotoFalseWord(jump=730, if_false: boolean)
 727[32]: GotoWord(jump=780)
 730[32]: ClearText(var[4])
 733[32]: ConstText(_value="Test failed ") -> text
 747[48]: AppendText(var[4], v1: text)
 750[32]: VarInt(var[28]) -> integer
 753[36]: ConstInt(val=0) -> integer
 758[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 765[32]: ConstText(_value=" != 48") -> text
 773[48]: AppendText(var[4], v1: text)
 776[32]: VarText(var[4]) -> text
 779[48]: Panic(message: text)
 780[32]: Return(ret=0, value=0, discard=32)

Execute test:
  682:[8] Text()
  683:[32] ConstInt(val=1) -> 1[32]
  688:[36] ConstInt(val=4) -> 4[36]
  693:[40] ConstInt(val=4) -> 4[40]
  698:[44] AddInt(v1=4[36], v2=4[40]) -> 8[36]
  699:[40] ConstInt(val=10) -> 10[40]
  704:[44] ConstInt(val=4) -> 4[44]
  709:[48] MulInt(v1=10[40], v2=4[44]) -> 40[40]
  710:[44] AddInt(v1=8[36], v2=40[40]) -> 48[36]
  711:[40] FreeStack(value=4, discard=4)
  715:[36] VarInt(var[32]) -> 48[36]
  718:[40] ConstInt(val=48) -> 48[40]
  723:[44] EqInt(v1=48[36], v2=48[40]) -> true[36]
  724:[37] GotoFalseWord(jump=730, if_false=true[36])
  727:[36] GotoWord(jump=780)
  780:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
