pub fn test() {
    test_value = {a = 1; sizeof(1+2+3) + sizeof(integer) + 10 * sizeof(a)};
    assert(
        test_value == 48,
        "Test failed {test_value} != 48"
    );
}
fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    a:integer(2) = 1i32;
    OpAddInt(OpAddInt(4i32, 4i32), OpMulInt(10i32, 4i32));
  }#block_2:integer;
  if OpEqInt(test_value, 48i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 48");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for expr_integer:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=1) -> integer var=a[32]:integer
   6[36]: ConstInt(val=4) -> integer
  11[40]: ConstInt(val=4) -> integer
  16[44]: AddInt(v1: integer, v2: integer) -> integer
  17[40]: ConstInt(val=10) -> integer
  22[44]: ConstInt(val=4) -> integer
  27[48]: MulInt(v1: integer, v2: integer) -> integer
  28[44]: AddInt(v1: integer, v2: integer) -> integer
  29[40]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
  33[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  36[40]: ConstInt(val=48) -> integer
  41[44]: EqInt(v1: integer, v2: integer) -> boolean
  42[37]: GotoFalseWord(jump=48, if_false: boolean)
  45[36]: GotoWord(jump=98)
  48[36]: ClearText(var[8]) var=__work_1[8]:text
  51[36]: ConstText(_value="Test failed ") -> text
  65[52]: AppendText(var[8], v1: text)
  68[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  71[40]: ConstInt(val=0) -> integer
  76[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  83[36]: ConstText(_value=" != 48") -> text
  91[52]: AppendText(var[8], v1: text)
  94[36]: VarText(var[8]) -> text var=__work_1[8]:text
  97[52]: Panic(message: text)
  98[36]: FreeText(var[8])
 101[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=1) -> 1[32]
    6:[36] ConstInt(val=4) -> 4[36]
   11:[40] ConstInt(val=4) -> 4[40]
   16:[44] AddInt(v1=4[36], v2=4[40]) -> 8[36]
   17:[40] ConstInt(val=10) -> 10[40]
   22:[44] ConstInt(val=4) -> 4[44]
   27:[48] MulInt(v1=10[40], v2=4[44]) -> 40[40]
   28:[44] AddInt(v1=8[36], v2=40[40]) -> 48[36]
   29:[40] FreeStack(value=4, discard=8)
   33:[36] VarInt(var[32]) -> 48[36]
   36:[40] ConstInt(val=48) -> 48[40]
   41:[44] EqInt(v1=48[36], v2=48[40]) -> true[36]
   42:[37] GotoFalseWord(jump=1216, if_false=true[36])
   45:[36] GotoWord(jump=1266)
   98:[36] FreeText(var[8])
  101:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
