pub fn test() {
    test_value = {a = 1; sizeof(1+2+3) + sizeof(integer) + 10 * sizeof(a)};
    assert(
        test_value == 48,
        "Test failed {test_value} != 48"
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    let a = 1i32;
    OpAddInt(OpAddInt(4i32, 4i32), OpMulInt(10i32, 4i32));
  }#2;
  if OpEqInt(test_value, 48i32) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 48");
    __work_1;
  }#3);
}#1

byte-code for expr_integer:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstInt(val=1) -> integer
 674[32]: ConstInt(val=4) -> integer
 679[36]: ConstInt(val=4) -> integer
 684[40]: AddInt(v1: integer, v2: integer) -> integer
 685[36]: ConstInt(val=10) -> integer
 690[40]: ConstInt(val=4) -> integer
 695[44]: MulInt(v1: integer, v2: integer) -> integer
 696[40]: AddInt(v1: integer, v2: integer) -> integer
 697[36]: GenFreeStack(value=4, discard=4)
 701[32]: VarInt(var[28]) -> integer
 704[36]: ConstInt(val=48) -> integer
 709[40]: EqInt(v1: integer, v2: integer) -> boolean
 710[33]: GenGotoFalseWord(jump=716, if_false: boolean)
 713[32]: GenGotoWord(jump=766)
 716[32]: ClearText(var[4])
 719[32]: ConstText(_value="Test failed ") -> text(false, [])
 733[48]: AppendText(var[4], v1: text(false, []))
 736[32]: VarInt(var[28]) -> integer
 739[36]: ConstInt(val=0) -> integer
 744[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 751[32]: ConstText(_value=" != 48") -> text(false, [])
 759[48]: AppendText(var[4], v1: text(false, []))
 762[32]: VarText(var[4]) -> text(false, [])
 765[48]: GenPanic(message: text(false, []))
 766[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstInt(val=1) -> 1[32]
  674:[36] ConstInt(val=4) -> 4[36]
  679:[40] ConstInt(val=4) -> 4[40]
  684:[44] AddInt(v1=4[36], v2=4[40]) -> 8[36]
  685:[40] ConstInt(val=10) -> 10[40]
  690:[44] ConstInt(val=4) -> 4[44]
  695:[48] MulInt(v1=10[40], v2=4[44]) -> 40[40]
  696:[44] AddInt(v1=8[36], v2=40[40]) -> 48[36]
  697:[40] GenFreeStack(value=4, discard=4)
  701:[36] VarInt(var[32]) -> 48[36]
  704:[40] ConstInt(val=48) -> 48[40]
  709:[44] EqInt(v1=48[36], v2=48[40]) -> true[36]
  710:[37] GenGotoFalseWord(jump=716, if_false=true[36])
  713:[36] GenGotoWord(jump=766)
  766:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
