Test code:
pub fn test() {
    test_value = {a = 1; sizeof(1+2+3) + sizeof(integer) + 10 * sizeof(a)};
    assert(
        test_value == 48,
        "Test failed {test_value} != 48"
    );
}

fn test {
  let test_value = {
    let a = 1i32;
    OpAddInt(OpAddInt(4i32, 4i32), OpMulInt(10i32, 4i32));
  };
  if OpEqInt(test_value, 48i32) {null} else {OpGenPanic({
    let append_8 = "Test failed ";
    OpFormatInt(append_8, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_8, " != 48");
    append_8;
  })};
}

byte-code for expr_integer:test()
 664[0]: return-address
 664[4]: ConstInt(val=1) -> integer
 669[8]: ConstInt(val=4) -> integer
 674[12]: ConstInt(val=4) -> integer
 679[16]: AddInt(v1: integer, v2: integer) -> integer
 680[12]: ConstInt(val=10) -> integer
 685[16]: ConstInt(val=4) -> integer
 690[20]: MulInt(v1: integer, v2: integer) -> integer
 691[16]: AddInt(v1: integer, v2: integer) -> integer
 692[12]: GenFreeStack(value=4, discard=4)
 696[8]: VarInt(var[4]) -> integer
 699[12]: ConstInt(val=48) -> integer
 704[16]: EqInt(v1: integer, v2: integer) -> boolean
 705[9]: GenGotoFalseWord(jump=711, if_false: boolean)
 708[8]: GenGotoWord(jump=763)
 711[8]: Text()
 712[32]: ConstText(_value="Test failed ") -> text
 726[48]: AppendText(var[8], v1: text)
 729[32]: VarInt(var[4]) -> integer
 732[36]: ConstInt(val=0) -> integer
 737[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 744[32]: ConstText(_value=" != 48") -> text
 752[48]: AppendText(var[8], v1: text)
 755[32]: VarText(var[8]) -> text
 758[48]: GenFreeStack(value=16, discard=24)
 762[24]: GenPanic(message: text)
 763[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] ConstInt(val=1) -> 1[4]
  669:[8] ConstInt(val=4) -> 4[8]
  674:[12] ConstInt(val=4) -> 4[12]
  679:[16] AddInt(v1=4[8], v2=4[12]) -> 8[8]
  680:[12] ConstInt(val=10) -> 10[12]
  685:[16] ConstInt(val=4) -> 4[16]
  690:[20] MulInt(v1=10[12], v2=4[16]) -> 40[12]
  691:[16] AddInt(v1=8[8], v2=40[12]) -> 48[8]
  692:[12] GenFreeStack(value=4, discard=4)
  696:[8] VarInt(var[4]) -> 48[8]
  699:[12] ConstInt(val=48) -> 48[12]
  704:[16] EqInt(v1=48[8], v2=48[12]) -> true[8]
  705:[9] GenGotoFalseWord(jump=711, if_false=true[8])
  708:[8] GenGotoWord(jump=763)
  763:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
