pub fn test() {
    test_value = {a = 1; sizeof(1+2+3) + sizeof(integer) + 10 * sizeof(a)};
    assert(
        test_value == 48,
        "Test failed {test_value} != 48"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 1i32;
    OpAddInt(OpAddInt(4i32, 4i32), OpMulInt(10i32, 4i32));
  }#2:integer;
  if OpEqInt(test_value, 48i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 48");
    __work_1;
  }#3:text);
}#1

byte-code for expr_integer:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: ConstInt(val=1) -> integer var=a[28]:integer in 2
 661[32]: ConstInt(val=4) -> integer
 666[36]: ConstInt(val=4) -> integer
 671[40]: AddInt(v1: integer, v2: integer) -> integer
 672[36]: ConstInt(val=10) -> integer
 677[40]: ConstInt(val=4) -> integer
 682[44]: MulInt(v1: integer, v2: integer) -> integer
 683[40]: AddInt(v1: integer, v2: integer) -> integer
 684[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 688[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 691[36]: ConstInt(val=48) -> integer
 696[40]: EqInt(v1: integer, v2: integer) -> boolean
 697[33]: GotoFalseWord(jump=703, if_false: boolean)
 700[32]: GotoWord(jump=753)
 703[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 706[32]: ConstText(_value="Test failed ") -> text
 720[48]: AppendText(var[4], v1: text)
 723[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 726[36]: ConstInt(val=0) -> integer
 731[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 738[32]: ConstText(_value=" != 48") -> text
 746[48]: AppendText(var[4], v1: text)
 749[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 752[48]: Panic(message: text)
 753[32]: FreeText(var[4])
 756[32]: Return(ret=0, value=0, discard=32)

Execute test:
  655:[8] Text()
  656:[32] ConstInt(val=1) -> 1[32]
  661:[36] ConstInt(val=4) -> 4[36]
  666:[40] ConstInt(val=4) -> 4[40]
  671:[44] AddInt(v1=4[36], v2=4[40]) -> 8[36]
  672:[40] ConstInt(val=10) -> 10[40]
  677:[44] ConstInt(val=4) -> 4[44]
  682:[48] MulInt(v1=10[40], v2=4[44]) -> 40[40]
  683:[44] AddInt(v1=8[36], v2=40[40]) -> 48[36]
  684:[40] FreeStack(value=4, discard=8)
  688:[36] VarInt(var[32]) -> 48[36]
  691:[40] ConstInt(val=48) -> 48[40]
  696:[44] EqInt(v1=48[36], v2=48[40]) -> true[36]
  697:[37] GotoFalseWord(jump=703, if_false=true[36])
  700:[36] GotoWord(jump=753)
  753:[36] FreeText(var[8])
  756:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
