pub fn test() {
    test_value = {a = 1; sizeof(1+2+3) + sizeof(integer) + 10 * sizeof(a)};
    assert(
        test_value == 48,
        "Test failed {test_value} != 48"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 1i32;
    OpAddInt(OpAddInt(4i32, 4i32), OpMulInt(10i32, 4i32));
  }#2:integer;
  if OpEqInt(test_value, 48i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 48");
    __work_1;
  }#3:text);
}#1

byte-code for expr_integer:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstInt(val=1) -> integer
 698[32]: ConstInt(val=4) -> integer
 703[36]: ConstInt(val=4) -> integer
 708[40]: AddInt(v1: integer, v2: integer) -> integer
 709[36]: ConstInt(val=10) -> integer
 714[40]: ConstInt(val=4) -> integer
 719[44]: MulInt(v1: integer, v2: integer) -> integer
 720[40]: AddInt(v1: integer, v2: integer) -> integer
 721[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 725[32]: VarInt(var[28]) -> integer
 728[36]: ConstInt(val=48) -> integer
 733[40]: EqInt(v1: integer, v2: integer) -> boolean
 734[33]: GotoFalseWord(jump=740, if_false: boolean)
 737[32]: GotoWord(jump=790)
 740[32]: ClearText(var[4])
 743[32]: ConstText(_value="Test failed ") -> text
 757[48]: AppendText(var[4], v1: text)
 760[32]: VarInt(var[28]) -> integer
 763[36]: ConstInt(val=0) -> integer
 768[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 775[32]: ConstText(_value=" != 48") -> text
 783[48]: AppendText(var[4], v1: text)
 786[32]: VarText(var[4]) -> text
 789[48]: Panic(message: text)
 790[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] ConstInt(val=1) -> 1[32]
  698:[36] ConstInt(val=4) -> 4[36]
  703:[40] ConstInt(val=4) -> 4[40]
  708:[44] AddInt(v1=4[36], v2=4[40]) -> 8[36]
  709:[40] ConstInt(val=10) -> 10[40]
  714:[44] ConstInt(val=4) -> 4[44]
  719:[48] MulInt(v1=10[40], v2=4[44]) -> 40[40]
  720:[44] AddInt(v1=8[36], v2=40[40]) -> 48[36]
  721:[40] FreeStack(value=4, discard=8)
  725:[36] VarInt(var[32]) -> 48[36]
  728:[40] ConstInt(val=48) -> 48[40]
  733:[44] EqInt(v1=48[36], v2=48[40]) -> true[36]
  734:[37] GotoFalseWord(jump=740, if_false=true[36])
  737:[36] GotoWord(jump=790)
  790:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
