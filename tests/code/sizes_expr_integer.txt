pub fn test() {
    test_value = {a = 1; sizeof(1+2+3) + sizeof(integer) + 10 * sizeof(a)};
    assert(
        test_value == 48,
        "Test failed {test_value} != 48"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 1i32;
    OpAddInt(OpAddInt(4i32, 4i32), OpMulInt(10i32, 4i32));
  }#2:integer;
  if OpEqInt(test_value, 48i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 48");
    __work_1;
  }#3:text);
}#1

byte-code for expr_integer:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=1) -> integer var=a[28]:integer in 2
   6[32]: ConstInt(val=4) -> integer
  11[36]: ConstInt(val=4) -> integer
  16[40]: AddInt(v1: integer, v2: integer) -> integer
  17[36]: ConstInt(val=10) -> integer
  22[40]: ConstInt(val=4) -> integer
  27[44]: MulInt(v1: integer, v2: integer) -> integer
  28[40]: AddInt(v1: integer, v2: integer) -> integer
  29[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
  33[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  36[36]: ConstInt(val=48) -> integer
  41[40]: EqInt(v1: integer, v2: integer) -> boolean
  42[33]: GotoFalseWord(jump=48, if_false: boolean)
  45[32]: GotoWord(jump=98)
  48[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  51[32]: ConstText(_value="Test failed ") -> text
  65[48]: AppendText(var[4], v1: text)
  68[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  71[36]: ConstInt(val=0) -> integer
  76[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  83[32]: ConstText(_value=" != 48") -> text
  91[48]: AppendText(var[4], v1: text)
  94[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  97[48]: Panic(message: text)
  98[32]: FreeText(var[4])
 101[32]: Return(ret=0, value=0, discard=32)

