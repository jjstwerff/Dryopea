enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {null < 3 as Number};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
Type 17:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    OpLtEnum(OpConvEnumFromNull(), OpCastEnumFromInt(3i32, 17i32));
  }#2:boolean;
  if OpEqBool(test_value, false) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != false");
    __work_1;
  }#3:text);
}#1

byte-code for null_enum:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConvEnumFromNull() -> enumerate type=integer[4]:Base[0] var=test_value[28]:boolean in 1
   2[29]: ConstInt(val=3) -> integer
   7[33]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[17]
   8[30]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
   9[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  12[30]: ConstFalse() -> boolean
  13[31]: EqBool(v1: boolean, v2: boolean) -> boolean
  14[30]: GotoFalseWord(jump=20, if_false: boolean)
  17[29]: GotoWord(jump=71)
  20[29]: ClearText(var[4]) var=__work_1[4]:text in 1
  23[29]: ConstText(_value="Test failed ") -> text
  37[45]: AppendText(var[4], v1: text)
  40[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  43[30]: ConstInt(val=0) -> integer
  48[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
  53[29]: ConstText(_value=" != false") -> text
  64[45]: AppendText(var[4], v1: text)
  67[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  70[45]: Panic(message: text)
  71[29]: FreeText(var[4])
  74[29]: Return(ret=0, value=0, discard=29)

