enum Number { One, Two, Three, Four }

pub fn test() {
    test_value = {null < 3 as Number};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
Type 12:Number[1]:Enum(["One", "Two", "Three", "Four"])

fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    OpLtEnum(OpConvEnumFromNull(), OpCastEnumFromInt(3i32, 12i32));
  }#2:boolean;
  if OpEqBool(test_value, false) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != false");
    __work_1;
  }#3:text);
}#1

byte-code for null_enum:test()
 645[0]: return-address
 645[4]: Text() var=__work_1[4]:text in 1
 646[28]: ConvEnumFromNull() -> enumerate type=integer[4]:Base[0] var=test_value[28]:boolean in 1
 647[29]: ConstInt(val=3) -> integer
 652[33]: CastEnumFromInt(v1: integer) -> enumerate type=Number[1]:Enum(["One", "Two", "Three", "Four"])[12]
 653[30]: LtEnum(v1: enumerate, v2: enumerate) -> boolean
 654[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
 657[30]: ConstFalse() -> boolean
 658[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 659[30]: GotoFalseWord(jump=665, if_false: boolean)
 662[29]: GotoWord(jump=716)
 665[29]: ClearText(var[4]) var=__work_1[4]:text in 1
 668[29]: ConstText(_value="Test failed ") -> text
 682[45]: AppendText(var[4], v1: text)
 685[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
 688[30]: ConstInt(val=0) -> integer
 693[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 698[29]: ConstText(_value=" != false") -> text
 709[45]: AppendText(var[4], v1: text)
 712[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 715[45]: Panic(message: text)
 716[29]: FreeText(var[4])
 719[29]: Return(ret=0, value=0, discard=29)

Execute test:
  645:[8] Text()
  646:[32] ConvEnumFromNull() -> null(255)[32]
  647:[33] ConstInt(val=3) -> 3[33]
  652:[37] CastEnumFromInt(v1=3[33]) -> Three(3)[33]
  653:[34] LtEnum(v1=255[32], v2=3[33]) -> false[32]
  654:[33] VarBool(var[32]) -> false[33]
  657:[34] ConstFalse() -> false[34]
  658:[35] EqBool(v1=false[33], v2=false[34]) -> true[33]
  659:[34] GotoFalseWord(jump=665, if_false=true[33])
  662:[33] GotoWord(jump=716)
  716:[33] FreeText(var[8])
  719:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
