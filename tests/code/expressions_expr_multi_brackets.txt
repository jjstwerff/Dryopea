Test code:
pub fn test() {
    test_value = {(1 + 2) * 3};
    assert(
        test_value == 9,
        "Test failed {test_value} != 9"
    );
}

fn test {
  let __work_1 = "";
  let test_value = {
    OpMulInt(OpAddInt(1i32, 2i32), 3i32);
  };
  if OpEqInt(test_value, 9i32) {null} else {OpGenPanic({
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 9");
    __work_1;
  })};
}

byte-code for expr_multi_brackets:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="") -> text(false)
 671[44]: AppendText(var[4], v1: text(false))
 674[28]: ConstInt(val=1) -> integer
 679[32]: ConstInt(val=2) -> integer
 684[36]: AddInt(v1: integer, v2: integer) -> integer
 685[32]: ConstInt(val=3) -> integer
 690[36]: MulInt(v1: integer, v2: integer) -> integer
 691[32]: VarInt(var[28]) -> integer
 694[36]: ConstInt(val=9) -> integer
 699[40]: EqInt(v1: integer, v2: integer) -> boolean
 700[33]: GenGotoFalseWord(jump=706, if_false: boolean)
 703[32]: GenGotoWord(jump=755)
 706[32]: ClearText(var[4])
 709[32]: ConstText(_value="Test failed ") -> text(false)
 723[48]: AppendText(var[4], v1: text(false))
 726[32]: VarInt(var[28]) -> integer
 729[36]: ConstInt(val=0) -> integer
 734[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 741[32]: ConstText(_value=" != 9") -> text(false)
 748[48]: AppendText(var[4], v1: text(false))
 751[32]: VarText(var[4]) -> text(false)
 754[48]: GenPanic(message: text(false))
 755[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="") -> ""[32]
  671:[48] AppendText(var[8], v1=""[32])
  674:[32] ConstInt(val=1) -> 1[32]
  679:[36] ConstInt(val=2) -> 2[36]
  684:[40] AddInt(v1=1[32], v2=2[36]) -> 3[32]
  685:[36] ConstInt(val=3) -> 3[36]
  690:[40] MulInt(v1=3[32], v2=3[36]) -> 9[32]
  691:[36] VarInt(var[32]) -> 9[36]
  694:[40] ConstInt(val=9) -> 9[40]
  699:[44] EqInt(v1=9[36], v2=9[40]) -> true[36]
  700:[37] GenGotoFalseWord(jump=706, if_false=true[36])
  703:[36] GenGotoWord(jump=755)
  755:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
