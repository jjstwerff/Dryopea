Test code:
pub fn test() {
    test_value = {(1 + 2) * 3};
    assert(
        test_value == 9,
        "Test failed {test_value} != 9"
    );
}

fn test {
  let test_value = {
    OpMulInt(OpAddInt(1i32, 2i32), 3i32);
  };
  if OpEqInt(test_value, 9i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 9");
    append_7;
  })};
}

byte-code for expr_multi_brackets:test()
 664[0]: return-address
 664[4]: ConstInt(val=1) -> integer
 669[8]: ConstInt(val=2) -> integer
 674[12]: AddInt(v1: integer, v2: integer) -> integer
 675[8]: ConstInt(val=3) -> integer
 680[12]: MulInt(v1: integer, v2: integer) -> integer
 681[8]: VarInt(var[4]) -> integer
 684[12]: ConstInt(val=9) -> integer
 689[16]: EqInt(v1: integer, v2: integer) -> boolean
 690[9]: GenGotoFalseWord(jump=696, if_false: boolean)
 693[8]: GenGotoWord(jump=747)
 696[8]: Text()
 697[32]: ConstText(_value="Test failed ") -> text
 711[48]: AppendText(var[8], v1: text)
 714[32]: VarInt(var[4]) -> integer
 717[36]: ConstInt(val=0) -> integer
 722[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 729[32]: ConstText(_value=" != 9") -> text
 736[48]: AppendText(var[8], v1: text)
 739[32]: VarText(var[8]) -> text
 742[48]: GenFreeStack(value=16, discard=24)
 746[24]: GenPanic(message: text)
 747[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] ConstInt(val=1) -> 1[4]
  669:[8] ConstInt(val=2) -> 2[8]
  674:[12] AddInt(v1=1[4], v2=2[8]) -> 3[4]
  675:[8] ConstInt(val=3) -> 3[8]
  680:[12] MulInt(v1=3[4], v2=3[8]) -> 9[4]
  681:[8] VarInt(var[4]) -> 9[8]
  684:[12] ConstInt(val=9) -> 9[12]
  689:[16] EqInt(v1=9[8], v2=9[12]) -> true[8]
  690:[9] GenGotoFalseWord(jump=696, if_false=true[8])
  693:[8] GenGotoWord(jump=747)
  747:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
