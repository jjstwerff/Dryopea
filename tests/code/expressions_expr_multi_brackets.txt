Test code:
pub fn test() {
    test_value = {(1 + 2) * 3};
    assert(
        test_value == 9,
        "Test failed {test_value} != 9"
    );
}

fn test {
  let test_value = {
    OpMulInt(OpAddInt(1i32, 2i32), 3i32);
  };
  if OpEqInt(test_value, 9i32) {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatInt(append_7, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_7, " != 9");
    append_7;
  })};
}

byte-code for expr_multi_brackets:test()
 668[0]: return-address
 668[4]: ConstInt(val=1) -> integer
 673[8]: ConstInt(val=2) -> integer
 678[12]: AddInt(v1: integer, v2: integer) -> integer
 679[8]: ConstInt(val=3) -> integer
 684[12]: MulInt(v1: integer, v2: integer) -> integer
 685[8]: VarInt(var[4]) -> integer
 688[12]: ConstInt(val=9) -> integer
 693[16]: EqInt(v1: integer, v2: integer) -> boolean
 694[9]: GenGotoFalseWord(jump=700, if_false: boolean)
 697[8]: GenGotoWord(jump=751)
 700[8]: Text()
 701[32]: ConstText(_value="Test failed ") -> text
 715[48]: AppendText(var[8], v1: text)
 718[32]: VarInt(var[4]) -> integer
 721[36]: ConstInt(val=0) -> integer
 726[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 733[32]: ConstText(_value=" != 9") -> text
 740[48]: AppendText(var[8], v1: text)
 743[32]: VarText(var[8]) -> text
 746[48]: GenFreeStack(value=16, discard=24)
 750[24]: GenPanic(message: text)
 751[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  668:[4] ConstInt(val=1) -> 1[4]
  673:[8] ConstInt(val=2) -> 2[8]
  678:[12] AddInt(v1=1[4], v2=2[8]) -> 3[4]
  679:[8] ConstInt(val=3) -> 3[8]
  684:[12] MulInt(v1=3[4], v2=3[8]) -> 9[4]
  685:[8] VarInt(var[4]) -> 9[8]
  688:[12] ConstInt(val=9) -> 9[12]
  693:[16] EqInt(v1=9[8], v2=9[12]) -> true[8]
  694:[9] GenGotoFalseWord(jump=700, if_false=true[8])
  697:[8] GenGotoWord(jump=751)
  751:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
