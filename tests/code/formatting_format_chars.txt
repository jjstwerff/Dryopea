pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{for c in txt[2..-1] {"{c#index}:{c}"}}b"};
    assert(
        test_value == "a[4:ðŸ˜Š,8:ðŸ™ƒ,9:4]b",
        "Test failed {test_value} != \"a[4:ðŸ˜Š,8:ðŸ™ƒ,9:4]b\""
    );
}
fn test() {#1 block
  __work_4:text = "";
  __work_3:text = "";
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    txt:text = "12ðŸ˜ŠðŸ™ƒ45";
    {#3 formatting string
      __work_1:text = "a";
      OpAppendText(__work_1, "[");
      c#index:integer = 0i32;
      c#count:integer = 0i32;
      loop {#4 iter for
        _val_1:text = {#5 iter for loop
          c:text["txt"] = {#6 for text next
            __work_2:text = OpGetTextSub(OpGetTextSub(txt, 2i32, OpMinSingleInt(1i32)), c#index, -2147483648i32);
            c#index:integer = OpAddInt(c#index, OpLengthText(__work_2));
            __work_2;
          }#6:text["txt"];
          if OpNot(OpConvBoolFromText(c)) break(0) else null;
          {#7 block
            {#8 formatting string
              __work_3:text = "";
              OpFormatInt(__work_3, c#index, 10i32, 0i32, 32i32, false, false);
              OpAppendText(__work_3, ":");
              OpFormatText(__work_3, c, 0i32, -1i32, 32i32);
              __work_3;
            }#8:text;
          }#7:text;
        }#5:text;
        if OpGtInt(c#count, 0i32) OpAppendText(__work_1, ",") else null;
        c#count:integer = OpAddInt(c#count, 1i32);
        OpFormatText(__work_1, _val_1, 0i32, -1i32, 32i32);
      }#4;
      OpAppendText(__work_1, "]");
      OpAppendText(__work_1, "b");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a[4:ðŸ˜Š,8:ðŸ™ƒ,9:4]b") null else OpPanic({#9 formatting string
    __work_4:text = "Test failed ";
    OpFormatText(__work_4, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_4, " != "a[4:ðŸ˜Š,8:ðŸ™ƒ,9:4]b"");
    __work_4;
  }#9:text);
}#1

byte-code for format_chars:test() [1082]
   0[0]: return-address
   0[4]: Text() var=__work_4[4]:text in 1
   1[28]: Text() var=__work_3[28]:text in 1
   2[52]: Text() var=__work_2[52]:text in 1
   3[76]: Text() var=__work_1[76]:text in 1
   4[100]: Text() var=test_value[100]:text in 1
   5[124]: Text() var=txt[124]:text in 2
   6[148]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
  20[164]: AppendText(var[124], v1: text)
  23[148]: ClearText(var[76]) var=__work_1[76]:text in 1
  26[148]: ConstText(_value="a") -> text
  29[164]: AppendText(var[76], v1: text)
  32[148]: ConstText(_value="[") -> text
  35[164]: AppendText(var[76], v1: text)
  38[148]: ConstInt(val=0) -> integer var=c#index[148]:integer in 3
  43[152]: ConstInt(val=0) -> integer var=c#count[152]:integer in 3
  48[156]: Text() var=_val_1[156]:text in 4
  49[180]: Text() var=c[180]:text["txt"] in 5
  50[204]: ClearText(var[52]) var=__work_2[52]:text in 1
  53[204]: VarText(var[124]) -> text var=txt[124]:text in 2
  56[220]: ConstInt(val=2) -> integer
  61[224]: ConstInt(val=1) -> integer
  66[228]: MinSingleInt(v1: integer) -> integer
  67[228]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  68[220]: VarInt(var[148]) -> integer var=c#index[148]:integer in 3
  71[224]: ConstInt(val=-2147483648) -> integer
  76[228]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
  77[220]: AppendText(var[52], v1: text)
  80[204]: VarInt(var[148]) -> integer var=c#index[148]:integer in 3
  83[208]: VarText(var[52]) -> text var=__work_2[52]:text in 1
  86[224]: LengthText(v1: text) -> integer
  87[212]: AddInt(v1: integer, v2: integer) -> integer
  88[208]: PutInt(var[148], value: integer)
  91[204]: VarText(var[52]) -> text var=__work_2[52]:text in 1
  94[220]: AppendText(var[180], v1: text)
  97[204]: VarText(var[180]) -> text var=c[180]:text["txt"] in 5
 100[220]: ConvBoolFromText(v1: text) -> boolean
 101[205]: Not(v1: boolean) -> boolean
 102[205]: GotoFalseWord(jump=118, if_false: boolean)
 105[204]: FreeText(var[156])
 108[204]: FreeText(var[180])
 111[204]: FreeStack(value=0, discard=48)
 115[156]: GotoWord(jump=226)
 118[204]: ClearText(var[28]) var=__work_3[28]:text in 1
 121[204]: ConstText(_value="") -> text
 123[220]: AppendText(var[28], v1: text)
 126[204]: VarInt(var[148]) -> integer var=c#index[148]:integer in 3
 129[208]: ConstInt(val=0) -> integer
 134[212]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 141[204]: ConstText(_value=":") -> text
 144[220]: AppendText(var[28], v1: text)
 147[204]: VarText(var[180]) -> text var=c[180]:text["txt"] in 5
 150[220]: ConstInt(val=0) -> integer
 155[224]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 160[204]: VarText(var[28]) -> text var=__work_3[28]:text in 1
 163[220]: FreeText(var[180])
 166[220]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 170[196]: AppendText(var[156], v1: text)
 173[180]: VarInt(var[152]) -> integer var=c#count[152]:integer in 3
 176[184]: ConstInt(val=0) -> integer
 181[188]: GtInt(v1: integer, v2: integer) -> boolean
 182[181]: GotoFalseWord(jump=191, if_false: boolean)
 185[180]: ConstText(_value=",") -> text
 188[196]: AppendText(var[76], v1: text)
 191[180]: VarInt(var[152]) -> integer var=c#count[152]:integer in 3
 194[184]: ConstInt(val=1) -> integer
 199[188]: AddInt(v1: integer, v2: integer) -> integer
 200[184]: PutInt(var[152], value: integer)
 203[180]: VarText(var[156]) -> text var=_val_1[156]:text in 4
 206[196]: ConstInt(val=0) -> integer
 211[200]: FormatText(var[76], val: text, width: integer, dir=-1, token=32)
 216[180]: FreeText(var[156])
 219[180]: FreeStack(value=0, discard=24)
 223[156]: GotoWord(jump=48)
 226[156]: ConstText(_value="]") -> text
 229[172]: AppendText(var[76], v1: text)
 232[156]: ConstText(_value="b") -> text
 235[172]: AppendText(var[76], v1: text)
 238[156]: VarText(var[76]) -> text var=__work_1[76]:text in 1
 241[172]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 245[164]: FreeText(var[124])
 248[164]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 252[140]: AppendText(var[100], v1: text)
 255[124]: VarText(var[100]) -> text var=test_value[100]:text in 1
 258[140]: ConstText(_value="a[4:ðŸ˜Š,8:ðŸ™ƒ,9:4]b") -> text
 281[156]: EqText(v1: text, v2: text) -> boolean
 282[125]: GotoFalseWord(jump=288, if_false: boolean)
 285[124]: GotoWord(jump=357)
 288[124]: ClearText(var[4]) var=__work_4[4]:text in 1
 291[124]: ConstText(_value="Test failed ") -> text
 305[140]: AppendText(var[4], v1: text)
 308[124]: VarText(var[100]) -> text var=test_value[100]:text in 1
 311[140]: ConstInt(val=0) -> integer
 316[144]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 321[124]: ConstText(_value=" != "a[4:ðŸ˜Š,8:ðŸ™ƒ,9:4]b"") -> text
 350[140]: AppendText(var[4], v1: text)
 353[124]: VarText(var[4]) -> text var=__work_4[4]:text in 1
 356[140]: Panic(message: text)
 357[124]: FreeText(var[100])
 360[124]: FreeText(var[76])
 363[124]: FreeText(var[52])
 366[124]: FreeText(var[28])
 369[124]: FreeText(var[4])
 372[124]: Return(ret=0, value=0, discard=124)

