pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{for c in txt[2..-1] {c}}b"};
    assert(
        test_value == "a[ðŸ˜Š,ðŸ™ƒ,4]b",
        "Test failed {test_value} != \"a[ðŸ˜Š,ðŸ™ƒ,4]b\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    txt:text = "12ðŸ˜ŠðŸ™ƒ45";
    {#3 formatting string
      __work_1:text = "a";
      OpAppendText(__work_1, "[");
      c#index:integer = 0i32;
      _first_3:boolean = true;
      loop {#4 iter for loop
        _val_1:text["c"] = {#5 iter for fill
          c:text["txt"] = {#6 for text next
            _tres_2:text["txt"] = OpGetTextSub(OpGetTextSub(txt, 2i32, OpMinSingleInt(1i32)), c#index, -2147483648i32);
            c#index:integer = OpAddInt(c#index, OpLengthText(_tres_2));
            _tres_2;
          }#6:text["txt"];
          if OpNot(OpConvBoolFromText(c)) break(0) else null;
          {#7 block
            c;
          }#7:text["c"];
        }#5:text["c"];
        if _first_3 _first_3:boolean = false else OpAppendText(__work_1, ",");
        OpFormatText(__work_1, _val_1, 0i32, -1i32, 32i32);
      }#4;
      OpAppendText(__work_1, "]");
      OpAppendText(__work_1, "b");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a[ðŸ˜Š,ðŸ™ƒ,4]b") null else OpPanic({#8 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a[ðŸ˜Š,ðŸ™ƒ,4]b"");
    __work_2;
  }#8:text);
}#1

byte-code for format_chars:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Text()
 684[52]: Text()
 685[76]: Text()
 686[100]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
 700[116]: AppendText(var[76], v1: text)
 703[100]: ClearText(var[28])
 706[100]: ConstText(_value="a") -> text
 709[116]: AppendText(var[28], v1: text)
 712[100]: ConstText(_value="[") -> text
 715[116]: AppendText(var[28], v1: text)
 718[100]: ConstInt(val=0) -> integer
 723[104]: ConstTrue() -> boolean
 724[105]: Text()
 725[129]: Text()
 726[153]: Text()
 727[177]: VarText(var[76]) -> text
 730[193]: ConstInt(val=2) -> integer
 735[197]: ConstInt(val=1) -> integer
 740[201]: MinSingleInt(v1: integer) -> integer
 741[201]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 742[193]: VarInt(var[100]) -> integer
 745[197]: ConstInt(val=-2147483648) -> integer
 750[201]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 751[193]: AppendText(var[153], v1: text)
 754[177]: VarInt(var[100]) -> integer
 757[181]: VarText(var[153]) -> text
 760[197]: LengthText(v1: text) -> integer
 761[185]: AddInt(v1: integer, v2: integer) -> integer
 762[181]: PutInt(var[100], value: integer)
 765[177]: VarText(var[153]) -> text
 768[193]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 772[169]: AppendText(var[129], v1: text)
 775[153]: VarText(var[129]) -> text
 778[169]: ConvBoolFromText(v1: text) -> boolean
 779[154]: Not(v1: boolean) -> boolean
 780[154]: GotoFalseWord(jump=790, if_false: boolean)
 783[153]: FreeStack(value=0, discard=48)
 787[105]: GotoWord(jump=839)
 790[153]: VarText(var[129]) -> text
 793[169]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 797[145]: AppendText(var[105], v1: text)
 800[129]: VarBool(var[104]) -> boolean
 803[130]: GotoFalseWord(jump=813, if_false: boolean)
 806[129]: ConstFalse() -> boolean
 807[130]: PutBool(var=26, value: boolean)
 810[129]: GotoWord(jump=819)
 813[129]: ConstText(_value=",") -> text
 816[145]: AppendText(var[28], v1: text)
 819[129]: VarText(var[105]) -> text
 822[145]: ConstInt(val=0) -> integer
 827[149]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 832[129]: FreeStack(value=0, discard=24)
 836[105]: GotoWord(jump=724)
 839[105]: ConstText(_value="]") -> text
 842[121]: AppendText(var[28], v1: text)
 845[105]: ConstText(_value="b") -> text
 848[121]: AppendText(var[28], v1: text)
 851[105]: VarText(var[28]) -> text
 854[121]: FreeStack(value=16, discard=5) type=text[4]:Base[5]
 858[116]: FreeStack(value=16, discard=24) type=text[4]:Base[5]
 862[92]: AppendText(var[52], v1: text)
 865[76]: VarText(var[52]) -> text
 868[92]: ConstText(_value="a[ðŸ˜Š,ðŸ™ƒ,4]b") -> text
 885[108]: EqText(v1: text, v2: text) -> boolean
 886[77]: GotoFalseWord(jump=892, if_false: boolean)
 889[76]: GotoWord(jump=955)
 892[76]: ClearText(var[4])
 895[76]: ConstText(_value="Test failed ") -> text
 909[92]: AppendText(var[4], v1: text)
 912[76]: VarText(var[52]) -> text
 915[92]: ConstInt(val=0) -> integer
 920[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 925[76]: ConstText(_value=" != "a[ðŸ˜Š,ðŸ™ƒ,4]b"") -> text
 948[92]: AppendText(var[4], v1: text)
 951[76]: VarText(var[4]) -> text
 954[92]: Panic(message: text)
 955[76]: Return(ret=0, value=0, discard=76)

Execute test:
  682:[8] Text()
  683:[32] Text()
  684:[56] Text()
  685:[80] Text()
  686:[104] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[104]
  700:[120] AppendText(var[80], v1="12ðŸ˜ŠðŸ™ƒ45"[104])
  703:[104] ClearText(var[32])
  706:[104] ConstText(_value="a") -> "a"[104]
  709:[120] AppendText(var[32], v1="a"[104])
  712:[104] ConstText(_value="[") -> "["[104]
  715:[120] AppendText(var[32], v1="["[104])
  718:[104] ConstInt(val=0) -> 0[104]
  723:[108] ConstTrue() -> true[108]
  724:[109] Text()
  725:[133] Text()
  726:[157] Text()
  727:[181] VarText(var[80]) -> "12ðŸ˜ŠðŸ™ƒ45"[181]
  730:[197] ConstInt(val=2) -> 2[197]
  735:[201] ConstInt(val=1) -> 1[201]
  740:[205] MinSingleInt(v1=1[201]) -> -1[201]
  741:[205] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[181], from=2[197], till=-1[201]) -> "ðŸ˜ŠðŸ™ƒ4"[181]
  742:[197] VarInt(var[104]) -> 0[197]
  745:[201] ConstInt(val=-2147483648) -> -2147483648[201]
  750:[205] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[181], from=0[197], till=-2147483648[201]) -> "ðŸ˜Š"[181]
  751:[197] AppendText(var[157], v1="ðŸ˜Š"[181])
  754:[181] VarInt(var[104]) -> 0[181]
  757:[185] VarText(var[157]) -> "ðŸ˜Š"[185]
  760:[201] LengthText(v1="ðŸ˜Š"[185]) -> 4[185]
  761:[189] AddInt(v1=0[181], v2=4[185]) -> 4[181]
  762:[185] PutInt(var[104], value=4[181])
  765:[181] VarText(var[157]) -> "ðŸ˜Š"[181]
  768:[197] FreeStack(value=16, discard=24)
  772:[173] AppendText(var[133], v1="ðŸ˜Š"[157])
  775:[157] VarText(var[133]) -> "ðŸ˜Š"[157]
  778:[173] ConvBoolFromText(v1="ðŸ˜Š"[157]) -> true[157]
  779:[158] Not(v1=true[157]) -> false[157]
  780:[158] GotoFalseWord(jump=790, if_false=false[157])
  790:[157] VarText(var[133]) -> "ðŸ˜Š"[157]
  793:[173] FreeStack(value=16, discard=24)
  797:[149] AppendText(var[109], v1="ðŸ˜Š"[133])
  800:[133] VarBool(var[108]) -> true[133]
  803:[134] GotoFalseWord(jump=813, if_false=true[133])
  806:[133] ConstFalse() -> false[133]
  807:[134] PutBool(var=26, value=false[133])
  810:[133] GotoWord(jump=819)
  819:[133] VarText(var[109]) -> "ðŸ˜Š"[133]
  822:[149] ConstInt(val=0) -> 0[149]
  827:[153] FormatText(var[32], val="ðŸ˜Š"[133], width=0[149], dir=-1, token=32)
  832:[133] FreeStack(value=0, discard=24)
  836:[109] GotoWord(jump=724)
  724:[109] Text()
  725:[133] Text()
  726:[157] Text()
  727:[181] VarText(var[80]) -> "12ðŸ˜ŠðŸ™ƒ45"[181]
  730:[197] ConstInt(val=2) -> 2[197]
  735:[201] ConstInt(val=1) -> 1[201]
  740:[205] MinSingleInt(v1=1[201]) -> -1[201]
  741:[205] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[181], from=2[197], till=-1[201]) -> "ðŸ˜ŠðŸ™ƒ4"[181]
  742:[197] VarInt(var[104]) -> 4[197]
  745:[201] ConstInt(val=-2147483648) -> -2147483648[201]
  750:[205] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[181], from=4[197], till=-2147483648[201]) -> "ðŸ™ƒ"[181]
  751:[197] AppendText(var[157], v1="ðŸ™ƒ"[181])
  754:[181] VarInt(var[104]) -> 4[181]
  757:[185] VarText(var[157]) -> "ðŸ™ƒ"[185]
  760:[201] LengthText(v1="ðŸ™ƒ"[185]) -> 4[185]
  761:[189] AddInt(v1=4[181], v2=4[185]) -> 8[181]
  762:[185] PutInt(var[104], value=8[181])
  765:[181] VarText(var[157]) -> "ðŸ™ƒ"[181]
  768:[197] FreeStack(value=16, discard=24)
  772:[173] AppendText(var[133], v1="ðŸ™ƒ"[157])
  775:[157] VarText(var[133]) -> "ðŸ™ƒ"[157]
  778:[173] ConvBoolFromText(v1="ðŸ™ƒ"[157]) -> true[157]
  779:[158] Not(v1=true[157]) -> false[157]
  780:[158] GotoFalseWord(jump=790, if_false=false[157])
  790:[157] VarText(var[133]) -> "ðŸ™ƒ"[157]
  793:[173] FreeStack(value=16, discard=24)
  797:[149] AppendText(var[109], v1="ðŸ™ƒ"[133])
  800:[133] VarBool(var[108]) -> false[133]
  803:[134] GotoFalseWord(jump=813, if_false=false[133])
  813:[133] ConstText(_value=",") -> ","[133]
  816:[149] AppendText(var[32], v1=","[133])
  819:[133] VarText(var[109]) -> "ðŸ™ƒ"[133]
  822:[149] ConstInt(val=0) -> 0[149]
  827:[153] FormatText(var[32], val="ðŸ™ƒ"[133], width=0[149], dir=-1, token=32)
  832:[133] FreeStack(value=0, discard=24)
  836:[109] GotoWord(jump=724)
  724:[109] Text()
  725:[133] Text()
  726:[157] Text()
  727:[181] VarText(var[80]) -> "12ðŸ˜ŠðŸ™ƒ45"[181]
  730:[197] ConstInt(val=2) -> 2[197]
  735:[201] ConstInt(val=1) -> 1[201]
  740:[205] MinSingleInt(v1=1[201]) -> -1[201]
  741:[205] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[181], from=2[197], till=-1[201]) -> "ðŸ˜ŠðŸ™ƒ4"[181]
  742:[197] VarInt(var[104]) -> 8[197]
  745:[201] ConstInt(val=-2147483648) -> -2147483648[201]
  750:[205] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[181], from=8[197], till=-2147483648[201]) -> "4"[181]
  751:[197] AppendText(var[157], v1="4"[181])
  754:[181] VarInt(var[104]) -> 8[181]
  757:[185] VarText(var[157]) -> "4"[185]
  760:[201] LengthText(v1="4"[185]) -> 1[185]
  761:[189] AddInt(v1=8[181], v2=1[185]) -> 9[181]
  762:[185] PutInt(var[104], value=9[181])
  765:[181] VarText(var[157]) -> "4"[181]
  768:[197] FreeStack(value=16, discard=24)
  772:[173] AppendText(var[133], v1="4"[157])
  775:[157] VarText(var[133]) -> "4"[157]
  778:[173] ConvBoolFromText(v1="4"[157]) -> true[157]
  779:[158] Not(v1=true[157]) -> false[157]
  780:[158] GotoFalseWord(jump=790, if_false=false[157])
  790:[157] VarText(var[133]) -> "4"[157]
  793:[173] FreeStack(value=16, discard=24)
  797:[149] AppendText(var[109], v1="4"[133])
  800:[133] VarBool(var[108]) -> false[133]
  803:[134] GotoFalseWord(jump=813, if_false=false[133])
  813:[133] ConstText(_value=",") -> ","[133]
  816:[149] AppendText(var[32], v1=","[133])
  819:[133] VarText(var[109]) -> "4"[133]
  822:[149] ConstInt(val=0) -> 0[149]
  827:[153] FormatText(var[32], val="4"[133], width=0[149], dir=-1, token=32)
  832:[133] FreeStack(value=0, discard=24)
  836:[109] GotoWord(jump=724)
  724:[109] Text()
  725:[133] Text()
  726:[157] Text()
  727:[181] VarText(var[80]) -> "12ðŸ˜ŠðŸ™ƒ45"[181]
  730:[197] ConstInt(val=2) -> 2[197]
  735:[201] ConstInt(val=1) -> 1[201]
  740:[205] MinSingleInt(v1=1[201]) -> -1[201]
  741:[205] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[181], from=2[197], till=-1[201]) -> "ðŸ˜ŠðŸ™ƒ4"[181]
  742:[197] VarInt(var[104]) -> 9[197]
  745:[201] ConstInt(val=-2147483648) -> -2147483648[201]
  750:[205] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[181], from=9[197], till=-2147483648[201]) -> ""[181]
  751:[197] AppendText(var[157], v1=""[181])
  754:[181] VarInt(var[104]) -> 9[181]
  757:[185] VarText(var[157]) -> ""[185]
  760:[201] LengthText(v1=""[185]) -> 0[185]
  761:[189] AddInt(v1=9[181], v2=0[185]) -> 9[181]
  762:[185] PutInt(var[104], value=9[181])
  765:[181] VarText(var[157]) -> ""[181]
  768:[197] FreeStack(value=16, discard=24)
  772:[173] AppendText(var[133], v1=""[157])
  775:[157] VarText(var[133]) -> ""[157]
  778:[173] ConvBoolFromText(v1=""[157]) -> false[157]
  779:[158] Not(v1=false[157]) -> true[157]
  780:[158] GotoFalseWord(jump=790, if_false=true[157])
  783:[157] FreeStack(value=0, discard=48)
  787:[109] GotoWord(jump=839)
  839:[109] ConstText(_value="]") -> "]"[109]
  842:[125] AppendText(var[32], v1="]"[109])
  845:[109] ConstText(_value="b") -> "b"[109]
  848:[125] AppendText(var[32], v1="b"[109])
  851:[109] VarText(var[32]) -> "a[ðŸ˜Š,ðŸ™ƒ,4]b"[109]
  854:[125] FreeStack(value=16, discard=5)
  858:[120] FreeStack(value=16, discard=24)
  862:[96] AppendText(var[56], v1="a[ðŸ˜Š,ðŸ™ƒ,4]b"[80])
  865:[80] VarText(var[56]) -> "a[ðŸ˜Š,ðŸ™ƒ,4]b"[80]
  868:[96] ConstText(_value="a[ðŸ˜Š,ðŸ™ƒ,4]b") -> "a[ðŸ˜Š,ðŸ™ƒ,4]b"[96]
  885:[112] EqText(v1="a[ðŸ˜Š,ðŸ™ƒ,4]b"[80], v2="a[ðŸ˜Š,ðŸ™ƒ,4]b"[96]) -> true[80]
  886:[81] GotoFalseWord(jump=892, if_false=true[80])
  889:[80] GotoWord(jump=955)
  955:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
