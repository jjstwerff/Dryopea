Test code:
pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{for c in txt[2..-1] {c}}b"};
    assert(
        test_value == "a[ðŸ˜Š,ðŸ™ƒ,4]b",
        "Test failed {test_value} != \"a[ðŸ˜Š,ðŸ™ƒ,4]b\""
    );
}

fn test {
  let test_value = {
    let txt = "12ðŸ˜ŠðŸ™ƒ45";
    {
      let append_13 = "a";
      OpAppendText(append_13, "[");
      let c#index = 0i32;
      let first_15 = true;
      loop {
        let val_16 = {
          let c = {
            let res_14 = OpGetTextSub(OpGetTextSub(txt, 2i32, OpMinSingleInt(1i32)), c#index, -2147483648i32);
            c#index = OpAddInt(c#index, OpLengthText(res_14));
            res_14;
          };
          if OpNot(OpConvBoolFromText(c)) {break(0)} else {null};
          c;
        };
        if first_15 {first_15 = false} else {OpAppendText(append_13, ",")};
        OpFormatText(append_13, val_16, 0i32, -1i32, 32i32);
      };
      OpAppendText(append_13, "]");
      OpAppendText(append_13, "b");
      append_13;
    };
  };
  if OpEqText(test_value, "a[ðŸ˜Š,ðŸ™ƒ,4]b") {null} else {OpGenPanic({
    let append_17 = "Test failed ";
    OpFormatText(append_17, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_17, " != "a[ðŸ˜Š,ðŸ™ƒ,4]b"");
    append_17;
  })};
}

byte-code for format_chars:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
 684[68]: AppendText(var[28], v1: text)
 687[52]: Text()
 688[76]: ConstText(_value="a") -> text
 691[92]: AppendText(var[52], v1: text)
 694[76]: ConstText(_value="[") -> text
 697[92]: AppendText(var[52], v1: text)
 700[76]: ConstInt(val=0) -> integer
 705[80]: ConstTrue() -> boolean
 706[81]: Text()
 707[105]: Text()
 708[129]: Text()
 709[153]: VarText(var[28]) -> text
 712[169]: ConstInt(val=2) -> integer
 717[173]: ConstInt(val=1) -> integer
 722[177]: MinSingleInt(v1: integer) -> integer
 723[177]: GetTextSub(v1: text, from: integer, till: integer) -> text
 724[169]: VarInt(var[76]) -> integer
 727[173]: ConstInt(val=-2147483648) -> integer
 732[177]: GetTextSub(v1: text, from: integer, till: integer) -> text
 733[169]: AppendText(var[129], v1: text)
 736[153]: VarInt(var[76]) -> integer
 739[157]: VarText(var[129]) -> text
 742[173]: LengthText(v1: text) -> integer
 743[161]: AddInt(v1: integer, v2: integer) -> integer
 744[157]: PutInt(var[76], value: integer)
 747[153]: VarText(var[129]) -> text
 750[169]: GenFreeStack(value=16, discard=24)
 754[145]: AppendText(var[105], v1: text)
 757[129]: VarText(var[105]) -> text
 760[145]: ConvBoolFromText(v1: text) -> boolean
 761[130]: Not(v1: boolean) -> boolean
 762[130]: GenGotoFalseWord(jump=772, if_false: boolean)
 765[129]: GenFreeStack(value=0, discard=48)
 769[81]: GenGotoWord(jump=821)
 772[129]: VarText(var[105]) -> text
 775[145]: GenFreeStack(value=16, discard=24)
 779[121]: AppendText(var[81], v1: text)
 782[105]: VarBool(var[80]) -> boolean
 785[106]: GenGotoFalseWord(jump=795, if_false: boolean)
 788[105]: ConstFalse() -> boolean
 789[106]: PutBool(var=26, value: boolean)
 792[105]: GenGotoWord(jump=801)
 795[105]: ConstText(_value=",") -> text
 798[121]: AppendText(var[52], v1: text)
 801[105]: VarText(var[81]) -> text
 804[121]: ConstInt(val=0) -> integer
 809[125]: FormatText(var[52], val: text, width: integer, dir=-1, token=32)
 814[105]: GenFreeStack(value=0, discard=24)
 818[81]: GenGotoWord(jump=706)
 821[81]: ConstText(_value="]") -> text
 824[97]: AppendText(var[52], v1: text)
 827[81]: ConstText(_value="b") -> text
 830[97]: AppendText(var[52], v1: text)
 833[81]: VarText(var[52]) -> text
 836[97]: GenFreeStack(value=16, discard=29)
 840[68]: GenFreeStack(value=16, discard=24)
 844[44]: AppendText(var[4], v1: text)
 847[28]: VarText(var[4]) -> text
 850[44]: ConstText(_value="a[ðŸ˜Š,ðŸ™ƒ,4]b") -> text
 867[60]: EqText(v1: text, v2: text) -> boolean
 868[29]: GenGotoFalseWord(jump=874, if_false: boolean)
 871[28]: GenGotoWord(jump=939)
 874[28]: Text()
 875[52]: ConstText(_value="Test failed ") -> text
 889[68]: AppendText(var[28], v1: text)
 892[52]: VarText(var[4]) -> text
 895[68]: ConstInt(val=0) -> integer
 900[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 905[52]: ConstText(_value=" != "a[ðŸ˜Š,ðŸ™ƒ,4]b"") -> text
 928[68]: AppendText(var[28], v1: text)
 931[52]: VarText(var[28]) -> text
 934[68]: GenFreeStack(value=16, discard=24)
 938[44]: GenPanic(message: text)
 939[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Text()
  670:[52] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[52]
  684:[68] AppendText(var[28], v1="12ðŸ˜ŠðŸ™ƒ45"[52])
  687:[52] Text()
  688:[76] ConstText(_value="a") -> "a"[76]
  691:[92] AppendText(var[52], v1="a"[76])
  694:[76] ConstText(_value="[") -> "["[76]
  697:[92] AppendText(var[52], v1="["[76])
  700:[76] ConstInt(val=0) -> 0[76]
  705:[80] ConstTrue() -> true[80]
  706:[81] Text()
  707:[105] Text()
  708:[129] Text()
  709:[153] VarText(var[28]) -> "12ðŸ˜ŠðŸ™ƒ45"[153]
  712:[169] ConstInt(val=2) -> 2[169]
  717:[173] ConstInt(val=1) -> 1[173]
  722:[177] MinSingleInt(v1=1[173]) -> -1[173]
  723:[177] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[153], from=2[169], till=-1[173]) -> "ðŸ˜ŠðŸ™ƒ4"[153]
  724:[169] VarInt(var[76]) -> 0[169]
  727:[173] ConstInt(val=-2147483648) -> -2147483648[173]
  732:[177] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[153], from=0[169], till=-2147483648[173]) -> "ðŸ˜Š"[153]
  733:[169] AppendText(var[129], v1="ðŸ˜Š"[153])
  736:[153] VarInt(var[76]) -> 0[153]
  739:[157] VarText(var[129]) -> "ðŸ˜Š"[157]
  742:[173] LengthText(v1="ðŸ˜Š"[157]) -> 4[157]
  743:[161] AddInt(v1=0[153], v2=4[157]) -> 4[153]
  744:[157] PutInt(var[76], value=4[153])
  747:[153] VarText(var[129]) -> "ðŸ˜Š"[153]
  750:[169] GenFreeStack(value=16, discard=24)
  754:[145] AppendText(var[105], v1="ðŸ˜Š"[129])
  757:[129] VarText(var[105]) -> "ðŸ˜Š"[129]
  760:[145] ConvBoolFromText(v1="ðŸ˜Š"[129]) -> true[129]
  761:[130] Not(v1=true[129]) -> false[129]
  762:[130] GenGotoFalseWord(jump=772, if_false=false[129])
  772:[129] VarText(var[105]) -> "ðŸ˜Š"[129]
  775:[145] GenFreeStack(value=16, discard=24)
  779:[121] AppendText(var[81], v1="ðŸ˜Š"[105])
  782:[105] VarBool(var[80]) -> true[105]
  785:[106] GenGotoFalseWord(jump=795, if_false=true[105])
  788:[105] ConstFalse() -> false[105]
  789:[106] PutBool(var=26, value=false[105])
  792:[105] GenGotoWord(jump=801)
  801:[105] VarText(var[81]) -> "ðŸ˜Š"[105]
  804:[121] ConstInt(val=0) -> 0[121]
  809:[125] FormatText(var[52], val="ðŸ˜Š"[105], width=0[121], dir=-1, token=32)
  814:[105] GenFreeStack(value=0, discard=24)
  818:[81] GenGotoWord(jump=706)
  706:[81] Text()
  707:[105] Text()
  708:[129] Text()
  709:[153] VarText(var[28]) -> "12ðŸ˜ŠðŸ™ƒ45"[153]
  712:[169] ConstInt(val=2) -> 2[169]
  717:[173] ConstInt(val=1) -> 1[173]
  722:[177] MinSingleInt(v1=1[173]) -> -1[173]
  723:[177] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[153], from=2[169], till=-1[173]) -> "ðŸ˜ŠðŸ™ƒ4"[153]
  724:[169] VarInt(var[76]) -> 4[169]
  727:[173] ConstInt(val=-2147483648) -> -2147483648[173]
  732:[177] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[153], from=4[169], till=-2147483648[173]) -> "ðŸ™ƒ"[153]
  733:[169] AppendText(var[129], v1="ðŸ™ƒ"[153])
  736:[153] VarInt(var[76]) -> 4[153]
  739:[157] VarText(var[129]) -> "ðŸ™ƒ"[157]
  742:[173] LengthText(v1="ðŸ™ƒ"[157]) -> 4[157]
  743:[161] AddInt(v1=4[153], v2=4[157]) -> 8[153]
  744:[157] PutInt(var[76], value=8[153])
  747:[153] VarText(var[129]) -> "ðŸ™ƒ"[153]
  750:[169] GenFreeStack(value=16, discard=24)
  754:[145] AppendText(var[105], v1="ðŸ™ƒ"[129])
  757:[129] VarText(var[105]) -> "ðŸ™ƒ"[129]
  760:[145] ConvBoolFromText(v1="ðŸ™ƒ"[129]) -> true[129]
  761:[130] Not(v1=true[129]) -> false[129]
  762:[130] GenGotoFalseWord(jump=772, if_false=false[129])
  772:[129] VarText(var[105]) -> "ðŸ™ƒ"[129]
  775:[145] GenFreeStack(value=16, discard=24)
  779:[121] AppendText(var[81], v1="ðŸ™ƒ"[105])
  782:[105] VarBool(var[80]) -> false[105]
  785:[106] GenGotoFalseWord(jump=795, if_false=false[105])
  795:[105] ConstText(_value=",") -> ","[105]
  798:[121] AppendText(var[52], v1=","[105])
  801:[105] VarText(var[81]) -> "ðŸ™ƒ"[105]
  804:[121] ConstInt(val=0) -> 0[121]
  809:[125] FormatText(var[52], val="ðŸ™ƒ"[105], width=0[121], dir=-1, token=32)
  814:[105] GenFreeStack(value=0, discard=24)
  818:[81] GenGotoWord(jump=706)
  706:[81] Text()
  707:[105] Text()
  708:[129] Text()
  709:[153] VarText(var[28]) -> "12ðŸ˜ŠðŸ™ƒ45"[153]
  712:[169] ConstInt(val=2) -> 2[169]
  717:[173] ConstInt(val=1) -> 1[173]
  722:[177] MinSingleInt(v1=1[173]) -> -1[173]
  723:[177] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[153], from=2[169], till=-1[173]) -> "ðŸ˜ŠðŸ™ƒ4"[153]
  724:[169] VarInt(var[76]) -> 8[169]
  727:[173] ConstInt(val=-2147483648) -> -2147483648[173]
  732:[177] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[153], from=8[169], till=-2147483648[173]) -> "4"[153]
  733:[169] AppendText(var[129], v1="4"[153])
  736:[153] VarInt(var[76]) -> 8[153]
  739:[157] VarText(var[129]) -> "4"[157]
  742:[173] LengthText(v1="4"[157]) -> 1[157]
  743:[161] AddInt(v1=8[153], v2=1[157]) -> 9[153]
  744:[157] PutInt(var[76], value=9[153])
  747:[153] VarText(var[129]) -> "4"[153]
  750:[169] GenFreeStack(value=16, discard=24)
  754:[145] AppendText(var[105], v1="4"[129])
  757:[129] VarText(var[105]) -> "4"[129]
  760:[145] ConvBoolFromText(v1="4"[129]) -> true[129]
  761:[130] Not(v1=true[129]) -> false[129]
  762:[130] GenGotoFalseWord(jump=772, if_false=false[129])
  772:[129] VarText(var[105]) -> "4"[129]
  775:[145] GenFreeStack(value=16, discard=24)
  779:[121] AppendText(var[81], v1="4"[105])
  782:[105] VarBool(var[80]) -> false[105]
  785:[106] GenGotoFalseWord(jump=795, if_false=false[105])
  795:[105] ConstText(_value=",") -> ","[105]
  798:[121] AppendText(var[52], v1=","[105])
  801:[105] VarText(var[81]) -> "4"[105]
  804:[121] ConstInt(val=0) -> 0[121]
  809:[125] FormatText(var[52], val="4"[105], width=0[121], dir=-1, token=32)
  814:[105] GenFreeStack(value=0, discard=24)
  818:[81] GenGotoWord(jump=706)
  706:[81] Text()
  707:[105] Text()
  708:[129] Text()
  709:[153] VarText(var[28]) -> "12ðŸ˜ŠðŸ™ƒ45"[153]
  712:[169] ConstInt(val=2) -> 2[169]
  717:[173] ConstInt(val=1) -> 1[173]
  722:[177] MinSingleInt(v1=1[173]) -> -1[173]
  723:[177] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[153], from=2[169], till=-1[173]) -> "ðŸ˜ŠðŸ™ƒ4"[153]
  724:[169] VarInt(var[76]) -> 9[169]
  727:[173] ConstInt(val=-2147483648) -> -2147483648[173]
  732:[177] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[153], from=9[169], till=-2147483648[173]) -> ""[153]
  733:[169] AppendText(var[129], v1=""[153])
  736:[153] VarInt(var[76]) -> 9[153]
  739:[157] VarText(var[129]) -> ""[157]
  742:[173] LengthText(v1=""[157]) -> 0[157]
  743:[161] AddInt(v1=9[153], v2=0[157]) -> 9[153]
  744:[157] PutInt(var[76], value=9[153])
  747:[153] VarText(var[129]) -> ""[153]
  750:[169] GenFreeStack(value=16, discard=24)
  754:[145] AppendText(var[105], v1=""[129])
  757:[129] VarText(var[105]) -> ""[129]
  760:[145] ConvBoolFromText(v1=""[129]) -> false[129]
  761:[130] Not(v1=false[129]) -> true[129]
  762:[130] GenGotoFalseWord(jump=772, if_false=true[129])
  765:[129] GenFreeStack(value=0, discard=48)
  769:[81] GenGotoWord(jump=821)
  821:[81] ConstText(_value="]") -> "]"[81]
  824:[97] AppendText(var[52], v1="]"[81])
  827:[81] ConstText(_value="b") -> "b"[81]
  830:[97] AppendText(var[52], v1="b"[81])
  833:[81] VarText(var[52]) -> "a[ðŸ˜Š,ðŸ™ƒ,4]b"[81]
  836:[97] GenFreeStack(value=16, discard=29)
  840:[68] GenFreeStack(value=16, discard=24)
  844:[44] AppendText(var[4], v1="a[ðŸ˜Š,ðŸ™ƒ,4]b"[28])
  847:[28] VarText(var[4]) -> "a[ðŸ˜Š,ðŸ™ƒ,4]b"[28]
  850:[44] ConstText(_value="a[ðŸ˜Š,ðŸ™ƒ,4]b") -> "a[ðŸ˜Š,ðŸ™ƒ,4]b"[44]
  867:[60] EqText(v1="a[ðŸ˜Š,ðŸ™ƒ,4]b"[28], v2="a[ðŸ˜Š,ðŸ™ƒ,4]b"[44]) -> true[28]
  868:[29] GenGotoFalseWord(jump=874, if_false=true[28])
  871:[28] GenGotoWord(jump=939)
  939:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
