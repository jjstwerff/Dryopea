pub fn test() {
    test_value = {txt="12ðŸ˜ŠðŸ™ƒ45"; "a{for c in txt[2..-1] {c}}b"};
    assert(
        test_value == "a[ðŸ˜Š,ðŸ™ƒ,4]b",
        "Test failed {test_value} != \"a[ðŸ˜Š,ðŸ™ƒ,4]b\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  c:text["txt"] = "";
  __work_1:text = "";
  test_value:text = {#2 block
    txt:text = "12ðŸ˜ŠðŸ™ƒ45";
    {#3 formatting string
      __work_1:text = "a";
      OpAppendText(__work_1, "[");
      c#index:integer = 0i32;
      _first_3:boolean = true;
      loop {#4 iter for loop
        _val_1:text["c"] = {#5 iter for fill
          c:text["txt"] = {#6 for text next
            _tres_2:text["txt"] = OpGetTextSub(OpGetTextSub(txt, 2i32, OpMinSingleInt(1i32)), c#index, -2147483648i32);
            c#index:integer = OpAddInt(c#index, OpLengthText(_tres_2));
            _tres_2;
          }#6:text["txt"];
          if OpNot(OpConvBoolFromText(c)) break(0) else null;
          {#7 block
            c;
          }#7:text["c"];
        }#5:text["c"];
        if _first_3 _first_3:boolean = false else OpAppendText(__work_1, ",");
        OpFormatText(__work_1, _val_1, 0i32, -1i32, 32i32);
      }#4;
      OpAppendText(__work_1, "]");
      OpAppendText(__work_1, "b");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "a[ðŸ˜Š,ðŸ™ƒ,4]b") null else OpPanic({#8 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "a[ðŸ˜Š,ðŸ™ƒ,4]b"");
    __work_2;
  }#8:text);
}#1

byte-code for format_chars:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Text()
 694[52]: Text()
 695[76]: Text()
 696[100]: Text()
 697[124]: ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> text
 711[140]: AppendText(var[100], v1: text)
 714[124]: ClearText(var[52])
 717[124]: ConstText(_value="a") -> text
 720[140]: AppendText(var[52], v1: text)
 723[124]: ConstText(_value="[") -> text
 726[140]: AppendText(var[52], v1: text)
 729[124]: ConstInt(val=0) -> integer
 734[128]: ConstTrue() -> boolean
 735[129]: Text()
 736[153]: ClearText(var[28])
 739[153]: Text()
 740[177]: VarText(var[100]) -> text
 743[193]: ConstInt(val=2) -> integer
 748[197]: ConstInt(val=1) -> integer
 753[201]: MinSingleInt(v1: integer) -> integer
 754[201]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 755[193]: VarInt(var[124]) -> integer
 758[197]: ConstInt(val=-2147483648) -> integer
 763[201]: GetTextSub(v1: text, from: integer, till: integer) -> text["test_value"]
 764[193]: AppendText(var[153], v1: text)
 767[177]: VarInt(var[124]) -> integer
 770[181]: VarText(var[153]) -> text
 773[197]: LengthText(v1: text) -> integer
 774[185]: AddInt(v1: integer, v2: integer) -> integer
 775[181]: PutInt(var[124], value: integer)
 778[177]: VarText(var[153]) -> text
 781[193]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 785[169]: AppendText(var[28], v1: text)
 788[153]: VarText(var[28]) -> text
 791[169]: ConvBoolFromText(v1: text) -> boolean
 792[154]: Not(v1: boolean) -> boolean
 793[154]: GotoFalseWord(jump=803, if_false: boolean)
 796[153]: FreeStack(value=0, discard=24)
 800[129]: GotoWord(jump=848)
 803[153]: VarText(var[28]) -> text
 806[169]: AppendText(var[129], v1: text)
 809[153]: VarBool(var[128]) -> boolean
 812[154]: GotoFalseWord(jump=822, if_false: boolean)
 815[153]: ConstFalse() -> boolean
 816[154]: PutBool(var=26, value: boolean)
 819[153]: GotoWord(jump=828)
 822[153]: ConstText(_value=",") -> text
 825[169]: AppendText(var[52], v1: text)
 828[153]: VarText(var[129]) -> text
 831[169]: ConstInt(val=0) -> integer
 836[173]: FormatText(var[52], val: text, width: integer, dir=-1, token=32)
 841[153]: FreeStack(value=0, discard=24)
 845[129]: GotoWord(jump=735)
 848[129]: ConstText(_value="]") -> text
 851[145]: AppendText(var[52], v1: text)
 854[129]: ConstText(_value="b") -> text
 857[145]: AppendText(var[52], v1: text)
 860[129]: VarText(var[52]) -> text
 863[145]: FreeStack(value=16, discard=21) type=text[4]:Base[5]
 867[140]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 871[116]: AppendText(var[76], v1: text)
 874[100]: VarText(var[76]) -> text
 877[116]: ConstText(_value="a[ðŸ˜Š,ðŸ™ƒ,4]b") -> text
 894[132]: EqText(v1: text, v2: text) -> boolean
 895[101]: GotoFalseWord(jump=901, if_false: boolean)
 898[100]: GotoWord(jump=964)
 901[100]: ClearText(var[4])
 904[100]: ConstText(_value="Test failed ") -> text
 918[116]: AppendText(var[4], v1: text)
 921[100]: VarText(var[76]) -> text
 924[116]: ConstInt(val=0) -> integer
 929[120]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 934[100]: ConstText(_value=" != "a[ðŸ˜Š,ðŸ™ƒ,4]b"") -> text
 957[116]: AppendText(var[4], v1: text)
 960[100]: VarText(var[4]) -> text
 963[116]: Panic(message: text)
 964[100]: Return(ret=0, value=0, discard=100)

Execute test:
  692:[8] Text()
  693:[32] Text()
  694:[56] Text()
  695:[80] Text()
  696:[104] Text()
  697:[128] ConstText(_value="12ðŸ˜ŠðŸ™ƒ45") -> "12ðŸ˜ŠðŸ™ƒ45"[128]
  711:[144] AppendText(var[104], v1="12ðŸ˜ŠðŸ™ƒ45"[128])
  714:[128] ClearText(var[56])
  717:[128] ConstText(_value="a") -> "a"[128]
  720:[144] AppendText(var[56], v1="a"[128])
  723:[128] ConstText(_value="[") -> "["[128]
  726:[144] AppendText(var[56], v1="["[128])
  729:[128] ConstInt(val=0) -> 0[128]
  734:[132] ConstTrue() -> true[132]
  735:[133] Text()
  736:[157] ClearText(var[32])
  739:[157] Text()
  740:[181] VarText(var[104]) -> "12ðŸ˜ŠðŸ™ƒ45"[181]
  743:[197] ConstInt(val=2) -> 2[197]
  748:[201] ConstInt(val=1) -> 1[201]
  753:[205] MinSingleInt(v1=1[201]) -> -1[201]
  754:[205] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[181], from=2[197], till=-1[201]) -> "ðŸ˜ŠðŸ™ƒ4"[181]
  755:[197] VarInt(var[128]) -> 0[197]
  758:[201] ConstInt(val=-2147483648) -> -2147483648[201]
  763:[205] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[181], from=0[197], till=-2147483648[201]) -> "ðŸ˜Š"[181]
  764:[197] AppendText(var[157], v1="ðŸ˜Š"[181])
  767:[181] VarInt(var[128]) -> 0[181]
  770:[185] VarText(var[157]) -> "ðŸ˜Š"[185]
  773:[201] LengthText(v1="ðŸ˜Š"[185]) -> 4[185]
  774:[189] AddInt(v1=0[181], v2=4[185]) -> 4[181]
  775:[185] PutInt(var[128], value=4[181])
  778:[181] VarText(var[157]) -> "ðŸ˜Š"[181]
  781:[197] FreeStack(value=16, discard=40)
  785:[173] AppendText(var[32], v1="ðŸ˜Š"[157])
  788:[157] VarText(var[32]) -> "ðŸ˜Š"[157]
  791:[173] ConvBoolFromText(v1="ðŸ˜Š"[157]) -> true[157]
  792:[158] Not(v1=true[157]) -> false[157]
  793:[158] GotoFalseWord(jump=803, if_false=false[157])
  803:[157] VarText(var[32]) -> "ðŸ˜Š"[157]
  806:[173] AppendText(var[133], v1="ðŸ˜Š"[157])
  809:[157] VarBool(var[132]) -> true[157]
  812:[158] GotoFalseWord(jump=822, if_false=true[157])
  815:[157] ConstFalse() -> false[157]
  816:[158] PutBool(var=26, value=false[157])
  819:[157] GotoWord(jump=828)
  828:[157] VarText(var[133]) -> "ðŸ˜Š"[157]
  831:[173] ConstInt(val=0) -> 0[173]
  836:[177] FormatText(var[56], val="ðŸ˜Š"[157], width=0[173], dir=-1, token=32)
  841:[157] FreeStack(value=0, discard=24)
  845:[133] GotoWord(jump=735)
  735:[133] Text()
  736:[157] ClearText(var[32])
  739:[157] Text()
  740:[181] VarText(var[104]) -> "12ðŸ˜ŠðŸ™ƒ45"[181]
  743:[197] ConstInt(val=2) -> 2[197]
  748:[201] ConstInt(val=1) -> 1[201]
  753:[205] MinSingleInt(v1=1[201]) -> -1[201]
  754:[205] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[181], from=2[197], till=-1[201]) -> "ðŸ˜ŠðŸ™ƒ4"[181]
  755:[197] VarInt(var[128]) -> 4[197]
  758:[201] ConstInt(val=-2147483648) -> -2147483648[201]
  763:[205] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[181], from=4[197], till=-2147483648[201]) -> "ðŸ™ƒ"[181]
  764:[197] AppendText(var[157], v1="ðŸ™ƒ"[181])
  767:[181] VarInt(var[128]) -> 4[181]
  770:[185] VarText(var[157]) -> "ðŸ™ƒ"[185]
  773:[201] LengthText(v1="ðŸ™ƒ"[185]) -> 4[185]
  774:[189] AddInt(v1=4[181], v2=4[185]) -> 8[181]
  775:[185] PutInt(var[128], value=8[181])
  778:[181] VarText(var[157]) -> "ðŸ™ƒ"[181]
  781:[197] FreeStack(value=16, discard=40)
  785:[173] AppendText(var[32], v1="ðŸ™ƒ"[157])
  788:[157] VarText(var[32]) -> "ðŸ™ƒ"[157]
  791:[173] ConvBoolFromText(v1="ðŸ™ƒ"[157]) -> true[157]
  792:[158] Not(v1=true[157]) -> false[157]
  793:[158] GotoFalseWord(jump=803, if_false=false[157])
  803:[157] VarText(var[32]) -> "ðŸ™ƒ"[157]
  806:[173] AppendText(var[133], v1="ðŸ™ƒ"[157])
  809:[157] VarBool(var[132]) -> false[157]
  812:[158] GotoFalseWord(jump=822, if_false=false[157])
  822:[157] ConstText(_value=",") -> ","[157]
  825:[173] AppendText(var[56], v1=","[157])
  828:[157] VarText(var[133]) -> "ðŸ™ƒ"[157]
  831:[173] ConstInt(val=0) -> 0[173]
  836:[177] FormatText(var[56], val="ðŸ™ƒ"[157], width=0[173], dir=-1, token=32)
  841:[157] FreeStack(value=0, discard=24)
  845:[133] GotoWord(jump=735)
  735:[133] Text()
  736:[157] ClearText(var[32])
  739:[157] Text()
  740:[181] VarText(var[104]) -> "12ðŸ˜ŠðŸ™ƒ45"[181]
  743:[197] ConstInt(val=2) -> 2[197]
  748:[201] ConstInt(val=1) -> 1[201]
  753:[205] MinSingleInt(v1=1[201]) -> -1[201]
  754:[205] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[181], from=2[197], till=-1[201]) -> "ðŸ˜ŠðŸ™ƒ4"[181]
  755:[197] VarInt(var[128]) -> 8[197]
  758:[201] ConstInt(val=-2147483648) -> -2147483648[201]
  763:[205] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[181], from=8[197], till=-2147483648[201]) -> "4"[181]
  764:[197] AppendText(var[157], v1="4"[181])
  767:[181] VarInt(var[128]) -> 8[181]
  770:[185] VarText(var[157]) -> "4"[185]
  773:[201] LengthText(v1="4"[185]) -> 1[185]
  774:[189] AddInt(v1=8[181], v2=1[185]) -> 9[181]
  775:[185] PutInt(var[128], value=9[181])
  778:[181] VarText(var[157]) -> "4"[181]
  781:[197] FreeStack(value=16, discard=40)
  785:[173] AppendText(var[32], v1="4"[157])
  788:[157] VarText(var[32]) -> "4"[157]
  791:[173] ConvBoolFromText(v1="4"[157]) -> true[157]
  792:[158] Not(v1=true[157]) -> false[157]
  793:[158] GotoFalseWord(jump=803, if_false=false[157])
  803:[157] VarText(var[32]) -> "4"[157]
  806:[173] AppendText(var[133], v1="4"[157])
  809:[157] VarBool(var[132]) -> false[157]
  812:[158] GotoFalseWord(jump=822, if_false=false[157])
  822:[157] ConstText(_value=",") -> ","[157]
  825:[173] AppendText(var[56], v1=","[157])
  828:[157] VarText(var[133]) -> "4"[157]
  831:[173] ConstInt(val=0) -> 0[173]
  836:[177] FormatText(var[56], val="4"[157], width=0[173], dir=-1, token=32)
  841:[157] FreeStack(value=0, discard=24)
  845:[133] GotoWord(jump=735)
  735:[133] Text()
  736:[157] ClearText(var[32])
  739:[157] Text()
  740:[181] VarText(var[104]) -> "12ðŸ˜ŠðŸ™ƒ45"[181]
  743:[197] ConstInt(val=2) -> 2[197]
  748:[201] ConstInt(val=1) -> 1[201]
  753:[205] MinSingleInt(v1=1[201]) -> -1[201]
  754:[205] GetTextSub(v1="12ðŸ˜ŠðŸ™ƒ45"[181], from=2[197], till=-1[201]) -> "ðŸ˜ŠðŸ™ƒ4"[181]
  755:[197] VarInt(var[128]) -> 9[197]
  758:[201] ConstInt(val=-2147483648) -> -2147483648[201]
  763:[205] GetTextSub(v1="ðŸ˜ŠðŸ™ƒ4"[181], from=9[197], till=-2147483648[201]) -> ""[181]
  764:[197] AppendText(var[157], v1=""[181])
  767:[181] VarInt(var[128]) -> 9[181]
  770:[185] VarText(var[157]) -> ""[185]
  773:[201] LengthText(v1=""[185]) -> 0[185]
  774:[189] AddInt(v1=9[181], v2=0[185]) -> 9[181]
  775:[185] PutInt(var[128], value=9[181])
  778:[181] VarText(var[157]) -> ""[181]
  781:[197] FreeStack(value=16, discard=40)
  785:[173] AppendText(var[32], v1=""[157])
  788:[157] VarText(var[32]) -> ""[157]
  791:[173] ConvBoolFromText(v1=""[157]) -> false[157]
  792:[158] Not(v1=false[157]) -> true[157]
  793:[158] GotoFalseWord(jump=803, if_false=true[157])
  796:[157] FreeStack(value=0, discard=24)
  800:[133] GotoWord(jump=848)
  848:[133] ConstText(_value="]") -> "]"[133]
  851:[149] AppendText(var[56], v1="]"[133])
  854:[133] ConstText(_value="b") -> "b"[133]
  857:[149] AppendText(var[56], v1="b"[133])
  860:[133] VarText(var[56]) -> "a[ðŸ˜Š,ðŸ™ƒ,4]b"[133]
  863:[149] FreeStack(value=16, discard=21)
  867:[144] FreeStack(value=16, discard=40)
  871:[120] AppendText(var[80], v1="a[ðŸ˜Š,ðŸ™ƒ,4]b"[104])
  874:[104] VarText(var[80]) -> "a[ðŸ˜Š,ðŸ™ƒ,4]b"[104]
  877:[120] ConstText(_value="a[ðŸ˜Š,ðŸ™ƒ,4]b") -> "a[ðŸ˜Š,ðŸ™ƒ,4]b"[120]
  894:[136] EqText(v1="a[ðŸ˜Š,ðŸ™ƒ,4]b"[104], v2="a[ðŸ˜Š,ðŸ™ƒ,4]b"[120]) -> true[104]
  895:[105] GotoFalseWord(jump=901, if_false=true[104])
  898:[104] GotoWord(jump=964)
  964:[104] Return(ret=4294967295[4], value=0, discard=100)
Finished
