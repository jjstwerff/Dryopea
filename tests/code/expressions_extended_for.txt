pub fn test() {
    test_value = {b = 0; for a in 0..=5 { b+=a }; b};
    assert(
        test_value == 15,
        "Test failed {test_value} != 15"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    b:integer = 0i32;
    {#3 for
      a#index:integer = OpConvIntFromNull();
      loop {#4 for loop
        a:integer = {#5 for next
          a#index:integer = if OpNot(OpConvBoolFromInt(a#index)) 0i32 else OpAddInt(a#index, 1i32);
          if OpGtInt(a#index, 5i32) break(0) else null;
          a#index;
        }#5:integer;
        {#6 block
          b:integer = OpAddInt(b, a);
        }#6;
      }#4;
    }#3;
    b;
  }#2:integer;
  if OpEqInt(test_value, 15i32) null else OpPanic({#7 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 15");
    __work_1;
  }#7:text);
}#1

byte-code for extended_for:test() [1067]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=0) -> integer var=b[28]:integer in 2
   6[32]: ConvIntFromNull() -> integer var=a#index[32]:integer in 3
   7[36]: VarInt(var[32]) -> integer var=a#index[32]:integer in 3
  10[40]: ConvBoolFromInt(v1: integer) -> boolean
  11[37]: Not(v1: boolean) -> boolean
  12[37]: GotoFalseWord(jump=23, if_false: boolean)
  15[36]: ConstInt(val=0) -> integer
  20[40]: GotoWord(jump=32)
  23[36]: VarInt(var[32]) -> integer var=a#index[32]:integer in 3
  26[40]: ConstInt(val=1) -> integer
  31[44]: AddInt(v1: integer, v2: integer) -> integer
  32[40]: PutInt(var[32], value: integer)
  35[36]: VarInt(var[32]) -> integer var=a#index[32]:integer in 3
  38[40]: ConstInt(val=5) -> integer
  43[44]: GtInt(v1: integer, v2: integer) -> boolean
  44[37]: GotoFalseWord(jump=50, if_false: boolean)
  47[36]: GotoWord(jump=70)
  50[36]: VarInt(var[32]) -> integer var=a#index[32]:integer in 3
  53[40]: VarInt(var[28]) -> integer var=b[28]:integer in 2
  56[44]: VarInt(var[36]) -> integer var=a[36]:integer in 4
  59[48]: AddInt(v1: integer, v2: integer) -> integer
  60[44]: PutInt(var[28], value: integer)
  63[40]: FreeStack(value=0, discard=4)
  67[36]: GotoWord(jump=7)
  70[36]: FreeStack(value=0, discard=4)
  74[32]: VarInt(var[28]) -> integer var=b[28]:integer in 2
  77[36]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
  81[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  84[36]: ConstInt(val=15) -> integer
  89[40]: EqInt(v1: integer, v2: integer) -> boolean
  90[33]: GotoFalseWord(jump=96, if_false: boolean)
  93[32]: GotoWord(jump=146)
  96[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  99[32]: ConstText(_value="Test failed ") -> text
 113[48]: AppendText(var[4], v1: text)
 116[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 119[36]: ConstInt(val=0) -> integer
 124[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 131[32]: ConstText(_value=" != 15") -> text
 139[48]: AppendText(var[4], v1: text)
 142[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 145[48]: Panic(message: text)
 146[32]: FreeText(var[4])
 149[32]: Return(ret=0, value=0, discard=32)

