pub fn test() {
    test_value = {123 || (12 && false)};
    assert(
        test_value == true,
        "Test failed {test_value} != true"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    if OpConvBoolFromInt(123i32) true else if OpConvBoolFromInt(12i32) false else false;
  }#2:boolean;
  if OpEqBool(test_value, true) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != true");
    __work_1;
  }#3:text);
}#1

byte-code for boolean_symbols:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=123) -> integer var=test_value[28]:boolean in 1
   6[32]: ConvBoolFromInt(v1: integer) -> boolean
   7[29]: GotoFalseWord(jump=14, if_false: boolean)
  10[28]: ConstTrue() -> boolean
  11[29]: GotoWord(jump=28)
  14[28]: ConstInt(val=12) -> integer
  19[32]: ConvBoolFromInt(v1: integer) -> boolean
  20[29]: GotoFalseWord(jump=27, if_false: boolean)
  23[28]: ConstFalse() -> boolean
  24[29]: GotoWord(jump=28)
  27[28]: ConstFalse() -> boolean
  28[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  31[30]: ConstTrue() -> boolean
  32[31]: EqBool(v1: boolean, v2: boolean) -> boolean
  33[30]: GotoFalseWord(jump=39, if_false: boolean)
  36[29]: GotoWord(jump=89)
  39[29]: ClearText(var[4]) var=__work_1[4]:text in 1
  42[29]: ConstText(_value="Test failed ") -> text
  56[45]: AppendText(var[4], v1: text)
  59[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  62[30]: ConstInt(val=0) -> integer
  67[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
  72[29]: ConstText(_value=" != true") -> text
  82[45]: AppendText(var[4], v1: text)
  85[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  88[45]: Panic(message: text)
  89[29]: FreeText(var[4])
  92[29]: Return(ret=0, value=0, discard=29)

