fn res() -> integer { a = 0; for _t in 1..5 { b = "123"; a += b as integer; if a > 200 { return a; }}; 0}

pub fn test() {
    test_value = {res()};
    assert(
        test_value == 246,
        "Test failed {test_value} != 246"
    );
}
fn res() -> integer {#1 block
  a:integer = 0i32;
  {#2 for
    _t#index:integer = OpConvIntFromNull();
    loop {#3 for loop
      _t:integer = {#4 for next
        _t#index:integer = if OpNot(OpConvBoolFromInt(_t#index)) 1i32 else OpAddInt(_t#index, 1i32);
        if OpGeInt(_t#index, 5i32) break(0) else null;
        _t#index;
      }#4:integer;
      {#5 block
        b:text = "123";
        a:integer = OpAddInt(a, OpCastIntFromText(b));
        if OpGtInt(a, 200i32) {#6 block
          return a;
        }#6 else null;
      }#5;
    }#3;
  }#2;
  0i32;
}#1:integer

byte-code for return_clear:res() -> integer
 655[0]: return-address
 655[4]: ConstInt(val=0) -> integer var=a[4]:integer in 1
 660[8]: ConvIntFromNull() -> integer var=_t#index[8]:integer in 2
 661[12]: VarInt(var[8]) -> integer var=_t#index[8]:integer in 2
 664[16]: ConvBoolFromInt(v1: integer) -> boolean
 665[13]: Not(v1: boolean) -> boolean
 666[13]: GotoFalseWord(jump=677, if_false: boolean)
 669[12]: ConstInt(val=1) -> integer
 674[16]: GotoWord(jump=686)
 677[12]: VarInt(var[8]) -> integer var=_t#index[8]:integer in 2
 680[16]: ConstInt(val=1) -> integer
 685[20]: AddInt(v1: integer, v2: integer) -> integer
 686[16]: PutInt(var[8], value: integer)
 689[12]: VarInt(var[8]) -> integer var=_t#index[8]:integer in 2
 692[16]: ConstInt(val=5) -> integer
 697[20]: GeInt(v1: integer, v2: integer) -> boolean
 698[13]: GotoFalseWord(jump=704, if_false: boolean)
 701[12]: GotoWord(jump=769)
 704[12]: VarInt(var[8]) -> integer var=_t#index[8]:integer in 2
 707[16]: Text() var=b[16]:text in 5
 708[40]: ConstText(_value="123") -> text
 713[56]: AppendText(var[16], v1: text)
 716[40]: VarInt(var[4]) -> integer var=a[4]:integer in 1
 719[44]: VarText(var[16]) -> text var=b[16]:text in 5
 722[60]: CastIntFromText(v1: text) -> integer
 723[48]: AddInt(v1: integer, v2: integer) -> integer
 724[44]: PutInt(var[4], value: integer)
 727[40]: VarInt(var[4]) -> integer var=a[4]:integer in 1
 730[44]: ConstInt(val=200) -> integer
 735[48]: GtInt(v1: integer, v2: integer) -> boolean
 736[41]: GotoFalseWord(jump=755, if_false: boolean)
 739[40]: VarInt(var[4]) -> integer var=a[4]:integer in 1
 742[44]: FreeText(var[16]) type=integer[4]:Base[0]
 745[44]: Return(ret=0, value=4, discard=44)
 751[44]: FreeStack(value=0, discard=4)
 755[40]: FreeText(var[16])
 758[40]: FreeStack(value=0, discard=24)
 762[16]: FreeStack(value=0, discard=4)
 766[12]: GotoWord(jump=661)
 769[12]: FreeStack(value=0, discard=4)
 773[8]: ConstInt(val=0) -> integer
 778[12]: Return(ret=0, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    res();
  }#2:integer;
  if OpEqInt(test_value, 246i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 246");
    __work_1;
  }#3:text);
}#1

byte-code for return_clear:test()
 784[0]: return-address
 784[4]: Text() var=__work_1[4]:text in 1
 785[28]: Call(size=0, to=655) var=test_value[28]:integer in 1
 792[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 795[36]: ConstInt(val=246) -> integer
 800[40]: EqInt(v1: integer, v2: integer) -> boolean
 801[33]: GotoFalseWord(jump=807, if_false: boolean)
 804[32]: GotoWord(jump=858)
 807[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 810[32]: ConstText(_value="Test failed ") -> text
 824[48]: AppendText(var[4], v1: text)
 827[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 830[36]: ConstInt(val=0) -> integer
 835[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 842[32]: ConstText(_value=" != 246") -> text
 851[48]: AppendText(var[4], v1: text)
 854[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 857[48]: Panic(message: text)
 858[32]: FreeText(var[4])
 861[32]: Return(ret=0, value=0, discard=32)

Execute test:
  784:[8] Text()
  785:[32] Call(size=0, to=655)
  655:[36] ConstInt(val=0) -> 0[36]
  660:[40] ConvIntFromNull() -> -2147483648[40]
  661:[44] VarInt(var[40]) -> -2147483648[44]
  664:[48] ConvBoolFromInt(v1=-2147483648[44]) -> false[44]
  665:[45] Not(v1=false[44]) -> true[44]
  666:[45] GotoFalseWord(jump=677, if_false=true[44])
  669:[44] ConstInt(val=1) -> 1[44]
  674:[48] GotoWord(jump=686)
  686:[48] PutInt(var[40], value=1[44])
  689:[44] VarInt(var[40]) -> 1[44]
  692:[48] ConstInt(val=5) -> 5[48]
  697:[52] GeInt(v1=1[44], v2=5[48]) -> false[44]
  698:[45] GotoFalseWord(jump=704, if_false=false[44])
  704:[44] VarInt(var[40]) -> 1[44]
  707:[48] Text()
  708:[72] ConstText(_value="123") -> "123"[72]
  713:[88] AppendText(var[48], v1="123"[72])
  716:[72] VarInt(var[36]) -> 0[72]
  719:[76] VarText(var[48]) -> "123"[76]
  722:[92] CastIntFromText(v1="123"[76]) -> 123[76]
  723:[80] AddInt(v1=0[72], v2=123[76]) -> 123[72]
  724:[76] PutInt(var[36], value=123[72])
  727:[72] VarInt(var[36]) -> 123[72]
  730:[76] ConstInt(val=200) -> 200[76]
  735:[80] GtInt(v1=123[72], v2=200[76]) -> false[72]
  736:[73] GotoFalseWord(jump=755, if_false=false[72])
  755:[72] FreeText(var[48])
  758:[72] FreeStack(value=0, discard=24)
  762:[48] FreeStack(value=0, discard=4)
  766:[44] GotoWord(jump=661)
  661:[44] VarInt(var[40]) -> 1[44]
  664:[48] ConvBoolFromInt(v1=1[44]) -> true[44]
  665:[45] Not(v1=true[44]) -> false[44]
  666:[45] GotoFalseWord(jump=677, if_false=false[44])
  677:[44] VarInt(var[40]) -> 1[44]
  680:[48] ConstInt(val=1) -> 1[48]
  685:[52] AddInt(v1=1[44], v2=1[48]) -> 2[44]
  686:[48] PutInt(var[40], value=2[44])
  689:[44] VarInt(var[40]) -> 2[44]
  692:[48] ConstInt(val=5) -> 5[48]
  697:[52] GeInt(v1=2[44], v2=5[48]) -> false[44]
  698:[45] GotoFalseWord(jump=704, if_false=false[44])
  704:[44] VarInt(var[40]) -> 2[44]
  707:[48] Text()
  708:[72] ConstText(_value="123") -> "123"[72]
  713:[88] AppendText(var[48], v1="123"[72])
  716:[72] VarInt(var[36]) -> 123[72]
  719:[76] VarText(var[48]) -> "123"[76]
  722:[92] CastIntFromText(v1="123"[76]) -> 123[76]
  723:[80] AddInt(v1=123[72], v2=123[76]) -> 246[72]
  724:[76] PutInt(var[36], value=246[72])
  727:[72] VarInt(var[36]) -> 246[72]
  730:[76] ConstInt(val=200) -> 200[76]
  735:[80] GtInt(v1=246[72], v2=200[76]) -> true[72]
  736:[73] GotoFalseWord(jump=755, if_false=true[72])
  739:[72] VarInt(var[36]) -> 246[72]
  742:[76] FreeText(var[48])
  745:[76] Return(ret=792[32], value=4, discard=44)
  792:[36] VarInt(var[32]) -> 246[36]
  795:[40] ConstInt(val=246) -> 246[40]
  800:[44] EqInt(v1=246[36], v2=246[40]) -> true[36]
  801:[37] GotoFalseWord(jump=807, if_false=true[36])
  804:[36] GotoWord(jump=858)
  858:[36] FreeText(var[8])
  861:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
