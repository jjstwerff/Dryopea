fn res() -> integer { a = 0; for _t in 1..5 { b = "123"; a += b as integer; if a > 200 { return a; }}; 0}

pub fn test() {
    test_value = {res()};
    assert(
        test_value == 246,
        "Test failed {test_value} != 246"
    );
}
fn res() -> integer {#1 block
  a:integer = 0i32;
  {#2 for
    _t#index:integer = OpConvIntFromNull();
    loop {#3 for loop
      _t:integer = {#4 for next
        _t#index:integer = if OpNot(OpConvBoolFromInt(_t#index)) 1i32 else OpAddInt(_t#index, 1i32);
        if OpGeInt(_t#index, 5i32) break(0) else null;
        _t#index;
      }#4:integer;
      {#5 block
        b:text = "123";
        a:integer = OpAddInt(a, OpCastIntFromText(b));
        if OpGtInt(a, 200i32) {#6 block
          return a;
        }#6 else null;
      }#5;
    }#3;
  }#2;
  0i32;
}#1:integer

byte-code for return_clear:res() [1073] -> integer
   0[0]: return-address
   0[4]: ConstInt(val=0) -> integer var=a[4]:integer in 1
   5[8]: ConvIntFromNull() -> integer var=_t#index[8]:integer in 2
   6[12]: VarInt(var[8]) -> integer var=_t#index[8]:integer in 2
   9[16]: ConvBoolFromInt(v1: integer) -> boolean
  10[13]: Not(v1: boolean) -> boolean
  11[13]: GotoFalseWord(jump=22, if_false: boolean)
  14[12]: ConstInt(val=1) -> integer
  19[16]: GotoWord(jump=31)
  22[12]: VarInt(var[8]) -> integer var=_t#index[8]:integer in 2
  25[16]: ConstInt(val=1) -> integer
  30[20]: AddInt(v1: integer, v2: integer) -> integer
  31[16]: PutInt(var[8], value: integer)
  34[12]: VarInt(var[8]) -> integer var=_t#index[8]:integer in 2
  37[16]: ConstInt(val=5) -> integer
  42[20]: GeInt(v1: integer, v2: integer) -> boolean
  43[13]: GotoFalseWord(jump=49, if_false: boolean)
  46[12]: GotoWord(jump=114)
  49[12]: VarInt(var[8]) -> integer var=_t#index[8]:integer in 2
  52[16]: Text() var=b[16]:text in 5
  53[40]: ConstText(_value="123") -> text
  58[56]: AppendText(var[16], v1: text)
  61[40]: VarInt(var[4]) -> integer var=a[4]:integer in 1
  64[44]: VarText(var[16]) -> text var=b[16]:text in 5
  67[60]: CastIntFromText(v1: text) -> integer
  68[48]: AddInt(v1: integer, v2: integer) -> integer
  69[44]: PutInt(var[4], value: integer)
  72[40]: VarInt(var[4]) -> integer var=a[4]:integer in 1
  75[44]: ConstInt(val=200) -> integer
  80[48]: GtInt(v1: integer, v2: integer) -> boolean
  81[41]: GotoFalseWord(jump=100, if_false: boolean)
  84[40]: VarInt(var[4]) -> integer var=a[4]:integer in 1
  87[44]: FreeText(var[16]) type=integer[4]:Base[0]
  90[44]: Return(ret=0, value=4, discard=44)
  96[44]: FreeStack(value=0, discard=4)
 100[40]: FreeText(var[16])
 103[40]: FreeStack(value=0, discard=24)
 107[16]: FreeStack(value=0, discard=4)
 111[12]: GotoWord(jump=6)
 114[12]: FreeStack(value=0, discard=4)
 118[8]: ConstInt(val=0) -> integer
 123[12]: Return(ret=0, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    res();
  }#2:integer;
  if OpEqInt(test_value, 246i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 246");
    __work_1;
  }#3:text);
}#1

byte-code for return_clear:test() [1202]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Call(size=0, to=1073) var=test_value[28]:integer in 1
   8[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  11[36]: ConstInt(val=246) -> integer
  16[40]: EqInt(v1: integer, v2: integer) -> boolean
  17[33]: GotoFalseWord(jump=23, if_false: boolean)
  20[32]: GotoWord(jump=74)
  23[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  26[32]: ConstText(_value="Test failed ") -> text
  40[48]: AppendText(var[4], v1: text)
  43[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  46[36]: ConstInt(val=0) -> integer
  51[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  58[32]: ConstText(_value=" != 246") -> text
  67[48]: AppendText(var[4], v1: text)
  70[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  73[48]: Panic(message: text)
  74[32]: FreeText(var[4])
  77[32]: Return(ret=0, value=0, discard=32)

