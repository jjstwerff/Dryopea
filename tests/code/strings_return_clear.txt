fn res() -> integer { a = 0; for _t in 1..5 { b = "123"; a += b as integer; if a > 200 { return a; }}; 0}

pub fn test() {
    test_value = {res()};
    assert(
        test_value == 246,
        "Test failed {test_value} != 246"
    );
}
fn res() -> integer {#block(1):integer
  a(1):integer = 0i32;
  {#For block(2):void
    _t#index(2):integer = OpConvIntFromNull();
    loop {#For loop_3
      _t(3):integer = {#Iter range(4):integer
        _t#index(2):integer = if OpNot(OpConvBoolFromInt(_t#index(2))) 1i32 else OpAddInt(_t#index(2), 1i32);
        if OpGeInt(_t#index(2), 5i32) break(0) else null;
        _t#index(2);
      }#Iter range(4):integer;
      {#block(5):void
        b(5):text = "123";
        a(1):integer = OpAddInt(a(1), OpCastIntFromText(b(5)));
        if OpGtInt(a(1), 200i32) {#block(6):void
          OpFreeText(b(5));
          return a(1);
        }#block(6):void else null;
        OpFreeText(b(5));
      }#block(5):void;
    }#For loop_3;
  }#For block(2):void;
  0i32;
}#block(1):integer

byte-code for return_clear:res() [1119] -> integer
   0[4]: return-address
   0[8]: ConstInt(val=0) -> integer var=a[8]:integer
   5[12]: ConvIntFromNull() -> integer var=_t#index[12]:integer
   6[16]: VarInt(var[12]) -> integer var=_t#index[12]:integer
   9[20]: ConvBoolFromInt(v1: integer) -> boolean
  10[17]: Not(v1: boolean) -> boolean
  11[17]: GotoFalseWord(jump=22, if_false: boolean)
  14[16]: ConstInt(val=1) -> integer
  19[20]: GotoWord(jump=31)
  22[16]: VarInt(var[12]) -> integer var=_t#index[12]:integer
  25[20]: ConstInt(val=1) -> integer
  30[24]: AddInt(v1: integer, v2: integer) -> integer
  31[20]: PutInt(var[12], value: integer)
  34[16]: VarInt(var[12]) -> integer var=_t#index[12]:integer
  37[20]: ConstInt(val=5) -> integer
  42[24]: GeInt(v1: integer, v2: integer) -> boolean
  43[17]: GotoFalseWord(jump=49, if_false: boolean)
  46[16]: GotoWord(jump=123)
  49[16]: VarInt(var[12]) -> integer var=_t#index[12]:integer
  52[20]: Text() var=b[20]:text
  53[44]: ConstText(_value="123") -> text
  58[60]: AppendText(var[20], v1: text)
  61[44]: VarInt(var[8]) -> integer var=a[8]:integer
  64[48]: VarText(var[20]) -> text var=b[20]:text
  67[64]: CastIntFromText(v1: text) -> integer
  68[52]: AddInt(v1: integer, v2: integer) -> integer
  69[48]: PutInt(var[8], value: integer)
  72[44]: VarInt(var[8]) -> integer var=a[8]:integer
  75[48]: ConstInt(val=200) -> integer
  80[52]: GtInt(v1: integer, v2: integer) -> boolean
  81[45]: GotoFalseWord(jump=109, if_false: boolean)
  84[44]: FreeText(var[20])
  87[44]: VarInt(var[8]) -> integer var=a[8]:integer
  90[48]: Return(ret=0, value=4, discard=44)
  96[48]: VarInt(var[8]) -> integer var=a[8]:integer
  99[52]: Return(ret=0, value=4, discard=48) type=integer[4]:Base[0]
 105[52]: FreeStack(value=0, discard=8)
 109[44]: FreeText(var[20])
 112[44]: FreeStack(value=0, discard=24)
 116[20]: FreeStack(value=0, discard=4)
 120[16]: GotoWord(jump=6)
 123[16]: FreeStack(value=0, discard=4)
 127[12]: ConstInt(val=0) -> integer
 132[16]: Return(ret=0, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    res();
  }#block(2):integer;
  if OpEqInt(test_value(1), 246i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 246");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for return_clear:test() [1257]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: Call(size=0, to=1119) var=test_value[32]:integer
   8[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  11[40]: ConstInt(val=246) -> integer
  16[44]: EqInt(v1: integer, v2: integer) -> boolean
  17[37]: GotoFalseWord(jump=23, if_false: boolean)
  20[36]: GotoWord(jump=74)
  23[36]: ClearText(var[8]) var=__work_1[8]:text
  26[36]: ConstText(_value="Test failed ") -> text
  40[52]: AppendText(var[8], v1: text)
  43[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  46[40]: ConstInt(val=0) -> integer
  51[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  58[36]: ConstText(_value=" != 246") -> text
  67[52]: AppendText(var[8], v1: text)
  70[36]: VarText(var[8]) -> text var=__work_1[8]:text
  73[52]: Panic(message: text)
  74[36]: FreeText(var[8])
  77[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] Call(size=0, to=1119)
 1119:[36] ConstInt(val=0) -> 0[36]
 1124:[40] ConvIntFromNull() -> -2147483648[40]
 1125:[44] VarInt(var[40]) -> -2147483648[44]
 1128:[48] ConvBoolFromInt(v1=-2147483648[44]) -> false[44]
 1129:[45] Not(v1=false[44]) -> true[44]
 1130:[45] GotoFalseWord(jump=1141, if_false=true[44])
 1133:[44] ConstInt(val=1) -> 1[44]
 1138:[48] GotoWord(jump=1150)
 1150:[48] PutInt(var[40], value=1[44])
 1153:[44] VarInt(var[40]) -> 1[44]
 1156:[48] ConstInt(val=5) -> 5[48]
 1161:[52] GeInt(v1=1[44], v2=5[48]) -> false[44]
 1162:[45] GotoFalseWord(jump=1168, if_false=false[44])
 1168:[44] VarInt(var[40]) -> 1[44]
 1171:[48] Text()
 1172:[72] ConstText(_value="123") -> "123"[72]
 1177:[88] AppendText(var[48], v1="123"[72])
 1180:[72] VarInt(var[36]) -> 0[72]
 1183:[76] VarText(var[48]) -> "123"[76]
 1186:[92] CastIntFromText(v1="123"[76]) -> 123[76]
 1187:[80] AddInt(v1=0[72], v2=123[76]) -> 123[72]
 1188:[76] PutInt(var[36], value=123[72])
 1191:[72] VarInt(var[36]) -> 123[72]
 1194:[76] ConstInt(val=200) -> 200[76]
 1199:[80] GtInt(v1=123[72], v2=200[76]) -> false[72]
 1200:[73] GotoFalseWord(jump=1228, if_false=false[72])
 1228:[72] FreeText(var[48])
 1231:[72] FreeStack(value=0, discard=24)
 1235:[48] FreeStack(value=0, discard=4)
 1239:[44] GotoWord(jump=1125)
 1125:[44] VarInt(var[40]) -> 1[44]
 1128:[48] ConvBoolFromInt(v1=1[44]) -> true[44]
 1129:[45] Not(v1=true[44]) -> false[44]
 1130:[45] GotoFalseWord(jump=1141, if_false=false[44])
 1141:[44] VarInt(var[40]) -> 1[44]
 1144:[48] ConstInt(val=1) -> 1[48]
 1149:[52] AddInt(v1=1[44], v2=1[48]) -> 2[44]
 1150:[48] PutInt(var[40], value=2[44])
 1153:[44] VarInt(var[40]) -> 2[44]
 1156:[48] ConstInt(val=5) -> 5[48]
 1161:[52] GeInt(v1=2[44], v2=5[48]) -> false[44]
 1162:[45] GotoFalseWord(jump=1168, if_false=false[44])
 1168:[44] VarInt(var[40]) -> 2[44]
 1171:[48] Text()
 1172:[72] ConstText(_value="123") -> "123"[72]
 1177:[88] AppendText(var[48], v1="123"[72])
 1180:[72] VarInt(var[36]) -> 123[72]
 1183:[76] VarText(var[48]) -> "123"[76]
 1186:[92] CastIntFromText(v1="123"[76]) -> 123[76]
 1187:[80] AddInt(v1=123[72], v2=123[76]) -> 246[72]
 1188:[76] PutInt(var[36], value=246[72])
 1191:[72] VarInt(var[36]) -> 246[72]
 1194:[76] ConstInt(val=200) -> 200[76]
 1199:[80] GtInt(v1=246[72], v2=200[76]) -> true[72]
 1200:[73] GotoFalseWord(jump=1228, if_false=true[72])
 1203:[72] FreeText(var[48])
 1206:[72] VarInt(var[36]) -> 246[72]
 1209:[76] Return(ret=1265[32], value=4, discard=44)
    8:[36] VarInt(var[32]) -> 246[36]
   11:[40] ConstInt(val=246) -> 246[40]
   16:[44] EqInt(v1=246[36], v2=246[40]) -> true[36]
   17:[37] GotoFalseWord(jump=23, if_false=true[36])
   20:[36] GotoWord(jump=74)
   74:[36] FreeText(var[8])
   77:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
