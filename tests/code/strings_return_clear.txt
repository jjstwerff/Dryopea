fn res() -> integer { a = 0; for _t in 1..5 { b = "123"; a += b as integer; if a > 200 { return a; }}; 0}

pub fn test() {
    test_value = {res()};
    assert(
        test_value == 246,
        "Test failed {test_value} != 246"
    );
}
fn res() -> integer {#1 block
  a:integer = 0i32;
  {#2 for
    _t#index:integer = OpConvIntFromNull();
    loop {#3 for loop
      _t:integer = {#4 for next
        _t#index:integer = if OpNot(OpConvBoolFromInt(_t#index)) 1i32 else OpAddInt(_t#index, 1i32);
        if OpGeInt(_t#index, 5i32) break(0) else null;
        _t#index;
      }#4:integer;
      {#5 block
        b:text = "123";
        a:integer = OpAddInt(a, OpCastIntFromText(b));
        if OpGtInt(a, 200i32) {#6 block
          return a;
        }#6 else null;
      }#5;
    }#3;
  }#2;
  0i32;
}#1:integer

byte-code for return_clear:res() -> integer
 691[0]: return-address
 691[4]: ConstInt(val=0) -> integer
 696[8]: ConvIntFromNull() -> integer
 697[12]: VarInt(var[8]) -> integer
 700[16]: ConvBoolFromInt(v1: integer) -> boolean
 701[13]: Not(v1: boolean) -> boolean
 702[13]: GotoFalseWord(jump=713, if_false: boolean)
 705[12]: ConstInt(val=1) -> integer
 710[16]: GotoWord(jump=722)
 713[12]: VarInt(var[8]) -> integer
 716[16]: ConstInt(val=1) -> integer
 721[20]: AddInt(v1: integer, v2: integer) -> integer
 722[16]: PutInt(var[8], value: integer)
 725[12]: VarInt(var[8]) -> integer
 728[16]: ConstInt(val=5) -> integer
 733[20]: GeInt(v1: integer, v2: integer) -> boolean
 734[13]: GotoFalseWord(jump=740, if_false: boolean)
 737[12]: GotoWord(jump=805)
 740[12]: VarInt(var[8]) -> integer
 743[16]: Text()
 744[40]: ConstText(_value="123") -> text
 749[56]: AppendText(var[16], v1: text)
 752[40]: VarInt(var[4]) -> integer
 755[44]: VarText(var[16]) -> text
 758[60]: CastIntFromText(v1: text) -> integer
 759[48]: AddInt(v1: integer, v2: integer) -> integer
 760[44]: PutInt(var[4], value: integer)
 763[40]: VarInt(var[4]) -> integer
 766[44]: ConstInt(val=200) -> integer
 771[48]: GtInt(v1: integer, v2: integer) -> boolean
 772[41]: GotoFalseWord(jump=791, if_false: boolean)
 775[40]: VarInt(var[4]) -> integer
 778[44]: FreeText(var[16]) type=integer[4]:Base[0]
 781[44]: Return(ret=0, value=4, discard=44)
 787[44]: FreeStack(value=0, discard=4)
 791[40]: FreeText(var[16])
 794[40]: FreeStack(value=0, discard=24)
 798[16]: FreeStack(value=0, discard=4)
 802[12]: GotoWord(jump=697)
 805[12]: FreeStack(value=0, discard=4)
 809[8]: ConstInt(val=0) -> integer
 814[12]: Return(ret=0, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    res();
  }#2:integer;
  if OpEqInt(test_value, 246i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 246");
    __work_1;
  }#3:text);
}#1

byte-code for return_clear:test()
 820[0]: return-address
 820[4]: Text()
 821[28]: Call(size=0, to=691)
 828[32]: VarInt(var[28]) -> integer
 831[36]: ConstInt(val=246) -> integer
 836[40]: EqInt(v1: integer, v2: integer) -> boolean
 837[33]: GotoFalseWord(jump=843, if_false: boolean)
 840[32]: GotoWord(jump=894)
 843[32]: ClearText(var[4])
 846[32]: ConstText(_value="Test failed ") -> text
 860[48]: AppendText(var[4], v1: text)
 863[32]: VarInt(var[28]) -> integer
 866[36]: ConstInt(val=0) -> integer
 871[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 878[32]: ConstText(_value=" != 246") -> text
 887[48]: AppendText(var[4], v1: text)
 890[32]: VarText(var[4]) -> text
 893[48]: Panic(message: text)
 894[32]: FreeText(var[4])
 897[32]: Return(ret=0, value=0, discard=32)

Execute test:
  820:[8] Text()
  821:[32] Call(size=0, to=691)
  691:[36] ConstInt(val=0) -> 0[36]
  696:[40] ConvIntFromNull() -> -2147483648[40]
  697:[44] VarInt(var[40]) -> -2147483648[44]
  700:[48] ConvBoolFromInt(v1=-2147483648[44]) -> false[44]
  701:[45] Not(v1=false[44]) -> true[44]
  702:[45] GotoFalseWord(jump=713, if_false=true[44])
  705:[44] ConstInt(val=1) -> 1[44]
  710:[48] GotoWord(jump=722)
  722:[48] PutInt(var[40], value=1[44])
  725:[44] VarInt(var[40]) -> 1[44]
  728:[48] ConstInt(val=5) -> 5[48]
  733:[52] GeInt(v1=1[44], v2=5[48]) -> false[44]
  734:[45] GotoFalseWord(jump=740, if_false=false[44])
  740:[44] VarInt(var[40]) -> 1[44]
  743:[48] Text()
  744:[72] ConstText(_value="123") -> "123"[72]
  749:[88] AppendText(var[48], v1="123"[72])
  752:[72] VarInt(var[36]) -> 0[72]
  755:[76] VarText(var[48]) -> "123"[76]
  758:[92] CastIntFromText(v1="123"[76]) -> 123[76]
  759:[80] AddInt(v1=0[72], v2=123[76]) -> 123[72]
  760:[76] PutInt(var[36], value=123[72])
  763:[72] VarInt(var[36]) -> 123[72]
  766:[76] ConstInt(val=200) -> 200[76]
  771:[80] GtInt(v1=123[72], v2=200[76]) -> false[72]
  772:[73] GotoFalseWord(jump=791, if_false=false[72])
  791:[72] FreeText(var[48])
  794:[72] FreeStack(value=0, discard=24)
  798:[48] FreeStack(value=0, discard=4)
  802:[44] GotoWord(jump=697)
  697:[44] VarInt(var[40]) -> 1[44]
  700:[48] ConvBoolFromInt(v1=1[44]) -> true[44]
  701:[45] Not(v1=true[44]) -> false[44]
  702:[45] GotoFalseWord(jump=713, if_false=false[44])
  713:[44] VarInt(var[40]) -> 1[44]
  716:[48] ConstInt(val=1) -> 1[48]
  721:[52] AddInt(v1=1[44], v2=1[48]) -> 2[44]
  722:[48] PutInt(var[40], value=2[44])
  725:[44] VarInt(var[40]) -> 2[44]
  728:[48] ConstInt(val=5) -> 5[48]
  733:[52] GeInt(v1=2[44], v2=5[48]) -> false[44]
  734:[45] GotoFalseWord(jump=740, if_false=false[44])
  740:[44] VarInt(var[40]) -> 2[44]
  743:[48] Text()
  744:[72] ConstText(_value="123") -> "123"[72]
  749:[88] AppendText(var[48], v1="123"[72])
  752:[72] VarInt(var[36]) -> 123[72]
  755:[76] VarText(var[48]) -> "123"[76]
  758:[92] CastIntFromText(v1="123"[76]) -> 123[76]
  759:[80] AddInt(v1=123[72], v2=123[76]) -> 246[72]
  760:[76] PutInt(var[36], value=246[72])
  763:[72] VarInt(var[36]) -> 246[72]
  766:[76] ConstInt(val=200) -> 200[76]
  771:[80] GtInt(v1=246[72], v2=200[76]) -> true[72]
  772:[73] GotoFalseWord(jump=791, if_false=true[72])
  775:[72] VarInt(var[36]) -> 246[72]
  778:[76] FreeText(var[48])
  781:[76] Return(ret=828[32], value=4, discard=44)
  828:[36] VarInt(var[32]) -> 246[36]
  831:[40] ConstInt(val=246) -> 246[40]
  836:[44] EqInt(v1=246[36], v2=246[40]) -> true[36]
  837:[37] GotoFalseWord(jump=843, if_false=true[36])
  840:[36] GotoWord(jump=894)
  894:[36] FreeText(var[8])
  897:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
