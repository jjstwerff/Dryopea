pub fn test() {
    test_value = {
s = "";
for i in 0..10 {
    for j in 0..10 {
        if j > i {
            i#continue
        }
        s += "{i}{j},";
        if len(s) > 100 {
            i#break
        }
    }
}
s
};
    assert(
        test_value == "00,10,11,20,21,22,30,31,32,33,40,41,42,43,44,50,51,52,53,54,55,60,61,62,63,64,65,66,70,71,72,73,74,75,",
        "Test failed {test_value} != \"00,10,11,20,21,22,30,31,32,33,40,41,42,43,44,50,51,52,53,54,55,60,61,62,63,64,65,66,70,71,72,73,74,75,\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  s:text = "";
  test_value:text["s"] = {#2 block
    s:text = "";
    {#3 for
      i#index:integer = OpConvIntFromNull();
      loop {#4 for loop
        i:integer = {#5 for next
          i#index:integer = if OpNot(OpConvBoolFromInt(i#index)) 0i32 else OpAddInt(i#index, 1i32);
          if OpGeInt(i#index, 10i32) break(0) else null;
          i#index;
        }#5:integer;
        {#6 block
          {#7 for
            j#index:integer = OpConvIntFromNull();
            loop {#8 for loop
              j:integer = {#9 for next
                j#index:integer = if OpNot(OpConvBoolFromInt(j#index)) 0i32 else OpAddInt(j#index, 1i32);
                if OpGeInt(j#index, 10i32) break(0) else null;
                j#index;
              }#9:integer;
              {#10 block
                if OpGtInt(j, i) {#11 block
                  continue(1);
                }#11 else null;
                OpAppendText(s, {#12 formatting string
                  __work_1:text = "";
                  OpFormatInt(__work_1, i, 10i32, 0i32, 32i32, false, false);
                  OpFormatInt(__work_1, j, 10i32, 0i32, 32i32, false, false);
                  OpAppendText(__work_1, ",");
                  __work_1;
                }#12:text);
                if OpGtInt(_tp_text_len(s), 100i32) {#13 block
                  break(1);
                }#13 else null;
              }#10;
            }#8;
          }#7;
        }#6;
      }#4;
    }#3;
    s;
  }#2:text["s"];
  if OpEqText(test_value, "00,10,11,20,21,22,30,31,32,33,40,41,42,43,44,50,51,52,53,54,55,60,61,62,63,64,65,66,70,71,72,73,74,75,") null else OpPanic({#14 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "00,10,11,20,21,22,30,31,32,33,40,41,42,43,44,50,51,52,53,54,55,60,61,62,63,64,65,66,70,71,72,73,74,75,"");
    __work_2;
  }#14:text);
}#1

byte-code for inner_loop:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_2[4]:text in 1
   1[28]: Text() var=__work_1[28]:text in 1
   2[52]: Text() var=s[52]:text in 1
   3[76]: Text() var=test_value[76]:text["s"] in 1
   4[100]: ClearText(var[52]) var=s[52]:text in 1
   7[100]: ConstText(_value="") -> text
   9[116]: AppendText(var[52], v1: text)
  12[100]: ConvIntFromNull() -> integer var=i#index[100]:integer in 3
  13[104]: VarInt(var[100]) -> integer var=i#index[100]:integer in 3
  16[108]: ConvBoolFromInt(v1: integer) -> boolean
  17[105]: Not(v1: boolean) -> boolean
  18[105]: GotoFalseWord(jump=29, if_false: boolean)
  21[104]: ConstInt(val=0) -> integer
  26[108]: GotoWord(jump=38)
  29[104]: VarInt(var[100]) -> integer var=i#index[100]:integer in 3
  32[108]: ConstInt(val=1) -> integer
  37[112]: AddInt(v1: integer, v2: integer) -> integer
  38[108]: PutInt(var[100], value: integer)
  41[104]: VarInt(var[100]) -> integer var=i#index[100]:integer in 3
  44[108]: ConstInt(val=10) -> integer
  49[112]: GeInt(v1: integer, v2: integer) -> boolean
  50[105]: GotoFalseWord(jump=56, if_false: boolean)
  53[104]: GotoWord(jump=217)
  56[104]: VarInt(var[100]) -> integer var=i#index[100]:integer in 3
  59[108]: ConvIntFromNull() -> integer var=j#index[108]:integer in 7
  60[112]: VarInt(var[108]) -> integer var=j#index[108]:integer in 7
  63[116]: ConvBoolFromInt(v1: integer) -> boolean
  64[113]: Not(v1: boolean) -> boolean
  65[113]: GotoFalseWord(jump=76, if_false: boolean)
  68[112]: ConstInt(val=0) -> integer
  73[116]: GotoWord(jump=85)
  76[112]: VarInt(var[108]) -> integer var=j#index[108]:integer in 7
  79[116]: ConstInt(val=1) -> integer
  84[120]: AddInt(v1: integer, v2: integer) -> integer
  85[116]: PutInt(var[108], value: integer)
  88[112]: VarInt(var[108]) -> integer var=j#index[108]:integer in 7
  91[116]: ConstInt(val=10) -> integer
  96[120]: GeInt(v1: integer, v2: integer) -> boolean
  97[113]: GotoFalseWord(jump=103, if_false: boolean)
 100[112]: GotoWord(jump=206)
 103[112]: VarInt(var[108]) -> integer var=j#index[108]:integer in 7
 106[116]: VarInt(var[112]) -> integer var=j[112]:integer in 8
 109[120]: VarInt(var[104]) -> integer var=i[104]:integer in 4
 112[124]: GtInt(v1: integer, v2: integer) -> boolean
 113[117]: GotoFalseWord(jump=123, if_false: boolean)
 116[116]: FreeStack(value=0, discard=12)
 120[104]: GotoWord(jump=13)
 123[116]: ClearText(var[28]) var=__work_1[28]:text in 1
 126[116]: ConstText(_value="") -> text
 128[132]: AppendText(var[28], v1: text)
 131[116]: VarInt(var[104]) -> integer var=i[104]:integer in 4
 134[120]: ConstInt(val=0) -> integer
 139[124]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 146[116]: VarInt(var[112]) -> integer var=j[112]:integer in 8
 149[120]: ConstInt(val=0) -> integer
 154[124]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 161[116]: ConstText(_value=",") -> text
 164[132]: AppendText(var[28], v1: text)
 167[116]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 170[132]: AppendText(var[52], v1: text)
 173[116]: VarText(var[52]) -> text var=s[52]:text in 1
 176[132]: Call(size=0, to=318)
 183[120]: ConstInt(val=100) -> integer
 188[124]: GtInt(v1: integer, v2: integer) -> boolean
 189[117]: GotoFalseWord(jump=199, if_false: boolean)
 192[116]: FreeStack(value=0, discard=12)
 196[104]: GotoWord(jump=217)
 199[116]: FreeStack(value=0, discard=4)
 203[112]: GotoWord(jump=60)
 206[112]: FreeStack(value=0, discard=4)
 210[108]: FreeStack(value=0, discard=4)
 214[104]: GotoWord(jump=13)
 217[104]: FreeStack(value=0, discard=4)
 221[100]: VarText(var[52]) -> text var=s[52]:text in 1
 224[116]: AppendText(var[76], v1: text)
 227[100]: VarText(var[76]) -> text var=test_value[76]:text["s"] in 1
 230[116]: ConstText(_value="00,10,11,20,21,22,30,31,32,33,40,41,42,43,44,50,51,52,53,54,55,60,61,62,63,64,65,66,70,71,72,73,74,75,") -> text
 334[132]: EqText(v1: text, v2: text) -> boolean
 335[101]: GotoFalseWord(jump=341, if_false: boolean)
 338[100]: GotoWord(jump=491)
 341[100]: ClearText(var[4]) var=__work_2[4]:text in 1
 344[100]: ConstText(_value="Test failed ") -> text
 358[116]: AppendText(var[4], v1: text)
 361[100]: VarText(var[76]) -> text var=test_value[76]:text["s"] in 1
 364[116]: ConstInt(val=0) -> integer
 369[120]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 374[100]: ConstText(_value=" != "00,10,11,20,21,22,30,31,32,33,40,41,42,43,44,50,51,52,53,54,55,60,61,62,63,64,65,66,70,71,72,73,74,75,"") -> text
 484[116]: AppendText(var[4], v1: text)
 487[100]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 490[116]: Panic(message: text)
 491[100]: FreeText(var[76])
 494[100]: FreeText(var[52])
 497[100]: FreeText(var[28])
 500[100]: FreeText(var[4])
 503[100]: Return(ret=0, value=0, discard=100)

