pub fn test() {
    test_value = {"ab{{cd}}e"};
    assert(
        test_value == "ab{{cd}}e",
        "Test failed {test_value} != \"ab{{cd}}e\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text = {#2 block
    "ab{cd}e";
  }#2:text;
  if OpEqText(test_value, "ab{cd}e") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "ab{cd}e"");
    __work_1;
  }#3:text);
}#1

byte-code for format_escaping:test() [1067]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: Text() var=test_value[28]:text in 1
   2[52]: ConstText(_value="ab{cd}e") -> text
  11[68]: AppendText(var[28], v1: text)
  14[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
  17[68]: ConstText(_value="ab{cd}e") -> text
  26[84]: EqText(v1: text, v2: text) -> boolean
  27[53]: GotoFalseWord(jump=33, if_false: boolean)
  30[52]: GotoWord(jump=88)
  33[52]: ClearText(var[4]) var=__work_1[4]:text in 1
  36[52]: ConstText(_value="Test failed ") -> text
  50[68]: AppendText(var[4], v1: text)
  53[52]: VarText(var[28]) -> text var=test_value[28]:text in 1
  56[68]: ConstInt(val=0) -> integer
  61[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
  66[52]: ConstText(_value=" != "ab{cd}e"") -> text
  81[68]: AppendText(var[4], v1: text)
  84[52]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  87[68]: Panic(message: text)
  88[52]: FreeText(var[28])
  91[52]: FreeText(var[4])
  94[52]: Return(ret=0, value=0, discard=52)

