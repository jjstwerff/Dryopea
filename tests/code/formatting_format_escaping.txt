pub fn test() {
    test_value = {"ab{{cd}}e"};
    assert(
        test_value == "ab{{cd}}e",
        "Test failed {test_value} != \"ab{{cd}}e\""
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:text = {#2 block
    "ab{cd}e";
  }#2:text;
  if OpEqText(test_value, "ab{cd}e") null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "ab{cd}e"");
    __work_1;
  }#3:text);
}#1

byte-code for format_escaping:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: Text()
 684[52]: ConstText(_value="ab{cd}e") -> text
 693[68]: AppendText(var[28], v1: text)
 696[52]: VarText(var[28]) -> text
 699[68]: ConstText(_value="ab{cd}e") -> text
 708[84]: EqText(v1: text, v2: text) -> boolean
 709[53]: GotoFalseWord(jump=715, if_false: boolean)
 712[52]: GotoWord(jump=770)
 715[52]: ClearText(var[4])
 718[52]: ConstText(_value="Test failed ") -> text
 732[68]: AppendText(var[4], v1: text)
 735[52]: VarText(var[28]) -> text
 738[68]: ConstInt(val=0) -> integer
 743[72]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 748[52]: ConstText(_value=" != "ab{cd}e"") -> text
 763[68]: AppendText(var[4], v1: text)
 766[52]: VarText(var[4]) -> text
 769[68]: Panic(message: text)
 770[52]: Return(ret=0, value=0, discard=52)

Execute test:
  682:[8] Text()
  683:[32] Text()
  684:[56] ConstText(_value="ab{cd}e") -> "ab{cd}e"[56]
  693:[72] AppendText(var[32], v1="ab{cd}e"[56])
  696:[56] VarText(var[32]) -> "ab{cd}e"[56]
  699:[72] ConstText(_value="ab{cd}e") -> "ab{cd}e"[72]
  708:[88] EqText(v1="ab{cd}e"[56], v2="ab{cd}e"[72]) -> true[56]
  709:[57] GotoFalseWord(jump=715, if_false=true[56])
  712:[56] GotoWord(jump=770)
  770:[56] Return(ret=4294967295[4], value=0, discard=52)
Finished
