pub fn test() {
    test_value = {"ab{{cd}}e"};
    assert(
        test_value == "ab{{cd}}e",
        "Test failed {test_value} != \"ab{{cd}}e\""
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    "ab{cd}e";
  }#2;
  if OpEqText(test_value, "ab{cd}e") null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatText(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != "ab{cd}e"");
    __work_1;
  }#3);
}#1

byte-code for format_escaping:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="ab{cd}e") -> text(false, [])
 679[68]: AppendText(var[28], v1: text(false, []))
 682[52]: VarText(var[28]) -> text(false, [])
 685[68]: ConstText(_value="ab{cd}e") -> text(false, [])
 694[84]: EqText(v1: text(false, []), v2: text(false, [])) -> boolean
 695[53]: GenGotoFalseWord(jump=701, if_false: boolean)
 698[52]: GenGotoWord(jump=756)
 701[52]: ClearText(var[4])
 704[52]: ConstText(_value="Test failed ") -> text(false, [])
 718[68]: AppendText(var[4], v1: text(false, []))
 721[52]: VarText(var[28]) -> text(false, [])
 724[68]: ConstInt(val=0) -> integer
 729[72]: FormatText(var[4], val: text(false, []), width: integer, dir=-1, token=32)
 734[52]: ConstText(_value=" != "ab{cd}e"") -> text(false, [])
 749[68]: AppendText(var[4], v1: text(false, []))
 752[52]: VarText(var[4]) -> text(false, [])
 755[68]: GenPanic(message: text(false, []))
 756[52]: GenReturn(ret=0, value=0, discard=52)

Execute test:
  668:[8] Text()
  669:[32] Text()
  670:[56] ConstText(_value="ab{cd}e") -> "ab{cd}e"[56]
  679:[72] AppendText(var[32], v1="ab{cd}e"[56])
  682:[56] VarText(var[32]) -> "ab{cd}e"[56]
  685:[72] ConstText(_value="ab{cd}e") -> "ab{cd}e"[72]
  694:[88] EqText(v1="ab{cd}e"[56], v2="ab{cd}e"[72]) -> true[56]
  695:[57] GenGotoFalseWord(jump=701, if_false=true[56])
  698:[56] GenGotoWord(jump=756)
  756:[56] GenReturn(ret=4294967295[4], value=0, discard=52)
Finished
