Test code:
pub fn test() {
    test_value = {"ab{{cd}}e"};
    assert(
        test_value == "ab{{cd}}e",
        "Test failed {test_value} != \"ab{{cd}}e\""
    );
}

fn test {
  let test_value = {
    "ab{cd}e";
  };
  if OpEqText(test_value, "ab{cd}e") {null} else {OpGenPanic({
    let append_7 = "Test failed ";
    OpFormatText(append_7, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_7, " != "ab{cd}e"");
    append_7;
  })};
}

byte-code for format_escaping:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="ab{cd}e") -> text
 678[44]: AppendText(var[4], v1: text)
 681[28]: VarText(var[4]) -> text
 684[44]: ConstText(_value="ab{cd}e") -> text
 693[60]: EqText(v1: text, v2: text) -> boolean
 694[29]: GenGotoFalseWord(jump=700, if_false: boolean)
 697[28]: GenGotoWord(jump=757)
 700[28]: Text()
 701[52]: ConstText(_value="Test failed ") -> text
 715[68]: AppendText(var[28], v1: text)
 718[52]: VarText(var[4]) -> text
 721[68]: ConstInt(val=0) -> integer
 726[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 731[52]: ConstText(_value=" != "ab{cd}e"") -> text
 746[68]: AppendText(var[28], v1: text)
 749[52]: VarText(var[28]) -> text
 752[68]: GenFreeStack(value=16, discard=24)
 756[44]: GenPanic(message: text)
 757[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] ConstText(_value="ab{cd}e") -> "ab{cd}e"[28]
  678:[44] AppendText(var[4], v1="ab{cd}e"[28])
  681:[28] VarText(var[4]) -> "ab{cd}e"[28]
  684:[44] ConstText(_value="ab{cd}e") -> "ab{cd}e"[44]
  693:[60] EqText(v1="ab{cd}e"[28], v2="ab{cd}e"[44]) -> true[28]
  694:[29] GenGotoFalseWord(jump=700, if_false=true[28])
  697:[28] GenGotoWord(jump=757)
  757:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
