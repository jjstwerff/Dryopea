Test code:
pub fn test() {
    test_value = {"ab{1+2+32:#x}c{12:o}d{391}e{12:+4}f{1:03}g{42:b}h"};
    assert(
        test_value == "ab0x23c14d391e +12f001g101010h",
        "Test failed {test_value} != \"ab0x23c14d391e +12f001g101010h\""
    );
}

fn test {
  let test_value = {
    {
      let append_8 = "ab";
      OpFormatInt(append_8, OpAddInt(OpAddInt(1i32, 2i32), 32i32), 16i32, 0i32, 32i32, false, true);
      OpAppendText(append_8, "c");
      OpFormatInt(append_8, 12i32, 8i32, 0i32, 32i32, false, false);
      OpAppendText(append_8, "d");
      OpFormatInt(append_8, 391i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(append_8, "e");
      OpFormatInt(append_8, 12i32, 10i32, 4i32, 32i32, true, false);
      OpAppendText(append_8, "f");
      OpFormatInt(append_8, 1i32, 10i32, 3i32, 48i32, false, false);
      OpAppendText(append_8, "g");
      OpFormatInt(append_8, 42i32, 2i32, 0i32, 32i32, false, false);
      OpAppendText(append_8, "h");
      append_8;
    };
  };
  if OpEqText(test_value, "ab0x23c14d391e +12f001g101010h") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "ab0x23c14d391e +12f001g101010h"");
    append_9;
  })};
}

byte-code for format_expression:test()
 664[0]: return-address
 664[4]: Text()
 665[28]: Text()
 666[52]: ConstText(_value="ab") -> text
 670[68]: AppendText(var[28], v1: text)
 673[52]: ConstInt(val=1) -> integer
 678[56]: ConstInt(val=2) -> integer
 683[60]: AddInt(v1: integer, v2: integer) -> integer
 684[56]: ConstInt(val=32) -> integer
 689[60]: AddInt(v1: integer, v2: integer) -> integer
 690[56]: ConstInt(val=0) -> integer
 695[60]: FormatInt(var[28], val: integer, radix=16, width: integer, token=32, plus=false, note=true)
 702[52]: ConstText(_value="c") -> text
 705[68]: AppendText(var[28], v1: text)
 708[52]: ConstInt(val=12) -> integer
 713[56]: ConstInt(val=0) -> integer
 718[60]: FormatInt(var[28], val: integer, radix=8, width: integer, token=32, plus=false, note=false)
 725[52]: ConstText(_value="d") -> text
 728[68]: AppendText(var[28], v1: text)
 731[52]: ConstInt(val=391) -> integer
 736[56]: ConstInt(val=0) -> integer
 741[60]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 748[52]: ConstText(_value="e") -> text
 751[68]: AppendText(var[28], v1: text)
 754[52]: ConstInt(val=12) -> integer
 759[56]: ConstInt(val=4) -> integer
 764[60]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=true, note=false)
 771[52]: ConstText(_value="f") -> text
 774[68]: AppendText(var[28], v1: text)
 777[52]: ConstInt(val=1) -> integer
 782[56]: ConstInt(val=3) -> integer
 787[60]: FormatInt(var[28], val: integer, radix=10, width: integer, token=48, plus=false, note=false)
 794[52]: ConstText(_value="g") -> text
 797[68]: AppendText(var[28], v1: text)
 800[52]: ConstInt(val=42) -> integer
 805[56]: ConstInt(val=0) -> integer
 810[60]: FormatInt(var[28], val: integer, radix=2, width: integer, token=32, plus=false, note=false)
 817[52]: ConstText(_value="h") -> text
 820[68]: AppendText(var[28], v1: text)
 823[52]: VarText(var[28]) -> text
 826[68]: GenFreeStack(value=16, discard=24)
 830[44]: AppendText(var[4], v1: text)
 833[28]: VarText(var[4]) -> text
 836[44]: ConstText(_value="ab0x23c14d391e +12f001g101010h") -> text
 868[60]: EqText(v1: text, v2: text) -> boolean
 869[29]: GenGotoFalseWord(jump=875, if_false: boolean)
 872[28]: GenGotoWord(jump=955)
 875[28]: Text()
 876[52]: ConstText(_value="Test failed ") -> text
 890[68]: AppendText(var[28], v1: text)
 893[52]: VarText(var[4]) -> text
 896[68]: ConstInt(val=0) -> integer
 901[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 906[52]: ConstText(_value=" != "ab0x23c14d391e +12f001g101010h"") -> text
 944[68]: AppendText(var[28], v1: text)
 947[52]: VarText(var[28]) -> text
 950[68]: GenFreeStack(value=16, discard=24)
 954[44]: GenPanic(message: text)
 955[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  664:[4] Text()
  665:[28] Text()
  666:[52] ConstText(_value="ab") -> "ab"[52]
  670:[68] AppendText(var[28], v1="ab"[52])
  673:[52] ConstInt(val=1) -> 1[52]
  678:[56] ConstInt(val=2) -> 2[56]
  683:[60] AddInt(v1=1[52], v2=2[56]) -> 3[52]
  684:[56] ConstInt(val=32) -> 32[56]
  689:[60] AddInt(v1=3[52], v2=32[56]) -> 35[52]
  690:[56] ConstInt(val=0) -> 0[56]
  695:[60] FormatInt(var[28], val=35[52], radix=16, width=0[56], token=32, plus=false, note=true)
  702:[52] ConstText(_value="c") -> "c"[52]
  705:[68] AppendText(var[28], v1="c"[52])
  708:[52] ConstInt(val=12) -> 12[52]
  713:[56] ConstInt(val=0) -> 0[56]
  718:[60] FormatInt(var[28], val=12[52], radix=8, width=0[56], token=32, plus=false, note=false)
  725:[52] ConstText(_value="d") -> "d"[52]
  728:[68] AppendText(var[28], v1="d"[52])
  731:[52] ConstInt(val=391) -> 391[52]
  736:[56] ConstInt(val=0) -> 0[56]
  741:[60] FormatInt(var[28], val=391[52], radix=10, width=0[56], token=32, plus=false, note=false)
  748:[52] ConstText(_value="e") -> "e"[52]
  751:[68] AppendText(var[28], v1="e"[52])
  754:[52] ConstInt(val=12) -> 12[52]
  759:[56] ConstInt(val=4) -> 4[56]
  764:[60] FormatInt(var[28], val=12[52], radix=10, width=4[56], token=32, plus=true, note=false)
  771:[52] ConstText(_value="f") -> "f"[52]
  774:[68] AppendText(var[28], v1="f"[52])
  777:[52] ConstInt(val=1) -> 1[52]
  782:[56] ConstInt(val=3) -> 3[56]
  787:[60] FormatInt(var[28], val=1[52], radix=10, width=3[56], token=48, plus=false, note=false)
  794:[52] ConstText(_value="g") -> "g"[52]
  797:[68] AppendText(var[28], v1="g"[52])
  800:[52] ConstInt(val=42) -> 42[52]
  805:[56] ConstInt(val=0) -> 0[56]
  810:[60] FormatInt(var[28], val=42[52], radix=2, width=0[56], token=32, plus=false, note=false)
  817:[52] ConstText(_value="h") -> "h"[52]
  820:[68] AppendText(var[28], v1="h"[52])
  823:[52] VarText(var[28]) -> "ab0x23c14d391e +12f001g101010h"[52]
  826:[68] GenFreeStack(value=16, discard=24)
  830:[44] AppendText(var[4], v1="ab0x23c14d391e +12f001g101010h"[28])
  833:[28] VarText(var[4]) -> "ab0x23c14d391e +12f001g101010h"[28]
  836:[44] ConstText(_value="ab0x23c14d391e +12f001g101010h") -> "ab0x23c14d391e +12f001g101010h"[44]
  868:[60] EqText(v1="ab0x23c14d391e +12f001g101010h"[28], v2="ab0x23c14d391e +12f001g101010h"[44]) -> true[28]
  869:[29] GenGotoFalseWord(jump=875, if_false=true[28])
  872:[28] GenGotoWord(jump=955)
  955:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
