pub fn test() {
    test_value = {"ab{1+2+32:#x}c{12:o}d{391}e{12:+4}f{1:03}g{42:b}h"};
    assert(
        test_value == "ab0x23c14d391e +12f001g101010h",
        "Test failed {test_value} != \"ab0x23c14d391e +12f001g101010h\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "ab";
      OpFormatInt(__work_1, OpAddInt(OpAddInt(1i32, 2i32), 32i32), 16i32, 0i32, 32i32, false, true);
      OpAppendText(__work_1, "c");
      OpFormatInt(__work_1, 12i32, 8i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "d");
      OpFormatInt(__work_1, 391i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "e");
      OpFormatInt(__work_1, 12i32, 10i32, 4i32, 32i32, true, false);
      OpAppendText(__work_1, "f");
      OpFormatInt(__work_1, 1i32, 10i32, 3i32, 48i32, false, false);
      OpAppendText(__work_1, "g");
      OpFormatInt(__work_1, 42i32, 2i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "h");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "ab0x23c14d391e +12f001g101010h") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "ab0x23c14d391e +12f001g101010h"");
    __work_2;
  }#4:text);
}#1

byte-code for format_expression:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Text()
 677[52]: Text()
 678[76]: ClearText(var[28])
 681[76]: ConstText(_value="ab") -> text
 685[92]: AppendText(var[28], v1: text)
 688[76]: ConstInt(val=1) -> integer
 693[80]: ConstInt(val=2) -> integer
 698[84]: AddInt(v1: integer, v2: integer) -> integer
 699[80]: ConstInt(val=32) -> integer
 704[84]: AddInt(v1: integer, v2: integer) -> integer
 705[80]: ConstInt(val=0) -> integer
 710[84]: FormatInt(var[28], val: integer, radix=16, width: integer, token=32, plus=false, note=true)
 717[76]: ConstText(_value="c") -> text
 720[92]: AppendText(var[28], v1: text)
 723[76]: ConstInt(val=12) -> integer
 728[80]: ConstInt(val=0) -> integer
 733[84]: FormatInt(var[28], val: integer, radix=8, width: integer, token=32, plus=false, note=false)
 740[76]: ConstText(_value="d") -> text
 743[92]: AppendText(var[28], v1: text)
 746[76]: ConstInt(val=391) -> integer
 751[80]: ConstInt(val=0) -> integer
 756[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 763[76]: ConstText(_value="e") -> text
 766[92]: AppendText(var[28], v1: text)
 769[76]: ConstInt(val=12) -> integer
 774[80]: ConstInt(val=4) -> integer
 779[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=true, note=false)
 786[76]: ConstText(_value="f") -> text
 789[92]: AppendText(var[28], v1: text)
 792[76]: ConstInt(val=1) -> integer
 797[80]: ConstInt(val=3) -> integer
 802[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=48, plus=false, note=false)
 809[76]: ConstText(_value="g") -> text
 812[92]: AppendText(var[28], v1: text)
 815[76]: ConstInt(val=42) -> integer
 820[80]: ConstInt(val=0) -> integer
 825[84]: FormatInt(var[28], val: integer, radix=2, width: integer, token=32, plus=false, note=false)
 832[76]: ConstText(_value="h") -> text
 835[92]: AppendText(var[28], v1: text)
 838[76]: VarText(var[28]) -> text
 841[92]: AppendText(var[52], v1: text)
 844[76]: VarText(var[52]) -> text
 847[92]: ConstText(_value="ab0x23c14d391e +12f001g101010h") -> text
 879[108]: EqText(v1: text, v2: text) -> boolean
 880[77]: GotoFalseWord(jump=886, if_false: boolean)
 883[76]: GotoWord(jump=964)
 886[76]: ClearText(var[4])
 889[76]: ConstText(_value="Test failed ") -> text
 903[92]: AppendText(var[4], v1: text)
 906[76]: VarText(var[52]) -> text
 909[92]: ConstInt(val=0) -> integer
 914[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 919[76]: ConstText(_value=" != "ab0x23c14d391e +12f001g101010h"") -> text
 957[92]: AppendText(var[4], v1: text)
 960[76]: VarText(var[4]) -> text
 963[92]: Panic(message: text)
 964[76]: Return(ret=0, value=0, discard=76)

Execute test:
  675:[8] Text()
  676:[32] Text()
  677:[56] Text()
  678:[80] ClearText(var[32])
  681:[80] ConstText(_value="ab") -> "ab"[80]
  685:[96] AppendText(var[32], v1="ab"[80])
  688:[80] ConstInt(val=1) -> 1[80]
  693:[84] ConstInt(val=2) -> 2[84]
  698:[88] AddInt(v1=1[80], v2=2[84]) -> 3[80]
  699:[84] ConstInt(val=32) -> 32[84]
  704:[88] AddInt(v1=3[80], v2=32[84]) -> 35[80]
  705:[84] ConstInt(val=0) -> 0[84]
  710:[88] FormatInt(var[32], val=35[80], radix=16, width=0[84], token=32, plus=false, note=true)
  717:[80] ConstText(_value="c") -> "c"[80]
  720:[96] AppendText(var[32], v1="c"[80])
  723:[80] ConstInt(val=12) -> 12[80]
  728:[84] ConstInt(val=0) -> 0[84]
  733:[88] FormatInt(var[32], val=12[80], radix=8, width=0[84], token=32, plus=false, note=false)
  740:[80] ConstText(_value="d") -> "d"[80]
  743:[96] AppendText(var[32], v1="d"[80])
  746:[80] ConstInt(val=391) -> 391[80]
  751:[84] ConstInt(val=0) -> 0[84]
  756:[88] FormatInt(var[32], val=391[80], radix=10, width=0[84], token=32, plus=false, note=false)
  763:[80] ConstText(_value="e") -> "e"[80]
  766:[96] AppendText(var[32], v1="e"[80])
  769:[80] ConstInt(val=12) -> 12[80]
  774:[84] ConstInt(val=4) -> 4[84]
  779:[88] FormatInt(var[32], val=12[80], radix=10, width=4[84], token=32, plus=true, note=false)
  786:[80] ConstText(_value="f") -> "f"[80]
  789:[96] AppendText(var[32], v1="f"[80])
  792:[80] ConstInt(val=1) -> 1[80]
  797:[84] ConstInt(val=3) -> 3[84]
  802:[88] FormatInt(var[32], val=1[80], radix=10, width=3[84], token=48, plus=false, note=false)
  809:[80] ConstText(_value="g") -> "g"[80]
  812:[96] AppendText(var[32], v1="g"[80])
  815:[80] ConstInt(val=42) -> 42[80]
  820:[84] ConstInt(val=0) -> 0[84]
  825:[88] FormatInt(var[32], val=42[80], radix=2, width=0[84], token=32, plus=false, note=false)
  832:[80] ConstText(_value="h") -> "h"[80]
  835:[96] AppendText(var[32], v1="h"[80])
  838:[80] VarText(var[32]) -> "ab0x23c14d391e +12f001g101010h"[80]
  841:[96] AppendText(var[56], v1="ab0x23c14d391e +12f001g101010h"[80])
  844:[80] VarText(var[56]) -> "ab0x23c14d391e +12f001g101010h"[80]
  847:[96] ConstText(_value="ab0x23c14d391e +12f001g101010h") -> "ab0x23c14d391e +12f001g101010h"[96]
  879:[112] EqText(v1="ab0x23c14d391e +12f001g101010h"[80], v2="ab0x23c14d391e +12f001g101010h"[96]) -> true[80]
  880:[81] GotoFalseWord(jump=886, if_false=true[80])
  883:[80] GotoWord(jump=964)
  964:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
