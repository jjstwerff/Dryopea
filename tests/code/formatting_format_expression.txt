pub fn test() {
    test_value = {"ab{1+2+32:#x}c{12:o}d{391}e{12:+4}f{1:03}g{42:b}h"};
    assert(
        test_value == "ab0x23c14d391e +12f001g101010h",
        "Test failed {test_value} != \"ab0x23c14d391e +12f001g101010h\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "ab";
      OpFormatInt(__work_1, OpAddInt(OpAddInt(1i32, 2i32), 32i32), 16i32, 0i32, 32i32, false, true);
      OpAppendText(__work_1, "c");
      OpFormatInt(__work_1, 12i32, 8i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "d");
      OpFormatInt(__work_1, 391i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "e");
      OpFormatInt(__work_1, 12i32, 10i32, 4i32, 32i32, true, false);
      OpAppendText(__work_1, "f");
      OpFormatInt(__work_1, 1i32, 10i32, 3i32, 48i32, false, false);
      OpAppendText(__work_1, "g");
      OpFormatInt(__work_1, 42i32, 2i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "h");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "ab0x23c14d391e +12f001g101010h") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "ab0x23c14d391e +12f001g101010h"");
    __work_2;
  }#4:text);
}#1

byte-code for format_expression:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Text()
 694[52]: Text()
 695[76]: ClearText(var[28])
 698[76]: ConstText(_value="ab") -> text
 702[92]: AppendText(var[28], v1: text)
 705[76]: ConstInt(val=1) -> integer
 710[80]: ConstInt(val=2) -> integer
 715[84]: AddInt(v1: integer, v2: integer) -> integer
 716[80]: ConstInt(val=32) -> integer
 721[84]: AddInt(v1: integer, v2: integer) -> integer
 722[80]: ConstInt(val=0) -> integer
 727[84]: FormatInt(var[28], val: integer, radix=16, width: integer, token=32, plus=false, note=true)
 734[76]: ConstText(_value="c") -> text
 737[92]: AppendText(var[28], v1: text)
 740[76]: ConstInt(val=12) -> integer
 745[80]: ConstInt(val=0) -> integer
 750[84]: FormatInt(var[28], val: integer, radix=8, width: integer, token=32, plus=false, note=false)
 757[76]: ConstText(_value="d") -> text
 760[92]: AppendText(var[28], v1: text)
 763[76]: ConstInt(val=391) -> integer
 768[80]: ConstInt(val=0) -> integer
 773[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 780[76]: ConstText(_value="e") -> text
 783[92]: AppendText(var[28], v1: text)
 786[76]: ConstInt(val=12) -> integer
 791[80]: ConstInt(val=4) -> integer
 796[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=true, note=false)
 803[76]: ConstText(_value="f") -> text
 806[92]: AppendText(var[28], v1: text)
 809[76]: ConstInt(val=1) -> integer
 814[80]: ConstInt(val=3) -> integer
 819[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=48, plus=false, note=false)
 826[76]: ConstText(_value="g") -> text
 829[92]: AppendText(var[28], v1: text)
 832[76]: ConstInt(val=42) -> integer
 837[80]: ConstInt(val=0) -> integer
 842[84]: FormatInt(var[28], val: integer, radix=2, width: integer, token=32, plus=false, note=false)
 849[76]: ConstText(_value="h") -> text
 852[92]: AppendText(var[28], v1: text)
 855[76]: VarText(var[28]) -> text
 858[92]: AppendText(var[52], v1: text)
 861[76]: VarText(var[52]) -> text
 864[92]: ConstText(_value="ab0x23c14d391e +12f001g101010h") -> text
 896[108]: EqText(v1: text, v2: text) -> boolean
 897[77]: GotoFalseWord(jump=903, if_false: boolean)
 900[76]: GotoWord(jump=981)
 903[76]: ClearText(var[4])
 906[76]: ConstText(_value="Test failed ") -> text
 920[92]: AppendText(var[4], v1: text)
 923[76]: VarText(var[52]) -> text
 926[92]: ConstInt(val=0) -> integer
 931[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 936[76]: ConstText(_value=" != "ab0x23c14d391e +12f001g101010h"") -> text
 974[92]: AppendText(var[4], v1: text)
 977[76]: VarText(var[4]) -> text
 980[92]: Panic(message: text)
 981[76]: FreeText(var[52])
 984[76]: FreeText(var[28])
 987[76]: FreeText(var[4])
 990[76]: Return(ret=0, value=0, discard=76)

Execute test:
  692:[8] Text()
  693:[32] Text()
  694:[56] Text()
  695:[80] ClearText(var[32])
  698:[80] ConstText(_value="ab") -> "ab"[80]
  702:[96] AppendText(var[32], v1="ab"[80])
  705:[80] ConstInt(val=1) -> 1[80]
  710:[84] ConstInt(val=2) -> 2[84]
  715:[88] AddInt(v1=1[80], v2=2[84]) -> 3[80]
  716:[84] ConstInt(val=32) -> 32[84]
  721:[88] AddInt(v1=3[80], v2=32[84]) -> 35[80]
  722:[84] ConstInt(val=0) -> 0[84]
  727:[88] FormatInt(var[32], val=35[80], radix=16, width=0[84], token=32, plus=false, note=true)
  734:[80] ConstText(_value="c") -> "c"[80]
  737:[96] AppendText(var[32], v1="c"[80])
  740:[80] ConstInt(val=12) -> 12[80]
  745:[84] ConstInt(val=0) -> 0[84]
  750:[88] FormatInt(var[32], val=12[80], radix=8, width=0[84], token=32, plus=false, note=false)
  757:[80] ConstText(_value="d") -> "d"[80]
  760:[96] AppendText(var[32], v1="d"[80])
  763:[80] ConstInt(val=391) -> 391[80]
  768:[84] ConstInt(val=0) -> 0[84]
  773:[88] FormatInt(var[32], val=391[80], radix=10, width=0[84], token=32, plus=false, note=false)
  780:[80] ConstText(_value="e") -> "e"[80]
  783:[96] AppendText(var[32], v1="e"[80])
  786:[80] ConstInt(val=12) -> 12[80]
  791:[84] ConstInt(val=4) -> 4[84]
  796:[88] FormatInt(var[32], val=12[80], radix=10, width=4[84], token=32, plus=true, note=false)
  803:[80] ConstText(_value="f") -> "f"[80]
  806:[96] AppendText(var[32], v1="f"[80])
  809:[80] ConstInt(val=1) -> 1[80]
  814:[84] ConstInt(val=3) -> 3[84]
  819:[88] FormatInt(var[32], val=1[80], radix=10, width=3[84], token=48, plus=false, note=false)
  826:[80] ConstText(_value="g") -> "g"[80]
  829:[96] AppendText(var[32], v1="g"[80])
  832:[80] ConstInt(val=42) -> 42[80]
  837:[84] ConstInt(val=0) -> 0[84]
  842:[88] FormatInt(var[32], val=42[80], radix=2, width=0[84], token=32, plus=false, note=false)
  849:[80] ConstText(_value="h") -> "h"[80]
  852:[96] AppendText(var[32], v1="h"[80])
  855:[80] VarText(var[32]) -> "ab0x23c14d391e +12f001g101010h"[80]
  858:[96] AppendText(var[56], v1="ab0x23c14d391e +12f001g101010h"[80])
  861:[80] VarText(var[56]) -> "ab0x23c14d391e +12f001g101010h"[80]
  864:[96] ConstText(_value="ab0x23c14d391e +12f001g101010h") -> "ab0x23c14d391e +12f001g101010h"[96]
  896:[112] EqText(v1="ab0x23c14d391e +12f001g101010h"[80], v2="ab0x23c14d391e +12f001g101010h"[96]) -> true[80]
  897:[81] GotoFalseWord(jump=903, if_false=true[80])
  900:[80] GotoWord(jump=981)
  981:[80] FreeText(var[56])
  984:[80] FreeText(var[32])
  987:[80] FreeText(var[8])
  990:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
