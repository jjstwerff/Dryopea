pub fn test() {
    test_value = {"ab{1+2+32:#x}c{12:o}d{391}e{12:+4}f{1:03}g{42:b}h"};
    assert(
        test_value == "ab0x23c14d391e +12f001g101010h",
        "Test failed {test_value} != \"ab0x23c14d391e +12f001g101010h\""
    );
}
fn test() {#1 block
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "ab";
      OpFormatInt(__work_1, OpAddInt(OpAddInt(1i32, 2i32), 32i32), 16i32, 0i32, 32i32, false, true);
      OpAppendText(__work_1, "c");
      OpFormatInt(__work_1, 12i32, 8i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "d");
      OpFormatInt(__work_1, 391i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "e");
      OpFormatInt(__work_1, 12i32, 10i32, 4i32, 32i32, true, false);
      OpAppendText(__work_1, "f");
      OpFormatInt(__work_1, 1i32, 10i32, 3i32, 48i32, false, false);
      OpAppendText(__work_1, "g");
      OpFormatInt(__work_1, 42i32, 2i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "h");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "ab0x23c14d391e +12f001g101010h") null else OpPanic({#4 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "ab0x23c14d391e +12f001g101010h"");
    __work_2;
  }#4:text);
}#1

byte-code for format_expression:test()
 645[0]: return-address
 645[4]: Text() var=__work_2[4]:text in 1
 646[28]: Text() var=__work_1[28]:text in 1
 647[52]: Text() var=test_value[52]:text in 1
 648[76]: ClearText(var[28]) var=__work_1[28]:text in 1
 651[76]: ConstText(_value="ab") -> text
 655[92]: AppendText(var[28], v1: text)
 658[76]: ConstInt(val=1) -> integer
 663[80]: ConstInt(val=2) -> integer
 668[84]: AddInt(v1: integer, v2: integer) -> integer
 669[80]: ConstInt(val=32) -> integer
 674[84]: AddInt(v1: integer, v2: integer) -> integer
 675[80]: ConstInt(val=0) -> integer
 680[84]: FormatInt(var[28], val: integer, radix=16, width: integer, token=32, plus=false, note=true)
 687[76]: ConstText(_value="c") -> text
 690[92]: AppendText(var[28], v1: text)
 693[76]: ConstInt(val=12) -> integer
 698[80]: ConstInt(val=0) -> integer
 703[84]: FormatInt(var[28], val: integer, radix=8, width: integer, token=32, plus=false, note=false)
 710[76]: ConstText(_value="d") -> text
 713[92]: AppendText(var[28], v1: text)
 716[76]: ConstInt(val=391) -> integer
 721[80]: ConstInt(val=0) -> integer
 726[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 733[76]: ConstText(_value="e") -> text
 736[92]: AppendText(var[28], v1: text)
 739[76]: ConstInt(val=12) -> integer
 744[80]: ConstInt(val=4) -> integer
 749[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=true, note=false)
 756[76]: ConstText(_value="f") -> text
 759[92]: AppendText(var[28], v1: text)
 762[76]: ConstInt(val=1) -> integer
 767[80]: ConstInt(val=3) -> integer
 772[84]: FormatInt(var[28], val: integer, radix=10, width: integer, token=48, plus=false, note=false)
 779[76]: ConstText(_value="g") -> text
 782[92]: AppendText(var[28], v1: text)
 785[76]: ConstInt(val=42) -> integer
 790[80]: ConstInt(val=0) -> integer
 795[84]: FormatInt(var[28], val: integer, radix=2, width: integer, token=32, plus=false, note=false)
 802[76]: ConstText(_value="h") -> text
 805[92]: AppendText(var[28], v1: text)
 808[76]: VarText(var[28]) -> text var=__work_1[28]:text in 1
 811[92]: AppendText(var[52], v1: text)
 814[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 817[92]: ConstText(_value="ab0x23c14d391e +12f001g101010h") -> text
 849[108]: EqText(v1: text, v2: text) -> boolean
 850[77]: GotoFalseWord(jump=856, if_false: boolean)
 853[76]: GotoWord(jump=934)
 856[76]: ClearText(var[4]) var=__work_2[4]:text in 1
 859[76]: ConstText(_value="Test failed ") -> text
 873[92]: AppendText(var[4], v1: text)
 876[76]: VarText(var[52]) -> text var=test_value[52]:text in 1
 879[92]: ConstInt(val=0) -> integer
 884[96]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 889[76]: ConstText(_value=" != "ab0x23c14d391e +12f001g101010h"") -> text
 927[92]: AppendText(var[4], v1: text)
 930[76]: VarText(var[4]) -> text var=__work_2[4]:text in 1
 933[92]: Panic(message: text)
 934[76]: FreeText(var[52])
 937[76]: FreeText(var[28])
 940[76]: FreeText(var[4])
 943[76]: Return(ret=0, value=0, discard=76)

Execute test:
  645:[8] Text()
  646:[32] Text()
  647:[56] Text()
  648:[80] ClearText(var[32])
  651:[80] ConstText(_value="ab") -> "ab"[80]
  655:[96] AppendText(var[32], v1="ab"[80])
  658:[80] ConstInt(val=1) -> 1[80]
  663:[84] ConstInt(val=2) -> 2[84]
  668:[88] AddInt(v1=1[80], v2=2[84]) -> 3[80]
  669:[84] ConstInt(val=32) -> 32[84]
  674:[88] AddInt(v1=3[80], v2=32[84]) -> 35[80]
  675:[84] ConstInt(val=0) -> 0[84]
  680:[88] FormatInt(var[32], val=35[80], radix=16, width=0[84], token=32, plus=false, note=true)
  687:[80] ConstText(_value="c") -> "c"[80]
  690:[96] AppendText(var[32], v1="c"[80])
  693:[80] ConstInt(val=12) -> 12[80]
  698:[84] ConstInt(val=0) -> 0[84]
  703:[88] FormatInt(var[32], val=12[80], radix=8, width=0[84], token=32, plus=false, note=false)
  710:[80] ConstText(_value="d") -> "d"[80]
  713:[96] AppendText(var[32], v1="d"[80])
  716:[80] ConstInt(val=391) -> 391[80]
  721:[84] ConstInt(val=0) -> 0[84]
  726:[88] FormatInt(var[32], val=391[80], radix=10, width=0[84], token=32, plus=false, note=false)
  733:[80] ConstText(_value="e") -> "e"[80]
  736:[96] AppendText(var[32], v1="e"[80])
  739:[80] ConstInt(val=12) -> 12[80]
  744:[84] ConstInt(val=4) -> 4[84]
  749:[88] FormatInt(var[32], val=12[80], radix=10, width=4[84], token=32, plus=true, note=false)
  756:[80] ConstText(_value="f") -> "f"[80]
  759:[96] AppendText(var[32], v1="f"[80])
  762:[80] ConstInt(val=1) -> 1[80]
  767:[84] ConstInt(val=3) -> 3[84]
  772:[88] FormatInt(var[32], val=1[80], radix=10, width=3[84], token=48, plus=false, note=false)
  779:[80] ConstText(_value="g") -> "g"[80]
  782:[96] AppendText(var[32], v1="g"[80])
  785:[80] ConstInt(val=42) -> 42[80]
  790:[84] ConstInt(val=0) -> 0[84]
  795:[88] FormatInt(var[32], val=42[80], radix=2, width=0[84], token=32, plus=false, note=false)
  802:[80] ConstText(_value="h") -> "h"[80]
  805:[96] AppendText(var[32], v1="h"[80])
  808:[80] VarText(var[32]) -> "ab0x23c14d391e +12f001g101010h"[80]
  811:[96] AppendText(var[56], v1="ab0x23c14d391e +12f001g101010h"[80])
  814:[80] VarText(var[56]) -> "ab0x23c14d391e +12f001g101010h"[80]
  817:[96] ConstText(_value="ab0x23c14d391e +12f001g101010h") -> "ab0x23c14d391e +12f001g101010h"[96]
  849:[112] EqText(v1="ab0x23c14d391e +12f001g101010h"[80], v2="ab0x23c14d391e +12f001g101010h"[96]) -> true[80]
  850:[81] GotoFalseWord(jump=856, if_false=true[80])
  853:[80] GotoWord(jump=934)
  934:[80] FreeText(var[56])
  937:[80] FreeText(var[32])
  940:[80] FreeText(var[8])
  943:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
