pub fn test() {
    test_value = {"ab{1+2+32:#x}c{12:o}d{391}e{12:+4}f{1:03}g{42:b}h"};
    assert(
        test_value == "ab0x23c14d391e +12f001g101010h",
        "Test failed {test_value} != \"ab0x23c14d391e +12f001g101010h\""
    );
}
fn test() {#block_1:void
  __work_2:text(1) = "";
  __work_1:text(1) = "";
  test_value:text(1) = {#block_2:text
    {#Formatted string_3:text
      __work_1:text(1) = "ab";
      OpFormatInt(__work_1, OpAddInt(OpAddInt(1i32, 2i32), 32i32), 16i32, 0i32, 32i32, false, true);
      OpAppendText(__work_1, "c");
      OpFormatInt(__work_1, 12i32, 8i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "d");
      OpFormatInt(__work_1, 391i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "e");
      OpFormatInt(__work_1, 12i32, 10i32, 4i32, 32i32, true, false);
      OpAppendText(__work_1, "f");
      OpFormatInt(__work_1, 1i32, 10i32, 3i32, 48i32, false, false);
      OpAppendText(__work_1, "g");
      OpFormatInt(__work_1, 42i32, 2i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, "h");
      __work_1;
    }#Formatted string_3:text;
  }#block_2:text;
  if OpEqText(test_value, "ab0x23c14d391e +12f001g101010h") null else OpPanic({#Formatted string_4:text
    __work_2:text(1) = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "ab0x23c14d391e +12f001g101010h"");
    __work_2;
  }#Formatted string_4:text);
  OpFreeText(test_value);
  OpFreeText(__work_1);
  OpFreeText(__work_2);
}#block_1:void

byte-code for format_expression:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: Text() var=test_value[56]:text
   3[80]: ClearText(var[32]) var=__work_1[32]:text
   6[80]: ConstText(_value="ab") -> text
  10[96]: AppendText(var[32], v1: text)
  13[80]: ConstInt(val=1) -> integer
  18[84]: ConstInt(val=2) -> integer
  23[88]: AddInt(v1: integer, v2: integer) -> integer
  24[84]: ConstInt(val=32) -> integer
  29[88]: AddInt(v1: integer, v2: integer) -> integer
  30[84]: ConstInt(val=0) -> integer
  35[88]: FormatInt(var[32], val: integer, radix=16, width: integer, token=32, plus=false, note=true)
  42[80]: ConstText(_value="c") -> text
  45[96]: AppendText(var[32], v1: text)
  48[80]: ConstInt(val=12) -> integer
  53[84]: ConstInt(val=0) -> integer
  58[88]: FormatInt(var[32], val: integer, radix=8, width: integer, token=32, plus=false, note=false)
  65[80]: ConstText(_value="d") -> text
  68[96]: AppendText(var[32], v1: text)
  71[80]: ConstInt(val=391) -> integer
  76[84]: ConstInt(val=0) -> integer
  81[88]: FormatInt(var[32], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  88[80]: ConstText(_value="e") -> text
  91[96]: AppendText(var[32], v1: text)
  94[80]: ConstInt(val=12) -> integer
  99[84]: ConstInt(val=4) -> integer
 104[88]: FormatInt(var[32], val: integer, radix=10, width: integer, token=32, plus=true, note=false)
 111[80]: ConstText(_value="f") -> text
 114[96]: AppendText(var[32], v1: text)
 117[80]: ConstInt(val=1) -> integer
 122[84]: ConstInt(val=3) -> integer
 127[88]: FormatInt(var[32], val: integer, radix=10, width: integer, token=48, plus=false, note=false)
 134[80]: ConstText(_value="g") -> text
 137[96]: AppendText(var[32], v1: text)
 140[80]: ConstInt(val=42) -> integer
 145[84]: ConstInt(val=0) -> integer
 150[88]: FormatInt(var[32], val: integer, radix=2, width: integer, token=32, plus=false, note=false)
 157[80]: ConstText(_value="h") -> text
 160[96]: AppendText(var[32], v1: text)
 163[80]: VarText(var[32]) -> text var=__work_1[32]:text
 166[96]: AppendText(var[56], v1: text)
 169[80]: VarText(var[56]) -> text var=test_value[56]:text
 172[96]: ConstText(_value="ab0x23c14d391e +12f001g101010h") -> text
 204[112]: EqText(v1: text, v2: text) -> boolean
 205[81]: GotoFalseWord(jump=211, if_false: boolean)
 208[80]: GotoWord(jump=289)
 211[80]: ClearText(var[8]) var=__work_2[8]:text
 214[80]: ConstText(_value="Test failed ") -> text
 228[96]: AppendText(var[8], v1: text)
 231[80]: VarText(var[56]) -> text var=test_value[56]:text
 234[96]: ConstInt(val=0) -> integer
 239[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
 244[80]: ConstText(_value=" != "ab0x23c14d391e +12f001g101010h"") -> text
 282[96]: AppendText(var[8], v1: text)
 285[80]: VarText(var[8]) -> text var=__work_2[8]:text
 288[96]: Panic(message: text)
 289[80]: FreeText(var[56])
 292[80]: FreeText(var[32])
 295[80]: FreeText(var[8])
 298[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value="ab") -> "ab"[80]
   10:[96] AppendText(var[32], v1="ab"[80])
   13:[80] ConstInt(val=1) -> 1[80]
   18:[84] ConstInt(val=2) -> 2[84]
   23:[88] AddInt(v1=1[80], v2=2[84]) -> 3[80]
   24:[84] ConstInt(val=32) -> 32[84]
   29:[88] AddInt(v1=3[80], v2=32[84]) -> 35[80]
   30:[84] ConstInt(val=0) -> 0[84]
   35:[88] FormatInt(var[32], val=35[80], radix=16, width=0[84], token=32, plus=false, note=true)
   42:[80] ConstText(_value="c") -> "c"[80]
   45:[96] AppendText(var[32], v1="c"[80])
   48:[80] ConstInt(val=12) -> 12[80]
   53:[84] ConstInt(val=0) -> 0[84]
   58:[88] FormatInt(var[32], val=12[80], radix=8, width=0[84], token=32, plus=false, note=false)
   65:[80] ConstText(_value="d") -> "d"[80]
   68:[96] AppendText(var[32], v1="d"[80])
   71:[80] ConstInt(val=391) -> 391[80]
   76:[84] ConstInt(val=0) -> 0[84]
   81:[88] FormatInt(var[32], val=391[80], radix=10, width=0[84], token=32, plus=false, note=false)
   88:[80] ConstText(_value="e") -> "e"[80]
   91:[96] AppendText(var[32], v1="e"[80])
   94:[80] ConstInt(val=12) -> 12[80]
   99:[84] ConstInt(val=4) -> 4[84]
  104:[88] FormatInt(var[32], val=12[80], radix=10, width=4[84], token=32, plus=true, note=false)
  111:[80] ConstText(_value="f") -> "f"[80]
  114:[96] AppendText(var[32], v1="f"[80])
  117:[80] ConstInt(val=1) -> 1[80]
  122:[84] ConstInt(val=3) -> 3[84]
  127:[88] FormatInt(var[32], val=1[80], radix=10, width=3[84], token=48, plus=false, note=false)
  134:[80] ConstText(_value="g") -> "g"[80]
  137:[96] AppendText(var[32], v1="g"[80])
  140:[80] ConstInt(val=42) -> 42[80]
  145:[84] ConstInt(val=0) -> 0[84]
  150:[88] FormatInt(var[32], val=42[80], radix=2, width=0[84], token=32, plus=false, note=false)
  157:[80] ConstText(_value="h") -> "h"[80]
  160:[96] AppendText(var[32], v1="h"[80])
  163:[80] VarText(var[32]) -> "ab0x23c14d391e +12f001g101010h"[80]
  166:[96] AppendText(var[56], v1="ab0x23c14d391e +12f001g101010h"[80])
  169:[80] VarText(var[56]) -> "ab0x23c14d391e +12f001g101010h"[80]
  172:[96] ConstText(_value="ab0x23c14d391e +12f001g101010h") -> "ab0x23c14d391e +12f001g101010h"[96]
  204:[112] EqText(v1="ab0x23c14d391e +12f001g101010h"[80], v2="ab0x23c14d391e +12f001g101010h"[96]) -> true[80]
  205:[81] GotoFalseWord(jump=1379, if_false=true[80])
  208:[80] GotoWord(jump=1457)
  289:[80] FreeText(var[56])
  292:[80] FreeText(var[32])
  295:[80] FreeText(var[8])
  298:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
