Test code:
pub fn test() {
    test_value = {"ab{1+2+32:#x}c{12:o}d{391}e{12:+4}f{1:03}g{42:b}h"};
    assert(
        test_value == "ab0x23c14d391e +12f001g101010h",
        "Test failed {test_value} != \"ab0x23c14d391e +12f001g101010h\""
    );
}

fn test {
  let test_value = {
    {
      let append_8 = "ab";
      OpFormatInt(append_8, OpAddInt(OpAddInt(1i32, 2i32), 32i32), 16i32, 0i32, 32i32, false, true);
      OpAppendText(append_8, "c");
      OpFormatInt(append_8, 12i32, 8i32, 0i32, 32i32, false, false);
      OpAppendText(append_8, "d");
      OpFormatInt(append_8, 391i32, 10i32, 0i32, 32i32, false, false);
      OpAppendText(append_8, "e");
      OpFormatInt(append_8, 12i32, 10i32, 4i32, 32i32, true, false);
      OpAppendText(append_8, "f");
      OpFormatInt(append_8, 1i32, 10i32, 3i32, 48i32, false, false);
      OpAppendText(append_8, "g");
      OpFormatInt(append_8, 42i32, 2i32, 0i32, 32i32, false, false);
      OpAppendText(append_8, "h");
      append_8;
    };
  };
  if OpEqText(test_value, "ab0x23c14d391e +12f001g101010h") {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatText(append_9, test_value, 0i32, -1i32, 32i32);
    OpAppendText(append_9, " != "ab0x23c14d391e +12f001g101010h"");
    append_9;
  })};
}

byte-code for format_expression:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: Text()
 670[52]: ConstText(_value="ab") -> text
 674[68]: AppendText(var[28], v1: text)
 677[52]: ConstInt(val=1) -> integer
 682[56]: ConstInt(val=2) -> integer
 687[60]: AddInt(v1: integer, v2: integer) -> integer
 688[56]: ConstInt(val=32) -> integer
 693[60]: AddInt(v1: integer, v2: integer) -> integer
 694[56]: ConstInt(val=0) -> integer
 699[60]: FormatInt(var[28], val: integer, radix=16, width: integer, token=32, plus=false, note=true)
 706[52]: ConstText(_value="c") -> text
 709[68]: AppendText(var[28], v1: text)
 712[52]: ConstInt(val=12) -> integer
 717[56]: ConstInt(val=0) -> integer
 722[60]: FormatInt(var[28], val: integer, radix=8, width: integer, token=32, plus=false, note=false)
 729[52]: ConstText(_value="d") -> text
 732[68]: AppendText(var[28], v1: text)
 735[52]: ConstInt(val=391) -> integer
 740[56]: ConstInt(val=0) -> integer
 745[60]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 752[52]: ConstText(_value="e") -> text
 755[68]: AppendText(var[28], v1: text)
 758[52]: ConstInt(val=12) -> integer
 763[56]: ConstInt(val=4) -> integer
 768[60]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=true, note=false)
 775[52]: ConstText(_value="f") -> text
 778[68]: AppendText(var[28], v1: text)
 781[52]: ConstInt(val=1) -> integer
 786[56]: ConstInt(val=3) -> integer
 791[60]: FormatInt(var[28], val: integer, radix=10, width: integer, token=48, plus=false, note=false)
 798[52]: ConstText(_value="g") -> text
 801[68]: AppendText(var[28], v1: text)
 804[52]: ConstInt(val=42) -> integer
 809[56]: ConstInt(val=0) -> integer
 814[60]: FormatInt(var[28], val: integer, radix=2, width: integer, token=32, plus=false, note=false)
 821[52]: ConstText(_value="h") -> text
 824[68]: AppendText(var[28], v1: text)
 827[52]: VarText(var[28]) -> text
 830[68]: GenFreeStack(value=16, discard=24)
 834[44]: AppendText(var[4], v1: text)
 837[28]: VarText(var[4]) -> text
 840[44]: ConstText(_value="ab0x23c14d391e +12f001g101010h") -> text
 872[60]: EqText(v1: text, v2: text) -> boolean
 873[29]: GenGotoFalseWord(jump=879, if_false: boolean)
 876[28]: GenGotoWord(jump=959)
 879[28]: Text()
 880[52]: ConstText(_value="Test failed ") -> text
 894[68]: AppendText(var[28], v1: text)
 897[52]: VarText(var[4]) -> text
 900[68]: ConstInt(val=0) -> integer
 905[72]: FormatText(var[28], val: text, width: integer, dir=-1, token=32)
 910[52]: ConstText(_value=" != "ab0x23c14d391e +12f001g101010h"") -> text
 948[68]: AppendText(var[28], v1: text)
 951[52]: VarText(var[28]) -> text
 954[68]: GenFreeStack(value=16, discard=24)
 958[44]: GenPanic(message: text)
 959[28]: GenReturn(ret=0, value=0, discard=28)

Execute test:
  668:[4] Text()
  669:[28] Text()
  670:[52] ConstText(_value="ab") -> "ab"[52]
  674:[68] AppendText(var[28], v1="ab"[52])
  677:[52] ConstInt(val=1) -> 1[52]
  682:[56] ConstInt(val=2) -> 2[56]
  687:[60] AddInt(v1=1[52], v2=2[56]) -> 3[52]
  688:[56] ConstInt(val=32) -> 32[56]
  693:[60] AddInt(v1=3[52], v2=32[56]) -> 35[52]
  694:[56] ConstInt(val=0) -> 0[56]
  699:[60] FormatInt(var[28], val=35[52], radix=16, width=0[56], token=32, plus=false, note=true)
  706:[52] ConstText(_value="c") -> "c"[52]
  709:[68] AppendText(var[28], v1="c"[52])
  712:[52] ConstInt(val=12) -> 12[52]
  717:[56] ConstInt(val=0) -> 0[56]
  722:[60] FormatInt(var[28], val=12[52], radix=8, width=0[56], token=32, plus=false, note=false)
  729:[52] ConstText(_value="d") -> "d"[52]
  732:[68] AppendText(var[28], v1="d"[52])
  735:[52] ConstInt(val=391) -> 391[52]
  740:[56] ConstInt(val=0) -> 0[56]
  745:[60] FormatInt(var[28], val=391[52], radix=10, width=0[56], token=32, plus=false, note=false)
  752:[52] ConstText(_value="e") -> "e"[52]
  755:[68] AppendText(var[28], v1="e"[52])
  758:[52] ConstInt(val=12) -> 12[52]
  763:[56] ConstInt(val=4) -> 4[56]
  768:[60] FormatInt(var[28], val=12[52], radix=10, width=4[56], token=32, plus=true, note=false)
  775:[52] ConstText(_value="f") -> "f"[52]
  778:[68] AppendText(var[28], v1="f"[52])
  781:[52] ConstInt(val=1) -> 1[52]
  786:[56] ConstInt(val=3) -> 3[56]
  791:[60] FormatInt(var[28], val=1[52], radix=10, width=3[56], token=48, plus=false, note=false)
  798:[52] ConstText(_value="g") -> "g"[52]
  801:[68] AppendText(var[28], v1="g"[52])
  804:[52] ConstInt(val=42) -> 42[52]
  809:[56] ConstInt(val=0) -> 0[56]
  814:[60] FormatInt(var[28], val=42[52], radix=2, width=0[56], token=32, plus=false, note=false)
  821:[52] ConstText(_value="h") -> "h"[52]
  824:[68] AppendText(var[28], v1="h"[52])
  827:[52] VarText(var[28]) -> "ab0x23c14d391e +12f001g101010h"[52]
  830:[68] GenFreeStack(value=16, discard=24)
  834:[44] AppendText(var[4], v1="ab0x23c14d391e +12f001g101010h"[28])
  837:[28] VarText(var[4]) -> "ab0x23c14d391e +12f001g101010h"[28]
  840:[44] ConstText(_value="ab0x23c14d391e +12f001g101010h") -> "ab0x23c14d391e +12f001g101010h"[44]
  872:[60] EqText(v1="ab0x23c14d391e +12f001g101010h"[28], v2="ab0x23c14d391e +12f001g101010h"[44]) -> true[28]
  873:[29] GenGotoFalseWord(jump=879, if_false=true[28])
  876:[28] GenGotoWord(jump=959)
  959:[28] GenReturn(ret=4294967295[0], value=0, discard=28)
Finished
