fn main() {#1 block
  __work_3:text = "";
  __work_2:text = "";
  __work_1:text = "";
  v:integer = 4i32;
  if OpEqText({#2 formatting string
    __work_1:text = "";
    OpFormatInt(__work_1, v, 10i32, 0i32, 32i32, false, false);
    __work_1;
  }#2:text, "4") null else OpPanic("Convert numbers to text");
  if OpEqInt(OpCastIntFromText("123"), 123i32) null else OpPanic("Convert text to number");
  if OpEqInt(OpAddInt(1i32, OpMulInt(2i32, 4i32)), 9i32) null else OpPanic("Integer calculus");
  if OpEqInt(OpSLeftInt(OpAddInt(1i32, 2i32), 2i32), 12i32) null else OpPanic("Binary shift");
  if OpEqInt(OpRemInt(105i32, 100i32), 5i32) null else OpPanic("Modulus");
  if OpEqSingle(OpPowSingle(OpConvSingleFromInt(2i32), OpConvSingleFromInt(3i32)), OpConvSingleFromInt(8i32)) null else OpPanic("Power");
  if OpEqInt(OpAddInt(1i32, _tp_integer_abs(OpMinSingleInt(2i32))), 3i32) null else OpPanic("Absolute integer");
  a:integer = OpMulInt(2i32, 2i32);
  a:integer = OpMinInt(a, 4i32);
  if OpNot(OpConvBoolFromInt(OpDivInt(12i32, a))) null else OpPanic("Null on division by zero");
  if OpEqText({#3 formatting string
    __work_2:text = "a";
    OpFormatInt(__work_2, 12i32, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2, "b");
    __work_2;
  }#3:text, "a12b") null else OpPanic("Formatting problem");
  if OpEqText({#4 formatting string
    __work_3:text = "a";
    OpFormatInt(__work_3, OpAddInt(1i32, OpMulInt(2i32, 3i32)), 16i32, 0i32, 32i32, false, true);
    OpAppendText(__work_3, "b");
    __work_3;
  }#4:text, "a0x7b") null else OpPanic("Hex formatting");
}#1

byte-code for tests/suite/03-integer.lav:main() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_3[4]:text in 1
   1[28]: Text() var=__work_2[28]:text in 1
   2[52]: Text() var=__work_1[52]:text in 1
   3[76]: ConstInt(val=4) -> integer var=v[76]:integer in 1
   8[80]: ClearText(var[52]) var=__work_1[52]:text in 1
  11[80]: ConstText(_value="") -> text
  13[96]: AppendText(var[52], v1: text)
  16[80]: VarInt(var[76]) -> integer var=v[76]:integer in 1
  19[84]: ConstInt(val=0) -> integer
  24[88]: FormatInt(var[52], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  31[80]: VarText(var[52]) -> text var=__work_1[52]:text in 1
  34[96]: ConstText(_value="4") -> text
  37[112]: EqText(v1: text, v2: text) -> boolean
  38[81]: GotoFalseWord(jump=44, if_false: boolean)
  41[80]: GotoWord(jump=70)
  44[80]: ConstText(_value="Convert numbers to text") -> text
  69[96]: Panic(message: text)
  70[80]: ConstText(_value="123") -> text
  75[96]: CastIntFromText(v1: text) -> integer
  76[84]: ConstInt(val=123) -> integer
  81[88]: EqInt(v1: integer, v2: integer) -> boolean
  82[81]: GotoFalseWord(jump=88, if_false: boolean)
  85[80]: GotoWord(jump=113)
  88[80]: ConstText(_value="Convert text to number") -> text
 112[96]: Panic(message: text)
 113[80]: ConstInt(val=1) -> integer
 118[84]: ConstInt(val=2) -> integer
 123[88]: ConstInt(val=4) -> integer
 128[92]: MulInt(v1: integer, v2: integer) -> integer
 129[88]: AddInt(v1: integer, v2: integer) -> integer
 130[84]: ConstInt(val=9) -> integer
 135[88]: EqInt(v1: integer, v2: integer) -> boolean
 136[81]: GotoFalseWord(jump=142, if_false: boolean)
 139[80]: GotoWord(jump=161)
 142[80]: ConstText(_value="Integer calculus") -> text
 160[96]: Panic(message: text)
 161[80]: ConstInt(val=1) -> integer
 166[84]: ConstInt(val=2) -> integer
 171[88]: AddInt(v1: integer, v2: integer) -> integer
 172[84]: ConstInt(val=2) -> integer
 177[88]: SLeftInt(v1: integer, v2: integer) -> integer
 178[84]: ConstInt(val=12) -> integer
 183[88]: EqInt(v1: integer, v2: integer) -> boolean
 184[81]: GotoFalseWord(jump=190, if_false: boolean)
 187[80]: GotoWord(jump=205)
 190[80]: ConstText(_value="Binary shift") -> text
 204[96]: Panic(message: text)
 205[80]: ConstInt(val=105) -> integer
 210[84]: ConstInt(val=100) -> integer
 215[88]: RemInt(v1: integer, v2: integer) -> integer
 216[84]: ConstInt(val=5) -> integer
 221[88]: EqInt(v1: integer, v2: integer) -> boolean
 222[81]: GotoFalseWord(jump=228, if_false: boolean)
 225[80]: GotoWord(jump=238)
 228[80]: ConstText(_value="Modulus") -> text
 237[96]: Panic(message: text)
 238[80]: ConstInt(val=2) -> integer
 243[84]: ConvSingleFromInt(v1: integer) -> single
 244[84]: ConstInt(val=3) -> integer
 249[88]: ConvSingleFromInt(v1: integer) -> single
 250[88]: PowSingle(v1: single, v2: single) -> single
 251[84]: ConstInt(val=8) -> integer
 256[88]: ConvSingleFromInt(v1: integer) -> single
 257[88]: EqSingle(v1: single, v2: single) -> boolean
 258[81]: GotoFalseWord(jump=264, if_false: boolean)
 261[80]: GotoWord(jump=272)
 264[80]: ConstText(_value="Power") -> text
 271[96]: Panic(message: text)
 272[80]: ConstInt(val=1) -> integer
 277[84]: ConstInt(val=2) -> integer
 282[88]: MinSingleInt(v1: integer) -> integer
 283[88]: Call(size=0, to=0)
 290[88]: AddInt(v1: integer, v2: integer) -> integer
 291[84]: ConstInt(val=3) -> integer
 296[88]: EqInt(v1: integer, v2: integer) -> boolean
 297[81]: GotoFalseWord(jump=303, if_false: boolean)
 300[80]: GotoWord(jump=322)
 303[80]: ConstText(_value="Absolute integer") -> text
 321[96]: Panic(message: text)
 322[80]: ConstInt(val=2) -> integer var=a[80]:integer in 1
 327[84]: ConstInt(val=2) -> integer
 332[88]: MulInt(v1: integer, v2: integer) -> integer
 333[84]: VarInt(var[80]) -> integer var=a[80]:integer in 1
 336[88]: ConstInt(val=4) -> integer
 341[92]: MinInt(v1: integer, v2: integer) -> integer
 342[88]: PutInt(var[80], value: integer)
 345[84]: ConstInt(val=12) -> integer
 350[88]: VarInt(var[80]) -> integer var=a[80]:integer in 1
 353[92]: DivInt(v1: integer, v2: integer) -> integer
 354[88]: ConvBoolFromInt(v1: integer) -> boolean
 355[85]: Not(v1: boolean) -> boolean
 356[85]: GotoFalseWord(jump=362, if_false: boolean)
 359[84]: GotoWord(jump=389)
 362[84]: ConstText(_value="Null on division by zero") -> text
 388[100]: Panic(message: text)
 389[84]: ClearText(var[28]) var=__work_2[28]:text in 1
 392[84]: ConstText(_value="a") -> text
 395[100]: AppendText(var[28], v1: text)
 398[84]: ConstInt(val=12) -> integer
 403[88]: ConstInt(val=0) -> integer
 408[92]: FormatInt(var[28], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 415[84]: ConstText(_value="b") -> text
 418[100]: AppendText(var[28], v1: text)
 421[84]: VarText(var[28]) -> text var=__work_2[28]:text in 1
 424[100]: ConstText(_value="a12b") -> text
 430[116]: EqText(v1: text, v2: text) -> boolean
 431[85]: GotoFalseWord(jump=437, if_false: boolean)
 434[84]: GotoWord(jump=458)
 437[84]: ConstText(_value="Formatting problem") -> text
 457[100]: Panic(message: text)
 458[84]: ClearText(var[4]) var=__work_3[4]:text in 1
 461[84]: ConstText(_value="a") -> text
 464[100]: AppendText(var[4], v1: text)
 467[84]: ConstInt(val=1) -> integer
 472[88]: ConstInt(val=2) -> integer
 477[92]: ConstInt(val=3) -> integer
 482[96]: MulInt(v1: integer, v2: integer) -> integer
 483[92]: AddInt(v1: integer, v2: integer) -> integer
 484[88]: ConstInt(val=0) -> integer
 489[92]: FormatInt(var[4], val: integer, radix=16, width: integer, token=32, plus=false, note=true)
 496[84]: ConstText(_value="b") -> text
 499[100]: AppendText(var[4], v1: text)
 502[84]: VarText(var[4]) -> text var=__work_3[4]:text in 1
 505[100]: ConstText(_value="a0x7b") -> text
 512[116]: EqText(v1: text, v2: text) -> boolean
 513[85]: GotoFalseWord(jump=519, if_false: boolean)
 516[84]: GotoWord(jump=536)
 519[84]: ConstText(_value="Hex formatting") -> text
 535[100]: Panic(message: text)
 536[84]: FreeText(var[52])
 539[84]: FreeText(var[28])
 542[84]: FreeText(var[4])
 545[84]: Return(ret=0, value=0, discard=84)

