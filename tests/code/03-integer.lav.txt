fn main() {#block(1):void
  __work_3(1):text = "";
  __work_2(1):text = "";
  __work_1(1):text = "";
  v(1):integer = 4i32;
  if OpEqText({#Formatted string(2):text
    __work_1(1):text = "";
    OpFormatInt(__work_1(1), v(1), 10i32, 0i32, 32i32, false, false);
    __work_1(1);
  }#Formatted string(2):text, "4") null else OpPanic("Convert numbers to text");
  if OpEqInt(OpCastIntFromText("123"), 123i32) null else OpPanic("Convert text to number");
  if OpEqInt(OpAddInt(1i32, OpMulInt(2i32, 4i32)), 9i32) null else OpPanic("Integer calculus");
  if OpEqInt(OpSLeftInt(OpAddInt(1i32, 2i32), 2i32), 12i32) null else OpPanic("Binary shift");
  if OpEqInt(OpRemInt(105i32, 100i32), 5i32) null else OpPanic("Modulus");
  if OpEqSingle(OpPowSingle(OpConvSingleFromInt(2i32), OpConvSingleFromInt(3i32)), OpConvSingleFromInt(8i32)) null else OpPanic("Power");
  if OpEqInt(OpAddInt(1i32, _tp_integer_abs(OpMinSingleInt(2i32))), 3i32) null else OpPanic("Absolute integer");
  a(1):integer = OpMulInt(2i32, 2i32);
  a(1):integer = OpMinInt(a(1), 4i32);
  if OpNot(OpConvBoolFromInt(OpDivInt(12i32, a(1)))) null else OpPanic("Null on division by zero");
  if OpEqText({#Formatted string(3):text
    __work_2(1):text = "a";
    OpFormatInt(__work_2(1), 12i32, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_2(1), "b");
    __work_2(1);
  }#Formatted string(3):text, "a12b") null else OpPanic("Formatting problem");
  if OpEqText({#Formatted string(4):text
    __work_3(1):text = "a";
    OpFormatInt(__work_3(1), OpAddInt(1i32, OpMulInt(2i32, 3i32)), 16i32, 0i32, 32i32, false, true);
    OpAppendText(__work_3(1), "b");
    __work_3(1);
  }#Formatted string(4):text, "a0x7b") null else OpPanic("Hex formatting");
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
  OpFreeText(__work_3(1));
}#block(1):void

byte-code for tests/suite/03-integer.lav:main() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_3[8]:text
   1[32]: Text() var=__work_2[32]:text
   2[56]: Text() var=__work_1[56]:text
   3[80]: ConstInt(val=4) -> integer var=v[80]:integer
   8[84]: ClearText(var[56]) var=__work_1[56]:text
  11[84]: ConstText(_value="") -> text
  13[100]: AppendText(var[56], v1: text)
  16[84]: VarInt(var[80]) -> integer var=v[80]:integer
  19[88]: ConstInt(val=0) -> integer
  24[92]: FormatInt(var[56], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  31[84]: VarText(var[56]) -> text var=__work_1[56]:text
  34[100]: ConstText(_value="4") -> text
  37[116]: EqText(v1: text, v2: text) -> boolean
  38[85]: GotoFalseWord(jump=44, if_false: boolean)
  41[84]: GotoWord(jump=70)
  44[84]: ConstText(_value="Convert numbers to text") -> text
  69[100]: Panic(message: text)
  70[84]: ConstText(_value="123") -> text
  75[100]: CastIntFromText(v1: text) -> integer
  76[88]: ConstInt(val=123) -> integer
  81[92]: EqInt(v1: integer, v2: integer) -> boolean
  82[85]: GotoFalseWord(jump=88, if_false: boolean)
  85[84]: GotoWord(jump=113)
  88[84]: ConstText(_value="Convert text to number") -> text
 112[100]: Panic(message: text)
 113[84]: ConstInt(val=1) -> integer
 118[88]: ConstInt(val=2) -> integer
 123[92]: ConstInt(val=4) -> integer
 128[96]: MulInt(v1: integer, v2: integer) -> integer
 129[92]: AddInt(v1: integer, v2: integer) -> integer
 130[88]: ConstInt(val=9) -> integer
 135[92]: EqInt(v1: integer, v2: integer) -> boolean
 136[85]: GotoFalseWord(jump=142, if_false: boolean)
 139[84]: GotoWord(jump=161)
 142[84]: ConstText(_value="Integer calculus") -> text
 160[100]: Panic(message: text)
 161[84]: ConstInt(val=1) -> integer
 166[88]: ConstInt(val=2) -> integer
 171[92]: AddInt(v1: integer, v2: integer) -> integer
 172[88]: ConstInt(val=2) -> integer
 177[92]: SLeftInt(v1: integer, v2: integer) -> integer
 178[88]: ConstInt(val=12) -> integer
 183[92]: EqInt(v1: integer, v2: integer) -> boolean
 184[85]: GotoFalseWord(jump=190, if_false: boolean)
 187[84]: GotoWord(jump=205)
 190[84]: ConstText(_value="Binary shift") -> text
 204[100]: Panic(message: text)
 205[84]: ConstInt(val=105) -> integer
 210[88]: ConstInt(val=100) -> integer
 215[92]: RemInt(v1: integer, v2: integer) -> integer
 216[88]: ConstInt(val=5) -> integer
 221[92]: EqInt(v1: integer, v2: integer) -> boolean
 222[85]: GotoFalseWord(jump=228, if_false: boolean)
 225[84]: GotoWord(jump=238)
 228[84]: ConstText(_value="Modulus") -> text
 237[100]: Panic(message: text)
 238[84]: ConstInt(val=2) -> integer
 243[88]: ConvSingleFromInt(v1: integer) -> single
 244[88]: ConstInt(val=3) -> integer
 249[92]: ConvSingleFromInt(v1: integer) -> single
 250[92]: PowSingle(v1: single, v2: single) -> single
 251[88]: ConstInt(val=8) -> integer
 256[92]: ConvSingleFromInt(v1: integer) -> single
 257[92]: EqSingle(v1: single, v2: single) -> boolean
 258[85]: GotoFalseWord(jump=264, if_false: boolean)
 261[84]: GotoWord(jump=272)
 264[84]: ConstText(_value="Power") -> text
 271[100]: Panic(message: text)
 272[84]: ConstInt(val=1) -> integer
 277[88]: ConstInt(val=2) -> integer
 282[92]: MinSingleInt(v1: integer) -> integer
 283[92]: Call(size=0, to=0)
 290[92]: AddInt(v1: integer, v2: integer) -> integer
 291[88]: ConstInt(val=3) -> integer
 296[92]: EqInt(v1: integer, v2: integer) -> boolean
 297[85]: GotoFalseWord(jump=303, if_false: boolean)
 300[84]: GotoWord(jump=322)
 303[84]: ConstText(_value="Absolute integer") -> text
 321[100]: Panic(message: text)
 322[84]: ConstInt(val=2) -> integer var=a[84]:integer
 327[88]: ConstInt(val=2) -> integer
 332[92]: MulInt(v1: integer, v2: integer) -> integer
 333[88]: VarInt(var[84]) -> integer var=a[84]:integer
 336[92]: ConstInt(val=4) -> integer
 341[96]: MinInt(v1: integer, v2: integer) -> integer
 342[92]: PutInt(var[84], value: integer)
 345[88]: ConstInt(val=12) -> integer
 350[92]: VarInt(var[84]) -> integer var=a[84]:integer
 353[96]: DivInt(v1: integer, v2: integer) -> integer
 354[92]: ConvBoolFromInt(v1: integer) -> boolean
 355[89]: Not(v1: boolean) -> boolean
 356[89]: GotoFalseWord(jump=362, if_false: boolean)
 359[88]: GotoWord(jump=389)
 362[88]: ConstText(_value="Null on division by zero") -> text
 388[104]: Panic(message: text)
 389[88]: ClearText(var[32]) var=__work_2[32]:text
 392[88]: ConstText(_value="a") -> text
 395[104]: AppendText(var[32], v1: text)
 398[88]: ConstInt(val=12) -> integer
 403[92]: ConstInt(val=0) -> integer
 408[96]: FormatInt(var[32], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 415[88]: ConstText(_value="b") -> text
 418[104]: AppendText(var[32], v1: text)
 421[88]: VarText(var[32]) -> text var=__work_2[32]:text
 424[104]: ConstText(_value="a12b") -> text
 430[120]: EqText(v1: text, v2: text) -> boolean
 431[89]: GotoFalseWord(jump=437, if_false: boolean)
 434[88]: GotoWord(jump=458)
 437[88]: ConstText(_value="Formatting problem") -> text
 457[104]: Panic(message: text)
 458[88]: ClearText(var[8]) var=__work_3[8]:text
 461[88]: ConstText(_value="a") -> text
 464[104]: AppendText(var[8], v1: text)
 467[88]: ConstInt(val=1) -> integer
 472[92]: ConstInt(val=2) -> integer
 477[96]: ConstInt(val=3) -> integer
 482[100]: MulInt(v1: integer, v2: integer) -> integer
 483[96]: AddInt(v1: integer, v2: integer) -> integer
 484[92]: ConstInt(val=0) -> integer
 489[96]: FormatInt(var[8], val: integer, radix=16, width: integer, token=32, plus=false, note=true)
 496[88]: ConstText(_value="b") -> text
 499[104]: AppendText(var[8], v1: text)
 502[88]: VarText(var[8]) -> text var=__work_3[8]:text
 505[104]: ConstText(_value="a0x7b") -> text
 512[120]: EqText(v1: text, v2: text) -> boolean
 513[89]: GotoFalseWord(jump=519, if_false: boolean)
 516[88]: GotoWord(jump=536)
 519[88]: ConstText(_value="Hex formatting") -> text
 535[104]: Panic(message: text)
 536[88]: FreeText(var[56])
 539[88]: FreeText(var[32])
 542[88]: FreeText(var[8])
 545[88]: Return(ret=0, value=0, discard=84)

