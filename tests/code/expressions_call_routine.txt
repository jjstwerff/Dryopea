fn routine(a: integer) -> integer {if a > 4 {return a+1} else {return 1}; 2}

pub fn test() {
    test_value = {routine(5) + routine(2)};
    assert(
        test_value == 7,
        "Test failed {test_value} != 7"
    );
}
fn routine(a:integer) -> integer {#block_1:integer
  if OpGtInt(a, 4i32) {#block_2:void
    return OpAddInt(a, 1i32);
  }#block_2:void else {#block_3:void
    return 1i32;
  }#block_3:void;
  2i32;
}#block_1:integer

byte-code for call_routine:routine(a: integer[4]) [1168] -> integer
   0[8]: return-address
   0[12]: VarInt(var[4]) -> integer var=a[4]:integer
   3[16]: ConstInt(val=4) -> integer
   8[20]: GtInt(v1: integer, v2: integer) -> boolean
   9[13]: GotoFalseWord(jump=34, if_false: boolean)
  12[12]: VarInt(var[4]) -> integer var=a[4]:integer
  15[16]: ConstInt(val=1) -> integer
  20[20]: AddInt(v1: integer, v2: integer) -> integer
  21[16]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
  27[16]: FreeStack(value=0, discard=4)
  31[12]: GotoWord(jump=49)
  34[12]: ConstInt(val=1) -> integer
  39[16]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
  45[16]: FreeStack(value=0, discard=4)
  49[12]: ConstInt(val=2) -> integer
  54[16]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    OpAddInt(routine(5i32), routine(2i32));
  }#block_2:integer;
  if OpEqInt(test_value, 7i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 7");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for call_routine:test() [1228]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=5) -> integer var=test_value[32]:integer
   6[36]: Call(size=0, to=1168)
  13[36]: ConstInt(val=2) -> integer
  18[40]: Call(size=0, to=1168)
  25[40]: AddInt(v1: integer, v2: integer) -> integer
  26[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  29[40]: ConstInt(val=7) -> integer
  34[44]: EqInt(v1: integer, v2: integer) -> boolean
  35[37]: GotoFalseWord(jump=41, if_false: boolean)
  38[36]: GotoWord(jump=90)
  41[36]: ClearText(var[8]) var=__work_1[8]:text
  44[36]: ConstText(_value="Test failed ") -> text
  58[52]: AppendText(var[8], v1: text)
  61[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  64[40]: ConstInt(val=0) -> integer
  69[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  76[36]: ConstText(_value=" != 7") -> text
  83[52]: AppendText(var[8], v1: text)
  86[36]: VarText(var[8]) -> text var=__work_1[8]:text
  89[52]: Panic(message: text)
  90[36]: FreeText(var[8])
  93[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=5) -> 5[32]
    6:[36] Call(size=0, to=1168)
 1168:[40] VarInt(var[32]) -> 5[40]
 1171:[44] ConstInt(val=4) -> 4[44]
 1176:[48] GtInt(v1=5[40], v2=4[44]) -> true[40]
 1177:[41] GotoFalseWord(jump=1202, if_false=true[40])
 1180:[40] VarInt(var[32]) -> 5[40]
 1183:[44] ConstInt(val=1) -> 1[44]
 1188:[48] AddInt(v1=5[40], v2=1[44]) -> 6[40]
 1189:[44] Return(ret=1241[36], value=4, discard=12) -> 6[32]
   13:[36] ConstInt(val=2) -> 2[36]
   18:[40] Call(size=0, to=1168)
 1168:[44] VarInt(var[36]) -> 2[44]
 1171:[48] ConstInt(val=4) -> 4[48]
 1176:[52] GtInt(v1=2[44], v2=4[48]) -> false[44]
 1177:[45] GotoFalseWord(jump=1202, if_false=false[44])
 1202:[44] ConstInt(val=1) -> 1[44]
 1207:[48] Return(ret=1253[40], value=4, discard=12) -> 1[36]
   25:[40] AddInt(v1=6[32], v2=1[36]) -> 7[32]
   26:[36] VarInt(var[32]) -> 7[36]
   29:[40] ConstInt(val=7) -> 7[40]
   34:[44] EqInt(v1=7[36], v2=7[40]) -> true[36]
   35:[37] GotoFalseWord(jump=1269, if_false=true[36])
   38:[36] GotoWord(jump=1318)
   90:[36] FreeText(var[8])
   93:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
