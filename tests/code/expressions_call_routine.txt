fn routine(a: integer) -> integer {if a > 4 {return a+1} else {return 1}; 2}

pub fn test() {
    test_value = {routine(5) + routine(2)};
    assert(
        test_value == 7,
        "Test failed {test_value} != 7"
    );
}
fn routine(a:integer) -> integer {#1 block
  if OpGtInt(a, 4i32) {#2 block
    return OpAddInt(a, 1i32);
  }#2 else {#3 block
    return 1i32;
  }#3;
  2i32;
}#1:integer

byte-code for call_routine:routine(a: integer[0]) -> integer
 675[4]: return-address
 675[8]: VarInt(var[0]) -> integer
 678[12]: ConstInt(val=4) -> integer
 683[16]: GtInt(v1: integer, v2: integer) -> boolean
 684[9]: GotoFalseWord(jump=709, if_false: boolean)
 687[8]: VarInt(var[0]) -> integer
 690[12]: ConstInt(val=1) -> integer
 695[16]: AddInt(v1: integer, v2: integer) -> integer
 696[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
 702[12]: FreeStack(value=0, discard=4)
 706[8]: GotoWord(jump=724)
 709[8]: ConstInt(val=1) -> integer
 714[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
 720[12]: FreeStack(value=0, discard=4)
 724[8]: ConstInt(val=2) -> integer
 729[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  let __work_1:text = "";
  let test_value:integer = {#2 block
    OpAddInt(routine(5i32), routine(2i32));
  }#2:integer;
  if OpEqInt(test_value, 7i32) null else OpPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 7");
    __work_1;
  }#3:text);
}#1

byte-code for call_routine:test()
 735[0]: return-address
 735[4]: Text()
 736[28]: ConstInt(val=5) -> integer
 741[32]: Call(size=0, to=675)
 748[32]: ConstInt(val=2) -> integer
 753[36]: Call(size=0, to=675)
 760[36]: AddInt(v1: integer, v2: integer) -> integer
 761[32]: VarInt(var[28]) -> integer
 764[36]: ConstInt(val=7) -> integer
 769[40]: EqInt(v1: integer, v2: integer) -> boolean
 770[33]: GotoFalseWord(jump=776, if_false: boolean)
 773[32]: GotoWord(jump=825)
 776[32]: ClearText(var[4])
 779[32]: ConstText(_value="Test failed ") -> text
 793[48]: AppendText(var[4], v1: text)
 796[32]: VarInt(var[28]) -> integer
 799[36]: ConstInt(val=0) -> integer
 804[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 811[32]: ConstText(_value=" != 7") -> text
 818[48]: AppendText(var[4], v1: text)
 821[32]: VarText(var[4]) -> text
 824[48]: Panic(message: text)
 825[32]: Return(ret=0, value=0, discard=32)

Execute test:
  735:[8] Text()
  736:[32] ConstInt(val=5) -> 5[32]
  741:[36] Call(size=0, to=675)
  675:[40] VarInt(var[32]) -> 5[40]
  678:[44] ConstInt(val=4) -> 4[44]
  683:[48] GtInt(v1=5[40], v2=4[44]) -> true[40]
  684:[41] GotoFalseWord(jump=709, if_false=true[40])
  687:[40] VarInt(var[32]) -> 5[40]
  690:[44] ConstInt(val=1) -> 1[44]
  695:[48] AddInt(v1=5[40], v2=1[44]) -> 6[40]
  696:[44] Return(ret=748[36], value=4, discard=12) -> 6[32]
  748:[36] ConstInt(val=2) -> 2[36]
  753:[40] Call(size=0, to=675)
  675:[44] VarInt(var[36]) -> 2[44]
  678:[48] ConstInt(val=4) -> 4[48]
  683:[52] GtInt(v1=2[44], v2=4[48]) -> false[44]
  684:[45] GotoFalseWord(jump=709, if_false=false[44])
  709:[44] ConstInt(val=1) -> 1[44]
  714:[48] Return(ret=760[40], value=4, discard=12) -> 1[36]
  760:[40] AddInt(v1=6[32], v2=1[36]) -> 7[32]
  761:[36] VarInt(var[32]) -> 7[36]
  764:[40] ConstInt(val=7) -> 7[40]
  769:[44] EqInt(v1=7[36], v2=7[40]) -> true[36]
  770:[37] GotoFalseWord(jump=776, if_false=true[36])
  773:[36] GotoWord(jump=825)
  825:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
