fn routine(a: integer) -> integer {if a > 4 {return a+1} else {return 1}; 2}

pub fn test() {
    test_value = {routine(5) + routine(2)};
    assert(
        test_value == 7,
        "Test failed {test_value} != 7"
    );
}
fn routine(a:integer) -> integer {#1 block
  if OpGtInt(a, 4i32) {#2 block
    return OpAddInt(a, 1i32);
  }#2 else {#3 block
    return 1i32;
  }#3;
  2i32;
}#1:integer

byte-code for call_routine:routine(a: integer[0]) -> integer
 682[4]: return-address
 682[8]: VarInt(var[0]) -> integer
 685[12]: ConstInt(val=4) -> integer
 690[16]: GtInt(v1: integer, v2: integer) -> boolean
 691[9]: GotoFalseWord(jump=716, if_false: boolean)
 694[8]: VarInt(var[0]) -> integer
 697[12]: ConstInt(val=1) -> integer
 702[16]: AddInt(v1: integer, v2: integer) -> integer
 703[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
 709[12]: FreeStack(value=0, discard=4)
 713[8]: GotoWord(jump=731)
 716[8]: ConstInt(val=1) -> integer
 721[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
 727[12]: FreeStack(value=0, discard=4)
 731[8]: ConstInt(val=2) -> integer
 736[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(routine(5i32), routine(2i32));
  }#2:integer;
  if OpEqInt(test_value, 7i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 7");
    __work_1;
  }#3:text);
}#1

byte-code for call_routine:test()
 742[0]: return-address
 742[4]: Text()
 743[28]: ConstInt(val=5) -> integer
 748[32]: Call(size=0, to=682)
 755[32]: ConstInt(val=2) -> integer
 760[36]: Call(size=0, to=682)
 767[36]: AddInt(v1: integer, v2: integer) -> integer
 768[32]: VarInt(var[28]) -> integer
 771[36]: ConstInt(val=7) -> integer
 776[40]: EqInt(v1: integer, v2: integer) -> boolean
 777[33]: GotoFalseWord(jump=783, if_false: boolean)
 780[32]: GotoWord(jump=832)
 783[32]: ClearText(var[4])
 786[32]: ConstText(_value="Test failed ") -> text
 800[48]: AppendText(var[4], v1: text)
 803[32]: VarInt(var[28]) -> integer
 806[36]: ConstInt(val=0) -> integer
 811[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 818[32]: ConstText(_value=" != 7") -> text
 825[48]: AppendText(var[4], v1: text)
 828[32]: VarText(var[4]) -> text
 831[48]: Panic(message: text)
 832[32]: Return(ret=0, value=0, discard=32)

Execute test:
  742:[8] Text()
  743:[32] ConstInt(val=5) -> 5[32]
  748:[36] Call(size=0, to=682)
  682:[40] VarInt(var[32]) -> 5[40]
  685:[44] ConstInt(val=4) -> 4[44]
  690:[48] GtInt(v1=5[40], v2=4[44]) -> true[40]
  691:[41] GotoFalseWord(jump=716, if_false=true[40])
  694:[40] VarInt(var[32]) -> 5[40]
  697:[44] ConstInt(val=1) -> 1[44]
  702:[48] AddInt(v1=5[40], v2=1[44]) -> 6[40]
  703:[44] Return(ret=755[36], value=4, discard=12) -> 6[32]
  755:[36] ConstInt(val=2) -> 2[36]
  760:[40] Call(size=0, to=682)
  682:[44] VarInt(var[36]) -> 2[44]
  685:[48] ConstInt(val=4) -> 4[48]
  690:[52] GtInt(v1=2[44], v2=4[48]) -> false[44]
  691:[45] GotoFalseWord(jump=716, if_false=false[44])
  716:[44] ConstInt(val=1) -> 1[44]
  721:[48] Return(ret=767[40], value=4, discard=12) -> 1[36]
  767:[40] AddInt(v1=6[32], v2=1[36]) -> 7[32]
  768:[36] VarInt(var[32]) -> 7[36]
  771:[40] ConstInt(val=7) -> 7[40]
  776:[44] EqInt(v1=7[36], v2=7[40]) -> true[36]
  777:[37] GotoFalseWord(jump=783, if_false=true[36])
  780:[36] GotoWord(jump=832)
  832:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
