fn routine(a: integer) -> integer {if a > 4 {return a+1} else {return 1}; 2}

pub fn test() {
    test_value = {routine(5) + routine(2)};
    assert(
        test_value == 7,
        "Test failed {test_value} != 7"
    );
}
fn routine(a:integer) -> integer {#1 block
  if OpGtInt(a, 4i32) {#2 block
    return OpAddInt(a, 1i32);
  }#2 else {#3 block
    return 1i32;
  }#3;
  2i32;
}#1:integer

byte-code for call_routine:routine(a: integer[0]) [1073] -> integer
   0[4]: return-address
   0[8]: VarInt(var[0]) -> integer var=a[0]:integer in 0
   3[12]: ConstInt(val=4) -> integer
   8[16]: GtInt(v1: integer, v2: integer) -> boolean
   9[9]: GotoFalseWord(jump=34, if_false: boolean)
  12[8]: VarInt(var[0]) -> integer var=a[0]:integer in 0
  15[12]: ConstInt(val=1) -> integer
  20[16]: AddInt(v1: integer, v2: integer) -> integer
  21[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
  27[12]: FreeStack(value=0, discard=4)
  31[8]: GotoWord(jump=49)
  34[8]: ConstInt(val=1) -> integer
  39[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
  45[12]: FreeStack(value=0, discard=4)
  49[8]: ConstInt(val=2) -> integer
  54[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(routine(5i32), routine(2i32));
  }#2:integer;
  if OpEqInt(test_value, 7i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 7");
    __work_1;
  }#3:text);
}#1

byte-code for call_routine:test() [1133]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=5) -> integer var=test_value[28]:integer in 1
   6[32]: Call(size=0, to=1073)
  13[32]: ConstInt(val=2) -> integer
  18[36]: Call(size=0, to=1073)
  25[36]: AddInt(v1: integer, v2: integer) -> integer
  26[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  29[36]: ConstInt(val=7) -> integer
  34[40]: EqInt(v1: integer, v2: integer) -> boolean
  35[33]: GotoFalseWord(jump=41, if_false: boolean)
  38[32]: GotoWord(jump=90)
  41[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  44[32]: ConstText(_value="Test failed ") -> text
  58[48]: AppendText(var[4], v1: text)
  61[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  64[36]: ConstInt(val=0) -> integer
  69[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  76[32]: ConstText(_value=" != 7") -> text
  83[48]: AppendText(var[4], v1: text)
  86[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  89[48]: Panic(message: text)
  90[32]: FreeText(var[4])
  93[32]: Return(ret=0, value=0, discard=32)

