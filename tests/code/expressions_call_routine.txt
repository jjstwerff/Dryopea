fn routine(a: integer) -> integer {if a > 4 {return a+1} else {return 1}; 2}

pub fn test() {
    test_value = {routine(5) + routine(2)};
    assert(
        test_value == 7,
        "Test failed {test_value} != 7"
    );
}
fn routine(a:integer) -> integer {#1 block
  if OpGtInt(a, 4i32) {#2 block
    return OpAddInt(a, 1i32);
  }#2 else {#3 block
    return 1i32;
  }#3;
  2i32;
}#1:integer

byte-code for call_routine:routine(a: integer[0]) -> integer
 692[4]: return-address
 692[8]: VarInt(var[0]) -> integer
 695[12]: ConstInt(val=4) -> integer
 700[16]: GtInt(v1: integer, v2: integer) -> boolean
 701[9]: GotoFalseWord(jump=726, if_false: boolean)
 704[8]: VarInt(var[0]) -> integer
 707[12]: ConstInt(val=1) -> integer
 712[16]: AddInt(v1: integer, v2: integer) -> integer
 713[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
 719[12]: FreeStack(value=0, discard=4)
 723[8]: GotoWord(jump=741)
 726[8]: ConstInt(val=1) -> integer
 731[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
 737[12]: FreeStack(value=0, discard=4)
 741[8]: ConstInt(val=2) -> integer
 746[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(routine(5i32), routine(2i32));
  }#2:integer;
  if OpEqInt(test_value, 7i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 7");
    __work_1;
  }#3:text);
}#1

byte-code for call_routine:test()
 752[0]: return-address
 752[4]: Text()
 753[28]: ConstInt(val=5) -> integer
 758[32]: Call(size=0, to=692)
 765[32]: ConstInt(val=2) -> integer
 770[36]: Call(size=0, to=692)
 777[36]: AddInt(v1: integer, v2: integer) -> integer
 778[32]: VarInt(var[28]) -> integer
 781[36]: ConstInt(val=7) -> integer
 786[40]: EqInt(v1: integer, v2: integer) -> boolean
 787[33]: GotoFalseWord(jump=793, if_false: boolean)
 790[32]: GotoWord(jump=842)
 793[32]: ClearText(var[4])
 796[32]: ConstText(_value="Test failed ") -> text
 810[48]: AppendText(var[4], v1: text)
 813[32]: VarInt(var[28]) -> integer
 816[36]: ConstInt(val=0) -> integer
 821[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 828[32]: ConstText(_value=" != 7") -> text
 835[48]: AppendText(var[4], v1: text)
 838[32]: VarText(var[4]) -> text
 841[48]: Panic(message: text)
 842[32]: Return(ret=0, value=0, discard=32)

Execute test:
  752:[8] Text()
  753:[32] ConstInt(val=5) -> 5[32]
  758:[36] Call(size=0, to=692)
  692:[40] VarInt(var[32]) -> 5[40]
  695:[44] ConstInt(val=4) -> 4[44]
  700:[48] GtInt(v1=5[40], v2=4[44]) -> true[40]
  701:[41] GotoFalseWord(jump=726, if_false=true[40])
  704:[40] VarInt(var[32]) -> 5[40]
  707:[44] ConstInt(val=1) -> 1[44]
  712:[48] AddInt(v1=5[40], v2=1[44]) -> 6[40]
  713:[44] Return(ret=765[36], value=4, discard=12) -> 6[32]
  765:[36] ConstInt(val=2) -> 2[36]
  770:[40] Call(size=0, to=692)
  692:[44] VarInt(var[36]) -> 2[44]
  695:[48] ConstInt(val=4) -> 4[48]
  700:[52] GtInt(v1=2[44], v2=4[48]) -> false[44]
  701:[45] GotoFalseWord(jump=726, if_false=false[44])
  726:[44] ConstInt(val=1) -> 1[44]
  731:[48] Return(ret=777[40], value=4, discard=12) -> 1[36]
  777:[40] AddInt(v1=6[32], v2=1[36]) -> 7[32]
  778:[36] VarInt(var[32]) -> 7[36]
  781:[40] ConstInt(val=7) -> 7[40]
  786:[44] EqInt(v1=7[36], v2=7[40]) -> true[36]
  787:[37] GotoFalseWord(jump=793, if_false=true[36])
  790:[36] GotoWord(jump=842)
  842:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
