fn routine(a: integer) -> integer {if a > 4 {return a+1} else {return 1}; 2}

pub fn test() {
    test_value = {routine(5) + routine(2)};
    assert(
        test_value == 7,
        "Test failed {test_value} != 7"
    );
}
fn routine(a:integer) -> integer {#1 block
  if OpGtInt(a, 4i32) {#2 block
    return OpAddInt(a, 1i32);
  }#2 else {#3 block
    return 1i32;
  }#3;
  2i32;
}#1:integer

byte-code for call_routine:routine(a: integer[0]) -> integer
 691[4]: return-address
 691[8]: VarInt(var[0]) -> integer
 694[12]: ConstInt(val=4) -> integer
 699[16]: GtInt(v1: integer, v2: integer) -> boolean
 700[9]: GotoFalseWord(jump=725, if_false: boolean)
 703[8]: VarInt(var[0]) -> integer
 706[12]: ConstInt(val=1) -> integer
 711[16]: AddInt(v1: integer, v2: integer) -> integer
 712[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
 718[12]: FreeStack(value=0, discard=4)
 722[8]: GotoWord(jump=740)
 725[8]: ConstInt(val=1) -> integer
 730[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]
 736[12]: FreeStack(value=0, discard=4)
 740[8]: ConstInt(val=2) -> integer
 745[12]: Return(ret=4, value=4, discard=12) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpAddInt(routine(5i32), routine(2i32));
  }#2:integer;
  if OpEqInt(test_value, 7i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 7");
    __work_1;
  }#3:text);
}#1

byte-code for call_routine:test()
 751[0]: return-address
 751[4]: Text()
 752[28]: ConstInt(val=5) -> integer
 757[32]: Call(size=0, to=691)
 764[32]: ConstInt(val=2) -> integer
 769[36]: Call(size=0, to=691)
 776[36]: AddInt(v1: integer, v2: integer) -> integer
 777[32]: VarInt(var[28]) -> integer
 780[36]: ConstInt(val=7) -> integer
 785[40]: EqInt(v1: integer, v2: integer) -> boolean
 786[33]: GotoFalseWord(jump=792, if_false: boolean)
 789[32]: GotoWord(jump=841)
 792[32]: ClearText(var[4])
 795[32]: ConstText(_value="Test failed ") -> text
 809[48]: AppendText(var[4], v1: text)
 812[32]: VarInt(var[28]) -> integer
 815[36]: ConstInt(val=0) -> integer
 820[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 827[32]: ConstText(_value=" != 7") -> text
 834[48]: AppendText(var[4], v1: text)
 837[32]: VarText(var[4]) -> text
 840[48]: Panic(message: text)
 841[32]: FreeText(var[4])
 844[32]: Return(ret=0, value=0, discard=32)

Execute test:
  751:[8] Text()
  752:[32] ConstInt(val=5) -> 5[32]
  757:[36] Call(size=0, to=691)
  691:[40] VarInt(var[32]) -> 5[40]
  694:[44] ConstInt(val=4) -> 4[44]
  699:[48] GtInt(v1=5[40], v2=4[44]) -> true[40]
  700:[41] GotoFalseWord(jump=725, if_false=true[40])
  703:[40] VarInt(var[32]) -> 5[40]
  706:[44] ConstInt(val=1) -> 1[44]
  711:[48] AddInt(v1=5[40], v2=1[44]) -> 6[40]
  712:[44] Return(ret=764[36], value=4, discard=12) -> 6[32]
  764:[36] ConstInt(val=2) -> 2[36]
  769:[40] Call(size=0, to=691)
  691:[44] VarInt(var[36]) -> 2[44]
  694:[48] ConstInt(val=4) -> 4[48]
  699:[52] GtInt(v1=2[44], v2=4[48]) -> false[44]
  700:[45] GotoFalseWord(jump=725, if_false=false[44])
  725:[44] ConstInt(val=1) -> 1[44]
  730:[48] Return(ret=776[40], value=4, discard=12) -> 1[36]
  776:[40] AddInt(v1=6[32], v2=1[36]) -> 7[32]
  777:[36] VarInt(var[32]) -> 7[36]
  780:[40] ConstInt(val=7) -> 7[40]
  785:[44] EqInt(v1=7[36], v2=7[40]) -> true[36]
  786:[37] GotoFalseWord(jump=792, if_false=true[36])
  789:[36] GotoWord(jump=841)
  841:[36] FreeText(var[8])
  844:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
