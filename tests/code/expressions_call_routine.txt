Test code:
fn routine(a: integer) -> integer {if a > 4 {return a+1} else {return 1}; 2}

pub fn test() {
    test_value = {routine(5) + routine(2)};
    assert(
        test_value == 7,
        "Test failed {test_value} != 7"
    );
}

fn routine {
  if OpGtInt(a, 4i32) {{
    return OpAddInt(a, 1i32);
  }} else {{
    return 1i32;
  }};
  2i32;
}

byte-code for call_routine:routine(a: integer[0]) -> integer
 668[4]: return-address
 668[8]: VarInt(var[0]) -> integer
 671[12]: ConstInt(val=4) -> integer
 676[16]: GtInt(v1: integer, v2: integer) -> boolean
 677[9]: GenGotoFalseWord(jump=702, if_false: boolean)
 680[8]: VarInt(var[0]) -> integer
 683[12]: ConstInt(val=1) -> integer
 688[16]: AddInt(v1: integer, v2: integer) -> integer
 689[12]: GenReturn(ret=4, value=4, discard=12)
 695[12]: GenFreeStack(value=0, discard=4)
 699[8]: GenGotoWord(jump=717)
 702[8]: ConstInt(val=1) -> integer
 707[12]: GenReturn(ret=4, value=4, discard=12)
 713[12]: GenFreeStack(value=0, discard=4)
 717[8]: ConstInt(val=2) -> integer
 722[12]: GenReturn(ret=4, value=4, discard=12)

fn test {
  let __work_1 = "";
  let test_value = {
    OpAddInt(routine(5i32), routine(2i32));
  };
  if OpEqInt(test_value, 7i32) {null} else {OpGenPanic({
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 7");
    __work_1;
  })};
}

byte-code for call_routine:test()
 728[0]: return-address
 728[4]: Text()
 729[28]: ConstText(_value="") -> text(false)
 731[44]: AppendText(var[4], v1: text(false))
 734[28]: ConstInt(val=5) -> integer
 739[32]: GenCall(size=0, to=668)
 746[32]: ConstInt(val=2) -> integer
 751[36]: GenCall(size=0, to=668)
 758[36]: AddInt(v1: integer, v2: integer) -> integer
 759[32]: VarInt(var[28]) -> integer
 762[36]: ConstInt(val=7) -> integer
 767[40]: EqInt(v1: integer, v2: integer) -> boolean
 768[33]: GenGotoFalseWord(jump=774, if_false: boolean)
 771[32]: GenGotoWord(jump=823)
 774[32]: ClearText(var[4])
 777[32]: ConstText(_value="Test failed ") -> text(false)
 791[48]: AppendText(var[4], v1: text(false))
 794[32]: VarInt(var[28]) -> integer
 797[36]: ConstInt(val=0) -> integer
 802[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 809[32]: ConstText(_value=" != 7") -> text(false)
 816[48]: AppendText(var[4], v1: text(false))
 819[32]: VarText(var[4]) -> text(false)
 822[48]: GenPanic(message: text(false))
 823[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  728:[8] Text()
  729:[32] ConstText(_value="") -> ""[32]
  731:[48] AppendText(var[8], v1=""[32])
  734:[32] ConstInt(val=5) -> 5[32]
  739:[36] GenCall(size=0, to=668)
  668:[40] VarInt(var[32]) -> 5[40]
  671:[44] ConstInt(val=4) -> 4[44]
  676:[48] GtInt(v1=5[40], v2=4[44]) -> true[40]
  677:[41] GenGotoFalseWord(jump=702, if_false=true[40])
  680:[40] VarInt(var[32]) -> 5[40]
  683:[44] ConstInt(val=1) -> 1[44]
  688:[48] AddInt(v1=5[40], v2=1[44]) -> 6[40]
  689:[44] GenReturn(ret=746[36], value=4, discard=12)
  746:[36] ConstInt(val=2) -> 2[36]
  751:[40] GenCall(size=0, to=668)
  668:[44] VarInt(var[36]) -> 2[44]
  671:[48] ConstInt(val=4) -> 4[48]
  676:[52] GtInt(v1=2[44], v2=4[48]) -> false[44]
  677:[45] GenGotoFalseWord(jump=702, if_false=false[44])
  702:[44] ConstInt(val=1) -> 1[44]
  707:[48] GenReturn(ret=758[40], value=4, discard=12)
  758:[40] AddInt(v1=6[32], v2=1[36]) -> 7[32]
  759:[36] VarInt(var[32]) -> 7[36]
  762:[40] ConstInt(val=7) -> 7[40]
  767:[44] EqInt(v1=7[36], v2=7[40]) -> true[36]
  768:[37] GenGotoFalseWord(jump=774, if_false=true[36])
  771:[36] GenGotoWord(jump=823)
  823:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
