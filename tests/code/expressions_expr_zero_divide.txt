pub fn test() {
    2 / (3 - 2 - 1);
}
fn test() {#1 block
  drop OpDivInt(2i32, OpMinInt(OpMinInt(3i32, 2i32), 1i32));
}#1

byte-code for expr_zero_divide:test()
 645[0]: return-address
 645[4]: ConstInt(val=2) -> integer
 650[8]: ConstInt(val=3) -> integer
 655[12]: ConstInt(val=2) -> integer
 660[16]: MinInt(v1: integer, v2: integer) -> integer
 661[12]: ConstInt(val=1) -> integer
 666[16]: MinInt(v1: integer, v2: integer) -> integer
 667[12]: DivInt(v1: integer, v2: integer) -> integer
 668[8]: FreeStack(value=0, discard=4)
 672[4]: Return(ret=0, value=0, discard=4)

Execute test:
  645:[8] ConstInt(val=2) -> 2[8]
  650:[12] ConstInt(val=3) -> 3[12]
  655:[16] ConstInt(val=2) -> 2[16]
  660:[20] MinInt(v1=3[12], v2=2[16]) -> 1[12]
  661:[16] ConstInt(val=1) -> 1[16]
  666:[20] MinInt(v1=1[12], v2=1[16]) -> 0[12]
  667:[16] DivInt(v1=2[8], v2=0[12]) -> -2147483648[8]
  668:[12] FreeStack(value=0, discard=4)
  672:[8] Return(ret=4294967295[4], value=0, discard=4)
Finished
