Test code:
pub fn test() {
    2 / (3 - 2 - 1);
}

fn test {
  drop OpDivInt(2i32, OpMinInt(OpMinInt(3i32, 2i32), 1i32));
}

byte-code for expr_zero_divide:test()
 664[0]: return-address
 664[4]: ConstInt(val=2) -> integer
 669[8]: ConstInt(val=3) -> integer
 674[12]: ConstInt(val=2) -> integer
 679[16]: MinInt(v1: integer, v2: integer) -> integer
 680[12]: ConstInt(val=1) -> integer
 685[16]: MinInt(v1: integer, v2: integer) -> integer
 686[12]: DivInt(v1: integer, v2: integer) -> integer
 687[8]: GenFreeStack(value=0, discard=4)
 691[4]: GenReturn(ret=0, value=0, discard=4)

Execute test:
  664:[4] ConstInt(val=2) -> 2[4]
  669:[8] ConstInt(val=3) -> 3[8]
  674:[12] ConstInt(val=2) -> 2[12]
  679:[16] MinInt(v1=3[8], v2=2[12]) -> 1[8]
  680:[12] ConstInt(val=1) -> 1[12]
  685:[16] MinInt(v1=1[8], v2=1[12]) -> 0[8]
  686:[12] DivInt(v1=2[4], v2=0[8]) -> -2147483648[4]
  687:[8] GenFreeStack(value=0, discard=4)
  691:[4] GenReturn(ret=4294967295[0], value=0, discard=4)
Finished
