pub fn test() {
    test_value = {"something".starts_with("someone")};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    _tp_text_starts_with("something", "someone");
  }#2:boolean;
  if OpEqBool(test_value, false) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != false");
    __work_1;
  }#3:text);
}#1

byte-code for starts:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstText(_value="something") -> text
 704[44]: ConstText(_value="someone") -> text
 713[60]: StaticCall(_tp_text_starts_with)
 716[29]: VarBool(var[28]) -> boolean
 719[30]: ConstFalse() -> boolean
 720[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 721[30]: GotoFalseWord(jump=727, if_false: boolean)
 724[29]: GotoWord(jump=778)
 727[29]: ClearText(var[4])
 730[29]: ConstText(_value="Test failed ") -> text
 744[45]: AppendText(var[4], v1: text)
 747[29]: VarBool(var[28]) -> boolean
 750[30]: ConstInt(val=0) -> integer
 755[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 760[29]: ConstText(_value=" != false") -> text
 771[45]: AppendText(var[4], v1: text)
 774[29]: VarText(var[4]) -> text
 777[45]: Panic(message: text)
 778[29]: Return(ret=0, value=0, discard=29)

Execute test:
  692:[8] Text()
  693:[32] ConstText(_value="something") -> "something"[32]
  704:[48] ConstText(_value="someone") -> "someone"[48]
  713:[64] StaticCall(call=4)
  716:[33] VarBool(var[32]) -> false[33]
  719:[34] ConstFalse() -> false[34]
  720:[35] EqBool(v1=false[33], v2=false[34]) -> true[33]
  721:[34] GotoFalseWord(jump=727, if_false=true[33])
  724:[33] GotoWord(jump=778)
  778:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
