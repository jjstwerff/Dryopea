pub fn test() {
    test_value = {"something".starts_with("someone")};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    _tp_text_starts_with("something", "someone");
  }#2:boolean;
  if OpEqBool(test_value, false) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != false");
    __work_1;
  }#3:text);
}#1

byte-code for starts:test() [1073]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstText(_value="something") -> text var=test_value[28]:boolean in 1
  12[44]: ConstText(_value="someone") -> text
  21[60]: StaticCall(_tp_text_starts_with)
  24[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  27[30]: ConstFalse() -> boolean
  28[31]: EqBool(v1: boolean, v2: boolean) -> boolean
  29[30]: GotoFalseWord(jump=35, if_false: boolean)
  32[29]: GotoWord(jump=86)
  35[29]: ClearText(var[4]) var=__work_1[4]:text in 1
  38[29]: ConstText(_value="Test failed ") -> text
  52[45]: AppendText(var[4], v1: text)
  55[29]: VarBool(var[28]) -> boolean var=test_value[28]:boolean in 1
  58[30]: ConstInt(val=0) -> integer
  63[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
  68[29]: ConstText(_value=" != false") -> text
  79[45]: AppendText(var[4], v1: text)
  82[29]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  85[45]: Panic(message: text)
  86[29]: FreeText(var[4])
  89[29]: Return(ret=0, value=0, discard=29)

