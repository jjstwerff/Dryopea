pub fn test() {
    test_value = {"something".starts_with("someone")};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    _tp_text_starts_with("something", "someone");
  }#2;
  if OpEqBool(test_value, false) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != false");
    __work_1;
  }#3);
}#1

byte-code for starts:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstText(_value="something") -> text(false, [])
 680[44]: ConstText(_value="someone") -> text(false, [])
 689[60]: StaticCall(_tp_text_starts_with)
 692[29]: VarBool(var[28]) -> boolean
 695[30]: ConstFalse() -> boolean
 696[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 697[30]: GenGotoFalseWord(jump=703, if_false: boolean)
 700[29]: GenGotoWord(jump=754)
 703[29]: ClearText(var[4])
 706[29]: ConstText(_value="Test failed ") -> text(false, [])
 720[45]: AppendText(var[4], v1: text(false, []))
 723[29]: VarBool(var[28]) -> boolean
 726[30]: ConstInt(val=0) -> integer
 731[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 736[29]: ConstText(_value=" != false") -> text(false, [])
 747[45]: AppendText(var[4], v1: text(false, []))
 750[29]: VarText(var[4]) -> text(false, [])
 753[45]: GenPanic(message: text(false, []))
 754[29]: GenReturn(ret=0, value=0, discard=29)

Execute test:
  668:[8] Text()
  669:[32] ConstText(_value="something") -> "something"[32]
  680:[48] ConstText(_value="someone") -> "someone"[48]
  689:[64] StaticCall(call=2)
  692:[33] VarBool(var[32]) -> false[33]
  695:[34] ConstFalse() -> false[34]
  696:[35] EqBool(v1=false[33], v2=false[34]) -> true[33]
  697:[34] GenGotoFalseWord(jump=703, if_false=true[33])
  700:[33] GenGotoWord(jump=754)
  754:[33] GenReturn(ret=4294967295[4], value=0, discard=29)
Finished
