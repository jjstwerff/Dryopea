pub fn test() {
    test_value = {"something".starts_with("someone")};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    _tp_text_starts_with("something", "someone");
  }#2:boolean;
  if OpEqBool(test_value, false) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != false");
    __work_1;
  }#3:text);
}#1

byte-code for starts:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: ConstText(_value="something") -> text
 703[44]: ConstText(_value="someone") -> text
 712[60]: StaticCall(_tp_text_starts_with)
 715[29]: VarBool(var[28]) -> boolean
 718[30]: ConstFalse() -> boolean
 719[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 720[30]: GotoFalseWord(jump=726, if_false: boolean)
 723[29]: GotoWord(jump=777)
 726[29]: ClearText(var[4])
 729[29]: ConstText(_value="Test failed ") -> text
 743[45]: AppendText(var[4], v1: text)
 746[29]: VarBool(var[28]) -> boolean
 749[30]: ConstInt(val=0) -> integer
 754[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 759[29]: ConstText(_value=" != false") -> text
 770[45]: AppendText(var[4], v1: text)
 773[29]: VarText(var[4]) -> text
 776[45]: Panic(message: text)
 777[29]: FreeText(var[4])
 780[29]: Return(ret=0, value=0, discard=29)

Execute test:
  691:[8] Text()
  692:[32] ConstText(_value="something") -> "something"[32]
  703:[48] ConstText(_value="someone") -> "someone"[48]
  712:[64] StaticCall(call=4)
  715:[33] VarBool(var[32]) -> false[33]
  718:[34] ConstFalse() -> false[34]
  719:[35] EqBool(v1=false[33], v2=false[34]) -> true[33]
  720:[34] GotoFalseWord(jump=726, if_false=true[33])
  723:[33] GotoWord(jump=777)
  777:[33] FreeText(var[8])
  780:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
