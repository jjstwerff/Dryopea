pub fn test() {
    test_value = {"something".starts_with("someone")};
    assert(
        test_value == false,
        "Test failed {test_value} != false"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:boolean = {#2 block
    _tp_text_starts_with("something", "someone");
  }#2:boolean;
  if OpEqBool(test_value, false) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatBool(__work_1, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_1, " != false");
    __work_1;
  }#3:text);
}#1

byte-code for starts:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: ConstText(_value="something") -> text
 694[44]: ConstText(_value="someone") -> text
 703[60]: StaticCall(_tp_text_starts_with)
 706[29]: VarBool(var[28]) -> boolean
 709[30]: ConstFalse() -> boolean
 710[31]: EqBool(v1: boolean, v2: boolean) -> boolean
 711[30]: GotoFalseWord(jump=717, if_false: boolean)
 714[29]: GotoWord(jump=768)
 717[29]: ClearText(var[4])
 720[29]: ConstText(_value="Test failed ") -> text
 734[45]: AppendText(var[4], v1: text)
 737[29]: VarBool(var[28]) -> boolean
 740[30]: ConstInt(val=0) -> integer
 745[34]: FormatBool(var[4], val: boolean, width: integer, dir=-1, token=32)
 750[29]: ConstText(_value=" != false") -> text
 761[45]: AppendText(var[4], v1: text)
 764[29]: VarText(var[4]) -> text
 767[45]: Panic(message: text)
 768[29]: Return(ret=0, value=0, discard=29)

Execute test:
  682:[8] Text()
  683:[32] ConstText(_value="something") -> "something"[32]
  694:[48] ConstText(_value="someone") -> "someone"[48]
  703:[64] StaticCall(call=2)
  706:[33] VarBool(var[32]) -> false[33]
  709:[34] ConstFalse() -> false[34]
  710:[35] EqBool(v1=false[33], v2=false[34]) -> true[33]
  711:[34] GotoFalseWord(jump=717, if_false=true[33])
  714:[33] GotoWord(jump=768)
  768:[33] Return(ret=4294967295[4], value=0, discard=29)
Finished
