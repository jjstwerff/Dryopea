pub fn test() {
    test_value = {(1 << 8) - 3 & 127};
    assert(
        test_value == 125,
        "Test failed {test_value} != 125"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpLandInt(OpMinInt(OpSLeftInt(1i32, 8i32), 3i32), 127i32);
  }#2:integer;
  if OpEqInt(test_value, 125i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125");
    __work_1;
  }#3:text);
}#1

byte-code for logical:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=1) -> integer var=test_value[28]:integer in 1
   6[32]: ConstInt(val=8) -> integer
  11[36]: SLeftInt(v1: integer, v2: integer) -> integer
  12[32]: ConstInt(val=3) -> integer
  17[36]: MinInt(v1: integer, v2: integer) -> integer
  18[32]: ConstInt(val=127) -> integer
  23[36]: LandInt(v1: integer, v2: integer) -> integer
  24[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  27[36]: ConstInt(val=125) -> integer
  32[40]: EqInt(v1: integer, v2: integer) -> boolean
  33[33]: GotoFalseWord(jump=39, if_false: boolean)
  36[32]: GotoWord(jump=90)
  39[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  42[32]: ConstText(_value="Test failed ") -> text
  56[48]: AppendText(var[4], v1: text)
  59[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  62[36]: ConstInt(val=0) -> integer
  67[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  74[32]: ConstText(_value=" != 125") -> text
  83[48]: AppendText(var[4], v1: text)
  86[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  89[48]: Panic(message: text)
  90[32]: FreeText(var[4])
  93[32]: Return(ret=0, value=0, discard=32)

