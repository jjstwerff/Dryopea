pub fn test() {
    test_value = {(1 << 8) - 3 & 127};
    assert(
        test_value == 125,
        "Test failed {test_value} != 125"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpLandInt(OpMinInt(OpSLeftInt(1i32, 8i32), 3i32), 127i32);
  }#2:integer;
  if OpEqInt(test_value, 125i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125");
    __work_1;
  }#3:text);
}#1

byte-code for logical:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: ConstInt(val=1) -> integer
 681[32]: ConstInt(val=8) -> integer
 686[36]: SLeftInt(v1: integer, v2: integer) -> integer
 687[32]: ConstInt(val=3) -> integer
 692[36]: MinInt(v1: integer, v2: integer) -> integer
 693[32]: ConstInt(val=127) -> integer
 698[36]: LandInt(v1: integer, v2: integer) -> integer
 699[32]: VarInt(var[28]) -> integer
 702[36]: ConstInt(val=125) -> integer
 707[40]: EqInt(v1: integer, v2: integer) -> boolean
 708[33]: GotoFalseWord(jump=714, if_false: boolean)
 711[32]: GotoWord(jump=765)
 714[32]: ClearText(var[4])
 717[32]: ConstText(_value="Test failed ") -> text
 731[48]: AppendText(var[4], v1: text)
 734[32]: VarInt(var[28]) -> integer
 737[36]: ConstInt(val=0) -> integer
 742[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 749[32]: ConstText(_value=" != 125") -> text
 758[48]: AppendText(var[4], v1: text)
 761[32]: VarText(var[4]) -> text
 764[48]: Panic(message: text)
 765[32]: Return(ret=0, value=0, discard=32)

Execute test:
  675:[8] Text()
  676:[32] ConstInt(val=1) -> 1[32]
  681:[36] ConstInt(val=8) -> 8[36]
  686:[40] SLeftInt(v1=1[32], v2=8[36]) -> 256[32]
  687:[36] ConstInt(val=3) -> 3[36]
  692:[40] MinInt(v1=256[32], v2=3[36]) -> 253[32]
  693:[36] ConstInt(val=127) -> 127[36]
  698:[40] LandInt(v1=253[32], v2=127[36]) -> 125[32]
  699:[36] VarInt(var[32]) -> 125[36]
  702:[40] ConstInt(val=125) -> 125[40]
  707:[44] EqInt(v1=125[36], v2=125[40]) -> true[36]
  708:[37] GotoFalseWord(jump=714, if_false=true[36])
  711:[36] GotoWord(jump=765)
  765:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
