pub fn test() {
    test_value = {(1 << 8) - 3 & 127};
    assert(
        test_value == 125,
        "Test failed {test_value} != 125"
    );
}
fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    OpLandInt(OpMinInt(OpSLeftInt(1i32, 8i32), 3i32), 127i32);
  }#2;
  if OpEqInt(test_value, 125i32) null else OpGenPanic({#3 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125");
    __work_1;
  }#3);
}#1

byte-code for logical:test()
 668[0]: return-address
 668[4]: Text()
 669[28]: ConstInt(val=1) -> integer
 674[32]: ConstInt(val=8) -> integer
 679[36]: SLeftInt(v1: integer, v2: integer) -> integer
 680[32]: ConstInt(val=3) -> integer
 685[36]: MinInt(v1: integer, v2: integer) -> integer
 686[32]: ConstInt(val=127) -> integer
 691[36]: LandInt(v1: integer, v2: integer) -> integer
 692[32]: VarInt(var[28]) -> integer
 695[36]: ConstInt(val=125) -> integer
 700[40]: EqInt(v1: integer, v2: integer) -> boolean
 701[33]: GenGotoFalseWord(jump=707, if_false: boolean)
 704[32]: GenGotoWord(jump=758)
 707[32]: ClearText(var[4])
 710[32]: ConstText(_value="Test failed ") -> text(false, [])
 724[48]: AppendText(var[4], v1: text(false, []))
 727[32]: VarInt(var[28]) -> integer
 730[36]: ConstInt(val=0) -> integer
 735[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 742[32]: ConstText(_value=" != 125") -> text(false, [])
 751[48]: AppendText(var[4], v1: text(false, []))
 754[32]: VarText(var[4]) -> text(false, [])
 757[48]: GenPanic(message: text(false, []))
 758[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
  668:[8] Text()
  669:[32] ConstInt(val=1) -> 1[32]
  674:[36] ConstInt(val=8) -> 8[36]
  679:[40] SLeftInt(v1=1[32], v2=8[36]) -> 256[32]
  680:[36] ConstInt(val=3) -> 3[36]
  685:[40] MinInt(v1=256[32], v2=3[36]) -> 253[32]
  686:[36] ConstInt(val=127) -> 127[36]
  691:[40] LandInt(v1=253[32], v2=127[36]) -> 125[32]
  692:[36] VarInt(var[32]) -> 125[36]
  695:[40] ConstInt(val=125) -> 125[40]
  700:[44] EqInt(v1=125[36], v2=125[40]) -> true[36]
  701:[37] GenGotoFalseWord(jump=707, if_false=true[36])
  704:[36] GenGotoWord(jump=758)
  758:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
