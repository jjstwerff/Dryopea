pub fn test() {
    test_value = {(1 << 8) - 3 & 127};
    assert(
        test_value == 125,
        "Test failed {test_value} != 125"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    OpLandInt(OpMinInt(OpSLeftInt(1i32, 8i32), 3i32), 127i32);
  }#2:integer;
  if OpEqInt(test_value, 125i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 125");
    __work_1;
  }#3:text);
}#1

byte-code for logical:test()
 691[0]: return-address
 691[4]: Text()
 692[28]: ConstInt(val=1) -> integer
 697[32]: ConstInt(val=8) -> integer
 702[36]: SLeftInt(v1: integer, v2: integer) -> integer
 703[32]: ConstInt(val=3) -> integer
 708[36]: MinInt(v1: integer, v2: integer) -> integer
 709[32]: ConstInt(val=127) -> integer
 714[36]: LandInt(v1: integer, v2: integer) -> integer
 715[32]: VarInt(var[28]) -> integer
 718[36]: ConstInt(val=125) -> integer
 723[40]: EqInt(v1: integer, v2: integer) -> boolean
 724[33]: GotoFalseWord(jump=730, if_false: boolean)
 727[32]: GotoWord(jump=781)
 730[32]: ClearText(var[4])
 733[32]: ConstText(_value="Test failed ") -> text
 747[48]: AppendText(var[4], v1: text)
 750[32]: VarInt(var[28]) -> integer
 753[36]: ConstInt(val=0) -> integer
 758[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 765[32]: ConstText(_value=" != 125") -> text
 774[48]: AppendText(var[4], v1: text)
 777[32]: VarText(var[4]) -> text
 780[48]: Panic(message: text)
 781[32]: FreeText(var[4])
 784[32]: Return(ret=0, value=0, discard=32)

Execute test:
  691:[8] Text()
  692:[32] ConstInt(val=1) -> 1[32]
  697:[36] ConstInt(val=8) -> 8[36]
  702:[40] SLeftInt(v1=1[32], v2=8[36]) -> 256[32]
  703:[36] ConstInt(val=3) -> 3[36]
  708:[40] MinInt(v1=256[32], v2=3[36]) -> 253[32]
  709:[36] ConstInt(val=127) -> 127[36]
  714:[40] LandInt(v1=253[32], v2=127[36]) -> 125[32]
  715:[36] VarInt(var[32]) -> 125[36]
  718:[40] ConstInt(val=125) -> 125[40]
  723:[44] EqInt(v1=125[36], v2=125[40]) -> true[36]
  724:[37] GotoFalseWord(jump=730, if_false=true[36])
  727:[36] GotoWord(jump=781)
  781:[36] FreeText(var[8])
  784:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
