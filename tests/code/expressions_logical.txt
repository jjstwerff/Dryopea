pub fn test() {
    test_value = {(1 << 8) - 3 & 127};
    assert(
        test_value == 125,
        "Test failed {test_value} != 125"
    );
}
fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    OpLandInt(OpMinInt(OpSLeftInt(1i32, 8i32), 3i32), 127i32);
  }#block(2):integer;
  if OpEqInt(test_value(1), 125i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 125");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for logical:test() [1119]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=1) -> integer var=test_value[32]:integer
   6[36]: ConstInt(val=8) -> integer
  11[40]: SLeftInt(v1: integer, v2: integer) -> integer
  12[36]: ConstInt(val=3) -> integer
  17[40]: MinInt(v1: integer, v2: integer) -> integer
  18[36]: ConstInt(val=127) -> integer
  23[40]: LandInt(v1: integer, v2: integer) -> integer
  24[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  27[40]: ConstInt(val=125) -> integer
  32[44]: EqInt(v1: integer, v2: integer) -> boolean
  33[37]: GotoFalseWord(jump=39, if_false: boolean)
  36[36]: GotoWord(jump=90)
  39[36]: ClearText(var[8]) var=__work_1[8]:text
  42[36]: ConstText(_value="Test failed ") -> text
  56[52]: AppendText(var[8], v1: text)
  59[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  62[40]: ConstInt(val=0) -> integer
  67[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  74[36]: ConstText(_value=" != 125") -> text
  83[52]: AppendText(var[8], v1: text)
  86[36]: VarText(var[8]) -> text var=__work_1[8]:text
  89[52]: Panic(message: text)
  90[36]: FreeText(var[8])
  93[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=1) -> 1[32]
    6:[36] ConstInt(val=8) -> 8[36]
   11:[40] SLeftInt(v1=1[32], v2=8[36]) -> 256[32]
   12:[36] ConstInt(val=3) -> 3[36]
   17:[40] MinInt(v1=256[32], v2=3[36]) -> 253[32]
   18:[36] ConstInt(val=127) -> 127[36]
   23:[40] LandInt(v1=253[32], v2=127[36]) -> 125[32]
   24:[36] VarInt(var[32]) -> 125[36]
   27:[40] ConstInt(val=125) -> 125[40]
   32:[44] EqInt(v1=125[36], v2=125[40]) -> true[36]
   33:[37] GotoFalseWord(jump=39, if_false=true[36])
   36:[36] GotoWord(jump=90)
   90:[36] FreeText(var[8])
   93:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
