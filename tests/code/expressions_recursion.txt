fn first(s: State, c: integer) -> integer {
	if s == Start {
		s = Ongoing
	} else if c > 10 {
		s = Halt
	}
	second(s, c)
}

fn second(s: State, c: integer) -> integer {
	if s != Halt {
		first(s, c + 1)
	} else {
		1 + c
	}
}

enum State {
	Start,
	Ongoing,
	Halt
}

pub fn test() {
    test_value = {first(Start, 0)};
    assert(
        test_value == 12,
        "Test failed {test_value} != 12"
    );
}
Type 12:State[1]:Enum(["Start", "Ongoing", "Halt"])

fn first(s:State, c:integer) -> integer {#1 block
  if OpEqEnum(s, 1u8(12)) {#2 block
    s:State = 2u8(12);
  }#2 else if OpGtInt(c, 10i32) {#3 block
    s:State = 3u8(12);
  }#3 else null;
  second(s, c);
}#1:integer

byte-code for recursion:first(s: State[0], c: integer[1]) -> integer
 645[5]: return-address
 645[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 648[10]: ConstEnum(val=1) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12]
 650[11]: EqEnum(v1: enumerate, v2: enumerate) -> boolean
 651[10]: GotoFalseWord(jump=662, if_false: boolean)
 654[9]: ConstEnum(val=2) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 656[10]: PutEnum(var[0], value: enumerate)
 659[9]: GotoWord(jump=679)
 662[9]: VarInt(var[1]) -> integer var=c[1]:integer in 0
 665[13]: ConstInt(val=10) -> integer
 670[17]: GtInt(v1: integer, v2: integer) -> boolean
 671[10]: GotoFalseWord(jump=679, if_false: boolean)
 674[9]: ConstEnum(val=3) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 676[10]: PutEnum(var[0], value: enumerate)
 679[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 682[10]: VarInt(var[1]) -> integer var=c[1]:integer in 0
 685[14]: Call(size=0, to=0)
 692[13]: Return(ret=5, value=4, discard=13) type=integer[4]:Base[0]

fn second(s:State, c:integer) -> integer {#1 block
  if OpNeEnum(s, 3u8(12)) {#2 block
    first(s, OpAddInt(c, 1i32));
  }#2:integer else {#3 block
    OpAddInt(1i32, c);
  }#3:integer;
}#1:integer

byte-code for recursion:second(s: State[0], c: integer[1]) -> integer
 698[5]: return-address
 698[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 701[10]: ConstEnum(val=3) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12]
 703[11]: NeEnum(v1: enumerate, v2: enumerate) -> boolean
 704[10]: GotoFalseWord(jump=729, if_false: boolean)
 707[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 710[10]: VarInt(var[1]) -> integer var=c[1]:integer in 0
 713[14]: ConstInt(val=1) -> integer
 718[18]: AddInt(v1: integer, v2: integer) -> integer
 719[14]: Call(size=0, to=645)
 726[13]: GotoWord(jump=738)
 729[9]: ConstInt(val=1) -> integer
 734[13]: VarInt(var[1]) -> integer var=c[1]:integer in 0
 737[17]: AddInt(v1: integer, v2: integer) -> integer
 738[13]: Return(ret=5, value=4, discard=13) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    first(1u8(12), 0i32);
  }#2:integer;
  if OpEqInt(test_value, 12i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 12");
    __work_1;
  }#3:text);
}#1

byte-code for recursion:test()
 744[0]: return-address
 744[4]: Text() var=__work_1[4]:text in 1
 745[28]: ConstEnum(val=1) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=test_value[28]:integer in 1
 747[29]: ConstInt(val=0) -> integer
 752[33]: Call(size=0, to=645)
 759[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 762[36]: ConstInt(val=12) -> integer
 767[40]: EqInt(v1: integer, v2: integer) -> boolean
 768[33]: GotoFalseWord(jump=774, if_false: boolean)
 771[32]: GotoWord(jump=824)
 774[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 777[32]: ConstText(_value="Test failed ") -> text
 791[48]: AppendText(var[4], v1: text)
 794[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 797[36]: ConstInt(val=0) -> integer
 802[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 809[32]: ConstText(_value=" != 12") -> text
 817[48]: AppendText(var[4], v1: text)
 820[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 823[48]: Panic(message: text)
 824[32]: FreeText(var[4])
 827[32]: Return(ret=0, value=0, discard=32)

Execute test:
  744:[8] Text()
  745:[32] ConstEnum(val=1) -> Start(1)[32]
  747:[33] ConstInt(val=0) -> 0[33]
  752:[37] Call(size=0, to=645)
  645:[41] VarEnum(var[32]) -> Start(1)[41]
  648:[42] ConstEnum(val=1) -> Start(1)[42]
  650:[43] EqEnum(v1=1[41], v2=1[42]) -> true[41]
  651:[42] GotoFalseWord(jump=662, if_false=true[41])
  654:[41] ConstEnum(val=2) -> Ongoing(2)[41]
  656:[42] PutEnum(var[32], value=2[41])
  659:[41] GotoWord(jump=679)
  679:[41] VarEnum(var[32]) -> Ongoing(2)[41]
  682:[42] VarInt(var[33]) -> 0[42]
  685:[46] Call(size=0, to=698)
  698:[50] VarEnum(var[41]) -> Ongoing(2)[50]
  701:[51] ConstEnum(val=3) -> Halt(3)[51]
  703:[52] NeEnum(v1=2[50], v2=3[51]) -> true[50]
  704:[51] GotoFalseWord(jump=729, if_false=true[50])
  707:[50] VarEnum(var[41]) -> Ongoing(2)[50]
  710:[51] VarInt(var[42]) -> 0[51]
  713:[55] ConstInt(val=1) -> 1[55]
  718:[59] AddInt(v1=0[51], v2=1[55]) -> 1[51]
  719:[55] Call(size=0, to=645)
  645:[59] VarEnum(var[50]) -> Ongoing(2)[59]
  648:[60] ConstEnum(val=1) -> Start(1)[60]
  650:[61] EqEnum(v1=2[59], v2=1[60]) -> false[59]
  651:[60] GotoFalseWord(jump=662, if_false=false[59])
  662:[59] VarInt(var[51]) -> 1[59]
  665:[63] ConstInt(val=10) -> 10[63]
  670:[67] GtInt(v1=1[59], v2=10[63]) -> false[59]
  671:[60] GotoFalseWord(jump=679, if_false=false[59])
  679:[59] VarEnum(var[50]) -> Ongoing(2)[59]
  682:[60] VarInt(var[51]) -> 1[60]
  685:[64] Call(size=0, to=698)
  698:[68] VarEnum(var[59]) -> Ongoing(2)[68]
  701:[69] ConstEnum(val=3) -> Halt(3)[69]
  703:[70] NeEnum(v1=2[68], v2=3[69]) -> true[68]
  704:[69] GotoFalseWord(jump=729, if_false=true[68])
  707:[68] VarEnum(var[59]) -> Ongoing(2)[68]
  710:[69] VarInt(var[60]) -> 1[69]
  713:[73] ConstInt(val=1) -> 1[73]
  718:[77] AddInt(v1=1[69], v2=1[73]) -> 2[69]
  719:[73] Call(size=0, to=645)
  645:[77] VarEnum(var[68]) -> Ongoing(2)[77]
  648:[78] ConstEnum(val=1) -> Start(1)[78]
  650:[79] EqEnum(v1=2[77], v2=1[78]) -> false[77]
  651:[78] GotoFalseWord(jump=662, if_false=false[77])
  662:[77] VarInt(var[69]) -> 2[77]
  665:[81] ConstInt(val=10) -> 10[81]
  670:[85] GtInt(v1=2[77], v2=10[81]) -> false[77]
  671:[78] GotoFalseWord(jump=679, if_false=false[77])
  679:[77] VarEnum(var[68]) -> Ongoing(2)[77]
  682:[78] VarInt(var[69]) -> 2[78]
  685:[82] Call(size=0, to=698)
  698:[86] VarEnum(var[77]) -> Ongoing(2)[86]
  701:[87] ConstEnum(val=3) -> Halt(3)[87]
  703:[88] NeEnum(v1=2[86], v2=3[87]) -> true[86]
  704:[87] GotoFalseWord(jump=729, if_false=true[86])
  707:[86] VarEnum(var[77]) -> Ongoing(2)[86]
  710:[87] VarInt(var[78]) -> 2[87]
  713:[91] ConstInt(val=1) -> 1[91]
  718:[95] AddInt(v1=2[87], v2=1[91]) -> 3[87]
  719:[91] Call(size=0, to=645)
  645:[95] VarEnum(var[86]) -> Ongoing(2)[95]
  648:[96] ConstEnum(val=1) -> Start(1)[96]
  650:[97] EqEnum(v1=2[95], v2=1[96]) -> false[95]
  651:[96] GotoFalseWord(jump=662, if_false=false[95])
  662:[95] VarInt(var[87]) -> 3[95]
  665:[99] ConstInt(val=10) -> 10[99]
  670:[103] GtInt(v1=3[95], v2=10[99]) -> false[95]
  671:[96] GotoFalseWord(jump=679, if_false=false[95])
  679:[95] VarEnum(var[86]) -> Ongoing(2)[95]
  682:[96] VarInt(var[87]) -> 3[96]
  685:[100] Call(size=0, to=698)
  698:[104] VarEnum(var[95]) -> Ongoing(2)[104]
  701:[105] ConstEnum(val=3) -> Halt(3)[105]
  703:[106] NeEnum(v1=2[104], v2=3[105]) -> true[104]
  704:[105] GotoFalseWord(jump=729, if_false=true[104])
  707:[104] VarEnum(var[95]) -> Ongoing(2)[104]
  710:[105] VarInt(var[96]) -> 3[105]
  713:[109] ConstInt(val=1) -> 1[109]
  718:[113] AddInt(v1=3[105], v2=1[109]) -> 4[105]
  719:[109] Call(size=0, to=645)
  645:[113] VarEnum(var[104]) -> Ongoing(2)[113]
  648:[114] ConstEnum(val=1) -> Start(1)[114]
  650:[115] EqEnum(v1=2[113], v2=1[114]) -> false[113]
  651:[114] GotoFalseWord(jump=662, if_false=false[113])
  662:[113] VarInt(var[105]) -> 4[113]
  665:[117] ConstInt(val=10) -> 10[117]
  670:[121] GtInt(v1=4[113], v2=10[117]) -> false[113]
  671:[114] GotoFalseWord(jump=679, if_false=false[113])
  679:[113] VarEnum(var[104]) -> Ongoing(2)[113]
  682:[114] VarInt(var[105]) -> 4[114]
  685:[118] Call(size=0, to=698)
  698:[122] VarEnum(var[113]) -> Ongoing(2)[122]
  701:[123] ConstEnum(val=3) -> Halt(3)[123]
  703:[124] NeEnum(v1=2[122], v2=3[123]) -> true[122]
  704:[123] GotoFalseWord(jump=729, if_false=true[122])
  707:[122] VarEnum(var[113]) -> Ongoing(2)[122]
  710:[123] VarInt(var[114]) -> 4[123]
  713:[127] ConstInt(val=1) -> 1[127]
  718:[131] AddInt(v1=4[123], v2=1[127]) -> 5[123]
  719:[127] Call(size=0, to=645)
  645:[131] VarEnum(var[122]) -> Ongoing(2)[131]
  648:[132] ConstEnum(val=1) -> Start(1)[132]
  650:[133] EqEnum(v1=2[131], v2=1[132]) -> false[131]
  651:[132] GotoFalseWord(jump=662, if_false=false[131])
  662:[131] VarInt(var[123]) -> 5[131]
  665:[135] ConstInt(val=10) -> 10[135]
  670:[139] GtInt(v1=5[131], v2=10[135]) -> false[131]
  671:[132] GotoFalseWord(jump=679, if_false=false[131])
  679:[131] VarEnum(var[122]) -> Ongoing(2)[131]
  682:[132] VarInt(var[123]) -> 5[132]
  685:[136] Call(size=0, to=698)
  698:[140] VarEnum(var[131]) -> Ongoing(2)[140]
  701:[141] ConstEnum(val=3) -> Halt(3)[141]
  703:[142] NeEnum(v1=2[140], v2=3[141]) -> true[140]
  704:[141] GotoFalseWord(jump=729, if_false=true[140])
  707:[140] VarEnum(var[131]) -> Ongoing(2)[140]
  710:[141] VarInt(var[132]) -> 5[141]
  713:[145] ConstInt(val=1) -> 1[145]
  718:[149] AddInt(v1=5[141], v2=1[145]) -> 6[141]
  719:[145] Call(size=0, to=645)
  645:[149] VarEnum(var[140]) -> Ongoing(2)[149]
  648:[150] ConstEnum(val=1) -> Start(1)[150]
  650:[151] EqEnum(v1=2[149], v2=1[150]) -> false[149]
  651:[150] GotoFalseWord(jump=662, if_false=false[149])
  662:[149] VarInt(var[141]) -> 6[149]
  665:[153] ConstInt(val=10) -> 10[153]
  670:[157] GtInt(v1=6[149], v2=10[153]) -> false[149]
  671:[150] GotoFalseWord(jump=679, if_false=false[149])
  679:[149] VarEnum(var[140]) -> Ongoing(2)[149]
  682:[150] VarInt(var[141]) -> 6[150]
  685:[154] Call(size=0, to=698)
  698:[158] VarEnum(var[149]) -> Ongoing(2)[158]
  701:[159] ConstEnum(val=3) -> Halt(3)[159]
  703:[160] NeEnum(v1=2[158], v2=3[159]) -> true[158]
  704:[159] GotoFalseWord(jump=729, if_false=true[158])
  707:[158] VarEnum(var[149]) -> Ongoing(2)[158]
  710:[159] VarInt(var[150]) -> 6[159]
  713:[163] ConstInt(val=1) -> 1[163]
  718:[167] AddInt(v1=6[159], v2=1[163]) -> 7[159]
  719:[163] Call(size=0, to=645)
  645:[167] VarEnum(var[158]) -> Ongoing(2)[167]
  648:[168] ConstEnum(val=1) -> Start(1)[168]
  650:[169] EqEnum(v1=2[167], v2=1[168]) -> false[167]
  651:[168] GotoFalseWord(jump=662, if_false=false[167])
  662:[167] VarInt(var[159]) -> 7[167]
  665:[171] ConstInt(val=10) -> 10[171]
  670:[175] GtInt(v1=7[167], v2=10[171]) -> false[167]
  671:[168] GotoFalseWord(jump=679, if_false=false[167])
  679:[167] VarEnum(var[158]) -> Ongoing(2)[167]
  682:[168] VarInt(var[159]) -> 7[168]
  685:[172] Call(size=0, to=698)
  698:[176] VarEnum(var[167]) -> Ongoing(2)[176]
  701:[177] ConstEnum(val=3) -> Halt(3)[177]
  703:[178] NeEnum(v1=2[176], v2=3[177]) -> true[176]
  704:[177] GotoFalseWord(jump=729, if_false=true[176])
  707:[176] VarEnum(var[167]) -> Ongoing(2)[176]
  710:[177] VarInt(var[168]) -> 7[177]
  713:[181] ConstInt(val=1) -> 1[181]
  718:[185] AddInt(v1=7[177], v2=1[181]) -> 8[177]
  719:[181] Call(size=0, to=645)
  645:[185] VarEnum(var[176]) -> Ongoing(2)[185]
  648:[186] ConstEnum(val=1) -> Start(1)[186]
  650:[187] EqEnum(v1=2[185], v2=1[186]) -> false[185]
  651:[186] GotoFalseWord(jump=662, if_false=false[185])
  662:[185] VarInt(var[177]) -> 8[185]
  665:[189] ConstInt(val=10) -> 10[189]
  670:[193] GtInt(v1=8[185], v2=10[189]) -> false[185]
  671:[186] GotoFalseWord(jump=679, if_false=false[185])
  679:[185] VarEnum(var[176]) -> Ongoing(2)[185]
  682:[186] VarInt(var[177]) -> 8[186]
  685:[190] Call(size=0, to=698)
  698:[194] VarEnum(var[185]) -> Ongoing(2)[194]
  701:[195] ConstEnum(val=3) -> Halt(3)[195]
  703:[196] NeEnum(v1=2[194], v2=3[195]) -> true[194]
  704:[195] GotoFalseWord(jump=729, if_false=true[194])
  707:[194] VarEnum(var[185]) -> Ongoing(2)[194]
  710:[195] VarInt(var[186]) -> 8[195]
  713:[199] ConstInt(val=1) -> 1[199]
  718:[203] AddInt(v1=8[195], v2=1[199]) -> 9[195]
  719:[199] Call(size=0, to=645)
  645:[203] VarEnum(var[194]) -> Ongoing(2)[203]
  648:[204] ConstEnum(val=1) -> Start(1)[204]
  650:[205] EqEnum(v1=2[203], v2=1[204]) -> false[203]
  651:[204] GotoFalseWord(jump=662, if_false=false[203])
  662:[203] VarInt(var[195]) -> 9[203]
  665:[207] ConstInt(val=10) -> 10[207]
  670:[211] GtInt(v1=9[203], v2=10[207]) -> false[203]
  671:[204] GotoFalseWord(jump=679, if_false=false[203])
  679:[203] VarEnum(var[194]) -> Ongoing(2)[203]
  682:[204] VarInt(var[195]) -> 9[204]
  685:[208] Call(size=0, to=698)
  698:[212] VarEnum(var[203]) -> Ongoing(2)[212]
  701:[213] ConstEnum(val=3) -> Halt(3)[213]
  703:[214] NeEnum(v1=2[212], v2=3[213]) -> true[212]
  704:[213] GotoFalseWord(jump=729, if_false=true[212])
  707:[212] VarEnum(var[203]) -> Ongoing(2)[212]
  710:[213] VarInt(var[204]) -> 9[213]
  713:[217] ConstInt(val=1) -> 1[217]
  718:[221] AddInt(v1=9[213], v2=1[217]) -> 10[213]
  719:[217] Call(size=0, to=645)
  645:[221] VarEnum(var[212]) -> Ongoing(2)[221]
  648:[222] ConstEnum(val=1) -> Start(1)[222]
  650:[223] EqEnum(v1=2[221], v2=1[222]) -> false[221]
  651:[222] GotoFalseWord(jump=662, if_false=false[221])
  662:[221] VarInt(var[213]) -> 10[221]
  665:[225] ConstInt(val=10) -> 10[225]
  670:[229] GtInt(v1=10[221], v2=10[225]) -> false[221]
  671:[222] GotoFalseWord(jump=679, if_false=false[221])
  679:[221] VarEnum(var[212]) -> Ongoing(2)[221]
  682:[222] VarInt(var[213]) -> 10[222]
  685:[226] Call(size=0, to=698)
  698:[230] VarEnum(var[221]) -> Ongoing(2)[230]
  701:[231] ConstEnum(val=3) -> Halt(3)[231]
  703:[232] NeEnum(v1=2[230], v2=3[231]) -> true[230]
  704:[231] GotoFalseWord(jump=729, if_false=true[230])
  707:[230] VarEnum(var[221]) -> Ongoing(2)[230]
  710:[231] VarInt(var[222]) -> 10[231]
  713:[235] ConstInt(val=1) -> 1[235]
  718:[239] AddInt(v1=10[231], v2=1[235]) -> 11[231]
  719:[235] Call(size=0, to=645)
  645:[239] VarEnum(var[230]) -> Ongoing(2)[239]
  648:[240] ConstEnum(val=1) -> Start(1)[240]
  650:[241] EqEnum(v1=2[239], v2=1[240]) -> false[239]
  651:[240] GotoFalseWord(jump=662, if_false=false[239])
  662:[239] VarInt(var[231]) -> 11[239]
  665:[243] ConstInt(val=10) -> 10[243]
  670:[247] GtInt(v1=11[239], v2=10[243]) -> true[239]
  671:[240] GotoFalseWord(jump=679, if_false=true[239])
  674:[239] ConstEnum(val=3) -> Halt(3)[239]
  676:[240] PutEnum(var[230], value=3[239])
  679:[239] VarEnum(var[230]) -> Halt(3)[239]
  682:[240] VarInt(var[231]) -> 11[240]
  685:[244] Call(size=0, to=698)
  698:[248] VarEnum(var[239]) -> Halt(3)[248]
  701:[249] ConstEnum(val=3) -> Halt(3)[249]
  703:[250] NeEnum(v1=3[248], v2=3[249]) -> false[248]
  704:[249] GotoFalseWord(jump=729, if_false=false[248])
  729:[248] ConstInt(val=1) -> 1[248]
  734:[252] VarInt(var[240]) -> 11[252]
  737:[256] AddInt(v1=1[248], v2=11[252]) -> 12[248]
  738:[252] Return(ret=692[244], value=4, discard=13) -> 12[239]
  692:[243] Return(ret=726[235], value=4, discard=13) -> 12[230]
  726:[234] GotoWord(jump=738)
  738:[234] Return(ret=692[226], value=4, discard=13) -> 12[221]
  692:[225] Return(ret=726[217], value=4, discard=13) -> 12[212]
  726:[216] GotoWord(jump=738)
  738:[216] Return(ret=692[208], value=4, discard=13) -> 12[203]
  692:[207] Return(ret=726[199], value=4, discard=13) -> 12[194]
  726:[198] GotoWord(jump=738)
  738:[198] Return(ret=692[190], value=4, discard=13) -> 12[185]
  692:[189] Return(ret=726[181], value=4, discard=13) -> 12[176]
  726:[180] GotoWord(jump=738)
  738:[180] Return(ret=692[172], value=4, discard=13) -> 12[167]
  692:[171] Return(ret=726[163], value=4, discard=13) -> 12[158]
  726:[162] GotoWord(jump=738)
  738:[162] Return(ret=692[154], value=4, discard=13) -> 12[149]
  692:[153] Return(ret=726[145], value=4, discard=13) -> 12[140]
  726:[144] GotoWord(jump=738)
  738:[144] Return(ret=692[136], value=4, discard=13) -> 12[131]
  692:[135] Return(ret=726[127], value=4, discard=13) -> 12[122]
  726:[126] GotoWord(jump=738)
  738:[126] Return(ret=692[118], value=4, discard=13) -> 12[113]
  692:[117] Return(ret=726[109], value=4, discard=13) -> 12[104]
  726:[108] GotoWord(jump=738)
  738:[108] Return(ret=692[100], value=4, discard=13) -> 12[95]
  692:[99] Return(ret=726[91], value=4, discard=13) -> 12[86]
  726:[90] GotoWord(jump=738)
  738:[90] Return(ret=692[82], value=4, discard=13) -> 12[77]
  692:[81] Return(ret=726[73], value=4, discard=13) -> 12[68]
  726:[72] GotoWord(jump=738)
  738:[72] Return(ret=692[64], value=4, discard=13) -> 12[59]
  692:[63] Return(ret=726[55], value=4, discard=13) -> 12[50]
  726:[54] GotoWord(jump=738)
  738:[54] Return(ret=692[46], value=4, discard=13) -> 12[41]
  692:[45] Return(ret=759[37], value=4, discard=13) -> 12[32]
  759:[36] VarInt(var[32]) -> 12[36]
  762:[40] ConstInt(val=12) -> 12[40]
  767:[44] EqInt(v1=12[36], v2=12[40]) -> true[36]
  768:[37] GotoFalseWord(jump=774, if_false=true[36])
  771:[36] GotoWord(jump=824)
  824:[36] FreeText(var[8])
  827:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
