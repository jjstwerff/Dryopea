fn first(s: State, c: integer) -> integer {
	if s == Start {
		s = Ongoing
	} else if c > 10 {
		s = Halt
	}
	second(s, c)
}

fn second(s: State, c: integer) -> integer {
	if s != Halt {
		first(s, c + 1)
	} else {
		1 + c
	}
}

enum State {
	Start,
	Ongoing,
	Halt
}

pub fn test() {
    test_value = {first(Start, 0)};
    assert(
        test_value == 12,
        "Test failed {test_value} != 12"
    );
}
Type 15:State[1]:Enum(["Start", "Ongoing", "Halt"])

fn first(s:State, c:integer) -> integer {#1 block
  if OpEqEnum(s, 1u8(15)) {#2 block
    s:State = 2u8(15);
  }#2 else if OpGtInt(c, 10i32) {#3 block
    s:State = 3u8(15);
  }#3 else null;
  second(s, c);
}#1:integer

byte-code for recursion:first(s: State[0], c: integer[1]) [1067] -> integer
   0[5]: return-address
   0[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[15] var=s[0]:State in 0
   3[10]: ConstEnum(val=1) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[15]
   5[11]: EqEnum(v1: enumerate, v2: enumerate) -> boolean
   6[10]: GotoFalseWord(jump=17, if_false: boolean)
   9[9]: ConstEnum(val=2) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[15] var=s[0]:State in 0
  11[10]: PutEnum(var[0], value: enumerate)
  14[9]: GotoWord(jump=34)
  17[9]: VarInt(var[1]) -> integer var=c[1]:integer in 0
  20[13]: ConstInt(val=10) -> integer
  25[17]: GtInt(v1: integer, v2: integer) -> boolean
  26[10]: GotoFalseWord(jump=34, if_false: boolean)
  29[9]: ConstEnum(val=3) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[15] var=s[0]:State in 0
  31[10]: PutEnum(var[0], value: enumerate)
  34[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[15] var=s[0]:State in 0
  37[10]: VarInt(var[1]) -> integer var=c[1]:integer in 0
  40[14]: Call(size=0, to=0)
  47[13]: Return(ret=5, value=4, discard=13) type=integer[4]:Base[0]

fn second(s:State, c:integer) -> integer {#1 block
  if OpNeEnum(s, 3u8(15)) {#2 block
    first(s, OpAddInt(c, 1i32));
  }#2:integer else {#3 block
    OpAddInt(1i32, c);
  }#3:integer;
}#1:integer

byte-code for recursion:second(s: State[0], c: integer[1]) [1120] -> integer
   0[5]: return-address
   0[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[15] var=s[0]:State in 0
   3[10]: ConstEnum(val=3) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[15]
   5[11]: NeEnum(v1: enumerate, v2: enumerate) -> boolean
   6[10]: GotoFalseWord(jump=31, if_false: boolean)
   9[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[15] var=s[0]:State in 0
  12[10]: VarInt(var[1]) -> integer var=c[1]:integer in 0
  15[14]: ConstInt(val=1) -> integer
  20[18]: AddInt(v1: integer, v2: integer) -> integer
  21[14]: Call(size=0, to=1067)
  28[13]: GotoWord(jump=40)
  31[9]: ConstInt(val=1) -> integer
  36[13]: VarInt(var[1]) -> integer var=c[1]:integer in 0
  39[17]: AddInt(v1: integer, v2: integer) -> integer
  40[13]: Return(ret=5, value=4, discard=13) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    first(1u8(15), 0i32);
  }#2:integer;
  if OpEqInt(test_value, 12i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 12");
    __work_1;
  }#3:text);
}#1

byte-code for recursion:test() [1166]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstEnum(val=1) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[15] var=test_value[28]:integer in 1
   3[29]: ConstInt(val=0) -> integer
   8[33]: Call(size=0, to=1067)
  15[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  18[36]: ConstInt(val=12) -> integer
  23[40]: EqInt(v1: integer, v2: integer) -> boolean
  24[33]: GotoFalseWord(jump=30, if_false: boolean)
  27[32]: GotoWord(jump=80)
  30[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  33[32]: ConstText(_value="Test failed ") -> text
  47[48]: AppendText(var[4], v1: text)
  50[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  53[36]: ConstInt(val=0) -> integer
  58[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  65[32]: ConstText(_value=" != 12") -> text
  73[48]: AppendText(var[4], v1: text)
  76[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  79[48]: Panic(message: text)
  80[32]: FreeText(var[4])
  83[32]: Return(ret=0, value=0, discard=32)

