fn first(s: State, c: integer) -> integer {
	if s == Start {
		s = Ongoing
	} else if c > 10 {
		s = Halt
	}
	second(s, c)
}

fn second(s: State, c: integer) -> integer {
	if s != Halt {
		first(s, c + 1)
	} else {
		1 + c
	}
}

enum State {
	Start,
	Ongoing,
	Halt
}

pub fn test() {
    test_value = {first(Start, 0)};
    assert(
        test_value == 12,
        "Test failed {test_value} != 12"
    );
}
Type 17:State[1]:Enum(["Start", "Ongoing", "Halt"])

fn first(s:State, c:integer) -> integer {#block(1):integer
  if OpEqEnum(s(0), 1u8(17)) {#block(2):void
    s(0):State = 2u8(17);
  }#block(2):void else if OpGtInt(c(0), 10i32) {#block(3):void
    s(0):State = 3u8(17);
  }#block(3):void else null;
  second(s(0), c(0));
}#block(1):integer

byte-code for recursion:first(s: State[4], c: integer[5]) [1119] -> integer
   0[9]: return-address
   0[13]: VarEnum(var[4]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[17] var=s[4]:State
   3[14]: ConstEnum(val=1) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[17]
   5[15]: EqEnum(v1: enumerate, v2: enumerate) -> boolean
   6[14]: GotoFalseWord(jump=17, if_false: boolean)
   9[13]: ConstEnum(val=2) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[17] var=s[4]:State
  11[14]: PutEnum(var[4], value: enumerate)
  14[13]: GotoWord(jump=34)
  17[13]: VarInt(var[5]) -> integer var=c[5]:integer
  20[17]: ConstInt(val=10) -> integer
  25[21]: GtInt(v1: integer, v2: integer) -> boolean
  26[14]: GotoFalseWord(jump=34, if_false: boolean)
  29[13]: ConstEnum(val=3) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[17] var=s[4]:State
  31[14]: PutEnum(var[4], value: enumerate)
  34[13]: VarEnum(var[4]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[17] var=s[4]:State
  37[14]: VarInt(var[5]) -> integer var=c[5]:integer
  40[18]: Call(size=0, to=0)
  47[17]: Return(ret=5, value=4, discard=13) type=integer[4]:Base[0]

fn second(s:State, c:integer) -> integer {#block(1):integer
  if OpNeEnum(s(0), 3u8(17)) {#block(2):integer
    first(s(0), OpAddInt(c(0), 1i32));
  }#block(2):integer else {#block(3):integer
    OpAddInt(1i32, c(0));
  }#block(3):integer;
}#block(1):integer

byte-code for recursion:second(s: State[4], c: integer[5]) [1172] -> integer
   0[9]: return-address
   0[13]: VarEnum(var[4]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[17] var=s[4]:State
   3[14]: ConstEnum(val=3) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[17]
   5[15]: NeEnum(v1: enumerate, v2: enumerate) -> boolean
   6[14]: GotoFalseWord(jump=31, if_false: boolean)
   9[13]: VarEnum(var[4]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[17] var=s[4]:State
  12[14]: VarInt(var[5]) -> integer var=c[5]:integer
  15[18]: ConstInt(val=1) -> integer
  20[22]: AddInt(v1: integer, v2: integer) -> integer
  21[18]: Call(size=0, to=1119)
  28[17]: GotoWord(jump=40)
  31[13]: ConstInt(val=1) -> integer
  36[17]: VarInt(var[5]) -> integer var=c[5]:integer
  39[21]: AddInt(v1: integer, v2: integer) -> integer
  40[17]: Return(ret=5, value=4, discard=13) type=integer[4]:Base[0]

fn test() {#block(1):void
  __work_1(1):text = "";
  test_value(1):integer = {#block(2):integer
    first(1u8(17), 0i32);
  }#block(2):integer;
  if OpEqInt(test_value(1), 12i32) null else OpPanic({#Formatted string(3):text
    __work_1(1):text = "Test failed ";
    OpFormatInt(__work_1(1), test_value(1), 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1(1), " != 12");
    __work_1(1);
  }#Formatted string(3):text);
  OpFreeText(__work_1(1));
}#block(1):void

byte-code for recursion:test() [1218]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstEnum(val=1) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[17] var=test_value[32]:integer
   3[33]: ConstInt(val=0) -> integer
   8[37]: Call(size=0, to=1119)
  15[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  18[40]: ConstInt(val=12) -> integer
  23[44]: EqInt(v1: integer, v2: integer) -> boolean
  24[37]: GotoFalseWord(jump=30, if_false: boolean)
  27[36]: GotoWord(jump=80)
  30[36]: ClearText(var[8]) var=__work_1[8]:text
  33[36]: ConstText(_value="Test failed ") -> text
  47[52]: AppendText(var[8], v1: text)
  50[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  53[40]: ConstInt(val=0) -> integer
  58[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  65[36]: ConstText(_value=" != 12") -> text
  73[52]: AppendText(var[8], v1: text)
  76[36]: VarText(var[8]) -> text var=__work_1[8]:text
  79[52]: Panic(message: text)
  80[36]: FreeText(var[8])
  83[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstEnum(val=1) -> Start(1)[32]
    3:[33] ConstInt(val=0) -> 0[33]
    8:[37] Call(size=0, to=1119)
 1119:[41] VarEnum(var[32]) -> Start(1)[41]
 1122:[42] ConstEnum(val=1) -> Start(1)[42]
 1124:[43] EqEnum(v1=1[41], v2=1[42]) -> true[41]
 1125:[42] GotoFalseWord(jump=1136, if_false=true[41])
 1128:[41] ConstEnum(val=2) -> Ongoing(2)[41]
 1130:[42] PutEnum(var[32], value=2[41])
 1133:[41] GotoWord(jump=1153)
 1153:[41] VarEnum(var[32]) -> Ongoing(2)[41]
 1156:[42] VarInt(var[33]) -> 0[42]
 1159:[46] Call(size=0, to=1172)
 1172:[50] VarEnum(var[41]) -> Ongoing(2)[50]
 1175:[51] ConstEnum(val=3) -> Halt(3)[51]
 1177:[52] NeEnum(v1=2[50], v2=3[51]) -> true[50]
 1178:[51] GotoFalseWord(jump=1203, if_false=true[50])
 1181:[50] VarEnum(var[41]) -> Ongoing(2)[50]
 1184:[51] VarInt(var[42]) -> 0[51]
 1187:[55] ConstInt(val=1) -> 1[55]
 1192:[59] AddInt(v1=0[51], v2=1[55]) -> 1[51]
 1193:[55] Call(size=0, to=1119)
 1119:[59] VarEnum(var[50]) -> Ongoing(2)[59]
 1122:[60] ConstEnum(val=1) -> Start(1)[60]
 1124:[61] EqEnum(v1=2[59], v2=1[60]) -> false[59]
 1125:[60] GotoFalseWord(jump=1136, if_false=false[59])
 1136:[59] VarInt(var[51]) -> 1[59]
 1139:[63] ConstInt(val=10) -> 10[63]
 1144:[67] GtInt(v1=1[59], v2=10[63]) -> false[59]
 1145:[60] GotoFalseWord(jump=1153, if_false=false[59])
 1153:[59] VarEnum(var[50]) -> Ongoing(2)[59]
 1156:[60] VarInt(var[51]) -> 1[60]
 1159:[64] Call(size=0, to=1172)
 1172:[68] VarEnum(var[59]) -> Ongoing(2)[68]
 1175:[69] ConstEnum(val=3) -> Halt(3)[69]
 1177:[70] NeEnum(v1=2[68], v2=3[69]) -> true[68]
 1178:[69] GotoFalseWord(jump=1203, if_false=true[68])
 1181:[68] VarEnum(var[59]) -> Ongoing(2)[68]
 1184:[69] VarInt(var[60]) -> 1[69]
 1187:[73] ConstInt(val=1) -> 1[73]
 1192:[77] AddInt(v1=1[69], v2=1[73]) -> 2[69]
 1193:[73] Call(size=0, to=1119)
 1119:[77] VarEnum(var[68]) -> Ongoing(2)[77]
 1122:[78] ConstEnum(val=1) -> Start(1)[78]
 1124:[79] EqEnum(v1=2[77], v2=1[78]) -> false[77]
 1125:[78] GotoFalseWord(jump=1136, if_false=false[77])
 1136:[77] VarInt(var[69]) -> 2[77]
 1139:[81] ConstInt(val=10) -> 10[81]
 1144:[85] GtInt(v1=2[77], v2=10[81]) -> false[77]
 1145:[78] GotoFalseWord(jump=1153, if_false=false[77])
 1153:[77] VarEnum(var[68]) -> Ongoing(2)[77]
 1156:[78] VarInt(var[69]) -> 2[78]
 1159:[82] Call(size=0, to=1172)
 1172:[86] VarEnum(var[77]) -> Ongoing(2)[86]
 1175:[87] ConstEnum(val=3) -> Halt(3)[87]
 1177:[88] NeEnum(v1=2[86], v2=3[87]) -> true[86]
 1178:[87] GotoFalseWord(jump=1203, if_false=true[86])
 1181:[86] VarEnum(var[77]) -> Ongoing(2)[86]
 1184:[87] VarInt(var[78]) -> 2[87]
 1187:[91] ConstInt(val=1) -> 1[91]
 1192:[95] AddInt(v1=2[87], v2=1[91]) -> 3[87]
 1193:[91] Call(size=0, to=1119)
 1119:[95] VarEnum(var[86]) -> Ongoing(2)[95]
 1122:[96] ConstEnum(val=1) -> Start(1)[96]
 1124:[97] EqEnum(v1=2[95], v2=1[96]) -> false[95]
 1125:[96] GotoFalseWord(jump=1136, if_false=false[95])
 1136:[95] VarInt(var[87]) -> 3[95]
 1139:[99] ConstInt(val=10) -> 10[99]
 1144:[103] GtInt(v1=3[95], v2=10[99]) -> false[95]
 1145:[96] GotoFalseWord(jump=1153, if_false=false[95])
 1153:[95] VarEnum(var[86]) -> Ongoing(2)[95]
 1156:[96] VarInt(var[87]) -> 3[96]
 1159:[100] Call(size=0, to=1172)
 1172:[104] VarEnum(var[95]) -> Ongoing(2)[104]
 1175:[105] ConstEnum(val=3) -> Halt(3)[105]
 1177:[106] NeEnum(v1=2[104], v2=3[105]) -> true[104]
 1178:[105] GotoFalseWord(jump=1203, if_false=true[104])
 1181:[104] VarEnum(var[95]) -> Ongoing(2)[104]
 1184:[105] VarInt(var[96]) -> 3[105]
 1187:[109] ConstInt(val=1) -> 1[109]
 1192:[113] AddInt(v1=3[105], v2=1[109]) -> 4[105]
 1193:[109] Call(size=0, to=1119)
 1119:[113] VarEnum(var[104]) -> Ongoing(2)[113]
 1122:[114] ConstEnum(val=1) -> Start(1)[114]
 1124:[115] EqEnum(v1=2[113], v2=1[114]) -> false[113]
 1125:[114] GotoFalseWord(jump=1136, if_false=false[113])
 1136:[113] VarInt(var[105]) -> 4[113]
 1139:[117] ConstInt(val=10) -> 10[117]
 1144:[121] GtInt(v1=4[113], v2=10[117]) -> false[113]
 1145:[114] GotoFalseWord(jump=1153, if_false=false[113])
 1153:[113] VarEnum(var[104]) -> Ongoing(2)[113]
 1156:[114] VarInt(var[105]) -> 4[114]
 1159:[118] Call(size=0, to=1172)
 1172:[122] VarEnum(var[113]) -> Ongoing(2)[122]
 1175:[123] ConstEnum(val=3) -> Halt(3)[123]
 1177:[124] NeEnum(v1=2[122], v2=3[123]) -> true[122]
 1178:[123] GotoFalseWord(jump=1203, if_false=true[122])
 1181:[122] VarEnum(var[113]) -> Ongoing(2)[122]
 1184:[123] VarInt(var[114]) -> 4[123]
 1187:[127] ConstInt(val=1) -> 1[127]
 1192:[131] AddInt(v1=4[123], v2=1[127]) -> 5[123]
 1193:[127] Call(size=0, to=1119)
 1119:[131] VarEnum(var[122]) -> Ongoing(2)[131]
 1122:[132] ConstEnum(val=1) -> Start(1)[132]
 1124:[133] EqEnum(v1=2[131], v2=1[132]) -> false[131]
 1125:[132] GotoFalseWord(jump=1136, if_false=false[131])
 1136:[131] VarInt(var[123]) -> 5[131]
 1139:[135] ConstInt(val=10) -> 10[135]
 1144:[139] GtInt(v1=5[131], v2=10[135]) -> false[131]
 1145:[132] GotoFalseWord(jump=1153, if_false=false[131])
 1153:[131] VarEnum(var[122]) -> Ongoing(2)[131]
 1156:[132] VarInt(var[123]) -> 5[132]
 1159:[136] Call(size=0, to=1172)
 1172:[140] VarEnum(var[131]) -> Ongoing(2)[140]
 1175:[141] ConstEnum(val=3) -> Halt(3)[141]
 1177:[142] NeEnum(v1=2[140], v2=3[141]) -> true[140]
 1178:[141] GotoFalseWord(jump=1203, if_false=true[140])
 1181:[140] VarEnum(var[131]) -> Ongoing(2)[140]
 1184:[141] VarInt(var[132]) -> 5[141]
 1187:[145] ConstInt(val=1) -> 1[145]
 1192:[149] AddInt(v1=5[141], v2=1[145]) -> 6[141]
 1193:[145] Call(size=0, to=1119)
 1119:[149] VarEnum(var[140]) -> Ongoing(2)[149]
 1122:[150] ConstEnum(val=1) -> Start(1)[150]
 1124:[151] EqEnum(v1=2[149], v2=1[150]) -> false[149]
 1125:[150] GotoFalseWord(jump=1136, if_false=false[149])
 1136:[149] VarInt(var[141]) -> 6[149]
 1139:[153] ConstInt(val=10) -> 10[153]
 1144:[157] GtInt(v1=6[149], v2=10[153]) -> false[149]
 1145:[150] GotoFalseWord(jump=1153, if_false=false[149])
 1153:[149] VarEnum(var[140]) -> Ongoing(2)[149]
 1156:[150] VarInt(var[141]) -> 6[150]
 1159:[154] Call(size=0, to=1172)
 1172:[158] VarEnum(var[149]) -> Ongoing(2)[158]
 1175:[159] ConstEnum(val=3) -> Halt(3)[159]
 1177:[160] NeEnum(v1=2[158], v2=3[159]) -> true[158]
 1178:[159] GotoFalseWord(jump=1203, if_false=true[158])
 1181:[158] VarEnum(var[149]) -> Ongoing(2)[158]
 1184:[159] VarInt(var[150]) -> 6[159]
 1187:[163] ConstInt(val=1) -> 1[163]
 1192:[167] AddInt(v1=6[159], v2=1[163]) -> 7[159]
 1193:[163] Call(size=0, to=1119)
 1119:[167] VarEnum(var[158]) -> Ongoing(2)[167]
 1122:[168] ConstEnum(val=1) -> Start(1)[168]
 1124:[169] EqEnum(v1=2[167], v2=1[168]) -> false[167]
 1125:[168] GotoFalseWord(jump=1136, if_false=false[167])
 1136:[167] VarInt(var[159]) -> 7[167]
 1139:[171] ConstInt(val=10) -> 10[171]
 1144:[175] GtInt(v1=7[167], v2=10[171]) -> false[167]
 1145:[168] GotoFalseWord(jump=1153, if_false=false[167])
 1153:[167] VarEnum(var[158]) -> Ongoing(2)[167]
 1156:[168] VarInt(var[159]) -> 7[168]
 1159:[172] Call(size=0, to=1172)
 1172:[176] VarEnum(var[167]) -> Ongoing(2)[176]
 1175:[177] ConstEnum(val=3) -> Halt(3)[177]
 1177:[178] NeEnum(v1=2[176], v2=3[177]) -> true[176]
 1178:[177] GotoFalseWord(jump=1203, if_false=true[176])
 1181:[176] VarEnum(var[167]) -> Ongoing(2)[176]
 1184:[177] VarInt(var[168]) -> 7[177]
 1187:[181] ConstInt(val=1) -> 1[181]
 1192:[185] AddInt(v1=7[177], v2=1[181]) -> 8[177]
 1193:[181] Call(size=0, to=1119)
 1119:[185] VarEnum(var[176]) -> Ongoing(2)[185]
 1122:[186] ConstEnum(val=1) -> Start(1)[186]
 1124:[187] EqEnum(v1=2[185], v2=1[186]) -> false[185]
 1125:[186] GotoFalseWord(jump=1136, if_false=false[185])
 1136:[185] VarInt(var[177]) -> 8[185]
 1139:[189] ConstInt(val=10) -> 10[189]
 1144:[193] GtInt(v1=8[185], v2=10[189]) -> false[185]
 1145:[186] GotoFalseWord(jump=1153, if_false=false[185])
 1153:[185] VarEnum(var[176]) -> Ongoing(2)[185]
 1156:[186] VarInt(var[177]) -> 8[186]
 1159:[190] Call(size=0, to=1172)
 1172:[194] VarEnum(var[185]) -> Ongoing(2)[194]
 1175:[195] ConstEnum(val=3) -> Halt(3)[195]
 1177:[196] NeEnum(v1=2[194], v2=3[195]) -> true[194]
 1178:[195] GotoFalseWord(jump=1203, if_false=true[194])
 1181:[194] VarEnum(var[185]) -> Ongoing(2)[194]
 1184:[195] VarInt(var[186]) -> 8[195]
 1187:[199] ConstInt(val=1) -> 1[199]
 1192:[203] AddInt(v1=8[195], v2=1[199]) -> 9[195]
 1193:[199] Call(size=0, to=1119)
 1119:[203] VarEnum(var[194]) -> Ongoing(2)[203]
 1122:[204] ConstEnum(val=1) -> Start(1)[204]
 1124:[205] EqEnum(v1=2[203], v2=1[204]) -> false[203]
 1125:[204] GotoFalseWord(jump=1136, if_false=false[203])
 1136:[203] VarInt(var[195]) -> 9[203]
 1139:[207] ConstInt(val=10) -> 10[207]
 1144:[211] GtInt(v1=9[203], v2=10[207]) -> false[203]
 1145:[204] GotoFalseWord(jump=1153, if_false=false[203])
 1153:[203] VarEnum(var[194]) -> Ongoing(2)[203]
 1156:[204] VarInt(var[195]) -> 9[204]
 1159:[208] Call(size=0, to=1172)
 1172:[212] VarEnum(var[203]) -> Ongoing(2)[212]
 1175:[213] ConstEnum(val=3) -> Halt(3)[213]
 1177:[214] NeEnum(v1=2[212], v2=3[213]) -> true[212]
 1178:[213] GotoFalseWord(jump=1203, if_false=true[212])
 1181:[212] VarEnum(var[203]) -> Ongoing(2)[212]
 1184:[213] VarInt(var[204]) -> 9[213]
 1187:[217] ConstInt(val=1) -> 1[217]
 1192:[221] AddInt(v1=9[213], v2=1[217]) -> 10[213]
 1193:[217] Call(size=0, to=1119)
 1119:[221] VarEnum(var[212]) -> Ongoing(2)[221]
 1122:[222] ConstEnum(val=1) -> Start(1)[222]
 1124:[223] EqEnum(v1=2[221], v2=1[222]) -> false[221]
 1125:[222] GotoFalseWord(jump=1136, if_false=false[221])
 1136:[221] VarInt(var[213]) -> 10[221]
 1139:[225] ConstInt(val=10) -> 10[225]
 1144:[229] GtInt(v1=10[221], v2=10[225]) -> false[221]
 1145:[222] GotoFalseWord(jump=1153, if_false=false[221])
 1153:[221] VarEnum(var[212]) -> Ongoing(2)[221]
 1156:[222] VarInt(var[213]) -> 10[222]
 1159:[226] Call(size=0, to=1172)
 1172:[230] VarEnum(var[221]) -> Ongoing(2)[230]
 1175:[231] ConstEnum(val=3) -> Halt(3)[231]
 1177:[232] NeEnum(v1=2[230], v2=3[231]) -> true[230]
 1178:[231] GotoFalseWord(jump=1203, if_false=true[230])
 1181:[230] VarEnum(var[221]) -> Ongoing(2)[230]
 1184:[231] VarInt(var[222]) -> 10[231]
 1187:[235] ConstInt(val=1) -> 1[235]
 1192:[239] AddInt(v1=10[231], v2=1[235]) -> 11[231]
 1193:[235] Call(size=0, to=1119)
 1119:[239] VarEnum(var[230]) -> Ongoing(2)[239]
 1122:[240] ConstEnum(val=1) -> Start(1)[240]
 1124:[241] EqEnum(v1=2[239], v2=1[240]) -> false[239]
 1125:[240] GotoFalseWord(jump=1136, if_false=false[239])
 1136:[239] VarInt(var[231]) -> 11[239]
 1139:[243] ConstInt(val=10) -> 10[243]
 1144:[247] GtInt(v1=11[239], v2=10[243]) -> true[239]
 1145:[240] GotoFalseWord(jump=1153, if_false=true[239])
 1148:[239] ConstEnum(val=3) -> Halt(3)[239]
 1150:[240] PutEnum(var[230], value=3[239])
 1153:[239] VarEnum(var[230]) -> Halt(3)[239]
 1156:[240] VarInt(var[231]) -> 11[240]
 1159:[244] Call(size=0, to=1172)
 1172:[248] VarEnum(var[239]) -> Halt(3)[248]
 1175:[249] ConstEnum(val=3) -> Halt(3)[249]
 1177:[250] NeEnum(v1=3[248], v2=3[249]) -> false[248]
 1178:[249] GotoFalseWord(jump=1203, if_false=false[248])
 1203:[248] ConstInt(val=1) -> 1[248]
 1208:[252] VarInt(var[240]) -> 11[252]
 1211:[256] AddInt(v1=1[248], v2=11[252]) -> 12[248]
 1212:[252] Return(ret=1166[244], value=4, discard=13) -> 12[239]
 1166:[243] Return(ret=1200[235], value=4, discard=13) -> 12[230]
 1200:[234] GotoWord(jump=1212)
 1212:[234] Return(ret=1166[226], value=4, discard=13) -> 12[221]
 1166:[225] Return(ret=1200[217], value=4, discard=13) -> 12[212]
 1200:[216] GotoWord(jump=1212)
 1212:[216] Return(ret=1166[208], value=4, discard=13) -> 12[203]
 1166:[207] Return(ret=1200[199], value=4, discard=13) -> 12[194]
 1200:[198] GotoWord(jump=1212)
 1212:[198] Return(ret=1166[190], value=4, discard=13) -> 12[185]
 1166:[189] Return(ret=1200[181], value=4, discard=13) -> 12[176]
 1200:[180] GotoWord(jump=1212)
 1212:[180] Return(ret=1166[172], value=4, discard=13) -> 12[167]
 1166:[171] Return(ret=1200[163], value=4, discard=13) -> 12[158]
 1200:[162] GotoWord(jump=1212)
 1212:[162] Return(ret=1166[154], value=4, discard=13) -> 12[149]
 1166:[153] Return(ret=1200[145], value=4, discard=13) -> 12[140]
 1200:[144] GotoWord(jump=1212)
 1212:[144] Return(ret=1166[136], value=4, discard=13) -> 12[131]
 1166:[135] Return(ret=1200[127], value=4, discard=13) -> 12[122]
 1200:[126] GotoWord(jump=1212)
 1212:[126] Return(ret=1166[118], value=4, discard=13) -> 12[113]
 1166:[117] Return(ret=1200[109], value=4, discard=13) -> 12[104]
 1200:[108] GotoWord(jump=1212)
 1212:[108] Return(ret=1166[100], value=4, discard=13) -> 12[95]
 1166:[99] Return(ret=1200[91], value=4, discard=13) -> 12[86]
 1200:[90] GotoWord(jump=1212)
 1212:[90] Return(ret=1166[82], value=4, discard=13) -> 12[77]
 1166:[81] Return(ret=1200[73], value=4, discard=13) -> 12[68]
 1200:[72] GotoWord(jump=1212)
 1212:[72] Return(ret=1166[64], value=4, discard=13) -> 12[59]
 1166:[63] Return(ret=1200[55], value=4, discard=13) -> 12[50]
 1200:[54] GotoWord(jump=1212)
 1212:[54] Return(ret=1166[46], value=4, discard=13) -> 12[41]
 1166:[45] Return(ret=1233[37], value=4, discard=13) -> 12[32]
   15:[36] VarInt(var[32]) -> 12[36]
   18:[40] ConstInt(val=12) -> 12[40]
   23:[44] EqInt(v1=12[36], v2=12[40]) -> true[36]
   24:[37] GotoFalseWord(jump=30, if_false=true[36])
   27:[36] GotoWord(jump=80)
   80:[36] FreeText(var[8])
   83:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
