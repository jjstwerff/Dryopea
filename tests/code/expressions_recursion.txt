fn first(s: State, c: integer) -> integer {
	if s == Start {
		s = Ongoing
	} else if c > 10 {
		s = Halt
	}
	second(s, c)
}

fn second(s: State, c: integer) -> integer {
	if s != Halt {
		first(s, c + 1)
	} else {
		1 + c
	}
}

enum State {
	Start,
	Ongoing,
	Halt
}

pub fn test() {
    test_value = {first(Start, 0)};
    assert(
        test_value == 12,
        "Test failed {test_value} != 12"
    );
}
Type 12:State[1]:Enum(["Start", "Ongoing", "Halt"])

fn first(s:State, c:integer) -> integer {#1 block
  if OpEqEnum(s, 1u8(12)) {#2 block
    s:State = 2u8(12);
  }#2 else if OpGtInt(c, 10i32) {#3 block
    s:State = 3u8(12);
  }#3 else null;
  second(s, c);
}#1:integer

byte-code for recursion:first(s: State[0], c: integer[1]) -> integer
 655[5]: return-address
 655[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 658[10]: ConstEnum(val=1) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12]
 660[11]: EqEnum(v1: enumerate, v2: enumerate) -> boolean
 661[10]: GotoFalseWord(jump=672, if_false: boolean)
 664[9]: ConstEnum(val=2) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 666[10]: PutEnum(var[0], value: enumerate)
 669[9]: GotoWord(jump=689)
 672[9]: VarInt(var[1]) -> integer var=c[1]:integer in 0
 675[13]: ConstInt(val=10) -> integer
 680[17]: GtInt(v1: integer, v2: integer) -> boolean
 681[10]: GotoFalseWord(jump=689, if_false: boolean)
 684[9]: ConstEnum(val=3) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 686[10]: PutEnum(var[0], value: enumerate)
 689[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 692[10]: VarInt(var[1]) -> integer var=c[1]:integer in 0
 695[14]: Call(size=0, to=0)
 702[13]: Return(ret=5, value=4, discard=13) type=integer[4]:Base[0]

fn second(s:State, c:integer) -> integer {#1 block
  if OpNeEnum(s, 3u8(12)) {#2 block
    first(s, OpAddInt(c, 1i32));
  }#2:integer else {#3 block
    OpAddInt(1i32, c);
  }#3:integer;
}#1:integer

byte-code for recursion:second(s: State[0], c: integer[1]) -> integer
 708[5]: return-address
 708[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 711[10]: ConstEnum(val=3) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12]
 713[11]: NeEnum(v1: enumerate, v2: enumerate) -> boolean
 714[10]: GotoFalseWord(jump=739, if_false: boolean)
 717[9]: VarEnum(var[0]) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=s[0]:State in 0
 720[10]: VarInt(var[1]) -> integer var=c[1]:integer in 0
 723[14]: ConstInt(val=1) -> integer
 728[18]: AddInt(v1: integer, v2: integer) -> integer
 729[14]: Call(size=0, to=655)
 736[13]: GotoWord(jump=748)
 739[9]: ConstInt(val=1) -> integer
 744[13]: VarInt(var[1]) -> integer var=c[1]:integer in 0
 747[17]: AddInt(v1: integer, v2: integer) -> integer
 748[13]: Return(ret=5, value=4, discard=13) type=integer[4]:Base[0]

fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    first(1u8(12), 0i32);
  }#2:integer;
  if OpEqInt(test_value, 12i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 12");
    __work_1;
  }#3:text);
}#1

byte-code for recursion:test()
 754[0]: return-address
 754[4]: Text() var=__work_1[4]:text in 1
 755[28]: ConstEnum(val=1) -> enumerate type=State[1]:Enum(["Start", "Ongoing", "Halt"])[12] var=test_value[28]:integer in 1
 757[29]: ConstInt(val=0) -> integer
 762[33]: Call(size=0, to=655)
 769[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 772[36]: ConstInt(val=12) -> integer
 777[40]: EqInt(v1: integer, v2: integer) -> boolean
 778[33]: GotoFalseWord(jump=784, if_false: boolean)
 781[32]: GotoWord(jump=834)
 784[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 787[32]: ConstText(_value="Test failed ") -> text
 801[48]: AppendText(var[4], v1: text)
 804[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 807[36]: ConstInt(val=0) -> integer
 812[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 819[32]: ConstText(_value=" != 12") -> text
 827[48]: AppendText(var[4], v1: text)
 830[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 833[48]: Panic(message: text)
 834[32]: FreeText(var[4])
 837[32]: Return(ret=0, value=0, discard=32)

Execute test:
  754:[8] Text()
  755:[32] ConstEnum(val=1) -> Start(1)[32]
  757:[33] ConstInt(val=0) -> 0[33]
  762:[37] Call(size=0, to=655)
  655:[41] VarEnum(var[32]) -> Start(1)[41]
  658:[42] ConstEnum(val=1) -> Start(1)[42]
  660:[43] EqEnum(v1=1[41], v2=1[42]) -> true[41]
  661:[42] GotoFalseWord(jump=672, if_false=true[41])
  664:[41] ConstEnum(val=2) -> Ongoing(2)[41]
  666:[42] PutEnum(var[32], value=2[41])
  669:[41] GotoWord(jump=689)
  689:[41] VarEnum(var[32]) -> Ongoing(2)[41]
  692:[42] VarInt(var[33]) -> 0[42]
  695:[46] Call(size=0, to=708)
  708:[50] VarEnum(var[41]) -> Ongoing(2)[50]
  711:[51] ConstEnum(val=3) -> Halt(3)[51]
  713:[52] NeEnum(v1=2[50], v2=3[51]) -> true[50]
  714:[51] GotoFalseWord(jump=739, if_false=true[50])
  717:[50] VarEnum(var[41]) -> Ongoing(2)[50]
  720:[51] VarInt(var[42]) -> 0[51]
  723:[55] ConstInt(val=1) -> 1[55]
  728:[59] AddInt(v1=0[51], v2=1[55]) -> 1[51]
  729:[55] Call(size=0, to=655)
  655:[59] VarEnum(var[50]) -> Ongoing(2)[59]
  658:[60] ConstEnum(val=1) -> Start(1)[60]
  660:[61] EqEnum(v1=2[59], v2=1[60]) -> false[59]
  661:[60] GotoFalseWord(jump=672, if_false=false[59])
  672:[59] VarInt(var[51]) -> 1[59]
  675:[63] ConstInt(val=10) -> 10[63]
  680:[67] GtInt(v1=1[59], v2=10[63]) -> false[59]
  681:[60] GotoFalseWord(jump=689, if_false=false[59])
  689:[59] VarEnum(var[50]) -> Ongoing(2)[59]
  692:[60] VarInt(var[51]) -> 1[60]
  695:[64] Call(size=0, to=708)
  708:[68] VarEnum(var[59]) -> Ongoing(2)[68]
  711:[69] ConstEnum(val=3) -> Halt(3)[69]
  713:[70] NeEnum(v1=2[68], v2=3[69]) -> true[68]
  714:[69] GotoFalseWord(jump=739, if_false=true[68])
  717:[68] VarEnum(var[59]) -> Ongoing(2)[68]
  720:[69] VarInt(var[60]) -> 1[69]
  723:[73] ConstInt(val=1) -> 1[73]
  728:[77] AddInt(v1=1[69], v2=1[73]) -> 2[69]
  729:[73] Call(size=0, to=655)
  655:[77] VarEnum(var[68]) -> Ongoing(2)[77]
  658:[78] ConstEnum(val=1) -> Start(1)[78]
  660:[79] EqEnum(v1=2[77], v2=1[78]) -> false[77]
  661:[78] GotoFalseWord(jump=672, if_false=false[77])
  672:[77] VarInt(var[69]) -> 2[77]
  675:[81] ConstInt(val=10) -> 10[81]
  680:[85] GtInt(v1=2[77], v2=10[81]) -> false[77]
  681:[78] GotoFalseWord(jump=689, if_false=false[77])
  689:[77] VarEnum(var[68]) -> Ongoing(2)[77]
  692:[78] VarInt(var[69]) -> 2[78]
  695:[82] Call(size=0, to=708)
  708:[86] VarEnum(var[77]) -> Ongoing(2)[86]
  711:[87] ConstEnum(val=3) -> Halt(3)[87]
  713:[88] NeEnum(v1=2[86], v2=3[87]) -> true[86]
  714:[87] GotoFalseWord(jump=739, if_false=true[86])
  717:[86] VarEnum(var[77]) -> Ongoing(2)[86]
  720:[87] VarInt(var[78]) -> 2[87]
  723:[91] ConstInt(val=1) -> 1[91]
  728:[95] AddInt(v1=2[87], v2=1[91]) -> 3[87]
  729:[91] Call(size=0, to=655)
  655:[95] VarEnum(var[86]) -> Ongoing(2)[95]
  658:[96] ConstEnum(val=1) -> Start(1)[96]
  660:[97] EqEnum(v1=2[95], v2=1[96]) -> false[95]
  661:[96] GotoFalseWord(jump=672, if_false=false[95])
  672:[95] VarInt(var[87]) -> 3[95]
  675:[99] ConstInt(val=10) -> 10[99]
  680:[103] GtInt(v1=3[95], v2=10[99]) -> false[95]
  681:[96] GotoFalseWord(jump=689, if_false=false[95])
  689:[95] VarEnum(var[86]) -> Ongoing(2)[95]
  692:[96] VarInt(var[87]) -> 3[96]
  695:[100] Call(size=0, to=708)
  708:[104] VarEnum(var[95]) -> Ongoing(2)[104]
  711:[105] ConstEnum(val=3) -> Halt(3)[105]
  713:[106] NeEnum(v1=2[104], v2=3[105]) -> true[104]
  714:[105] GotoFalseWord(jump=739, if_false=true[104])
  717:[104] VarEnum(var[95]) -> Ongoing(2)[104]
  720:[105] VarInt(var[96]) -> 3[105]
  723:[109] ConstInt(val=1) -> 1[109]
  728:[113] AddInt(v1=3[105], v2=1[109]) -> 4[105]
  729:[109] Call(size=0, to=655)
  655:[113] VarEnum(var[104]) -> Ongoing(2)[113]
  658:[114] ConstEnum(val=1) -> Start(1)[114]
  660:[115] EqEnum(v1=2[113], v2=1[114]) -> false[113]
  661:[114] GotoFalseWord(jump=672, if_false=false[113])
  672:[113] VarInt(var[105]) -> 4[113]
  675:[117] ConstInt(val=10) -> 10[117]
  680:[121] GtInt(v1=4[113], v2=10[117]) -> false[113]
  681:[114] GotoFalseWord(jump=689, if_false=false[113])
  689:[113] VarEnum(var[104]) -> Ongoing(2)[113]
  692:[114] VarInt(var[105]) -> 4[114]
  695:[118] Call(size=0, to=708)
  708:[122] VarEnum(var[113]) -> Ongoing(2)[122]
  711:[123] ConstEnum(val=3) -> Halt(3)[123]
  713:[124] NeEnum(v1=2[122], v2=3[123]) -> true[122]
  714:[123] GotoFalseWord(jump=739, if_false=true[122])
  717:[122] VarEnum(var[113]) -> Ongoing(2)[122]
  720:[123] VarInt(var[114]) -> 4[123]
  723:[127] ConstInt(val=1) -> 1[127]
  728:[131] AddInt(v1=4[123], v2=1[127]) -> 5[123]
  729:[127] Call(size=0, to=655)
  655:[131] VarEnum(var[122]) -> Ongoing(2)[131]
  658:[132] ConstEnum(val=1) -> Start(1)[132]
  660:[133] EqEnum(v1=2[131], v2=1[132]) -> false[131]
  661:[132] GotoFalseWord(jump=672, if_false=false[131])
  672:[131] VarInt(var[123]) -> 5[131]
  675:[135] ConstInt(val=10) -> 10[135]
  680:[139] GtInt(v1=5[131], v2=10[135]) -> false[131]
  681:[132] GotoFalseWord(jump=689, if_false=false[131])
  689:[131] VarEnum(var[122]) -> Ongoing(2)[131]
  692:[132] VarInt(var[123]) -> 5[132]
  695:[136] Call(size=0, to=708)
  708:[140] VarEnum(var[131]) -> Ongoing(2)[140]
  711:[141] ConstEnum(val=3) -> Halt(3)[141]
  713:[142] NeEnum(v1=2[140], v2=3[141]) -> true[140]
  714:[141] GotoFalseWord(jump=739, if_false=true[140])
  717:[140] VarEnum(var[131]) -> Ongoing(2)[140]
  720:[141] VarInt(var[132]) -> 5[141]
  723:[145] ConstInt(val=1) -> 1[145]
  728:[149] AddInt(v1=5[141], v2=1[145]) -> 6[141]
  729:[145] Call(size=0, to=655)
  655:[149] VarEnum(var[140]) -> Ongoing(2)[149]
  658:[150] ConstEnum(val=1) -> Start(1)[150]
  660:[151] EqEnum(v1=2[149], v2=1[150]) -> false[149]
  661:[150] GotoFalseWord(jump=672, if_false=false[149])
  672:[149] VarInt(var[141]) -> 6[149]
  675:[153] ConstInt(val=10) -> 10[153]
  680:[157] GtInt(v1=6[149], v2=10[153]) -> false[149]
  681:[150] GotoFalseWord(jump=689, if_false=false[149])
  689:[149] VarEnum(var[140]) -> Ongoing(2)[149]
  692:[150] VarInt(var[141]) -> 6[150]
  695:[154] Call(size=0, to=708)
  708:[158] VarEnum(var[149]) -> Ongoing(2)[158]
  711:[159] ConstEnum(val=3) -> Halt(3)[159]
  713:[160] NeEnum(v1=2[158], v2=3[159]) -> true[158]
  714:[159] GotoFalseWord(jump=739, if_false=true[158])
  717:[158] VarEnum(var[149]) -> Ongoing(2)[158]
  720:[159] VarInt(var[150]) -> 6[159]
  723:[163] ConstInt(val=1) -> 1[163]
  728:[167] AddInt(v1=6[159], v2=1[163]) -> 7[159]
  729:[163] Call(size=0, to=655)
  655:[167] VarEnum(var[158]) -> Ongoing(2)[167]
  658:[168] ConstEnum(val=1) -> Start(1)[168]
  660:[169] EqEnum(v1=2[167], v2=1[168]) -> false[167]
  661:[168] GotoFalseWord(jump=672, if_false=false[167])
  672:[167] VarInt(var[159]) -> 7[167]
  675:[171] ConstInt(val=10) -> 10[171]
  680:[175] GtInt(v1=7[167], v2=10[171]) -> false[167]
  681:[168] GotoFalseWord(jump=689, if_false=false[167])
  689:[167] VarEnum(var[158]) -> Ongoing(2)[167]
  692:[168] VarInt(var[159]) -> 7[168]
  695:[172] Call(size=0, to=708)
  708:[176] VarEnum(var[167]) -> Ongoing(2)[176]
  711:[177] ConstEnum(val=3) -> Halt(3)[177]
  713:[178] NeEnum(v1=2[176], v2=3[177]) -> true[176]
  714:[177] GotoFalseWord(jump=739, if_false=true[176])
  717:[176] VarEnum(var[167]) -> Ongoing(2)[176]
  720:[177] VarInt(var[168]) -> 7[177]
  723:[181] ConstInt(val=1) -> 1[181]
  728:[185] AddInt(v1=7[177], v2=1[181]) -> 8[177]
  729:[181] Call(size=0, to=655)
  655:[185] VarEnum(var[176]) -> Ongoing(2)[185]
  658:[186] ConstEnum(val=1) -> Start(1)[186]
  660:[187] EqEnum(v1=2[185], v2=1[186]) -> false[185]
  661:[186] GotoFalseWord(jump=672, if_false=false[185])
  672:[185] VarInt(var[177]) -> 8[185]
  675:[189] ConstInt(val=10) -> 10[189]
  680:[193] GtInt(v1=8[185], v2=10[189]) -> false[185]
  681:[186] GotoFalseWord(jump=689, if_false=false[185])
  689:[185] VarEnum(var[176]) -> Ongoing(2)[185]
  692:[186] VarInt(var[177]) -> 8[186]
  695:[190] Call(size=0, to=708)
  708:[194] VarEnum(var[185]) -> Ongoing(2)[194]
  711:[195] ConstEnum(val=3) -> Halt(3)[195]
  713:[196] NeEnum(v1=2[194], v2=3[195]) -> true[194]
  714:[195] GotoFalseWord(jump=739, if_false=true[194])
  717:[194] VarEnum(var[185]) -> Ongoing(2)[194]
  720:[195] VarInt(var[186]) -> 8[195]
  723:[199] ConstInt(val=1) -> 1[199]
  728:[203] AddInt(v1=8[195], v2=1[199]) -> 9[195]
  729:[199] Call(size=0, to=655)
  655:[203] VarEnum(var[194]) -> Ongoing(2)[203]
  658:[204] ConstEnum(val=1) -> Start(1)[204]
  660:[205] EqEnum(v1=2[203], v2=1[204]) -> false[203]
  661:[204] GotoFalseWord(jump=672, if_false=false[203])
  672:[203] VarInt(var[195]) -> 9[203]
  675:[207] ConstInt(val=10) -> 10[207]
  680:[211] GtInt(v1=9[203], v2=10[207]) -> false[203]
  681:[204] GotoFalseWord(jump=689, if_false=false[203])
  689:[203] VarEnum(var[194]) -> Ongoing(2)[203]
  692:[204] VarInt(var[195]) -> 9[204]
  695:[208] Call(size=0, to=708)
  708:[212] VarEnum(var[203]) -> Ongoing(2)[212]
  711:[213] ConstEnum(val=3) -> Halt(3)[213]
  713:[214] NeEnum(v1=2[212], v2=3[213]) -> true[212]
  714:[213] GotoFalseWord(jump=739, if_false=true[212])
  717:[212] VarEnum(var[203]) -> Ongoing(2)[212]
  720:[213] VarInt(var[204]) -> 9[213]
  723:[217] ConstInt(val=1) -> 1[217]
  728:[221] AddInt(v1=9[213], v2=1[217]) -> 10[213]
  729:[217] Call(size=0, to=655)
  655:[221] VarEnum(var[212]) -> Ongoing(2)[221]
  658:[222] ConstEnum(val=1) -> Start(1)[222]
  660:[223] EqEnum(v1=2[221], v2=1[222]) -> false[221]
  661:[222] GotoFalseWord(jump=672, if_false=false[221])
  672:[221] VarInt(var[213]) -> 10[221]
  675:[225] ConstInt(val=10) -> 10[225]
  680:[229] GtInt(v1=10[221], v2=10[225]) -> false[221]
  681:[222] GotoFalseWord(jump=689, if_false=false[221])
  689:[221] VarEnum(var[212]) -> Ongoing(2)[221]
  692:[222] VarInt(var[213]) -> 10[222]
  695:[226] Call(size=0, to=708)
  708:[230] VarEnum(var[221]) -> Ongoing(2)[230]
  711:[231] ConstEnum(val=3) -> Halt(3)[231]
  713:[232] NeEnum(v1=2[230], v2=3[231]) -> true[230]
  714:[231] GotoFalseWord(jump=739, if_false=true[230])
  717:[230] VarEnum(var[221]) -> Ongoing(2)[230]
  720:[231] VarInt(var[222]) -> 10[231]
  723:[235] ConstInt(val=1) -> 1[235]
  728:[239] AddInt(v1=10[231], v2=1[235]) -> 11[231]
  729:[235] Call(size=0, to=655)
  655:[239] VarEnum(var[230]) -> Ongoing(2)[239]
  658:[240] ConstEnum(val=1) -> Start(1)[240]
  660:[241] EqEnum(v1=2[239], v2=1[240]) -> false[239]
  661:[240] GotoFalseWord(jump=672, if_false=false[239])
  672:[239] VarInt(var[231]) -> 11[239]
  675:[243] ConstInt(val=10) -> 10[243]
  680:[247] GtInt(v1=11[239], v2=10[243]) -> true[239]
  681:[240] GotoFalseWord(jump=689, if_false=true[239])
  684:[239] ConstEnum(val=3) -> Halt(3)[239]
  686:[240] PutEnum(var[230], value=3[239])
  689:[239] VarEnum(var[230]) -> Halt(3)[239]
  692:[240] VarInt(var[231]) -> 11[240]
  695:[244] Call(size=0, to=708)
  708:[248] VarEnum(var[239]) -> Halt(3)[248]
  711:[249] ConstEnum(val=3) -> Halt(3)[249]
  713:[250] NeEnum(v1=3[248], v2=3[249]) -> false[248]
  714:[249] GotoFalseWord(jump=739, if_false=false[248])
  739:[248] ConstInt(val=1) -> 1[248]
  744:[252] VarInt(var[240]) -> 11[252]
  747:[256] AddInt(v1=1[248], v2=11[252]) -> 12[248]
  748:[252] Return(ret=702[244], value=4, discard=13) -> 12[239]
  702:[243] Return(ret=736[235], value=4, discard=13) -> 12[230]
  736:[234] GotoWord(jump=748)
  748:[234] Return(ret=702[226], value=4, discard=13) -> 12[221]
  702:[225] Return(ret=736[217], value=4, discard=13) -> 12[212]
  736:[216] GotoWord(jump=748)
  748:[216] Return(ret=702[208], value=4, discard=13) -> 12[203]
  702:[207] Return(ret=736[199], value=4, discard=13) -> 12[194]
  736:[198] GotoWord(jump=748)
  748:[198] Return(ret=702[190], value=4, discard=13) -> 12[185]
  702:[189] Return(ret=736[181], value=4, discard=13) -> 12[176]
  736:[180] GotoWord(jump=748)
  748:[180] Return(ret=702[172], value=4, discard=13) -> 12[167]
  702:[171] Return(ret=736[163], value=4, discard=13) -> 12[158]
  736:[162] GotoWord(jump=748)
  748:[162] Return(ret=702[154], value=4, discard=13) -> 12[149]
  702:[153] Return(ret=736[145], value=4, discard=13) -> 12[140]
  736:[144] GotoWord(jump=748)
  748:[144] Return(ret=702[136], value=4, discard=13) -> 12[131]
  702:[135] Return(ret=736[127], value=4, discard=13) -> 12[122]
  736:[126] GotoWord(jump=748)
  748:[126] Return(ret=702[118], value=4, discard=13) -> 12[113]
  702:[117] Return(ret=736[109], value=4, discard=13) -> 12[104]
  736:[108] GotoWord(jump=748)
  748:[108] Return(ret=702[100], value=4, discard=13) -> 12[95]
  702:[99] Return(ret=736[91], value=4, discard=13) -> 12[86]
  736:[90] GotoWord(jump=748)
  748:[90] Return(ret=702[82], value=4, discard=13) -> 12[77]
  702:[81] Return(ret=736[73], value=4, discard=13) -> 12[68]
  736:[72] GotoWord(jump=748)
  748:[72] Return(ret=702[64], value=4, discard=13) -> 12[59]
  702:[63] Return(ret=736[55], value=4, discard=13) -> 12[50]
  736:[54] GotoWord(jump=748)
  748:[54] Return(ret=702[46], value=4, discard=13) -> 12[41]
  702:[45] Return(ret=769[37], value=4, discard=13) -> 12[32]
  769:[36] VarInt(var[32]) -> 12[36]
  772:[40] ConstInt(val=12) -> 12[40]
  777:[44] EqInt(v1=12[36], v2=12[40]) -> true[36]
  778:[37] GotoFalseWord(jump=784, if_false=true[36])
  781:[36] GotoWord(jump=834)
  834:[36] FreeText(var[8])
  837:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
