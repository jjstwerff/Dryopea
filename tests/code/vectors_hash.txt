struct Count { t: text, v: integer};
struct Counting { v: vector<Count>, h: hash<Count[t]> };
fn fill(c: Counting) {
  c.v = [
    {t:"One", v:1},
    {t:"Two", v:2},
  ];
  c.v += [
    {t:"Three", v:3},
    {t:"Four", v:4},
    {t:"Five", v:5},
    {t:"Six", v:6},
    {t:"Seven", v:7},
    {t:"Eight", v:8},
    {t:"Nine", v:9},
    {t:"Ten", v:10},
    {t:"Eleven", v:11},
    {t:"Twelve", v:12},
    {t:"Thirteen", v:13}
  ];
}

pub fn test() {
    test_value = {c = Counting {}; fill(c); c.h["Five"].v + c.h["Seven"].v};
    assert(
        test_value == 12,
        "Test failed {test_value} != 12"
    );
}
Type 11:Count[12]:
    t:text[4]
    v:integer[8]

Type 12:Counting[12]:
    v:array<Count>[4] other [1]
    h:hash<Count[t]>[8] other [65535]

Type 13:array<Count>[4]:Array(11)

Type 14:hash<Count[t]>[4]:Hash(11, [0]) keys [tp:6 desc:false field:4, ]

fn fill {#1 block
  {#2 vector
    let _elm_1 = OpNewRecord(c, 12i32, 0i32);
    {#3 object
      OpSetText(_elm_1, 4i32, "One");
      OpSetInt(_elm_1, 8i32, 1i32);
    }#3;
    OpFinishRecord(c, _elm_1, 12i32, 0i32);
    _elm_1 = OpNewRecord(c, 12i32, 0i32);
    {#4 object
      OpSetText(_elm_1, 4i32, "Two");
      OpSetInt(_elm_1, 8i32, 2i32);
    }#4;
    OpFinishRecord(c, _elm_1, 12i32, 0i32);
  }#2;
  {#5 vector
    let _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#6 object
      OpSetText(_elm_2, 4i32, "Three");
      OpSetInt(_elm_2, 8i32, 3i32);
    }#6;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#7 object
      OpSetText(_elm_2, 4i32, "Four");
      OpSetInt(_elm_2, 8i32, 4i32);
    }#7;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#8 object
      OpSetText(_elm_2, 4i32, "Five");
      OpSetInt(_elm_2, 8i32, 5i32);
    }#8;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#9 object
      OpSetText(_elm_2, 4i32, "Six");
      OpSetInt(_elm_2, 8i32, 6i32);
    }#9;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#10 object
      OpSetText(_elm_2, 4i32, "Seven");
      OpSetInt(_elm_2, 8i32, 7i32);
    }#10;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#11 object
      OpSetText(_elm_2, 4i32, "Eight");
      OpSetInt(_elm_2, 8i32, 8i32);
    }#11;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#12 object
      OpSetText(_elm_2, 4i32, "Nine");
      OpSetInt(_elm_2, 8i32, 9i32);
    }#12;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#13 object
      OpSetText(_elm_2, 4i32, "Ten");
      OpSetInt(_elm_2, 8i32, 10i32);
    }#13;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#14 object
      OpSetText(_elm_2, 4i32, "Eleven");
      OpSetInt(_elm_2, 8i32, 11i32);
    }#14;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#15 object
      OpSetText(_elm_2, 4i32, "Twelve");
      OpSetInt(_elm_2, 8i32, 12i32);
    }#15;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
    _elm_2 = OpNewRecord(c, 12i32, 0i32);
    {#16 object
      OpSetText(_elm_2, 4i32, "Thirteen");
      OpSetInt(_elm_2, 8i32, 13i32);
    }#16;
    OpFinishRecord(c, _elm_2, 12i32, 0i32);
  }#5;
}#1

byte-code for hash:fill(c: Counting#[][0])
 668[12]: return-address
 668[16]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 671[28]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
 676[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 679[40]: ConstText(_value="One") -> text(false, [])
 684[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 687[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 690[40]: ConstInt(val=1) -> integer
 695[44]: SetInt(v1: reference#[], fld=8, val: integer)
 698[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 701[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 704[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
 709[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 712[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
 717[40]: PutRef(var[16], value: reference#[])
 720[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 723[40]: ConstText(_value="Two") -> text(false, [])
 728[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 731[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 734[40]: ConstInt(val=2) -> integer
 739[44]: SetInt(v1: reference#[], fld=8, val: integer)
 742[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 745[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 748[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
 753[28]: GenFreeStack(value=0, discard=12)
 757[16]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 760[28]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
 765[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 768[40]: ConstText(_value="Three") -> text(false, [])
 775[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 778[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 781[40]: ConstInt(val=3) -> integer
 786[44]: SetInt(v1: reference#[], fld=8, val: integer)
 789[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 792[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 795[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
 800[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 803[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
 808[40]: PutRef(var[16], value: reference#[])
 811[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 814[40]: ConstText(_value="Four") -> text(false, [])
 820[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 823[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 826[40]: ConstInt(val=4) -> integer
 831[44]: SetInt(v1: reference#[], fld=8, val: integer)
 834[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 837[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 840[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
 845[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 848[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
 853[40]: PutRef(var[16], value: reference#[])
 856[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 859[40]: ConstText(_value="Five") -> text(false, [])
 865[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 868[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 871[40]: ConstInt(val=5) -> integer
 876[44]: SetInt(v1: reference#[], fld=8, val: integer)
 879[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 882[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 885[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
 890[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 893[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
 898[40]: PutRef(var[16], value: reference#[])
 901[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 904[40]: ConstText(_value="Six") -> text(false, [])
 909[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 912[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 915[40]: ConstInt(val=6) -> integer
 920[44]: SetInt(v1: reference#[], fld=8, val: integer)
 923[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 926[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 929[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
 934[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 937[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
 942[40]: PutRef(var[16], value: reference#[])
 945[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 948[40]: ConstText(_value="Seven") -> text(false, [])
 955[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
 958[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 961[40]: ConstInt(val=7) -> integer
 966[44]: SetInt(v1: reference#[], fld=8, val: integer)
 969[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 972[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 975[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
 980[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
 983[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
 988[40]: PutRef(var[16], value: reference#[])
 991[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
 994[40]: ConstText(_value="Eight") -> text(false, [])
1001[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
1004[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1007[40]: ConstInt(val=8) -> integer
1012[44]: SetInt(v1: reference#[], fld=8, val: integer)
1015[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1018[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1021[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
1026[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1029[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
1034[40]: PutRef(var[16], value: reference#[])
1037[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1040[40]: ConstText(_value="Nine") -> text(false, [])
1046[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
1049[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1052[40]: ConstInt(val=9) -> integer
1057[44]: SetInt(v1: reference#[], fld=8, val: integer)
1060[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1063[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1066[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
1071[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1074[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
1079[40]: PutRef(var[16], value: reference#[])
1082[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1085[40]: ConstText(_value="Ten") -> text(false, [])
1090[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
1093[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1096[40]: ConstInt(val=10) -> integer
1101[44]: SetInt(v1: reference#[], fld=8, val: integer)
1104[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1107[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1110[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
1115[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1118[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
1123[40]: PutRef(var[16], value: reference#[])
1126[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1129[40]: ConstText(_value="Eleven") -> text(false, [])
1137[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
1140[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1143[40]: ConstInt(val=11) -> integer
1148[44]: SetInt(v1: reference#[], fld=8, val: integer)
1151[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1154[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1157[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
1162[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1165[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
1170[40]: PutRef(var[16], value: reference#[])
1173[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1176[40]: ConstText(_value="Twelve") -> text(false, [])
1184[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
1187[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1190[40]: ConstInt(val=12) -> integer
1195[44]: SetInt(v1: reference#[], fld=8, val: integer)
1198[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1201[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1204[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
1209[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1212[40]: NewRecord(data: reference#[], parent_tp=12, fld=0) -> reference#[]
1217[40]: PutRef(var[16], value: reference#[])
1220[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1223[40]: ConstText(_value="Thirteen") -> text(false, [])
1233[56]: SetText(v1: reference#[], fld=4, val: text(false, []))
1236[28]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1239[40]: ConstInt(val=13) -> integer
1244[44]: SetInt(v1: reference#[], fld=8, val: integer)
1247[28]: VarRef(var[0]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1250[40]: VarRef(var[16]) -> reference#[] type=Count[12]:{t:text[4], v:integer[8]}[11]
1253[52]: FinishRecord(data: reference#[], rec: reference#[], parent_tp=12, fld=0)
1258[28]: GenFreeStack(value=0, discard=12)
1262[16]: GenReturn(ret=12, value=0, discard=16)

fn test {#1 block
  let __work_1 = "";
  let test_value = {#2 block
    let c = {#3 object
      let _val_1 = OpDatabase(12i32, 12i32);
      OpSetInt(_val_1, 4i32, 0i32);
      OpSetInt(_val_1, 8i32, 0i32);
      _val_1;
    }#3;
    fill(c);
    OpAddInt(OpGetInt(OpGetRecord(OpGetField(c, 8i32, 14i32), 14i32, 1i32, "Five"), 8i32), OpGetInt(OpGetRecord(OpGetField(c, 8i32, 14i32), 14i32, 1i32, "Seven"), 8i32));
  }#2;
  if OpEqInt(test_value, 12i32) null else OpGenPanic({#4 formatting string
    OpClearText(__work_1);
    OpAppendText(__work_1, "Test failed ");
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 12");
    __work_1;
  }#4);
}#1

byte-code for hash:test()
1268[0]: return-address
1268[4]: Text()
1269[28]: Database(size=12, db_tp=12) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1274[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1277[52]: ConstInt(val=0) -> integer
1282[56]: SetInt(v1: reference#[], fld=4, val: integer)
1285[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1288[52]: ConstInt(val=0) -> integer
1293[56]: SetInt(v1: reference#[], fld=8, val: integer)
1296[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1299[52]: GenFreeStack(value=12, discard=12)
1303[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1306[52]: GenCall(size=0, to=668)
1313[40]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1316[52]: GetField(v1: reference#[], fld=8) -> reference#[] type=hash<Count[t]>[4]:Hash(11, [0]) keys [tp:6 desc:false field:4, ][14]
1319[52]: ConstText(_value="Five") -> text(false, [])
1325[68]: GetRecord(data: reference#[], db_tp=14, no_keys=1) -> reference#[]
1329[52]: GetInt(v1: reference#[], fld=8) -> integer
1332[44]: VarRef(var[28]) -> reference#[] type=Counting[12]:{v:array<Count>[4] other [1], h:hash<Count[t]>[8] other [65535]}[12]
1335[56]: GetField(v1: reference#[], fld=8) -> reference#[] type=hash<Count[t]>[4]:Hash(11, [0]) keys [tp:6 desc:false field:4, ][14]
1338[56]: ConstText(_value="Seven") -> text(false, [])
1345[72]: GetRecord(data: reference#[], db_tp=14, no_keys=1) -> reference#[]
1349[56]: GetInt(v1: reference#[], fld=8) -> integer
1352[48]: AddInt(v1: integer, v2: integer) -> integer
1353[44]: GenFreeStack(value=4, discard=12)
1357[32]: VarInt(var[28]) -> integer
1360[36]: ConstInt(val=12) -> integer
1365[40]: EqInt(v1: integer, v2: integer) -> boolean
1366[33]: GenGotoFalseWord(jump=1372, if_false: boolean)
1369[32]: GenGotoWord(jump=1422)
1372[32]: ClearText(var[4])
1375[32]: ConstText(_value="Test failed ") -> text(false, [])
1389[48]: AppendText(var[4], v1: text(false, []))
1392[32]: VarInt(var[28]) -> integer
1395[36]: ConstInt(val=0) -> integer
1400[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
1407[32]: ConstText(_value=" != 12") -> text(false, [])
1415[48]: AppendText(var[4], v1: text(false, []))
1418[32]: VarText(var[4]) -> text(false, [])
1421[48]: GenPanic(message: text(false, []))
1422[32]: GenReturn(ret=0, value=0, discard=32)

Execute test:
 1268:[8] Text()
 1269:[32] Database(size=12, db_tp=12) -> ref(1,1,0)={v:[]}[32]
 1274:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
 1277:[56] ConstInt(val=0) -> 0[56]
 1282:[60] SetInt(v1=ref(1,1,0)[44], fld=4, val=0[56])
 1285:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
 1288:[56] ConstInt(val=0) -> 0[56]
 1293:[60] SetInt(v1=ref(1,1,0)[44], fld=8, val=0[56])
 1296:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
 1299:[56] GenFreeStack(value=12, discard=12)
 1303:[44] VarRef(var[32]) -> ref(1,1,0)={v:[]}[44]
 1306:[56] GenCall(size=0, to=668)
  668:[60] VarRef(var[44]) -> ref(1,1,0)={v:[]}[60]
  671:[72] NewRecord(data=ref(1,1,0)[60], parent_tp=12, fld=0) -> ref(1,13,0)[60]
  676:[72] VarRef(var[60]) -> ref(1,13,0)={}[72]
  679:[84] ConstText(_value="One") -> "One"[84]
  684:[100] SetText(v1=ref(1,13,0)[72], fld=4, val="One"[84])
  687:[72] VarRef(var[60]) -> ref(1,13,0)={t:"One"}[72]
  690:[84] ConstInt(val=1) -> 1[84]
  695:[88] SetInt(v1=ref(1,13,0)[72], fld=8, val=1[84])
  698:[72] VarRef(var[44]) -> ref(1,1,0)={v:[]}[72]
  701:[84] VarRef(var[60]) -> ref(1,13,0)={t:"One",v:1}[84]
  704:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,13,0)[84], parent_tp=12, fld=0)
  709:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1}]}[72]
  712:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,33,0)[72]
  717:[84] PutRef(var[60], value=ref(1,33,0)[72])
  720:[72] VarRef(var[60]) -> ref(1,33,0)={}[72]
  723:[84] ConstText(_value="Two") -> "Two"[84]
  728:[100] SetText(v1=ref(1,33,0)[72], fld=4, val="Two"[84])
  731:[72] VarRef(var[60]) -> ref(1,33,0)={t:"Two"}[72]
  734:[84] ConstInt(val=2) -> 2[84]
  739:[88] SetInt(v1=ref(1,33,0)[72], fld=8, val=2[84])
  742:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1}]}[72]
  745:[84] VarRef(var[60]) -> ref(1,33,0)={t:"Two",v:2}[84]
  748:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,33,0)[84], parent_tp=12, fld=0)
  753:[72] GenFreeStack(value=0, discard=12)
  757:[60] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2}]}[60]
  760:[72] NewRecord(data=ref(1,1,0)[60], parent_tp=12, fld=0) -> ref(1,37,0)[60]
  765:[72] VarRef(var[60]) -> ref(1,37,0)={}[72]
  768:[84] ConstText(_value="Three") -> "Three"[84]
  775:[100] SetText(v1=ref(1,37,0)[72], fld=4, val="Three"[84])
  778:[72] VarRef(var[60]) -> ref(1,37,0)={t:"Three"}[72]
  781:[84] ConstInt(val=3) -> 3[84]
  786:[88] SetInt(v1=ref(1,37,0)[72], fld=8, val=3[84])
  789:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2}]}[72]
  792:[84] VarRef(var[60]) -> ref(1,37,0)={t:"Three",v:3}[84]
  795:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,37,0)[84], parent_tp=12, fld=0)
  800:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3}]}[72]
  803:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,41,0)[72]
  808:[84] PutRef(var[60], value=ref(1,41,0)[72])
  811:[72] VarRef(var[60]) -> ref(1,41,0)={}[72]
  814:[84] ConstText(_value="Four") -> "Four"[84]
  820:[100] SetText(v1=ref(1,41,0)[72], fld=4, val="Four"[84])
  823:[72] VarRef(var[60]) -> ref(1,41,0)={t:"Four"}[72]
  826:[84] ConstInt(val=4) -> 4[84]
  831:[88] SetInt(v1=ref(1,41,0)[72], fld=8, val=4[84])
  834:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3}]}[72]
  837:[84] VarRef(var[60]) -> ref(1,41,0)={t:"Four",v:4}[84]
  840:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,41,0)[84], parent_tp=12, fld=0)
  845:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4}]}[72]
  848:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,45,0)[72]
  853:[84] PutRef(var[60], value=ref(1,45,0)[72])
  856:[72] VarRef(var[60]) -> ref(1,45,0)={}[72]
  859:[84] ConstText(_value="Five") -> "Five"[84]
  865:[100] SetText(v1=ref(1,45,0)[72], fld=4, val="Five"[84])
  868:[72] VarRef(var[60]) -> ref(1,45,0)={t:"Five"}[72]
  871:[84] ConstInt(val=5) -> 5[84]
  876:[88] SetInt(v1=ref(1,45,0)[72], fld=8, val=5[84])
  879:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4}]}[72]
  882:[84] VarRef(var[60]) -> ref(1,45,0)={t:"Five",v:5}[84]
  885:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,45,0)[84], parent_tp=12, fld=0)
  890:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5}]}[72]
  893:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,49,0)[72]
  898:[84] PutRef(var[60], value=ref(1,49,0)[72])
  901:[72] VarRef(var[60]) -> ref(1,49,0)={}[72]
  904:[84] ConstText(_value="Six") -> "Six"[84]
  909:[100] SetText(v1=ref(1,49,0)[72], fld=4, val="Six"[84])
  912:[72] VarRef(var[60]) -> ref(1,49,0)={t:"Six"}[72]
  915:[84] ConstInt(val=6) -> 6[84]
  920:[88] SetInt(v1=ref(1,49,0)[72], fld=8, val=6[84])
  923:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5}]}[72]
  926:[84] VarRef(var[60]) -> ref(1,49,0)={t:"Six",v:6}[84]
  929:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,49,0)[84], parent_tp=12, fld=0)
  934:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6}]}[72]
  937:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,53,0)[72]
  942:[84] PutRef(var[60], value=ref(1,53,0)[72])
  945:[72] VarRef(var[60]) -> ref(1,53,0)={}[72]
  948:[84] ConstText(_value="Seven") -> "Seven"[84]
  955:[100] SetText(v1=ref(1,53,0)[72], fld=4, val="Seven"[84])
  958:[72] VarRef(var[60]) -> ref(1,53,0)={t:"Seven"}[72]
  961:[84] ConstInt(val=7) -> 7[84]
  966:[88] SetInt(v1=ref(1,53,0)[72], fld=8, val=7[84])
  969:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6}]}[72]
  972:[84] VarRef(var[60]) -> ref(1,53,0)={t:"Seven",v:7}[84]
  975:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,53,0)[84], parent_tp=12, fld=0)
  980:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7}]}[72]
  983:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,57,0)[72]
  988:[84] PutRef(var[60], value=ref(1,57,0)[72])
  991:[72] VarRef(var[60]) -> ref(1,57,0)={}[72]
  994:[84] ConstText(_value="Eight") -> "Eight"[84]
 1001:[100] SetText(v1=ref(1,57,0)[72], fld=4, val="Eight"[84])
 1004:[72] VarRef(var[60]) -> ref(1,57,0)={t:"Eight"}[72]
 1007:[84] ConstInt(val=8) -> 8[84]
 1012:[88] SetInt(v1=ref(1,57,0)[72], fld=8, val=8[84])
 1015:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7}]}[72]
 1018:[84] VarRef(var[60]) -> ref(1,57,0)={t:"Eight",v:8}[84]
 1021:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,57,0)[84], parent_tp=12, fld=0)
 1026:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8}]}[72]
 1029:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,61,0)[72]
 1034:[84] PutRef(var[60], value=ref(1,61,0)[72])
 1037:[72] VarRef(var[60]) -> ref(1,61,0)={}[72]
 1040:[84] ConstText(_value="Nine") -> "Nine"[84]
 1046:[100] SetText(v1=ref(1,61,0)[72], fld=4, val="Nine"[84])
 1049:[72] VarRef(var[60]) -> ref(1,61,0)={t:"Nine"}[72]
 1052:[84] ConstInt(val=9) -> 9[84]
 1057:[88] SetInt(v1=ref(1,61,0)[72], fld=8, val=9[84])
 1060:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8}]}[72]
 1063:[84] VarRef(var[60]) -> ref(1,61,0)={t:"Nine",v:9}[84]
 1066:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,61,0)[84], parent_tp=12, fld=0)
 1071:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9}]}[72]
 1074:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,65,0)[72]
 1079:[84] PutRef(var[60], value=ref(1,65,0)[72])
 1082:[72] VarRef(var[60]) -> ref(1,65,0)={}[72]
 1085:[84] ConstText(_value="Ten") -> "Ten"[84]
 1090:[100] SetText(v1=ref(1,65,0)[72], fld=4, val="Ten"[84])
 1093:[72] VarRef(var[60]) -> ref(1,65,0)={t:"Ten"}[72]
 1096:[84] ConstInt(val=10) -> 10[84]
 1101:[88] SetInt(v1=ref(1,65,0)[72], fld=8, val=10[84])
 1104:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9}]}[72]
 1107:[84] VarRef(var[60]) -> ref(1,65,0)={t:"Ten",v:10}[84]
 1110:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,65,0)[84], parent_tp=12, fld=0)
 1115:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9},{t:"Ten",v:10}]}[72]
 1118:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,69,0)[72]
 1123:[84] PutRef(var[60], value=ref(1,69,0)[72])
 1126:[72] VarRef(var[60]) -> ref(1,69,0)={}[72]
 1129:[84] ConstText(_value="Eleven") -> "Eleven"[84]
 1137:[100] SetText(v1=ref(1,69,0)[72], fld=4, val="Eleven"[84])
 1140:[72] VarRef(var[60]) -> ref(1,69,0)={t:"Eleven"}[72]
 1143:[84] ConstInt(val=11) -> 11[84]
 1148:[88] SetInt(v1=ref(1,69,0)[72], fld=8, val=11[84])
 1151:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9},{t:"Ten",v:10}]}[72]
 1154:[84] VarRef(var[60]) -> ref(1,69,0)={t:"Eleven",v:11}[84]
 1157:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,69,0)[84], parent_tp=12, fld=0)
 1162:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9},{t:"Ten",v:10},{t:"Eleven",v:11}]}[72]
 1165:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,90,0)[72]
 1170:[84] PutRef(var[60], value=ref(1,90,0)[72])
 1173:[72] VarRef(var[60]) -> ref(1,90,0)={}[72]
 1176:[84] ConstText(_value="Twelve") -> "Twelve"[84]
 1184:[100] SetText(v1=ref(1,90,0)[72], fld=4, val="Twelve"[84])
 1187:[72] VarRef(var[60]) -> ref(1,90,0)={t:"Twelve"}[72]
 1190:[84] ConstInt(val=12) -> 12[84]
 1195:[88] SetInt(v1=ref(1,90,0)[72], fld=8, val=12[84])
 1198:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9},{t:"Ten",v:10},{t:"Eleven",v:11}]}[72]
 1201:[84] VarRef(var[60]) -> ref(1,90,0)={t:"Twelve",v:12}[84]
 1204:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,90,0)[84], parent_tp=12, fld=0)
 1209:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9},{t:"Ten",v:10},{t:"Eleven",v:11},{t:"Twelve",v:12}]}[72]
 1212:[84] NewRecord(data=ref(1,1,0)[72], parent_tp=12, fld=0) -> ref(1,94,0)[72]
 1217:[84] PutRef(var[60], value=ref(1,94,0)[72])
 1220:[72] VarRef(var[60]) -> ref(1,94,0)={}[72]
 1223:[84] ConstText(_value="Thirteen") -> "Thirteen"[84]
 1233:[100] SetText(v1=ref(1,94,0)[72], fld=4, val="Thirteen"[84])
 1236:[72] VarRef(var[60]) -> ref(1,94,0)={t:"Thirteen"}[72]
 1239:[84] ConstInt(val=13) -> 13[84]
 1244:[88] SetInt(v1=ref(1,94,0)[72], fld=8, val=13[84])
 1247:[72] VarRef(var[44]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9},{t:"Ten",v:10},{t:"Eleven",v:11},{t:"Twelve",v:12}]}[72]
 1250:[84] VarRef(var[60]) -> ref(1,94,0)={t:"Thirteen",v:13}[84]
 1253:[96] FinishRecord(data=ref(1,1,0)[72], rec=ref(1,94,0)[84], parent_tp=12, fld=0)
 1258:[72] GenFreeStack(value=0, discard=12)
 1262:[60] GenReturn(ret=1313[56], value=0, discard=16)
 1313:[44] VarRef(var[32]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9},{t:"Ten",v:10},{t:"Eleven",v:11},{t:"Twelve",v:12},{t:"Thirteen",v:13}]}[44]
 1316:[56] GetField(v1=ref(1,1,0)[44], fld=8) -> ref(1,1,8)=[{t:"Three",v:3},{t:"Thirteen",v:13},{t:"Six",v:6},{t:"Eight",v:8},{t:"Four",v:4},{t:"Five",v:5},{t:"Ten",v:10},{t:"Eleven",v:11},{t:"One",v:1},{t:"Twelve",v:12},{t:"Nine",v:9},{t:"Two",v:2},{t:"Seven",v:7}][44]
 1319:[56] ConstText(_value="Five") -> "Five"[56]
 1325:[72] GetRecord(data=ref(1,1,8)[44], db_tp=14, no_keys=1, key1="Five"[56]) -> ref(1,45,0)[44]
 1329:[56] GetInt(v1=ref(1,45,0)[44], fld=8) -> 5[44]
 1332:[48] VarRef(var[32]) -> ref(1,1,0)={v:[{t:"One",v:1},{t:"Two",v:2},{t:"Three",v:3},{t:"Four",v:4},{t:"Five",v:5},{t:"Six",v:6},{t:"Seven",v:7},{t:"Eight",v:8},{t:"Nine",v:9},{t:"Ten",v:10},{t:"Eleven",v:11},{t:"Twelve",v:12},{t:"Thirteen",v:13}]}[48]
 1335:[60] GetField(v1=ref(1,1,0)[48], fld=8) -> ref(1,1,8)=[{t:"Three",v:3},{t:"Thirteen",v:13},{t:"Six",v:6},{t:"Eight",v:8},{t:"Four",v:4},{t:"Five",v:5},{t:"Ten",v:10},{t:"Eleven",v:11},{t:"One",v:1},{t:"Twelve",v:12},{t:"Nine",v:9},{t:"Two",v:2},{t:"Seven",v:7}][48]
 1338:[60] ConstText(_value="Seven") -> "Seven"[60]
 1345:[76] GetRecord(data=ref(1,1,8)[48], db_tp=14, no_keys=1, key1="Seven"[60]) -> ref(1,53,0)[48]
 1349:[60] GetInt(v1=ref(1,53,0)[48], fld=8) -> 7[48]
 1352:[52] AddInt(v1=5[44], v2=7[48]) -> 12[44]
 1353:[48] GenFreeStack(value=4, discard=12)
 1357:[36] VarInt(var[32]) -> 12[36]
 1360:[40] ConstInt(val=12) -> 12[40]
 1365:[44] EqInt(v1=12[36], v2=12[40]) -> true[36]
 1366:[37] GenGotoFalseWord(jump=1372, if_false=true[36])
 1369:[36] GenGotoWord(jump=1422)
 1422:[36] GenReturn(ret=4294967295[4], value=0, discard=32)
Finished
