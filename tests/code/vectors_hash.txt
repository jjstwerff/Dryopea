struct Keyword {
    name: text
}
struct Data { h: hash<Keyword[name]> }

pub fn test() {
    test_value = {c = Data {};
  c.h = [ { name: "one" }, { name: "two" } ];
  c.h += [ { name: "three" }, { name: "four" } ];
  assert(!c.h["None"], "No element");
  assert("{c}" == "{{h:[{{name:\"four\"}},{{name:\"one\"}},{{name:\"three\"}},{{name:\"two\"}}]}}", "Output hash was {c}");
  if c.h["three"] { 12 } else { 0 }};
    assert(
        test_value == 12,
        "Test failed {test_value} != 12"
    );
}
Type 15:Keyword[8]:
    name:text[4]

Type 16:Data[8]:
    h:hash<Keyword[name]>[4]

Type 17:hash<Keyword[name]>[4]:Hash(15, [0]) keys [tp:6 desc:false field:4, ]

Type 18:vector<Keyword>[4]:Vector(15)

fn test() {#1 block
  __ref_1:ref(Data) = null;
  __work_3:text = "";
  __work_2:text = "";
  __work_1:text = "";
  test_value:integer = {#2 block
    c:ref(Data)["__ref_1"] = {#3 object
      OpDatabase(__ref_1, 16i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      __ref_1;
    }#3:ref(Data)["__ref_1"];
    {#4 vector
      OpClear(OpGetField(c, 4i32, 17i32), 17i32);
      _elm_1:ref(Keyword)["c"] = OpNewRecord(c, 16i32, 0i32);
      {#5 object
        OpSetText(_elm_1, 4i32, "one");
      }#5;
      OpFinishRecord(c, _elm_1, 16i32, 0i32);
      _elm_1:ref(Keyword)["c"] = OpNewRecord(c, 16i32, 0i32);
      {#6 object
        OpSetText(_elm_1, 4i32, "two");
      }#6;
      OpFinishRecord(c, _elm_1, 16i32, 0i32);
    }#4;
    {#7 vector
      _elm_2:ref(Keyword)["c"] = OpNewRecord(c, 16i32, 0i32);
      {#8 object
        OpSetText(_elm_2, 4i32, "three");
      }#8;
      OpFinishRecord(c, _elm_2, 16i32, 0i32);
      _elm_2:ref(Keyword)["c"] = OpNewRecord(c, 16i32, 0i32);
      {#9 object
        OpSetText(_elm_2, 4i32, "four");
      }#9;
      OpFinishRecord(c, _elm_2, 16i32, 0i32);
    }#7;
    if OpNot(OpConvBoolFromRef(OpGetRecord(OpGetField(c, 4i32, 17i32), 17i32, 1i32, "None"))) null else OpPanic("No element");
    if OpEqText({#10 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, c, 16i32, false);
      __work_1;
    }#10:text, "{h:[{name:"four"},{name:"one"},{name:"three"},{name:"two"}]}") null else OpPanic({#11 formatting string
      __work_2:text = "Output hash was ";
      OpFormatDatabase(__work_2, c, 16i32, false);
      __work_2;
    }#11:text);
    if OpConvBoolFromRef(OpGetRecord(OpGetField(c, 4i32, 17i32), 17i32, 1i32, "three")) {#12 block
      12i32;
    }#12:integer else {#13 block
      0i32;
    }#13:integer;
  }#2:integer;
  if OpEqInt(test_value, 12i32) null else OpPanic({#14 formatting string
    __work_3:text = "Test failed ";
    OpFormatInt(__work_3, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_3, " != 12");
    __work_3;
  }#14:text);
}#1

byte-code for hash:test() [1073]
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(Data) in 1
   1[16]: Text() var=__work_3[16]:text in 1
   2[40]: Text() var=__work_2[40]:text in 1
   3[64]: Text() var=__work_1[64]:text in 1
   4[88]: Database(var[4], db_tp=16) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
   9[88]: VarRef(var[4]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=__ref_1[4]:ref(Data) in 1
  12[100]: ConstInt(val=0) -> integer
  17[104]: SetInt(v1: ref(reference), fld=4, val: integer)
  20[88]: VarRef(var[4]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=__ref_1[4]:ref(Data) in 1
  23[100]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
  26[112]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=hash<Keyword[name]>[4]:Hash(15, [0]) keys [tp:6 desc:false field:4, ][17]
  29[112]: Clear(data: ref(reference), tp=17)
  32[100]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
  35[112]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
  40[112]: VarRef(var[100]) -> ref(reference) type=Keyword[8]:{name:text[4]}[15] var=_elm_1[100]:ref(Keyword)["c"] in 4
  43[124]: ConstText(_value="one") -> text
  48[140]: SetText(v1: ref(reference), fld=4, val: text)
  51[112]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
  54[124]: VarRef(var[100]) -> ref(reference) type=Keyword[8]:{name:text[4]}[15] var=_elm_1[100]:ref(Keyword)["c"] in 4
  57[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
  62[112]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
  65[124]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
  70[124]: PutRef(var[100], value: ref(reference))
  73[112]: VarRef(var[100]) -> ref(reference) type=Keyword[8]:{name:text[4]}[15] var=_elm_1[100]:ref(Keyword)["c"] in 4
  76[124]: ConstText(_value="two") -> text
  81[140]: SetText(v1: ref(reference), fld=4, val: text)
  84[112]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
  87[124]: VarRef(var[100]) -> ref(reference) type=Keyword[8]:{name:text[4]}[15] var=_elm_1[100]:ref(Keyword)["c"] in 4
  90[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
  95[112]: FreeStack(value=0, discard=12)
  99[100]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
 102[112]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
 107[112]: VarRef(var[100]) -> ref(reference) type=Keyword[8]:{name:text[4]}[15] var=_elm_2[100]:ref(Keyword)["c"] in 7
 110[124]: ConstText(_value="three") -> text
 117[140]: SetText(v1: ref(reference), fld=4, val: text)
 120[112]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
 123[124]: VarRef(var[100]) -> ref(reference) type=Keyword[8]:{name:text[4]}[15] var=_elm_2[100]:ref(Keyword)["c"] in 7
 126[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
 131[112]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
 134[124]: NewRecord(data: ref(reference), parent_tp=16, fld=0) -> ref(reference)
 139[124]: PutRef(var[100], value: ref(reference))
 142[112]: VarRef(var[100]) -> ref(reference) type=Keyword[8]:{name:text[4]}[15] var=_elm_2[100]:ref(Keyword)["c"] in 7
 145[124]: ConstText(_value="four") -> text
 151[140]: SetText(v1: ref(reference), fld=4, val: text)
 154[112]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
 157[124]: VarRef(var[100]) -> ref(reference) type=Keyword[8]:{name:text[4]}[15] var=_elm_2[100]:ref(Keyword)["c"] in 7
 160[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=16, fld=0)
 165[112]: FreeStack(value=0, discard=12)
 169[100]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
 172[112]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=hash<Keyword[name]>[4]:Hash(15, [0]) keys [tp:6 desc:false field:4, ][17]
 175[112]: ConstText(_value="None") -> text
 181[128]: GetRecord(data: ref(reference), db_tp=17, no_keys=1) -> ref(reference)
 185[112]: ConvBoolFromRef(val: ref(reference)) -> boolean
 186[101]: Not(v1: boolean) -> boolean
 187[101]: GotoFalseWord(jump=193, if_false: boolean)
 190[100]: GotoWord(jump=206)
 193[100]: ConstText(_value="No element") -> text
 205[116]: Panic(message: text)
 206[100]: ClearText(var[64]) var=__work_1[64]:text in 1
 209[100]: ConstText(_value="") -> text
 211[116]: AppendText(var[64], v1: text)
 214[100]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
 217[112]: FormatDatabase(var[64], val: ref(reference), db_tp=16, pretty=false)
 223[100]: VarText(var[64]) -> text var=__work_1[64]:text in 1
 226[116]: ConstText(_value="{h:[{name:"four"},{name:"one"},{name:"three"},{name:"two"}]}") -> text
 288[132]: EqText(v1: text, v2: text) -> boolean
 289[101]: GotoFalseWord(jump=295, if_false: boolean)
 292[100]: GotoWord(jump=332)
 295[100]: ClearText(var[40]) var=__work_2[40]:text in 1
 298[100]: ConstText(_value="Output hash was ") -> text
 316[116]: AppendText(var[40], v1: text)
 319[100]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
 322[112]: FormatDatabase(var[40], val: ref(reference), db_tp=16, pretty=false)
 328[100]: VarText(var[40]) -> text var=__work_2[40]:text in 1
 331[116]: Panic(message: text)
 332[100]: VarRef(var[88]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=c[88]:ref(Data)["__ref_1"] in 2
 335[112]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=hash<Keyword[name]>[4]:Hash(15, [0]) keys [tp:6 desc:false field:4, ][17]
 338[112]: ConstText(_value="three") -> text
 345[128]: GetRecord(data: ref(reference), db_tp=17, no_keys=1) -> ref(reference)
 349[112]: ConvBoolFromRef(val: ref(reference)) -> boolean
 350[101]: GotoFalseWord(jump=361, if_false: boolean)
 353[100]: ConstInt(val=12) -> integer
 358[104]: GotoWord(jump=366)
 361[100]: ConstInt(val=0) -> integer
 366[104]: FreeStack(value=4, discard=16) type=integer[4]:Base[0]
 370[92]: VarInt(var[88]) -> integer var=test_value[88]:integer in 1
 373[96]: ConstInt(val=12) -> integer
 378[100]: EqInt(v1: integer, v2: integer) -> boolean
 379[93]: GotoFalseWord(jump=385, if_false: boolean)
 382[92]: GotoWord(jump=435)
 385[92]: ClearText(var[16]) var=__work_3[16]:text in 1
 388[92]: ConstText(_value="Test failed ") -> text
 402[108]: AppendText(var[16], v1: text)
 405[92]: VarInt(var[88]) -> integer var=test_value[88]:integer in 1
 408[96]: ConstInt(val=0) -> integer
 413[100]: FormatInt(var[16], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 420[92]: ConstText(_value=" != 12") -> text
 428[108]: AppendText(var[16], v1: text)
 431[92]: VarText(var[16]) -> text var=__work_3[16]:text in 1
 434[108]: Panic(message: text)
 435[92]: FreeText(var[64])
 438[92]: FreeText(var[40])
 441[92]: FreeText(var[16])
 444[92]: VarRef(var[4]) -> ref(reference) type=Data[8]:{h:hash<Keyword[name]>[4]}[16] var=__ref_1[4]:ref(Data) in 1
 447[104]: FreeRef(v1: ref(reference))
 448[92]: Return(ret=0, value=0, discard=92)

