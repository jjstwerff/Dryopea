pub fn test() {
    test_value = {a = 1; b = 12; 0 + b + a};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 1i32;
    b:integer = 12i32;
    OpAddInt(OpAddInt(0i32, b), a);
  }#2:integer;
  if OpEqInt(test_value, 13i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 13");
    __work_1;
  }#3:text);
}#1

byte-code for expr_variables:test() [1176]
   0[0]: return-address
   0[4]: Text() var=__work_1[4]:text in 1
   1[28]: ConstInt(val=1) -> integer var=a[28]:integer in 2
   6[32]: ConstInt(val=12) -> integer var=b[32]:integer in 2
  11[36]: ConstInt(val=0) -> integer
  16[40]: VarInt(var[32]) -> integer var=b[32]:integer in 2
  19[44]: AddInt(v1: integer, v2: integer) -> integer
  20[40]: VarInt(var[28]) -> integer var=a[28]:integer in 2
  23[44]: AddInt(v1: integer, v2: integer) -> integer
  24[40]: FreeStack(value=4, discard=12) type=integer[4]:Base[0]
  28[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  31[36]: ConstInt(val=13) -> integer
  36[40]: EqInt(v1: integer, v2: integer) -> boolean
  37[33]: GotoFalseWord(jump=43, if_false: boolean)
  40[32]: GotoWord(jump=93)
  43[32]: ClearText(var[4]) var=__work_1[4]:text in 1
  46[32]: ConstText(_value="Test failed ") -> text
  60[48]: AppendText(var[4], v1: text)
  63[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
  66[36]: ConstInt(val=0) -> integer
  71[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  78[32]: ConstText(_value=" != 13") -> text
  86[48]: AppendText(var[4], v1: text)
  89[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
  92[48]: Panic(message: text)
  93[32]: FreeText(var[4])
  96[32]: Return(ret=0, value=0, discard=32)

