pub fn test() {
    test_value = {a = 1; b = 12; 0 + b + a};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 1i32;
    b:integer = 12i32;
    OpAddInt(OpAddInt(0i32, b), a);
  }#2:integer;
  if OpEqInt(test_value, 13i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 13");
    __work_1;
  }#3:text);
}#1

byte-code for expr_variables:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: ConstInt(val=1) -> integer
 698[32]: ConstInt(val=12) -> integer
 703[36]: ConstInt(val=0) -> integer
 708[40]: VarInt(var[32]) -> integer
 711[44]: AddInt(v1: integer, v2: integer) -> integer
 712[40]: VarInt(var[28]) -> integer
 715[44]: AddInt(v1: integer, v2: integer) -> integer
 716[40]: FreeStack(value=4, discard=12) type=integer[4]:Base[0]
 720[32]: VarInt(var[28]) -> integer
 723[36]: ConstInt(val=13) -> integer
 728[40]: EqInt(v1: integer, v2: integer) -> boolean
 729[33]: GotoFalseWord(jump=735, if_false: boolean)
 732[32]: GotoWord(jump=785)
 735[32]: ClearText(var[4])
 738[32]: ConstText(_value="Test failed ") -> text
 752[48]: AppendText(var[4], v1: text)
 755[32]: VarInt(var[28]) -> integer
 758[36]: ConstInt(val=0) -> integer
 763[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 770[32]: ConstText(_value=" != 13") -> text
 778[48]: AppendText(var[4], v1: text)
 781[32]: VarText(var[4]) -> text
 784[48]: Panic(message: text)
 785[32]: FreeText(var[4])
 788[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] ConstInt(val=1) -> 1[32]
  698:[36] ConstInt(val=12) -> 12[36]
  703:[40] ConstInt(val=0) -> 0[40]
  708:[44] VarInt(var[36]) -> 12[44]
  711:[48] AddInt(v1=0[40], v2=12[44]) -> 12[40]
  712:[44] VarInt(var[32]) -> 1[44]
  715:[48] AddInt(v1=12[40], v2=1[44]) -> 13[40]
  716:[44] FreeStack(value=4, discard=12)
  720:[36] VarInt(var[32]) -> 13[36]
  723:[40] ConstInt(val=13) -> 13[40]
  728:[44] EqInt(v1=13[36], v2=13[40]) -> true[36]
  729:[37] GotoFalseWord(jump=735, if_false=true[36])
  732:[36] GotoWord(jump=785)
  785:[36] FreeText(var[8])
  788:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
