pub fn test() {
    test_value = {a = 1; b = 12; 0 + b + a};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}
fn test() {#block_1:void
  __work_1:text(1) = "";
  test_value:integer(1) = {#block_2:integer
    a:integer(2) = 1i32;
    b:integer(2) = 12i32;
    OpAddInt(OpAddInt(0i32, b), a);
  }#block_2:integer;
  if OpEqInt(test_value, 13i32) null else OpPanic({#Formatted string_3:text
    __work_1:text(1) = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 13");
    __work_1;
  }#Formatted string_3:text);
  OpFreeText(__work_1);
}#block_1:void

byte-code for expr_variables:test() [1168]
   0[4]: return-address
   0[8]: Text() var=__work_1[8]:text
   1[32]: ConstInt(val=1) -> integer var=a[32]:integer
   6[36]: ConstInt(val=12) -> integer var=b[36]:integer
  11[40]: ConstInt(val=0) -> integer
  16[44]: VarInt(var[36]) -> integer var=b[36]:integer
  19[48]: AddInt(v1: integer, v2: integer) -> integer
  20[44]: VarInt(var[32]) -> integer var=a[32]:integer
  23[48]: AddInt(v1: integer, v2: integer) -> integer
  24[44]: FreeStack(value=4, discard=12) type=integer[4]:Base[0]
  28[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  31[40]: ConstInt(val=13) -> integer
  36[44]: EqInt(v1: integer, v2: integer) -> boolean
  37[37]: GotoFalseWord(jump=43, if_false: boolean)
  40[36]: GotoWord(jump=93)
  43[36]: ClearText(var[8]) var=__work_1[8]:text
  46[36]: ConstText(_value="Test failed ") -> text
  60[52]: AppendText(var[8], v1: text)
  63[36]: VarInt(var[32]) -> integer var=test_value[32]:integer
  66[40]: ConstInt(val=0) -> integer
  71[44]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
  78[36]: ConstText(_value=" != 13") -> text
  86[52]: AppendText(var[8], v1: text)
  89[36]: VarText(var[8]) -> text var=__work_1[8]:text
  92[52]: Panic(message: text)
  93[36]: FreeText(var[8])
  96[36]: Return(ret=0, value=0, discard=32)

Execute test:
    0:[8] Text()
    1:[32] ConstInt(val=1) -> 1[32]
    6:[36] ConstInt(val=12) -> 12[36]
   11:[40] ConstInt(val=0) -> 0[40]
   16:[44] VarInt(var[36]) -> 12[44]
   19:[48] AddInt(v1=0[40], v2=12[44]) -> 12[40]
   20:[44] VarInt(var[32]) -> 1[44]
   23:[48] AddInt(v1=12[40], v2=1[44]) -> 13[40]
   24:[44] FreeStack(value=4, discard=12)
   28:[36] VarInt(var[32]) -> 13[36]
   31:[40] ConstInt(val=13) -> 13[40]
   36:[44] EqInt(v1=13[36], v2=13[40]) -> true[36]
   37:[37] GotoFalseWord(jump=1211, if_false=true[36])
   40:[36] GotoWord(jump=1261)
   93:[36] FreeText(var[8])
   96:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
