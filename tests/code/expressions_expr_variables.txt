Test code:
pub fn test() {
    test_value = {a = 1; b = 12; 0 + b + a};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}

fn test {
  let test_value = {
    let a = 1i32;
    let b = 12i32;
    OpAddInt(OpAddInt(0i32, b), a);
  };
  if OpEqInt(test_value, 13i32) {null} else {OpGenPanic({
    let append_9 = "Test failed ";
    OpFormatInt(append_9, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(append_9, " != 13");
    append_9;
  })};
}

byte-code for expr_variables:test()
 664[0]: return-address
 664[4]: ConstInt(val=1) -> integer
 669[8]: ConstInt(val=12) -> integer
 674[12]: ConstInt(val=0) -> integer
 679[16]: VarInt(var[8]) -> integer
 682[20]: AddInt(v1: integer, v2: integer) -> integer
 683[16]: VarInt(var[4]) -> integer
 686[20]: AddInt(v1: integer, v2: integer) -> integer
 687[16]: GenFreeStack(value=4, discard=8)
 691[8]: VarInt(var[4]) -> integer
 694[12]: ConstInt(val=13) -> integer
 699[16]: EqInt(v1: integer, v2: integer) -> boolean
 700[9]: GenGotoFalseWord(jump=706, if_false: boolean)
 703[8]: GenGotoWord(jump=758)
 706[8]: Text()
 707[32]: ConstText(_value="Test failed ") -> text
 721[48]: AppendText(var[8], v1: text)
 724[32]: VarInt(var[4]) -> integer
 727[36]: ConstInt(val=0) -> integer
 732[40]: FormatInt(var[8], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 739[32]: ConstText(_value=" != 13") -> text
 747[48]: AppendText(var[8], v1: text)
 750[32]: VarText(var[8]) -> text
 753[48]: GenFreeStack(value=16, discard=24)
 757[24]: GenPanic(message: text)
 758[8]: GenReturn(ret=0, value=0, discard=8)

Execute test:
  664:[4] ConstInt(val=1) -> 1[4]
  669:[8] ConstInt(val=12) -> 12[8]
  674:[12] ConstInt(val=0) -> 0[12]
  679:[16] VarInt(var[8]) -> 12[16]
  682:[20] AddInt(v1=0[12], v2=12[16]) -> 12[12]
  683:[16] VarInt(var[4]) -> 1[16]
  686:[20] AddInt(v1=12[12], v2=1[16]) -> 13[12]
  687:[16] GenFreeStack(value=4, discard=8)
  691:[8] VarInt(var[4]) -> 13[8]
  694:[12] ConstInt(val=13) -> 13[12]
  699:[16] EqInt(v1=13[8], v2=13[12]) -> true[8]
  700:[9] GenGotoFalseWord(jump=706, if_false=true[8])
  703:[8] GenGotoWord(jump=758)
  758:[8] GenReturn(ret=4294967295[0], value=0, discard=8)
Finished
