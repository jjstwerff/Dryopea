pub fn test() {
    test_value = {a = 1; b = 12; 0 + b + a};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 1i32;
    b:integer = 12i32;
    OpAddInt(OpAddInt(0i32, b), a);
  }#2:integer;
  if OpEqInt(test_value, 13i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 13");
    __work_1;
  }#3:text);
}#1

byte-code for expr_variables:test()
 682[0]: return-address
 682[4]: Text()
 683[28]: ConstInt(val=1) -> integer
 688[32]: ConstInt(val=12) -> integer
 693[36]: ConstInt(val=0) -> integer
 698[40]: VarInt(var[32]) -> integer
 701[44]: AddInt(v1: integer, v2: integer) -> integer
 702[40]: VarInt(var[28]) -> integer
 705[44]: AddInt(v1: integer, v2: integer) -> integer
 706[40]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 710[32]: VarInt(var[28]) -> integer
 713[36]: ConstInt(val=13) -> integer
 718[40]: EqInt(v1: integer, v2: integer) -> boolean
 719[33]: GotoFalseWord(jump=725, if_false: boolean)
 722[32]: GotoWord(jump=775)
 725[32]: ClearText(var[4])
 728[32]: ConstText(_value="Test failed ") -> text
 742[48]: AppendText(var[4], v1: text)
 745[32]: VarInt(var[28]) -> integer
 748[36]: ConstInt(val=0) -> integer
 753[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 760[32]: ConstText(_value=" != 13") -> text
 768[48]: AppendText(var[4], v1: text)
 771[32]: VarText(var[4]) -> text
 774[48]: Panic(message: text)
 775[32]: Return(ret=0, value=0, discard=32)

Execute test:
  682:[8] Text()
  683:[32] ConstInt(val=1) -> 1[32]
  688:[36] ConstInt(val=12) -> 12[36]
  693:[40] ConstInt(val=0) -> 0[40]
  698:[44] VarInt(var[36]) -> 12[44]
  701:[48] AddInt(v1=0[40], v2=12[44]) -> 12[40]
  702:[44] VarInt(var[32]) -> 1[44]
  705:[48] AddInt(v1=12[40], v2=1[44]) -> 13[40]
  706:[44] FreeStack(value=4, discard=8)
  710:[36] VarInt(var[32]) -> 13[36]
  713:[40] ConstInt(val=13) -> 13[40]
  718:[44] EqInt(v1=13[36], v2=13[40]) -> true[36]
  719:[37] GotoFalseWord(jump=725, if_false=true[36])
  722:[36] GotoWord(jump=775)
  775:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
