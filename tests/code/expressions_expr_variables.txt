pub fn test() {
    test_value = {a = 1; b = 12; 0 + b + a};
    assert(
        test_value == 13,
        "Test failed {test_value} != 13"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    a:integer = 1i32;
    b:integer = 12i32;
    OpAddInt(OpAddInt(0i32, b), a);
  }#2:integer;
  if OpEqInt(test_value, 13i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 13");
    __work_1;
  }#3:text);
}#1

byte-code for expr_variables:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: ConstInt(val=1) -> integer var=a[28]:integer in 2
 661[32]: ConstInt(val=12) -> integer var=b[32]:integer in 2
 666[36]: ConstInt(val=0) -> integer
 671[40]: VarInt(var[32]) -> integer var=b[32]:integer in 2
 674[44]: AddInt(v1: integer, v2: integer) -> integer
 675[40]: VarInt(var[28]) -> integer var=a[28]:integer in 2
 678[44]: AddInt(v1: integer, v2: integer) -> integer
 679[40]: FreeStack(value=4, discard=12) type=integer[4]:Base[0]
 683[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 686[36]: ConstInt(val=13) -> integer
 691[40]: EqInt(v1: integer, v2: integer) -> boolean
 692[33]: GotoFalseWord(jump=698, if_false: boolean)
 695[32]: GotoWord(jump=748)
 698[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 701[32]: ConstText(_value="Test failed ") -> text
 715[48]: AppendText(var[4], v1: text)
 718[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 721[36]: ConstInt(val=0) -> integer
 726[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 733[32]: ConstText(_value=" != 13") -> text
 741[48]: AppendText(var[4], v1: text)
 744[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 747[48]: Panic(message: text)
 748[32]: FreeText(var[4])
 751[32]: Return(ret=0, value=0, discard=32)

Execute test:
  655:[8] Text()
  656:[32] ConstInt(val=1) -> 1[32]
  661:[36] ConstInt(val=12) -> 12[36]
  666:[40] ConstInt(val=0) -> 0[40]
  671:[44] VarInt(var[36]) -> 12[44]
  674:[48] AddInt(v1=0[40], v2=12[44]) -> 12[40]
  675:[44] VarInt(var[32]) -> 1[44]
  678:[48] AddInt(v1=12[40], v2=1[44]) -> 13[40]
  679:[44] FreeStack(value=4, discard=12)
  683:[36] VarInt(var[32]) -> 13[36]
  686:[40] ConstInt(val=13) -> 13[40]
  691:[44] EqInt(v1=13[36], v2=13[40]) -> true[36]
  692:[37] GotoFalseWord(jump=698, if_false=true[36])
  695:[36] GotoWord(jump=748)
  748:[36] FreeText(var[8])
  751:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
