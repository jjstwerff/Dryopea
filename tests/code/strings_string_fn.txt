fn to_text() -> text {
    res = "aa ";
    for _i in 0..2 {
        res += "b";
    }
    res + " cc"
}

pub fn test() {
    test_value = {"1{to_text()}2"};
    assert(
        test_value == "1aa bb cc2",
        "Test failed {test_value} != \"1aa bb cc2\""
    );
}
fn to_text(__work_1:&text) -> text["__work_1"] {#block(1):text["__work_1"]
  __work_1(0):&text = "";
  res(1):text = "aa ";
  {#For block(2):void
    _i#index(2):integer = OpConvIntFromNull();
    loop {#For loop_3
      _i(3):integer = {#Iter range(4):integer
        _i#index(2):integer = if OpNot(OpConvBoolFromInt(_i#index(2))) 0i32 else OpAddInt(_i#index(2), 1i32);
        if OpGeInt(_i#index(2), 2i32) break(0) else null;
        _i#index(2);
      }#Iter range(4):integer;
      {#block(5):void
        OpAppendText(res(1), "b");
      }#block(5):void;
    }#For loop_3;
  }#For block(2):void;
  {#Add text(6):text["__work_1"]
    OpClearRefText(OpVarRef(__work_1(0)));
    OpAppendRefText(OpVarRef(__work_1(0)), 0i32, res(1));
    OpAppendRefText(OpVarRef(__work_1(0)), 0i32, " cc");
    OpFreeText(res(1));
    __work_1(0);
  }#Add text(6):text["__work_1"];
}#block(1):text["__work_1"]

byte-code for string_fn:to_text(__work_1: &text[4]) [1119] -> text["res"]
   0[16]: return-address
   0[20]: VarRef(var[4]) -> ref(reference) var=__work_1[4]:&text
   3[32]: ConstText(_value="") -> text
   5[48]: AppendRefText(r: ref(reference), fld=0, v1: text)
   8[20]: Text() var=res[20]:text
   9[44]: ConstText(_value="aa ") -> text
  14[60]: AppendText(var[20], v1: text)
  17[44]: ConvIntFromNull() -> integer var=_i#index[44]:integer
  18[48]: VarInt(var[44]) -> integer var=_i#index[44]:integer
  21[52]: ConvBoolFromInt(v1: integer) -> boolean
  22[49]: Not(v1: boolean) -> boolean
  23[49]: GotoFalseWord(jump=34, if_false: boolean)
  26[48]: ConstInt(val=0) -> integer
  31[52]: GotoWord(jump=43)
  34[48]: VarInt(var[44]) -> integer var=_i#index[44]:integer
  37[52]: ConstInt(val=1) -> integer
  42[56]: AddInt(v1: integer, v2: integer) -> integer
  43[52]: PutInt(var[44], value: integer)
  46[48]: VarInt(var[44]) -> integer var=_i#index[44]:integer
  49[52]: ConstInt(val=2) -> integer
  54[56]: GeInt(v1: integer, v2: integer) -> boolean
  55[49]: GotoFalseWord(jump=61, if_false: boolean)
  58[48]: GotoWord(jump=77)
  61[48]: VarInt(var[44]) -> integer var=_i#index[44]:integer
  64[52]: ConstText(_value="b") -> text
  67[68]: AppendText(var[20], v1: text)
  70[52]: FreeStack(value=0, discard=4)
  74[48]: GotoWord(jump=18)
  77[48]: FreeStack(value=0, discard=4)
  81[44]: VarRef(var[4]) -> ref(reference)
  84[56]: ClearRefText(r: ref(reference))
  85[44]: VarRef(var[4]) -> ref(reference)
  88[56]: VarText(var[20]) -> text var=res[20]:text
  91[72]: AppendRefText(r: ref(reference), fld=0, v1: text)
  94[44]: VarRef(var[4]) -> ref(reference)
  97[56]: ConstText(_value=" cc") -> text
 102[72]: AppendRefText(r: ref(reference), fld=0, v1: text)
 105[44]: FreeText(var[20])
 108[44]: VarRef(var[4]) -> ref(reference) var=__work_1[4]:&text
 111[56]: GetRefText(r: ref(reference), fld=0) -> text["res"]
 114[60]: Return(ret=12, value=16, discard=56) type=text[4]:Base[5]

fn test() {#block(1):void
  __work_3(1):text = "";
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text = {#block(2):text
    {#Formatted string(3):text
      __work_1(1):text = "1";
      OpFormatText(__work_1(1), to_text({#default ref(4):ref(reference)["__work_2"]
        OpCreateRef(__work_2(1));
      }#default ref(4):ref(reference)["__work_2"]), 0i32, -1i32, 32i32);
      OpAppendText(__work_1(1), "2");
      __work_1(1);
    }#Formatted string(3):text;
  }#block(2):text;
  if OpEqText(test_value(1), "1aa bb cc2") null else OpPanic({#Formatted string(5):text
    __work_3(1):text = "Test failed ";
    OpFormatText(__work_3(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_3(1), " != "1aa bb cc2"");
    __work_3(1);
  }#Formatted string(5):text);
  OpFreeText(test_value(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
  OpFreeText(__work_3(1));
}#block(1):void

byte-code for string_fn:test() [1239]
   0[4]: return-address
   0[8]: Text() var=__work_3[8]:text
   1[32]: Text() var=__work_2[32]:text
   2[56]: Text() var=__work_1[56]:text
   3[80]: Text() var=test_value[80]:text
   4[104]: ClearText(var[56]) var=__work_1[56]:text
   7[104]: ConstText(_value="1") -> text
  10[120]: AppendText(var[56], v1: text)
  13[104]: CreateRef(var[32]) -> ref(reference)
  16[116]: Call(size=0, to=1119)
  23[120]: ConstInt(val=0) -> integer
  28[124]: FormatText(var[56], val: text, width: integer, dir=-1, token=32)
  33[104]: ConstText(_value="2") -> text
  36[120]: AppendText(var[56], v1: text)
  39[104]: VarText(var[56]) -> text var=__work_1[56]:text
  42[120]: AppendText(var[80], v1: text)
  45[104]: VarText(var[80]) -> text var=test_value[80]:text
  48[120]: ConstText(_value="1aa bb cc2") -> text
  60[136]: EqText(v1: text, v2: text) -> boolean
  61[105]: GotoFalseWord(jump=67, if_false: boolean)
  64[104]: GotoWord(jump=125)
  67[104]: ClearText(var[8]) var=__work_3[8]:text
  70[104]: ConstText(_value="Test failed ") -> text
  84[120]: AppendText(var[8], v1: text)
  87[104]: VarText(var[80]) -> text var=test_value[80]:text
  90[120]: ConstInt(val=0) -> integer
  95[124]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
 100[104]: ConstText(_value=" != "1aa bb cc2"") -> text
 118[120]: AppendText(var[8], v1: text)
 121[104]: VarText(var[8]) -> text var=__work_3[8]:text
 124[120]: Panic(message: text)
 125[104]: FreeText(var[80])
 128[104]: FreeText(var[56])
 131[104]: FreeText(var[32])
 134[104]: FreeText(var[8])
 137[104]: Return(ret=0, value=0, discard=100)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] Text()
    4:[104] ClearText(var[56])
    7:[104] ConstText(_value="1") -> "1"[104]
   10:[120] AppendText(var[56], v1="1"[104])
   13:[104] CreateRef(var[32]) -> ref(0,1,32)[104]
   16:[116] Call(size=0, to=1119)
 1119:[120] VarRef(var[104]) -> ref(0,1,32)[120]
 1122:[132] ConstText(_value="") -> ""[132]
 1124:[148] AppendRefText(r=ref(0,1,32)[120], fld=0, v1=""[132])
 1125:[120] Goto(jump=-25496)
 1127:[120] Text()
 1128:[144] ConstText(_value="aa ") -> "aa "[144]
 1133:[160] AppendText(var[120], v1="aa "[144])
 1136:[144] ConvIntFromNull() -> -2147483648[144]
 1137:[148] VarInt(var[144]) -> -2147483648[148]
 1140:[152] ConvBoolFromInt(v1=-2147483648[148]) -> false[148]
 1141:[149] Not(v1=false[148]) -> true[148]
 1142:[149] GotoFalseWord(jump=1153, if_false=true[148])
 1145:[148] ConstInt(val=0) -> 0[148]
 1150:[152] GotoWord(jump=1162)
 1162:[152] PutInt(var[144], value=0[148])
 1165:[148] VarInt(var[144]) -> 0[148]
 1168:[152] ConstInt(val=2) -> 2[152]
 1173:[156] GeInt(v1=0[148], v2=2[152]) -> false[148]
 1174:[149] GotoFalseWord(jump=1180, if_false=false[148])
 1180:[148] VarInt(var[144]) -> 0[148]
 1183:[152] ConstText(_value="b") -> "b"[152]
 1186:[168] AppendText(var[120], v1="b"[152])
 1189:[152] FreeStack(value=0, discard=4)
 1193:[148] GotoWord(jump=1137)
 1137:[148] VarInt(var[144]) -> 0[148]
 1140:[152] ConvBoolFromInt(v1=0[148]) -> true[148]
 1141:[149] Not(v1=true[148]) -> false[148]
 1142:[149] GotoFalseWord(jump=1153, if_false=false[148])
 1153:[148] VarInt(var[144]) -> 0[148]
 1156:[152] ConstInt(val=1) -> 1[152]
 1161:[156] AddInt(v1=0[148], v2=1[152]) -> 1[148]
 1162:[152] PutInt(var[144], value=1[148])
 1165:[148] VarInt(var[144]) -> 1[148]
 1168:[152] ConstInt(val=2) -> 2[152]
 1173:[156] GeInt(v1=1[148], v2=2[152]) -> false[148]
 1174:[149] GotoFalseWord(jump=1180, if_false=false[148])
 1180:[148] VarInt(var[144]) -> 1[148]
 1183:[152] ConstText(_value="b") -> "b"[152]
 1186:[168] AppendText(var[120], v1="b"[152])
 1189:[152] FreeStack(value=0, discard=4)
 1193:[148] GotoWord(jump=1137)
 1137:[148] VarInt(var[144]) -> 1[148]
 1140:[152] ConvBoolFromInt(v1=1[148]) -> true[148]
 1141:[149] Not(v1=true[148]) -> false[148]
 1142:[149] GotoFalseWord(jump=1153, if_false=false[148])
 1153:[148] VarInt(var[144]) -> 1[148]
 1156:[152] ConstInt(val=1) -> 1[152]
 1161:[156] AddInt(v1=1[148], v2=1[152]) -> 2[148]
 1162:[152] PutInt(var[144], value=2[148])
 1165:[148] VarInt(var[144]) -> 2[148]
 1168:[152] ConstInt(val=2) -> 2[152]
 1173:[156] GeInt(v1=2[148], v2=2[152]) -> true[148]
 1174:[149] GotoFalseWord(jump=1180, if_false=true[148])
 1177:[148] GotoWord(jump=1196)
 1196:[148] FreeStack(value=0, discard=4)
 1200:[144] VarRef(var[104]) -> ref(0,1,32)[144]
 1203:[156] ClearRefText(r=ref(0,1,32)[144])
 1204:[144] VarRef(var[104]) -> ref(0,1,32)[144]
 1207:[156] VarText(var[120]) -> "aa bb"[156]
 1210:[172] AppendRefText(r=ref(0,1,32)[144], fld=0, v1="aa bb"[156])
 1211:[144] Goto(jump=-15426)
 1213:[144] VarRef(var[104]) -> ref(0,1,32)[144]
 1216:[156] ConstText(_value=" cc") -> " cc"[156]
 1221:[172] AppendRefText(r=ref(0,1,32)[144], fld=0, v1=" cc"[156])
 1222:[144] Goto(jump=-23863)
 1224:[144] FreeText(var[120])
 1227:[144] VarRef(var[104]) -> ref(0,1,32)[144]
 1230:[156] GetRefText(r=ref(0,1,32)[144], fld=0) -> "aa bb cc"[144]
 1231:[160] Goto(jump=2770)
 1233:[160] Return(ret=1262[116], value=16, discard=56) -> "aa bb cc"[104]
   23:[120] ConstInt(val=0) -> 0[120]
   28:[124] FormatText(var[56], val="aa bb cc"[104], width=0[120], dir=-1, token=32)
   33:[104] ConstText(_value="2") -> "2"[104]
   36:[120] AppendText(var[56], v1="2"[104])
   39:[104] VarText(var[56]) -> "1aa bb cc2"[104]
   42:[120] AppendText(var[80], v1="1aa bb cc2"[104])
   45:[104] VarText(var[80]) -> "1aa bb cc2"[104]
   48:[120] ConstText(_value="1aa bb cc2") -> "1aa bb cc2"[120]
   60:[136] EqText(v1="1aa bb cc2"[104], v2="1aa bb cc2"[120]) -> true[104]
   61:[105] GotoFalseWord(jump=67, if_false=true[104])
   64:[104] GotoWord(jump=125)
  125:[104] FreeText(var[80])
  128:[104] FreeText(var[56])
  131:[104] FreeText(var[32])
  134:[104] FreeText(var[8])
  137:[104] Return(ret=4294967295[4], value=0, discard=100)
Finished
