fn to_text() -> text {
    res = "aa ";
    for _i in 0..2 {
        res += "b";
    }
    res + " cc"
}

pub fn test() {
    test_value = {"1{to_text()}2"};
    assert(
        test_value == "1aa bb cc2",
        "Test failed {test_value} != \"1aa bb cc2\""
    );
}
fn to_text(__work_1:&text) -> text["__work_1"] {#1 block
  __work_1:&text = "";
  res:text = "aa ";
  {#2 for
    _i#index:integer = OpConvIntFromNull();
    loop {#3 for loop
      _i:integer = {#4 for next
        _i#index:integer = if OpNot(OpConvBoolFromInt(_i#index)) 0i32 else OpAddInt(_i#index, 1i32);
        if OpGeInt(_i#index, 2i32) break(0) else null;
        _i#index;
      }#4:integer;
      {#5 block
        OpAppendText(res, "b");
      }#5;
    }#3;
  }#2;
  __work_1:&text = res;
  OpAppendRefText(OpVarRef(__work_1), 0i32, " cc");
  __work_1;
}#1:&text

byte-code for string_fn:to_text(__work_1: &text[0]) [1067] -> text["res"]
   0[12]: return-address
   0[16]: VarRef(var[0]) -> ref(reference) var=__work_1[0]:&text in 0
   3[28]: ConstText(_value="") -> text
   5[44]: AppendRefText(r: ref(reference), fld=0, v1: text)
   8[16]: Text() var=res[16]:text in 1
   9[40]: ConstText(_value="aa ") -> text
  14[56]: AppendText(var[16], v1: text)
  17[40]: ConvIntFromNull() -> integer var=_i#index[40]:integer in 2
  18[44]: VarInt(var[40]) -> integer var=_i#index[40]:integer in 2
  21[48]: ConvBoolFromInt(v1: integer) -> boolean
  22[45]: Not(v1: boolean) -> boolean
  23[45]: GotoFalseWord(jump=34, if_false: boolean)
  26[44]: ConstInt(val=0) -> integer
  31[48]: GotoWord(jump=43)
  34[44]: VarInt(var[40]) -> integer var=_i#index[40]:integer in 2
  37[48]: ConstInt(val=1) -> integer
  42[52]: AddInt(v1: integer, v2: integer) -> integer
  43[48]: PutInt(var[40], value: integer)
  46[44]: VarInt(var[40]) -> integer var=_i#index[40]:integer in 2
  49[48]: ConstInt(val=2) -> integer
  54[52]: GeInt(v1: integer, v2: integer) -> boolean
  55[45]: GotoFalseWord(jump=61, if_false: boolean)
  58[44]: GotoWord(jump=77)
  61[44]: VarInt(var[40]) -> integer var=_i#index[40]:integer in 2
  64[48]: ConstText(_value="b") -> text
  67[64]: AppendText(var[16], v1: text)
  70[48]: FreeStack(value=0, discard=4)
  74[44]: GotoWord(jump=18)
  77[44]: FreeStack(value=0, discard=4)
  81[40]: VarRef(var[0]) -> ref(reference) var=__work_1[0]:&text in 0
  84[52]: VarText(var[16]) -> text var=res[16]:text in 1
  87[68]: AppendRefText(r: ref(reference), fld=0, v1: text)
  90[40]: VarRef(var[0]) -> ref(reference)
  93[52]: ConstText(_value=" cc") -> text
  98[68]: AppendRefText(r: ref(reference), fld=0, v1: text)
 101[40]: VarRef(var[0]) -> ref(reference) var=__work_1[0]:&text in 0
 104[52]: GetRefText(r: ref(reference), fld=0) -> text["res"]
 107[56]: FreeText(var[16])
 110[56]: Return(ret=12, value=16, discard=56) type=text[4]:Base[5]

fn test() {#1 block
  __work_3:text = "";
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    {#3 formatting string
      __work_1:text = "1";
      OpFormatText(__work_1, to_text({#4 default ref
        OpCreateRef(__work_2);
      }#4:ref(reference)["__work_2"]), 0i32, -1i32, 32i32);
      OpAppendText(__work_1, "2");
      __work_1;
    }#3:text;
  }#2:text;
  if OpEqText(test_value, "1aa bb cc2") null else OpPanic({#5 formatting string
    __work_3:text = "Test failed ";
    OpFormatText(__work_3, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_3, " != "1aa bb cc2"");
    __work_3;
  }#5:text);
}#1

byte-code for string_fn:test() [1183]
   0[0]: return-address
   0[4]: Text() var=__work_3[4]:text in 1
   1[28]: Text() var=__work_2[28]:text in 1
   2[52]: Text() var=__work_1[52]:text in 1
   3[76]: Text() var=test_value[76]:text in 1
   4[100]: ClearText(var[52]) var=__work_1[52]:text in 1
   7[100]: ConstText(_value="1") -> text
  10[116]: AppendText(var[52], v1: text)
  13[100]: CreateRef(var[28]) -> ref(reference)
  16[112]: Call(size=0, to=1067)
  23[116]: ConstInt(val=0) -> integer
  28[120]: FormatText(var[52], val: text, width: integer, dir=-1, token=32)
  33[100]: ConstText(_value="2") -> text
  36[116]: AppendText(var[52], v1: text)
  39[100]: VarText(var[52]) -> text var=__work_1[52]:text in 1
  42[116]: AppendText(var[76], v1: text)
  45[100]: VarText(var[76]) -> text var=test_value[76]:text in 1
  48[116]: ConstText(_value="1aa bb cc2") -> text
  60[132]: EqText(v1: text, v2: text) -> boolean
  61[101]: GotoFalseWord(jump=67, if_false: boolean)
  64[100]: GotoWord(jump=125)
  67[100]: ClearText(var[4]) var=__work_3[4]:text in 1
  70[100]: ConstText(_value="Test failed ") -> text
  84[116]: AppendText(var[4], v1: text)
  87[100]: VarText(var[76]) -> text var=test_value[76]:text in 1
  90[116]: ConstInt(val=0) -> integer
  95[120]: FormatText(var[4], val: text, width: integer, dir=-1, token=32)
 100[100]: ConstText(_value=" != "1aa bb cc2"") -> text
 118[116]: AppendText(var[4], v1: text)
 121[100]: VarText(var[4]) -> text var=__work_3[4]:text in 1
 124[116]: Panic(message: text)
 125[100]: FreeText(var[76])
 128[100]: FreeText(var[52])
 131[100]: FreeText(var[28])
 134[100]: FreeText(var[4])
 137[100]: Return(ret=0, value=0, discard=100)

