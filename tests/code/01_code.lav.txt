fn _tp_integer_abs(both:integer) -> integer {#block(1):integer
  OpAbsInt(both(0));
}#block(1):integer

fn _tp_long_abs(both:long) -> long {#block(1):long
  OpAbsLong(both(0));
}#block(1):long

fn _tp_single_abs(both:single) -> single {#block(1):single
  OpAbsSingle(both(0));
}#block(1):single

fn _tp_single_cos(both:single) -> single {#block(1):single
  OpMathCosSingle(both(0));
}#block(1):single

fn _tp_single_sin(both:single) -> single {#block(1):single
  OpMathSinSingle(both(0));
}#block(1):single

fn _tp_single_tan(both:single) -> single {#block(1):single
  OpMathTanSingle(both(0));
}#block(1):single

fn _tp_single_acos(both:single) -> single {#block(1):single
  OpMathAcosSingle(both(0));
}#block(1):single

fn _tp_single_asin(both:single) -> single {#block(1):single
  OpMathAsinSingle(both(0));
}#block(1):single

fn _tp_single_atan(both:single) -> single {#block(1):single
  OpMathAtanSingle(both(0));
}#block(1):single

fn _tp_single_atan2(both:single, v2:single) -> single {#block(1):single
  OpMathAtan2Single(both(0), v2(0));
}#block(1):single

fn _tp_single_ceil(both:single) -> single {#block(1):single
  OpMathCeilSingle(both(0));
}#block(1):single

fn _tp_single_floor(both:single) -> single {#block(1):single
  OpMathFloorSingle(both(0));
}#block(1):single

fn _tp_single_round(both:single) -> single {#block(1):single
  OpMathRoundSingle(both(0));
}#block(1):single

fn _tp_single_sqrt(both:single) -> single {#block(1):single
  OpMathSqrtSingle(both(0));
}#block(1):single

fn _tp_single_log(both:single, v2:single) -> single {#block(1):single
  OpMathLogSingle(both(0), v2(0));
}#block(1):single

fn _tp_single_pow(both:single, v2:single) -> single {#block(1):single
  OpPowSingle(both(0), v2(0));
}#block(1):single

fn _tp_float_abs(both:float) -> float {#block(1):float
  OpAbsFloat(both(0));
}#block(1):float

fn PI() -> float OpMathPiFloat()

fn E() -> float OpMathEFloat()

fn _tp_float_cos(both:float) -> float {#block(1):float
  OpMathCosFloat(both(0));
}#block(1):float

fn _tp_float_sin(both:float) -> float {#block(1):float
  OpMathSinFloat(both(0));
}#block(1):float

fn _tp_float_tan(both:float) -> float {#block(1):float
  OpMathTanFloat(both(0));
}#block(1):float

fn _tp_float_acos(both:float) -> float {#block(1):float
  OpMathAcosFloat(both(0));
}#block(1):float

fn _tp_float_asin(both:float) -> float {#block(1):float
  OpMathAsinFloat(both(0));
}#block(1):float

fn _tp_float_atan(both:float) -> float {#block(1):float
  OpMathAtanFloat(both(0));
}#block(1):float

fn _tp_float_atan2(both:float, v2:float) -> float {#block(1):float
  OpMathAtan2Float(both(0), v2(0));
}#block(1):float

fn _tp_float_ceil(both:float) -> float {#block(1):float
  OpMathCeilFloat(both(0));
}#block(1):float

fn _tp_float_floor(both:float) -> float {#block(1):float
  OpMathFloorFloat(both(0));
}#block(1):float

fn _tp_float_round(both:float) -> float {#block(1):float
  OpMathRoundFloat(both(0));
}#block(1):float

fn _tp_float_sqrt(both:float) -> float {#block(1):float
  OpMathSqrtFloat(both(0));
}#block(1):float

fn _tp_float_log(both:float, v2:float) -> float {#block(1):float
  OpMathLogFloat(both(0), v2(0));
}#block(1):float

fn _tp_float_pow(both:float, v2:float) -> float {#block(1):float
  OpPowFloat(both(0), v2(0));
}#block(1):float

fn _tp_text_len(both:text) -> integer {#block(1):integer
  OpLengthText(both(0));
}#block(1):integer

fn _tp_vector_len(both:vector) -> integer {#block(1):integer
  OpLengthVector(both(0));
}#block(1):integer

fn print(v1:text) {#block(1):void
  OpPrint(v1(0));
}#block(1):void

