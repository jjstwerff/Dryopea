fn last(filename: text) -> text {
    v = filename.rfind("/");
    if v {
        filename[v + 1..]
    } else {
        filename
    }
}

pub fn test() {
    test_value = {last("a/b/c") + last("d")};
    assert(
        test_value == "cd",
        "Test failed {test_value} != \"cd\""
    );
}
fn last(filename:text) -> text["filename"] {#block(1):text["filename"]
  v(1):integer = _tp_text_rfind(filename(0), "/");
  if OpConvBoolFromInt(v(1)) {#block(2):text["filename"]
    OpGetTextSub(filename(0), OpAddInt(v(1), 1i32), 2147483647i32);
  }#block(2):text["filename"] else {#block(3):text["filename"]
    filename(0);
  }#block(3):text["filename"];
}#block(1):text["filename"]

byte-code for optional_remove:last(filename: text[4]) [1119] -> text["filename"]
   0[20]: return-address
   0[24]: ArgText(var[4]) -> text var=filename[4]:text
   3[40]: ConstText(_value="/") -> text
   6[56]: StaticCall(_tp_text_rfind)
   9[28]: VarInt(var[24]) -> integer var=v[24]:integer
  12[32]: ConvBoolFromInt(v1: integer) -> boolean
  13[29]: GotoFalseWord(jump=37, if_false: boolean)
  16[28]: ArgText(var[4]) -> text var=filename[4]:text
  19[44]: VarInt(var[24]) -> integer var=v[24]:integer
  22[48]: ConstInt(val=1) -> integer
  27[52]: AddInt(v1: integer, v2: integer) -> integer
  28[48]: ConstInt(val=2147483647) -> integer
  33[52]: GetTextSub(v1: text, from: integer, till: integer) -> text["filename"]
  34[44]: GotoWord(jump=40)
  37[28]: ArgText(var[4]) -> text var=filename[4]:text
  40[44]: Return(ret=16, value=16, discard=40) type=text[4]:Base[5]

fn test() {#block(1):void
  __work_2(1):text = "";
  __work_1(1):text = "";
  test_value(1):text["__work_1"] = {#block(2):text["__work_1"]
    {#Add text(3):text["__work_1"]
      OpClearText(__work_1(1));
      OpAppendText(__work_1(1), last("a/b/c"));
      OpAppendText(__work_1(1), last("d"));
      __work_1(1);
    }#Add text(3):text["__work_1"];
  }#block(2):text["__work_1"];
  if OpEqText(test_value(1), "cd") null else OpPanic({#Formatted string(4):text
    __work_2(1):text = "Test failed ";
    OpFormatText(__work_2(1), test_value(1), 0i32, -1i32, 32i32);
    OpAppendText(__work_2(1), " != "cd"");
    __work_2(1);
  }#Formatted string(4):text);
  OpFreeText(test_value(1));
  OpFreeText(__work_1(1));
  OpFreeText(__work_2(1));
}#block(1):void

byte-code for optional_remove:test() [1165]
   0[4]: return-address
   0[8]: Text() var=__work_2[8]:text
   1[32]: Text() var=__work_1[32]:text
   2[56]: Text() var=test_value[56]:text["__work_1"]
   3[80]: ClearText(var[32])
   6[80]: ConstText(_value="a/b/c") -> text
  13[96]: Call(size=0, to=1119)
  20[96]: AppendText(var[32], v1: text)
  23[80]: ConstText(_value="d") -> text
  26[96]: Call(size=0, to=1119)
  33[96]: AppendText(var[32], v1: text)
  36[80]: VarText(var[32]) -> text var=__work_1[32]:text
  39[96]: AppendText(var[56], v1: text)
  42[80]: VarText(var[56]) -> text var=test_value[56]:text["__work_1"]
  45[96]: ConstText(_value="cd") -> text
  49[112]: EqText(v1: text, v2: text) -> boolean
  50[81]: GotoFalseWord(jump=56, if_false: boolean)
  53[80]: GotoWord(jump=106)
  56[80]: ClearText(var[8]) var=__work_2[8]:text
  59[80]: ConstText(_value="Test failed ") -> text
  73[96]: AppendText(var[8], v1: text)
  76[80]: VarText(var[56]) -> text var=test_value[56]:text["__work_1"]
  79[96]: ConstInt(val=0) -> integer
  84[100]: FormatText(var[8], val: text, width: integer, dir=-1, token=32)
  89[80]: ConstText(_value=" != "cd"") -> text
  99[96]: AppendText(var[8], v1: text)
 102[80]: VarText(var[8]) -> text var=__work_2[8]:text
 105[96]: Panic(message: text)
 106[80]: FreeText(var[56])
 109[80]: FreeText(var[32])
 112[80]: FreeText(var[8])
 115[80]: Return(ret=0, value=0, discard=76)

Execute test:
    0:[8] Text()
    1:[32] Text()
    2:[56] Text()
    3:[80] ClearText(var[32])
    6:[80] ConstText(_value="a/b/c") -> "a/b/c"[80]
   13:[96] Call(size=0, to=1119)
 1119:[100] ArgText(var[80]) -> "a/b/c"[100]
 1122:[116] ConstText(_value="/") -> "/"[116]
 1125:[132] StaticCall(_tp_text_rfind)
 1128:[104] VarInt(var[100]) -> 3[104]
 1131:[108] ConvBoolFromInt(v1=3[104]) -> true[104]
 1132:[105] GotoFalseWord(jump=1156, if_false=true[104])
 1135:[104] ArgText(var[80]) -> "a/b/c"[104]
 1138:[120] VarInt(var[100]) -> 3[120]
 1141:[124] ConstInt(val=1) -> 1[124]
 1146:[128] AddInt(v1=3[120], v2=1[124]) -> 4[120]
 1147:[124] ConstInt(val=2147483647) -> 2147483647[124]
 1152:[128] GetTextSub(v1="a/b/c"[104], from=4[120], till=2147483647[124]) -> "c"[104]
 1153:[120] GotoWord(jump=1159)
 1159:[120] Return(ret=1185[96], value=16, discard=40) -> "c"[80]
   20:[96] AppendText(var[32], v1="c"[80])
   23:[80] ConstText(_value="d") -> "d"[80]
   26:[96] Call(size=0, to=1119)
 1119:[100] ArgText(var[80]) -> "d"[100]
 1122:[116] ConstText(_value="/") -> "/"[116]
 1125:[132] StaticCall(_tp_text_rfind)
 1128:[104] VarInt(var[100]) -> -2147483648[104]
 1131:[108] ConvBoolFromInt(v1=-2147483648[104]) -> false[104]
 1132:[105] GotoFalseWord(jump=1156, if_false=false[104])
 1156:[104] ArgText(var[80]) -> "d"[104]
 1159:[120] Return(ret=1198[96], value=16, discard=40) -> "d"[80]
   33:[96] AppendText(var[32], v1="d"[80])
   36:[80] VarText(var[32]) -> "cd"[80]
   39:[96] AppendText(var[56], v1="cd"[80])
   42:[80] VarText(var[56]) -> "cd"[80]
   45:[96] ConstText(_value="cd") -> "cd"[96]
   49:[112] EqText(v1="cd"[80], v2="cd"[96]) -> true[80]
   50:[81] GotoFalseWord(jump=56, if_false=true[80])
   53:[80] GotoWord(jump=106)
  106:[80] FreeText(var[56])
  109:[80] FreeText(var[32])
  112:[80] FreeText(var[8])
  115:[80] Return(ret=4294967295[4], value=0, discard=76)
Finished
