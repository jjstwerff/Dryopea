pub fn test() {
    test_value = {v=[1, 2, 4, 8];
v += [16];
"{v} {v.len()} {v[2]} {v[1..3]} {v[rev(1..=3)]} {for x in v if x >= 4 {x/2}}"};
    assert(
        test_value == "[1,2,4,8,16] 5 4 [2,4] [8,4,2] [2,4,8]",
        "Test failed {test_value} != \"[1,2,4,8,16] 5 4 [2,4] [8,4,2] [2,4,8]\""
    );
}
Type 14:vector<integer>[4]:Vector(0)

Type 15:main_vector<integer>[8]:
    vector:vector<integer>[4]

fn test() {#1 block
  __ref_1:ref(main_vector<integer>) = null;
  __work_2:text = "";
  __work_1:text = "";
  test_value:text = {#2 block
    v:vector<integer>["__ref_1"] = {#3 vector
      OpDatabase(__ref_1, 15i32);
      _vec_1:vector<integer>["__ref_1"] = OpGetField(__ref_1, 4i32, 65535i32);
      OpSetInt(__ref_1, 4i32, 0i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 1i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 2i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 4i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _elm_2:ref(boolean)["__ref_1"] = OpNewRecord(_vec_1, 14i32, 65535i32);
      OpSetInt(_elm_2, 0i32, 8i32);
      OpFinishRecord(_vec_1, _elm_2, 14i32, 65535i32);
      _vec_1;
    }#3:vector<integer>["__ref_1"];
    {#4 vector
      _elm_3:ref(boolean)["v"] = OpNewRecord(v, 14i32, 65535i32);
      OpSetInt(_elm_3, 0i32, 16i32);
      OpFinishRecord(v, _elm_3, 14i32, 65535i32);
    }#4;
    {#5 formatting string
      __work_1:text = "";
      OpFormatDatabase(__work_1, v, 14i32, false);
      OpAppendText(__work_1, " ");
      OpFormatInt(__work_1, _tp_vector_len(v), 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " ");
      OpFormatInt(__work_1, OpGetInt(OpGetVector(v, 4i32, 2i32), 0i32), 10i32, 0i32, 32i32, false, false);
      OpAppendText(__work_1, " ");
      OpAppendText(__work_1, "[");
      _index_4:integer = OpConvIntFromNull();
      _count_5:integer = 0i32;
      loop {#6 append iter loop
        _val_6:integer = {#7 append iter next
          OpGetInt(OpGetVector(v, 4i32, {#8 next block
            _index_4:integer = if OpNot(OpConvBoolFromInt(_index_4)) 1i32 else OpAddInt(_index_4, 1i32);
            if OpGeInt(_index_4, 3i32) break(0) else null;
            _index_4;
          }#8:integer), 0i32);
        }#7:integer;
        if OpGtInt(_count_5, 0i32) OpAppendText(__work_1, ",") else null;
        _count_5:integer = OpAddInt(_count_5, 1i32);
        OpFormatInt(__work_1, _val_6, 10i32, 0i32, 32i32, false, false);
      }#6;
      OpAppendText(__work_1, "]");
      OpAppendText(__work_1, " ");
      OpAppendText(__work_1, "[");
      _index_7:integer = OpConvIntFromNull();
      _count_8:integer = 0i32;
      loop {#9 append iter loop
        _val_9:integer = {#10 append iter next
          OpGetInt(OpGetVector(v, 4i32, {#11 next block
            _index_7:integer = if OpNot(OpConvBoolFromInt(_index_7)) 3i32 else OpMinInt(_index_7, 1i32);
            if OpLtInt(_index_7, 1i32) break(0) else null;
            _index_7;
          }#11:integer), 0i32);
        }#10:integer;
        if OpGtInt(_count_8, 0i32) OpAppendText(__work_1, ",") else null;
        _count_8:integer = OpAddInt(_count_8, 1i32);
        OpFormatInt(__work_1, _val_9, 10i32, 0i32, 32i32, false, false);
      }#9;
      OpAppendText(__work_1, "]");
      OpAppendText(__work_1, " ");
      OpAppendText(__work_1, "[");
      x#index:integer = -1i32;
      x#count:integer = 0i32;
      loop {#12 iter for
        _val_10:integer = {#13 iter for loop
          x:integer = {#14 iter next
            x#index:integer = OpAddInt(x#index, 1i32);
            OpGetInt(OpGetVector(v, 4i32, x#index), 0i32);
          }#14:integer;
          if OpNot(OpConvBoolFromInt(x)) break(0) else null;
          if OpGeInt(x, 4i32) null else continue(0);
          {#15 block
            OpDivInt(x, 2i32);
          }#15:integer;
        }#13:integer;
        if OpGtInt(x#count, 0i32) OpAppendText(__work_1, ",") else null;
        x#count:integer = OpAddInt(x#count, 1i32);
        OpFormatInt(__work_1, _val_10, 10i32, 0i32, 32i32, false, false);
      }#12;
      OpAppendText(__work_1, "]");
      __work_1;
    }#5:text;
  }#2:text;
  if OpEqText(test_value, "[1,2,4,8,16] 5 4 [2,4] [8,4,2] [2,4,8]") null else OpPanic({#16 formatting string
    __work_2:text = "Test failed ";
    OpFormatText(__work_2, test_value, 0i32, -1i32, 32i32);
    OpAppendText(__work_2, " != "[1,2,4,8,16] 5 4 [2,4] [8,4,2] [2,4,8]"");
    __work_2;
  }#16:text);
}#1

byte-code for format_vector:test()
   0[0]: return-address
   0[4]: ConvRefFromNull() -> ref(reference) var=__ref_1[4]:ref(main_vector<integer>) in 1
   1[16]: Text() var=__work_2[16]:text in 1
   2[40]: Text() var=__work_1[40]:text in 1
   3[64]: Text() var=test_value[64]:text in 1
   4[88]: Database(var[4], db_tp=15) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=v[88]:vector<integer>["__ref_1"] in 2
   9[88]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=__ref_1[4]:ref(main_vector<integer>) in 1
  12[100]: GetField(v1: ref(reference), fld=4) -> ref(reference) type=Unknown type(65535)[65535]
  15[100]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=__ref_1[4]:ref(main_vector<integer>) in 1
  18[112]: ConstInt(val=0) -> integer
  23[116]: SetInt(v1: ref(reference), fld=4, val: integer)
  26[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
  29[112]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
  34[112]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
  37[124]: ConstInt(val=1) -> integer
  42[128]: SetInt(v1: ref(reference), fld=0, val: integer)
  45[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
  48[124]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
  51[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
  56[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
  59[124]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
  64[124]: PutRef(var[100], value: ref(reference))
  67[112]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
  70[124]: ConstInt(val=2) -> integer
  75[128]: SetInt(v1: ref(reference), fld=0, val: integer)
  78[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
  81[124]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
  84[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
  89[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
  92[124]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
  97[124]: PutRef(var[100], value: ref(reference))
 100[112]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
 103[124]: ConstInt(val=4) -> integer
 108[128]: SetInt(v1: ref(reference), fld=0, val: integer)
 111[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
 114[124]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
 117[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 122[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
 125[124]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 130[124]: PutRef(var[100], value: ref(reference))
 133[112]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
 136[124]: ConstInt(val=8) -> integer
 141[128]: SetInt(v1: ref(reference), fld=0, val: integer)
 144[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
 147[124]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_2[100]:ref(boolean)["__ref_1"] in 3
 150[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 155[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=_vec_1[88]:vector<integer>["__ref_1"] in 3
 158[124]: FreeStack(value=12, discard=36) type=vector<text>[4]:Vector(5)[6]
 162[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[88]:vector<integer>["__ref_1"] in 2
 165[112]: NewRecord(data: ref(reference), parent_tp=14, fld=65535) -> ref(reference)
 170[112]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_3[100]:ref(boolean)["v"] in 4
 173[124]: ConstInt(val=16) -> integer
 178[128]: SetInt(v1: ref(reference), fld=0, val: integer)
 181[112]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[88]:vector<integer>["__ref_1"] in 2
 184[124]: VarRef(var[100]) -> ref(reference) type=boolean[1]:Base[4] var=_elm_3[100]:ref(boolean)["v"] in 4
 187[136]: FinishRecord(data: ref(reference), rec: ref(reference), parent_tp=14, fld=65535)
 192[112]: FreeStack(value=0, discard=12)
 196[100]: ClearText(var[40]) var=__work_1[40]:text in 1
 199[100]: ConstText(_value="") -> text
 201[116]: AppendText(var[40], v1: text)
 204[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[88]:vector<integer>["__ref_1"] in 2
 207[112]: FormatDatabase(var[40], val: ref(reference), db_tp=14, pretty=false)
 213[100]: ConstText(_value=" ") -> text
 216[116]: AppendText(var[40], v1: text)
 219[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[88]:vector<integer>["__ref_1"] in 2
 222[112]: Call(size=0, to=328)
 229[104]: ConstInt(val=0) -> integer
 234[108]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 241[100]: ConstText(_value=" ") -> text
 244[116]: AppendText(var[40], v1: text)
 247[100]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[88]:vector<integer>["__ref_1"] in 2
 250[112]: ConstInt(val=2) -> integer
 255[116]: GetVector(r: vector, size=4, index: integer) -> ref(reference) type=integer[4]:Base[0]
 258[112]: GetInt(v1: ref(reference), fld=0) -> integer
 261[104]: ConstInt(val=0) -> integer
 266[108]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 273[100]: ConstText(_value=" ") -> text
 276[116]: AppendText(var[40], v1: text)
 279[100]: ConstText(_value="[") -> text
 282[116]: AppendText(var[40], v1: text)
 285[100]: ConvIntFromNull() -> integer var=_index_4[100]:integer in 5
 286[104]: ConstInt(val=0) -> integer var=_count_5[104]:integer in 5
 291[108]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[88]:vector<integer>["__ref_1"] in 2
 294[120]: VarInt(var[100]) -> integer var=_index_4[100]:integer in 5
 297[124]: ConvBoolFromInt(v1: integer) -> boolean
 298[121]: Not(v1: boolean) -> boolean
 299[121]: GotoFalseWord(jump=310, if_false: boolean)
 302[120]: ConstInt(val=1) -> integer
 307[124]: GotoWord(jump=319)
 310[120]: VarInt(var[100]) -> integer var=_index_4[100]:integer in 5
 313[124]: ConstInt(val=1) -> integer
 318[128]: AddInt(v1: integer, v2: integer) -> integer
 319[124]: PutInt(var[100], value: integer)
 322[120]: VarInt(var[100]) -> integer var=_index_4[100]:integer in 5
 325[124]: ConstInt(val=3) -> integer
 330[128]: GeInt(v1: integer, v2: integer) -> boolean
 331[121]: GotoFalseWord(jump=341, if_false: boolean)
 334[120]: FreeStack(value=0, discard=12)
 338[108]: GotoWord(jump=402)
 341[120]: VarInt(var[100]) -> integer var=_index_4[100]:integer in 5
 344[124]: GetVector(r: vector, size=4, index: integer) -> ref(reference) type=integer[4]:Base[0]
 347[120]: GetInt(v1: ref(reference), fld=0) -> integer
 350[112]: VarInt(var[104]) -> integer var=_count_5[104]:integer in 5
 353[116]: ConstInt(val=0) -> integer
 358[120]: GtInt(v1: integer, v2: integer) -> boolean
 359[113]: GotoFalseWord(jump=368, if_false: boolean)
 362[112]: ConstText(_value=",") -> text
 365[128]: AppendText(var[40], v1: text)
 368[112]: VarInt(var[104]) -> integer var=_count_5[104]:integer in 5
 371[116]: ConstInt(val=1) -> integer
 376[120]: AddInt(v1: integer, v2: integer) -> integer
 377[116]: PutInt(var[104], value: integer)
 380[112]: VarInt(var[108]) -> integer var=_val_6[108]:integer in 6
 383[116]: ConstInt(val=0) -> integer
 388[120]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 395[112]: FreeStack(value=0, discard=4)
 399[108]: GotoWord(jump=291)
 402[108]: ConstText(_value="]") -> text
 405[124]: AppendText(var[40], v1: text)
 408[108]: ConstText(_value=" ") -> text
 411[124]: AppendText(var[40], v1: text)
 414[108]: ConstText(_value="[") -> text
 417[124]: AppendText(var[40], v1: text)
 420[108]: ConvIntFromNull() -> integer var=_index_7[108]:integer in 5
 421[112]: ConstInt(val=0) -> integer var=_count_8[112]:integer in 5
 426[116]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[88]:vector<integer>["__ref_1"] in 2
 429[128]: VarInt(var[108]) -> integer var=_index_7[108]:integer in 5
 432[132]: ConvBoolFromInt(v1: integer) -> boolean
 433[129]: Not(v1: boolean) -> boolean
 434[129]: GotoFalseWord(jump=445, if_false: boolean)
 437[128]: ConstInt(val=3) -> integer
 442[132]: GotoWord(jump=454)
 445[128]: VarInt(var[108]) -> integer var=_index_7[108]:integer in 5
 448[132]: ConstInt(val=1) -> integer
 453[136]: MinInt(v1: integer, v2: integer) -> integer
 454[132]: PutInt(var[108], value: integer)
 457[128]: VarInt(var[108]) -> integer var=_index_7[108]:integer in 5
 460[132]: ConstInt(val=1) -> integer
 465[136]: LtInt(v1: integer, v2: integer) -> boolean
 466[129]: GotoFalseWord(jump=476, if_false: boolean)
 469[128]: FreeStack(value=0, discard=12)
 473[116]: GotoWord(jump=537)
 476[128]: VarInt(var[108]) -> integer var=_index_7[108]:integer in 5
 479[132]: GetVector(r: vector, size=4, index: integer) -> ref(reference) type=integer[4]:Base[0]
 482[128]: GetInt(v1: ref(reference), fld=0) -> integer
 485[120]: VarInt(var[112]) -> integer var=_count_8[112]:integer in 5
 488[124]: ConstInt(val=0) -> integer
 493[128]: GtInt(v1: integer, v2: integer) -> boolean
 494[121]: GotoFalseWord(jump=503, if_false: boolean)
 497[120]: ConstText(_value=",") -> text
 500[136]: AppendText(var[40], v1: text)
 503[120]: VarInt(var[112]) -> integer var=_count_8[112]:integer in 5
 506[124]: ConstInt(val=1) -> integer
 511[128]: AddInt(v1: integer, v2: integer) -> integer
 512[124]: PutInt(var[112], value: integer)
 515[120]: VarInt(var[116]) -> integer var=_val_9[116]:integer in 9
 518[124]: ConstInt(val=0) -> integer
 523[128]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 530[120]: FreeStack(value=0, discard=4)
 534[116]: GotoWord(jump=426)
 537[116]: ConstText(_value="]") -> text
 540[132]: AppendText(var[40], v1: text)
 543[116]: ConstText(_value=" ") -> text
 546[132]: AppendText(var[40], v1: text)
 549[116]: ConstText(_value="[") -> text
 552[132]: AppendText(var[40], v1: text)
 555[116]: ConstInt(val=-1) -> integer var=x#index[116]:integer in 5
 560[120]: ConstInt(val=0) -> integer var=x#count[120]:integer in 5
 565[124]: VarInt(var[116]) -> integer var=x#index[116]:integer in 5
 568[128]: ConstInt(val=1) -> integer
 573[132]: AddInt(v1: integer, v2: integer) -> integer
 574[128]: PutInt(var[116], value: integer)
 577[124]: VarVector(var[88]) -> vector type=vector<integer>[4]:Vector(0)[14] var=v[88]:vector<integer>["__ref_1"] in 2
 580[136]: VarInt(var[116]) -> integer var=x#index[116]:integer in 5
 583[140]: GetVector(r: vector, size=4, index: integer) -> ref(reference) type=integer[4]:Base[0]
 586[136]: GetInt(v1: ref(reference), fld=0) -> integer
 589[128]: VarInt(var[124]) -> integer var=x[124]:integer in 13
 592[132]: ConvBoolFromInt(v1: integer) -> boolean
 593[129]: Not(v1: boolean) -> boolean
 594[129]: GotoFalseWord(jump=604, if_false: boolean)
 597[128]: FreeStack(value=0, discard=4)
 601[124]: GotoWord(jump=691)
 604[128]: VarInt(var[124]) -> integer var=x[124]:integer in 13
 607[132]: ConstInt(val=4) -> integer
 612[136]: GeInt(v1: integer, v2: integer) -> boolean
 613[129]: GotoFalseWord(jump=619, if_false: boolean)
 616[128]: GotoWord(jump=626)
 619[128]: FreeStack(value=0, discard=4)
 623[124]: GotoWord(jump=565)
 626[128]: VarInt(var[124]) -> integer var=x[124]:integer in 13
 629[132]: ConstInt(val=2) -> integer
 634[136]: DivInt(v1: integer, v2: integer) -> integer
 635[132]: FreeStack(value=4, discard=8) type=integer[4]:Base[0]
 639[128]: VarInt(var[120]) -> integer var=x#count[120]:integer in 5
 642[132]: ConstInt(val=0) -> integer
 647[136]: GtInt(v1: integer, v2: integer) -> boolean
 648[129]: GotoFalseWord(jump=657, if_false: boolean)
 651[128]: ConstText(_value=",") -> text
 654[144]: AppendText(var[40], v1: text)
 657[128]: VarInt(var[120]) -> integer var=x#count[120]:integer in 5
 660[132]: ConstInt(val=1) -> integer
 665[136]: AddInt(v1: integer, v2: integer) -> integer
 666[132]: PutInt(var[120], value: integer)
 669[128]: VarInt(var[124]) -> integer var=_val_10[124]:integer in 12
 672[132]: ConstInt(val=0) -> integer
 677[136]: FormatInt(var[40], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 684[128]: FreeStack(value=0, discard=4)
 688[124]: GotoWord(jump=565)
 691[124]: ConstText(_value="]") -> text
 694[140]: AppendText(var[40], v1: text)
 697[124]: VarText(var[40]) -> text var=__work_1[40]:text in 1
 700[140]: FreeStack(value=16, discard=40) type=text[4]:Base[5]
 704[116]: FreeStack(value=16, discard=28) type=text[4]:Base[5]
 708[104]: AppendText(var[64], v1: text)
 711[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 714[104]: ConstText(_value="[1,2,4,8,16] 5 4 [2,4] [8,4,2] [2,4,8]") -> text
 754[120]: EqText(v1: text, v2: text) -> boolean
 755[89]: GotoFalseWord(jump=761, if_false: boolean)
 758[88]: GotoWord(jump=847)
 761[88]: ClearText(var[16]) var=__work_2[16]:text in 1
 764[88]: ConstText(_value="Test failed ") -> text
 778[104]: AppendText(var[16], v1: text)
 781[88]: VarText(var[64]) -> text var=test_value[64]:text in 1
 784[104]: ConstInt(val=0) -> integer
 789[108]: FormatText(var[16], val: text, width: integer, dir=-1, token=32)
 794[88]: ConstText(_value=" != "[1,2,4,8,16] 5 4 [2,4] [8,4,2] [2,4,8]"") -> text
 840[104]: AppendText(var[16], v1: text)
 843[88]: VarText(var[16]) -> text var=__work_2[16]:text in 1
 846[104]: Panic(message: text)
 847[88]: FreeText(var[64])
 850[88]: VarRef(var[4]) -> ref(reference) type=main_vector<integer>[8]:{vector:vector<integer>[4]}[15] var=__ref_1[4]:ref(main_vector<integer>) in 1
 853[100]: FreeRef(v1: ref(reference))
 854[88]: FreeText(var[40])
 857[88]: FreeText(var[16])
 860[88]: Return(ret=0, value=0, discard=88)

