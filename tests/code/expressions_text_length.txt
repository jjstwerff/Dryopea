pub fn test() {
    test_value = {t = "some"; t+="thing"; t.len() + len(t)};
    assert(
        test_value == 18,
        "Test failed {test_value} != 18"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    t:text = "some";
    OpAppendText(t, "thing");
    OpAddInt(_tp_text_len(t), _tp_text_len(t));
  }#2:integer;
  if OpEqInt(test_value, 18i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 18");
    __work_1;
  }#3:text);
}#1

byte-code for text_length:test()
 692[0]: return-address
 692[4]: Text()
 693[28]: Text()
 694[52]: ConstText(_value="some") -> text
 700[68]: AppendText(var[28], v1: text)
 703[52]: ConstText(_value="thing") -> text
 710[68]: AppendText(var[28], v1: text)
 713[52]: VarText(var[28]) -> text
 716[68]: Call(size=0, to=318)
 723[56]: VarText(var[28]) -> text
 726[72]: Call(size=0, to=318)
 733[60]: AddInt(v1: integer, v2: integer) -> integer
 734[56]: FreeText(var[28])
 737[56]: FreeStack(value=4, discard=28) type=integer[4]:Base[0]
 741[32]: VarInt(var[28]) -> integer
 744[36]: ConstInt(val=18) -> integer
 749[40]: EqInt(v1: integer, v2: integer) -> boolean
 750[33]: GotoFalseWord(jump=756, if_false: boolean)
 753[32]: GotoWord(jump=806)
 756[32]: ClearText(var[4])
 759[32]: ConstText(_value="Test failed ") -> text
 773[48]: AppendText(var[4], v1: text)
 776[32]: VarInt(var[28]) -> integer
 779[36]: ConstInt(val=0) -> integer
 784[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 791[32]: ConstText(_value=" != 18") -> text
 799[48]: AppendText(var[4], v1: text)
 802[32]: VarText(var[4]) -> text
 805[48]: Panic(message: text)
 806[32]: FreeText(var[4])
 809[32]: Return(ret=0, value=0, discard=32)

Execute test:
  692:[8] Text()
  693:[32] Text()
  694:[56] ConstText(_value="some") -> "some"[56]
  700:[72] AppendText(var[32], v1="some"[56])
  703:[56] ConstText(_value="thing") -> "thing"[56]
  710:[72] AppendText(var[32], v1="thing"[56])
  713:[56] VarText(var[32]) -> "something"[56]
  716:[72] Call(size=0, to=318)
  318:[76] ArgText(var[56]) -> "something"[76]
  321:[92] LengthText(v1="something"[76]) -> 9[76]
  322:[80] Return(ret=723[72], value=4, discard=24) -> 9[56]
  723:[60] VarText(var[32]) -> "something"[60]
  726:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "something"[80]
  321:[96] LengthText(v1="something"[80]) -> 9[80]
  322:[84] Return(ret=733[76], value=4, discard=24) -> 9[60]
  733:[64] AddInt(v1=9[56], v2=9[60]) -> 18[56]
  734:[60] FreeText(var[32])
  737:[60] FreeStack(value=4, discard=28)
  741:[36] VarInt(var[32]) -> 18[36]
  744:[40] ConstInt(val=18) -> 18[40]
  749:[44] EqInt(v1=18[36], v2=18[40]) -> true[36]
  750:[37] GotoFalseWord(jump=756, if_false=true[36])
  753:[36] GotoWord(jump=806)
  806:[36] FreeText(var[8])
  809:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
