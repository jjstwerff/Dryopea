pub fn test() {
    test_value = {t = "some"; t+="thing"; t.len() + len(t)};
    assert(
        test_value == 18,
        "Test failed {test_value} != 18"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    t:text = "some";
    OpAppendText(t, "thing");
    OpAddInt(_tp_text_len(t), _tp_text_len(t));
  }#2:integer;
  if OpEqInt(test_value, 18i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 18");
    __work_1;
  }#3:text);
}#1

byte-code for text_length:test()
 655[0]: return-address
 655[4]: Text() var=__work_1[4]:text in 1
 656[28]: Text() var=t[28]:text in 2
 657[52]: ConstText(_value="some") -> text
 663[68]: AppendText(var[28], v1: text)
 666[52]: ConstText(_value="thing") -> text
 673[68]: AppendText(var[28], v1: text)
 676[52]: VarText(var[28]) -> text var=t[28]:text in 2
 679[68]: Call(size=0, to=318)
 686[56]: VarText(var[28]) -> text var=t[28]:text in 2
 689[72]: Call(size=0, to=318)
 696[60]: AddInt(v1: integer, v2: integer) -> integer
 697[56]: FreeText(var[28])
 700[56]: FreeStack(value=4, discard=28) type=integer[4]:Base[0]
 704[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 707[36]: ConstInt(val=18) -> integer
 712[40]: EqInt(v1: integer, v2: integer) -> boolean
 713[33]: GotoFalseWord(jump=719, if_false: boolean)
 716[32]: GotoWord(jump=769)
 719[32]: ClearText(var[4]) var=__work_1[4]:text in 1
 722[32]: ConstText(_value="Test failed ") -> text
 736[48]: AppendText(var[4], v1: text)
 739[32]: VarInt(var[28]) -> integer var=test_value[28]:integer in 1
 742[36]: ConstInt(val=0) -> integer
 747[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 754[32]: ConstText(_value=" != 18") -> text
 762[48]: AppendText(var[4], v1: text)
 765[32]: VarText(var[4]) -> text var=__work_1[4]:text in 1
 768[48]: Panic(message: text)
 769[32]: FreeText(var[4])
 772[32]: Return(ret=0, value=0, discard=32)

Execute test:
  655:[8] Text()
  656:[32] Text()
  657:[56] ConstText(_value="some") -> "some"[56]
  663:[72] AppendText(var[32], v1="some"[56])
  666:[56] ConstText(_value="thing") -> "thing"[56]
  673:[72] AppendText(var[32], v1="thing"[56])
  676:[56] VarText(var[32]) -> "something"[56]
  679:[72] Call(size=0, to=318)
  318:[76] ArgText(var[56]) -> "something"[76]
  321:[92] LengthText(v1="something"[76]) -> 9[76]
  322:[80] Return(ret=686[72], value=4, discard=24) -> 9[56]
  686:[60] VarText(var[32]) -> "something"[60]
  689:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "something"[80]
  321:[96] LengthText(v1="something"[80]) -> 9[80]
  322:[84] Return(ret=696[76], value=4, discard=24) -> 9[60]
  696:[64] AddInt(v1=9[56], v2=9[60]) -> 18[56]
  697:[60] FreeText(var[32])
  700:[60] FreeStack(value=4, discard=28)
  704:[36] VarInt(var[32]) -> 18[36]
  707:[40] ConstInt(val=18) -> 18[40]
  712:[44] EqInt(v1=18[36], v2=18[40]) -> true[36]
  713:[37] GotoFalseWord(jump=719, if_false=true[36])
  716:[36] GotoWord(jump=769)
  769:[36] FreeText(var[8])
  772:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
