pub fn test() {
    test_value = {t = "some"; t+="thing"; t.len() + len(t)};
    assert(
        test_value == 18,
        "Test failed {test_value} != 18"
    );
}
fn test() {#1 block
  __work_1:text = "";
  test_value:integer = {#2 block
    t:text = "some";
    OpAppendText(t, "thing");
    OpAddInt(_tp_text_len(t), _tp_text_len(t));
  }#2:integer;
  if OpEqInt(test_value, 18i32) null else OpPanic({#3 formatting string
    __work_1:text = "Test failed ";
    OpFormatInt(__work_1, test_value, 10i32, 0i32, 32i32, false, false);
    OpAppendText(__work_1, " != 18");
    __work_1;
  }#3:text);
}#1

byte-code for text_length:test()
 675[0]: return-address
 675[4]: Text()
 676[28]: Text()
 677[52]: ConstText(_value="some") -> text
 683[68]: AppendText(var[28], v1: text)
 686[52]: ConstText(_value="thing") -> text
 693[68]: AppendText(var[28], v1: text)
 696[52]: VarText(var[28]) -> text
 699[68]: Call(size=0, to=318)
 706[56]: VarText(var[28]) -> text
 709[72]: Call(size=0, to=318)
 716[60]: AddInt(v1: integer, v2: integer) -> integer
 717[56]: FreeStack(value=4, discard=24) type=integer[4]:Base[0]
 721[32]: VarInt(var[28]) -> integer
 724[36]: ConstInt(val=18) -> integer
 729[40]: EqInt(v1: integer, v2: integer) -> boolean
 730[33]: GotoFalseWord(jump=736, if_false: boolean)
 733[32]: GotoWord(jump=786)
 736[32]: ClearText(var[4])
 739[32]: ConstText(_value="Test failed ") -> text
 753[48]: AppendText(var[4], v1: text)
 756[32]: VarInt(var[28]) -> integer
 759[36]: ConstInt(val=0) -> integer
 764[40]: FormatInt(var[4], val: integer, radix=10, width: integer, token=32, plus=false, note=false)
 771[32]: ConstText(_value=" != 18") -> text
 779[48]: AppendText(var[4], v1: text)
 782[32]: VarText(var[4]) -> text
 785[48]: Panic(message: text)
 786[32]: Return(ret=0, value=0, discard=32)

Execute test:
  675:[8] Text()
  676:[32] Text()
  677:[56] ConstText(_value="some") -> "some"[56]
  683:[72] AppendText(var[32], v1="some"[56])
  686:[56] ConstText(_value="thing") -> "thing"[56]
  693:[72] AppendText(var[32], v1="thing"[56])
  696:[56] VarText(var[32]) -> "something"[56]
  699:[72] Call(size=0, to=318)
  318:[76] ArgText(var[56]) -> "something"[76]
  321:[92] LengthText(v1="something"[76]) -> 9[76]
  322:[80] Return(ret=706[72], value=4, discard=24) -> 9[56]
  706:[60] VarText(var[32]) -> "something"[60]
  709:[76] Call(size=0, to=318)
  318:[80] ArgText(var[60]) -> "something"[80]
  321:[96] LengthText(v1="something"[80]) -> 9[80]
  322:[84] Return(ret=716[76], value=4, discard=24) -> 9[60]
  716:[64] AddInt(v1=9[56], v2=9[60]) -> 18[56]
  717:[60] FreeStack(value=4, discard=24)
  721:[36] VarInt(var[32]) -> 18[36]
  724:[40] ConstInt(val=18) -> 18[40]
  729:[44] EqInt(v1=18[36], v2=18[40]) -> true[36]
  730:[37] GotoFalseWord(jump=736, if_false=true[36])
  733:[36] GotoWord(jump=786)
  786:[36] Return(ret=4294967295[4], value=0, discard=32)
Finished
