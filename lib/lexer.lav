struct Keyword {
    name: text
};

struct Possible {
    length: integer,
    token: text
};

struct Token {
    start: integer, // the first character of each allowed token for example '<' or '.'
    possible: sorted<Possible[-length,token]> // full tokens, may be longer than 2
};

pub struct Lexer {
    file: text, // we can switch files
    data: text,
    index: integer,
    line: integer,
    pos: integer,
    string: boolean, // we are parsing a string content that contains expressions
    finished: boolean, // is the last parsed string finished
    keywords: hash<Keyword[name]>,
    tokens: hash<Token[start]>,
    behind: boolean, // was the last comment behind code
    comment: text // the last encountered comment, dismissed when new code is parsed
}

// Only within a single file can we remember anchor points and return to them later.
pub struct Anchor {
    index: integer,
    line: integer,
    pos: integer
}

// Apply keywords, there will not be identifiers.
pub fn keywords(self: Lexer, keywords: vector<text>) {
    self.keywords.clear();
    for k in keywords {
        self.keywords += [ {name:k} ];
    }
}

// Set tokens, this allows for correct multi-character token parsing.
pub fn tokens(self: Lexer, tokens: vector<text>) {
    self.tokens.clear();
    for t in tokens {
        f = t.character();
        if !f {
            continue;
        }
        if self.tokens[f] {
            self.tokens[f].possible += [ { length: t.len(), token: t } ];
        } else {
            self.tokens += [ { Token { start: f, possible: [ { length: t.len(), token: t } ] } ];
        }
    }
}

// Open a file for parsing.
pub fn file(self: Lexer, filename: text) {
    v = filename.rfind("/);
    self.file = if v {
        filename[v + 1..]
    } else {
        filename
    };
    self.data = file(filename).content();
    self.index = -1;
    self.line = -1;
    self.pos = -1;
}

// Use a text for parsing.
pub fn text(self: Lexer, name: text, content: text) {
    self.file = name;
    self.data = content;
    self.index = -1;
    self.line = -1;
    self.pos = -1;
}

// Test if there is a specific token or keyword in the file, skip this if it matches.
pub fn match(self: Lexer, with: text) -> boolean {
    if self.test(with) {
        self.pos += len(with);
        self.behind = false;
        self.comment = "";
        true
    } else {
        false
    }
}

// Test if there is a specific token, do not skip it.
pub fn test(self: Lexer, with: text) -> boolean {
    self.skip_whitespace();
    false
}

// Peek towards the next token, this will skip whitespace
pub fn peek(self: Lexer) -> text {
    ""
}

// Skip possible white-space, comments or newlines in the file.
fn skip_whitespace(self: Lexer) {
}

// Gather information about the current lexer position
pub fn position(self: Lexer) -> text {
    "{self.filename}:{self.line}:{self.pos}"
}

// Get an identifier and skip it.
pub fn identifier(self: Lexer) -> text {
}

// Get an integer and skip it.
pub fn integer(self: Lexer) -> integer {
    0
}

// Get a long and skip it.
pub fn long(self: Lexer) -> long {
}

// Get a float
pub fn float(self: Lexer) -> float {
}

// Get a single length float
pub fn single(self: Lexer) -> single {
}

pub fn string(self: Lexer) -> text {
}

// Is the last parsed constant string finished or is it on another formatting expression.
pub fn finished(self: Lexer) -> boolean {
    self.finished
}

// Get the last parsed comment, can contain multiple lines.
pub fn comment(self: Lexer) -> text {
    self.comment
}

// Was the last found comment started on the same line as code.
pub fn behind(self: Lexer) -> boolean {
    self.behind
}

pub fn anchor(self: Lexer) -> Anchor {
    { index: self.index, line: self.line, pos: self.pos }
}

pub fn revert(self: Lexer, to: Anchor) {
    self.index = to.index;
    self.line = to.line;
    self.pos = to.pos;
}
