// Copyright (c) 2022-2025 Jurjen Stellingwerff
// SPDX-License-Identifier: LGPL-3.0-or-later

pub type boolean;
pub type integer;
pub type long;
pub type single;
pub type float;
pub type text;

pub type u8=integer limit(0, 255);
pub type i8=integer limit(-128, 127);
pub type u16=integer limit(0, 65535);
pub type i16=integer limit(-32768, 32767);
pub type i32=integer;

// General operations
fn OpGoto(step: const i8);
#rust "s.code_pos = (s.code_pos as i32 + i32::from(@step)) as u32;"

fn OpGotoWord(step: const i16);
#rust "s.code_pos = (s.code_pos as i32 + i32::from(@step)) as u32;"

fn OpGotoFalse(step: const i8, if_false: boolean);
#rust "if !@if_false {{s.code_pos = (s.code_pos as i32 + i32::from(@step)) as u32;}}"

fn OpGotoFalseWord(step: const i16, if_false: boolean);
#rust "if !@if_false {{s.code_pos = (s.code_pos as i32 + i32::from(@step)) as u32;}}"

fn OpStackPos();
#rust "s.stack_pos();"

fn OpCall(size: const u16, to: const i32);
#rust "s.fn_call(@size, @to);"

fn OpReturn(ret: const u16, value: const u8, discard: const u16);
#rust "s.fn_return(@ret, @value, @discard);"

fn OpFreeStack(value: const u8, discard: const u16);
#rust "s.free_stack(@value, @discard);"

// Boolean operations
fn OpConstTrue() -> boolean;
#rust "true"

fn OpConstFalse() -> boolean;
#rust "false"

fn OpVarBool(pos: const u16) -> boolean;
#rust "*s.get_var::<bool>(@pos)"

fn OpPutBool(var: const u16, value: boolean);
#rust "s.put_var(@var, @value);"

fn OpNot(v1: boolean) -> boolean;
#rust "!@v1"

fn OpFormatBool(pos: const u16, val: boolean, width: integer, dir: const i8, token: const u8);

// Integer operations
fn OpConstInt(val: const integer) -> integer;
#rust "@val"

fn OpConstShort(val: const i16) -> integer;
#rust "i32::from(@val)"

fn OpConstTiny(val: const i8) -> integer;
#rust "i32::from(@val)"

fn OpVarInt(pos: const u16) -> integer;
#rust "*s.get_var::<i32>(@pos)"

fn OpPutInt(pos: const u16, value: integer);
#rust "s.put_var(@pos, @value);"

fn OpConvIntFromNull() -> integer;
#rust "i32::MIN"

fn OpConstLongText(start: const i32, size: const i32) -> text;
#rust "s.string_from_texts(@start, @size);"

fn OpCastIntFromText(v1: text) -> integer;
#rust "if let Ok(i) = @v1.parse() {{ i }} else {{ i32::MIN }}"

fn OpCastLongFromText(v1: text) -> long;
#rust "if let Ok(i) = @v1.parse() {{ i }} else {{ i64::MIN }}"

fn OpCastSingleFromText(v1: text) -> single;
#rust "if let Ok(i) = @v1.parse() {{ i }} else {{ f32::NAN }}"

fn OpCastFloatFromText(v1: text) -> float;
#rust "if let Ok(i) = @v1.parse() {{ i }} else {{ f64::NAN }}"

fn OpAbsInt(v1: integer) -> integer;
#rust "external::op_abs_int(@v1)"
pub fn abs(both: integer) -> integer { OpAbsInt(both) }

fn OpMinSingleInt(v1: integer) -> integer;
#rust "external::op_min_single_int(@v1)"

fn OpConvLongFromInt(v1: integer) -> long;
#rust "external::op_conv_long_from_int(@v1)"

fn OpConvFloatFromInt(v1: integer) -> float;
#rust "external::op_conv_float_from_int(@v1)"

fn OpConvSingleFromInt(v1: integer) -> single;
#rust "external::op_conv_single_from_int(@v1)"

fn OpConvBoolFromInt(v1: integer) -> boolean;
#rust "external::op_conv_bool_from_int(@v1)"

fn OpAddInt(v1: integer, v2: integer) -> integer;
#rust "external::op_add_int(@v1, @v2)"

fn OpMinInt(v1: integer, v2: integer) -> integer;
#rust "external::op_min_int(@v1, @v2)"

fn OpMulInt(v1: integer, v2: integer) -> integer;
#rust "external::op_mul_int(@v1, @v2)"

fn OpDivInt(v1: integer, v2: integer) -> integer;
#rust "external::op_div_int(@v1, @v2)"

fn OpRemInt(v1: integer, v2: integer) -> integer;
#rust "external::op_rem_int(@v1, @v2)"

fn OpLandInt(v1: integer, v2: integer) -> integer;
#rust "external::op_logical_and_int(@v1, @v2)"

fn OpLorInt(v1: integer, v2: integer) -> integer;
#rust "external::op_logical_or_int(@v1, @v2)"

fn OpEorInt(v1: integer, v2: integer) -> integer;
#rust "external::op_exclusive_or_int(@v1, @v2)"

fn OpSLeftInt(v1: integer, v2: integer) -> integer;
#rust "external::op_shift_left_int(@v1, @v2)"

fn OpSRightInt(v1: integer, v2: integer) -> integer;
#rust "external::op_shift_right_int(@v1, @v2)"

fn OpEqInt(v1: integer, v2: integer) -> boolean;
#rust "@v1 == @v2"

fn OpNeInt(v1: integer, v2: integer) -> boolean;
#rust "@v1 != @v2"

fn OpLtInt(v1: integer, v2: integer) -> boolean;
#rust "@v1 < @v2"

fn OpLeInt(v1: integer, v2: integer) -> boolean;
#rust "@v1 <= @v2"

fn OpGtInt(v1: integer, v2: integer) -> boolean;
#rust "@v1 > @v2"

fn OpGeInt(v1: integer, v2: integer) -> boolean;
#rust "@v1 >= @v2"

fn OpFormatInt(pos: const u16, val: integer, radix: const u8, width: integer, token: const u8, plus: const boolean, note: const boolean);

// Long operations
fn OpConstLong(val: const long) -> long;
#rust "@val"

fn OpVarLong(pos: const u16) -> long;
#rust "*s.get_var::<i64>(@pos)"

fn OpPutLong(pos: const u16, value: long);
#rust "s.put_var(@pos, @value);"

fn OpConvLongFromNull() -> long;
#rust "i64::MIN"

fn OpAbsLong(v1: long) -> long;
#rust "external::op_abs_long(@v1)"
pub fn abs(both: long) -> long { OpAbsLong(both) }

fn OpMinSingleLong(v1: long) -> long;
#rust "external::op_min_single_long(@v1)"

fn OpCastIntFromLong(v1: long) -> integer;
#rust "external::op_cast_int_from_long(@v1)"

fn OpConvFloatFromLong(v1: long) -> float;
#rust "external::op_conv_float_from_long(@v1)"

fn OpConvBoolFromLong(v1: long) -> boolean;
#rust "external::op_conv_bool_from_long(@v1)"

fn OpAddLong(v1: long, v2: long) -> long;
#rust "external::op_add_long(@v1, @v2)"

fn OpMinLong(v1: long, v2: long) -> long;
#rust "external::op_min_long(@v1, @v2)"

fn OpMulLong(v1: long, v2: long) -> long;
#rust "external::op_mul_long(@v1, @v2)"

fn OpDivLong(v1: long, v2: long) -> long;
#rust "external::op_div_long(@v1, @v2)"

fn OpRemLong(v1: long, v2: long) -> long;
#rust "external::op_rem_long(@v1, @v2)"

fn OpLandLong(v1: long, v2: long) -> long;
#rust "external::op_logical_and_long(@v1, @v2)"

fn OpLorLong(v1: long, v2: long) -> long;
#rust "external::op_logical_or_long(@v1, @v2)"

fn OpEorLong(v1: long, v2: long) -> long;
#rust "external::op_exclusive_or_long(@v1, @v2)"

fn OpSLeftLong(v1: long, v2: long) -> long;
#rust "external::op_shift_left_long(@v1, @v2)"

fn OpSRightLong(v1: long, v2: long) -> long;
#rust "external::op_shift_right_long(@v1, @v2)"

fn OpEqLong(v1: long, v2: long) -> boolean;
#rust "@v1 == @v2"

fn OpNeLong(v1: long, v2: long) -> boolean;
#rust "@v1 != @v2"

fn OpLtLong(v1: long, v2: long) -> boolean;
#rust "@v1 < @v2"

fn OpLeLong(v1: long, v2: long) -> boolean;
#rust "@v1 <= @v2"

fn OpGtLong(v1: long, v2: long) -> boolean;
#rust "@v1 > @v2"

fn OpGeLong(v1: long, v2: long) -> boolean;
#rust "@v1 >= @v2"

fn OpFormatLong(pos: const u16, val: long, radix: const u8, width: integer, token: const u8, plus: const boolean, note: const boolean);

// Single operations
fn OpConstSingle(val: const single) -> single;
#rust "@val"

fn OpVarSingle(pos: const u16) -> single;
#rust "*s.get_var::<f32>(@pos)"

fn OpPutSingle(pos: const u16, value: single);
#rust "s.put_var(@pos, @value);"

fn OpConvSingleFromNull() -> single;
#rust "f32::NAN"

fn OpAbsSingle(v1: single) -> single;
#rust "@v1.abs()"
pub fn abs(both: single) -> single { OpAbsSingle(both) }

fn OpMinSingleSingle(v1: single) -> single;
#rust "-@v1"

fn OpCastIntFromSingle(v1: single) -> integer;
#rust "external::op_cast_int_from_single(@v1)"

fn OpCastLongFromSingle(v1: single) -> long;
#rust "external::op_cast_long_from_single(@v1)"

fn OpConvFloatFromSingle(v1: single) -> float;
#rust "f64::from(@v1)"

fn OpConvBoolFromSingle(v1: single) -> boolean;
#rust "!@v1.is_nan()"

fn OpAddSingle(v1: single, v2: single) -> single;
#rust "@v1 + @v2"

fn OpMinSingle(v1: single, v2: single) -> single;
#rust "@v1 - @v2"

fn OpMulSingle(v1: single, v2: single) -> single;
#rust "@v1 * @v2"

fn OpDivSingle(v1: single, v2: single) -> single;
#rust "@v1 / @v2"

fn OpRemSingle(v1: single, v2: single) -> single;
#rust "@v1 % @v2"

fn OpMathCosSingle(v1: single) -> single;
#rust "@v1.cos()"
pub fn cos(both: single) -> single { OpMathCosSingle(both) }

fn OpMathSinSingle(v1: single) -> single;
#rust "@v1.sin()"
pub fn sin(both: single) -> single { OpMathSinSingle(both) }

fn OpMathTanSingle(v1: single) -> single;
#rust "@v1.tan()"
pub fn tan(both: single) -> single { OpMathTanSingle(both) }

fn OpMathAcosSingle(v1: single) -> single;
#rust "@v1.acos()"
pub fn acos(both: single) -> single { OpMathAcosSingle(both) }

fn OpMathAsinSingle(v1: single) -> single;
#rust "@v1.asin()"
pub fn asin(both: single) -> single { OpMathAsinSingle(both) }

fn OpMathAtanSingle(v1: single) -> single;
#rust "@v1.atan()"
pub fn atan(both: single) -> single { OpMathAtanSingle(both) }

fn OpMathAtan2Single(v1: single, v2: single) -> single;
#rust "@v1.atan2(@v2)"
pub fn atan2(both: single, v2: single) -> single { OpMathAtan2Single(both, v2) }

fn OpMathCeilSingle(v1: single) -> single;
#rust "@v1.ceil()"
pub fn ceil(both: single) -> single { OpMathCeilSingle(both) }

fn OpMathFloorSingle(v1: single) -> single;
#rust "@v1.floor()"
pub fn floor(both: single) -> single { OpMathFloorSingle(both) }

fn OpMathRoundSingle(v1: single) -> single;
#rust "@v1.round()"
pub fn round(both: single) -> single { OpMathRoundSingle(both) }

fn OpMathSqrtSingle(v1: single) -> single;
#rust "@v1.sqrt()"
pub fn sqrt(both: single) -> single { OpMathSqrtSingle(both) }

fn OpMathLogSingle(v1: single, v2: single) -> single;
#rust "@v1.log(@v2)"
pub fn log(both: single, v2: single) -> single { OpMathLogSingle(both, v2) }

fn OpPowSingle(v1: single, v2: single) -> single;
#rust "@v1.powf(@v2)"
pub fn pow(both: single, v2: single) -> single { OpPowSingle(both, v2) }

fn OpEqSingle(v1: single, v2: single) -> boolean;
#rust "(@v1 - @v2).abs() < 0.000_001f32"

fn OpNeSingle(v1: single, v2: single) -> boolean;
#rust "(@v1 - @v2).abs() > 0.000_001f32"

fn OpLtSingle(v1: single, v2: single) -> boolean;
#rust "@v1 < @v2"

fn OpLeSingle(v1: single, v2: single) -> boolean;
#rust "@v1 <= @v2"

fn OpGtSingle(v1: single, v2: single) -> boolean;
#rust "@v1 > @v2"

fn OpGeSingle(v1: single, v2: single) -> boolean;
#rust "@v1 >= @v2"

fn OpFormatSingle(pos: const u16, val: single, width: integer, precision: integer);

// float operations
fn OpConstFloat(val: const float) -> float;
#rust "@val"

fn OpVarFloat(pos: const u16) -> float;
#rust "*s.get_var::<f64>(@pos)"

fn OpPutFloat(pos: const u16, value: float);
#rust "s.put_var(@pos, @value);"

fn OpConvFloatFromNull() -> float;
#rust "f64::NAN"

fn OpAbsFloat(v1: float) -> float;
#rust "@v1.abs()"
pub fn abs(both: float) -> float { OpAbsFloat(both) }

fn OpMathPiFloat() -> float;
#rust "std::f64::consts::PI"
pub PI = OpMathPiFloat();

fn OpMathEFloat() -> float;
#rust "std::f64::consts::E"
pub E = OpMathEFloat();

fn OpMathCosFloat(v1: float) -> float;
#rust "@v1.cos()"
pub fn cos(both: float) -> float { OpMathCosFloat(both) }

fn OpMathSinFloat(v1: float) -> float;
#rust "@v1.sin()"
pub fn sin(both: float) -> float { OpMathSinFloat(both) }

fn OpMathTanFloat(v1: float) -> float;
#rust "@v1.tan()"
pub fn tan(both: float) -> float { OpMathTanFloat(both) }

fn OpMathAcosFloat(v1: float) -> float;
#rust "@v1.acos()"
pub fn acos(both: float) -> float { OpMathAcosFloat(both) }

fn OpMathAsinFloat(v1: float) -> float;
#rust "@v1.asin()"
pub fn asin(both: float) -> float { OpMathAsinFloat(both) }

fn OpMathAtanFloat(v1: float) -> float;
#rust "@v1.atan()"
pub fn atan(both: float) -> float { OpMathAtanFloat(both) }

fn OpMathAtan2Float(v1: float, v2: float) -> float;
#rust "@v1.atan2(@v2)"
pub fn atan2(both: float, v2: float) -> float { OpMathAtan2Float(both, v2) }

fn OpMathCeilFloat(v1: float) -> float;
#rust "@v1.ceil()"
pub fn ceil(both: float) -> float { OpMathCeilFloat(both) }

fn OpMathFloorFloat(v1: float) -> float;
#rust "@v1.floor()"
pub fn floor(both: float) -> float { OpMathFloorFloat(both) }

fn OpMathRoundFloat(v1: float) -> float;
#rust "@v1.round()"
pub fn round(both: float) -> float { OpMathRoundFloat(both) }

fn OpMathSqrtFloat(v1: float) -> float;
#rust "@v1.sqrt()"
pub fn sqrt(both: float) -> float { OpMathSqrtFloat(both) }

fn OpMathLogFloat(v1: float, v2: float) -> float;
#rust "@v1.log(@v2)"
pub fn log(both: float, v2: float) -> float { OpMathLogFloat(both, v2) }

fn OpPowFloat(v1: float, v2: float) -> float;
#rust "@v1.powf(@v2)"
pub fn pow(both: float, v2: float) -> float { OpPowFloat(both, v2) }

fn OpMinSingleFloat(v1: float) -> float;
#rust "-@v1"

fn OpCastSingleFromFloat(v1: float) -> single;
#rust "@v1 as f32"

fn OpCastIntFromFloat(v1: float) -> integer;
#rust "external::op_cast_int_from_float(@v1)"

fn OpCastLongFromFloat(v1: float) -> long;
#rust "external::op_cast_long_from_float(@v1)"

fn OpConvBoolFromFloat(v1: float) -> boolean;
#rust "!@v1.is_nan()"

fn OpAddFloat(v1: float, v2: float) -> float;
#rust "@v1 + @v2"

fn OpMinFloat(v1: float, v2: float) -> float;
#rust "@v1 - @v2"

fn OpMulFloat(v1: float, v2: float) -> float;
#rust "@v1 * @v2"

fn OpDivFloat(v1: float, v2: float) -> float;
#rust "@v1 / @v2"

fn OpRemFloat(v1: float, v2: float) -> float;
#rust "@v1 % @v2"

fn OpEqFloat(v1: float, v2: float) -> boolean;
#rust "(@v1 - @v2).abs() < 0.000_000_001f64"

fn OpNeFloat(v1: float, v2: float) -> boolean;
#rust "(@v1 - @v2).abs() > 0.000_000_001f64"

fn OpLtFloat(v1: float, v2: float) -> boolean;
#rust "@v1 < @v2"

fn OpLeFloat(v1: float, v2: float) -> boolean;
#rust "@v1 <= @v2"

fn OpGtFloat(v1: float, v2: float) -> boolean;
#rust "@v1 > @v2"

fn OpGeFloat(v1: float, v2: float) -> boolean;
#rust "@v1 >= @v2"

fn OpFormatFloat(pos: const u16, val: float, width: integer, precision: integer);

// Text operations

// Read the value of a variable and put a reference to it on the stack
fn OpVarText(pos: const u16) -> text;
// Put a reference copy of an argument on stack
fn OpArgText(pos: const u16) -> text;
fn OpConstText(_value: const text) -> text;
#rust "s.string_from_code();"
fn OpConvTextFromNull() -> text;
fn OpLengthText(v1: text) -> integer;
#rust "@v1.len() as i32"
pub fn len(both: text) -> integer { OpLengthText(both) }
fn OpConvBoolFromText(v1: text) -> boolean;
#rust "!@v1.is_empty()"
fn OpAddText(v1: text, v2: text) -> text;
fn OpText();
fn OpAppendText(pos: const u16, v1: text);
fn OpGetTextSub(v1: text, from: integer, till: integer) -> text[v1];
fn OpClearText(pos: const u16);
fn OpFreeText(pos: const u16);
// pub fn clear(self: text) { OpClearText(self) }
fn OpEqText(v1: text, v2: text) -> boolean;
#rust "@v1 == @v2"
fn OpNeText(v1: text, v2: text) -> boolean;
#rust "@v1 != @v2"
fn OpLtText(v1: text, v2: text) -> boolean;
#rust "@v1 < @v2"
fn OpLeText(v1: text, v2: text) -> boolean;
#rust "@v1 <= @v2"
fn OpGtText(v1: text, v2: text) -> boolean;
#rust "@v1 > @v2"
fn OpGeText(v1: text, v2: text) -> boolean;
#rust "@v1 >= @v2"
fn OpFormatText(pos: const u16, val: text, width: integer, dir: const i8, token: const u8);

fn character(val: text) -> integer;
#rust "state::get_character(@val)"
fn OpAppendCharacter(pos: const u16, character: integer);

type enumerate;
fn OpVarEnum(pos: const u16) -> enumerate;
#rust "*s.get_var::<u8>(@pos)"
fn OpConstEnum(val: const enumerate) -> enumerate;
#rust "@val"
fn OpPutEnum(pos: const u16, value: enumerate);
#rust "s.put_var(@pos, @value);"
fn OpConvBoolFromEnum(v1: enumerate) -> boolean;
#rust "@v1 != 255"
fn OpCastTextFromEnum(v1: enumerate, enum_tp: u16) -> text;
#rust "Str::new(&s.database.enum_val(@enum_tp, @v1))"
fn OpCastEnumFromText(v1: text, enum_tp: const u16) -> enumerate;
#rust "s.database.to_enum(@enum_tp, @v1)"
fn OpCastIntFromEnum(v1: enumerate) -> integer;
#rust "if @v1 == 255 {{ i32::MIN }} else {{ i32::from(@v1) }}"
fn OpCastEnumFromInt(v1: integer) -> enumerate;
#rust "if @v1 == i32::MIN {{ 255 }} else {{ @v1 as u8 }}"
fn OpConvEnumFromNull() -> enumerate;
#rust "255u8"
fn OpEqEnum(v1: enumerate, v2: enumerate) -> boolean;
#rust "@v1 == @v2"
fn OpNeEnum(v1: enumerate, v2: enumerate) -> boolean;
#rust "@v1 != @v2"
fn OpLtEnum(v1: enumerate, v2: enumerate) -> boolean;
#rust "@v1 < @v2"
fn OpLeEnum(v1: enumerate, v2: enumerate) -> boolean;
#rust "@v1 <= @v2"
fn OpGtEnum(v1: enumerate, v2: enumerate) -> boolean;
#rust "@v1 > @v2"
fn OpGeEnum(v1: enumerate, v2: enumerate) -> boolean;
#rust "@v1 >= @v2"

// A reference to a record, this can 'live' inside an array
// Might this be a reference to a record field? As It might be a reference to a single value inside an array.
// This allows a vector to be a reference to a field.
type reference;

fn OpDatabase(size: const u16, db_tp: const u16) -> reference;
fn OpFormatDatabase(pos: const u16, val: reference, db_tp: const u16, pretty: const boolean);
fn OpConvBoolFromRef(val: reference) -> boolean;
#rust "@val.rec != 0"
fn OpConvRefFromNull() -> reference;
#rust "Stores::null()"
//fn OpCastRefFromText(val: text, db_tp: const u16) -> reference;

// Claim a new object inside a current database
fn OpAppend(db: reference, size: const u16, db_tp: const u16) -> reference[db];

fn OpVarRef(pos: const u16) -> reference;
#rust "*s.get_var::<DbRef>(@pos);"
fn OpPutRef(pos: const u16, value: reference);
#rust "s.put_var(@pos, @value);"
fn OpEqRef(v1: reference, v2: reference) -> boolean;
#rust "@v1 == @v2"
fn OpNeRef(v1: reference, v2: reference) -> boolean;
#rust "@v1 != @v2"

// Can be used to get another record within the same database
fn OpGetRef(v1: reference, fld: const u16) -> reference[v1];
#rust "stores.get_ref(&@v1, u32::from(@fld))"

fn OpSetRef(v1: reference, fld: const u16, val: reference);
#rust "{{let db = @v1; stores.store_mut(&db).set_int(db.rec, db.pos + u32::from(@fld), @val.rec as i32);}}"

// Get a direct field reference for a structure: vector, index, hash or spacial
// These always point to a field what value can change depending on the content.
fn OpGetField(v1: reference, fld: const u16) -> reference[v1];
#rust "DbRef {{store_nr: @v1.store_nr, rec: @v1.rec, pos: @v1.pos + u32::from(@fld)}}"

// Simple type value write and read, vector elements always have fld=0.
// All these types are passed by value instead of by reference.
fn OpGetInt(v1: reference, fld: const u16) -> integer;
#rust "{{let db = @v1; if db.rec == 0 {{ i32::MIN }} else {{ stores.store(&db).get_int(db.rec, db.pos + u32::from(@fld))}} }}"

fn OpGetLong(v1: reference, fld: const u16) -> long;
#rust "{{let db = @v1; stores.store(&db).get_long(db.rec, db.pos + u32::from(@fld))}}"

fn OpGetSingle(v1: reference, fld: const u16) -> single;
#rust "{{let db = @v1; stores.store(&db).get_single(db.rec, db.pos + u32::from(@fld))}}"

fn OpGetFloat(v1: reference, fld: const u16) -> float;
#rust "{{let db = @v1; stores.store(&db).get_float(db.rec, db.pos + u32::from(@fld))}}"

fn OpGetByte(v1: reference, fld: const u16, min: const i16) -> integer;
#rust "{{let db = @v1; stores.store(&db).get_byte(db.rec, db.pos + u32::from(@fld), i32::from(@min))}}"

fn OpGetEnum(v1: reference, fld: const u16) -> enumerate;
#rust "{{let db = @v1; stores.store(&db).get_byte(db.rec, db.pos + u32::from(@fld), 0) as u8}}"
fn OpSetEnum(v1: reference, fld: const u16, val: enumerate);
#rust "{{let db = @v1; stores.store_mut(&db).set_byte(db.rec, db.pos + u32::from(@fld), 0, i32::from(@val));}}"

fn OpGetShort(v1: reference, fld: const u16, min: const i16) -> integer;
#rust "{{let db = @v1; stores.store(&db).get_short(db.rec, db.pos + u32::from(@fld), i32::from(@min))}}"

fn OpGetText(v1: reference, fld: const u16) -> text[v1];
#rust "{{let db = @v1; let store = stores.store(&db); Str::new(store.get_str(store.get_int(db.rec, db.pos + u32::from(@fld)) as u32))}}"

fn OpSetInt(v1: reference, fld: const u16, val: integer);
#rust "{{let db = @v1; stores.store_mut(&db).set_int(db.rec, db.pos + u32::from(@fld), @val);}}"

fn OpSetLong(v1: reference, fld: const u16, val: long);
#rust "{{let db = @v1; stores.store_mut(&db).set_long(db.rec, db.pos + u32::from(@fld), @val);}}"

fn OpSetSingle(v1: reference, fld: const u16, val: single);
#rust "{{let db = @v1; stores.store_mut(&db).set_single(db.rec, db.pos + u32::from(@fld), @val);}}"

fn OpSetFloat(v1: reference, fld: const u16, val: float);
#rust "{{let db = @v1; stores.store_mut(&db).set_float(db.rec, db.pos + u32::from(@fld), @val);}}"

fn OpSetByte(v1: reference, fld: const u16, min: const i16, val: integer);
#rust "{{let db = @v1; stores.store_mut(&db).set_byte(db.rec, db.pos + u32::from(@fld), i32::from(@min), @val);}}"

fn OpSetShort(v1: reference, fld: const u16, min: const i16, val: integer);
#rust "{{let db = @v1; stores.store_mut(&db).set_short(db.rec, db.pos + u32::from(@fld), i32::from(@min), @val);}}"

fn OpSetText(v1: reference, fld: const u16, val: text);
#rust "{{let db = @v1; let s_val = @val.to_string(); let store = stores.store_mut(&db); let s_pos = store.set_str(&s_val); store.set_int(db.rec, db.pos + u32::from(@fld), s_pos as i32);}}"

// All structures are passed by reference instead of by value
type vector;
type sorted;

// All vectors are referenced by the field that points towards them.
fn OpVarVector(pos: const u16) -> vector;
#rust "*s.get_var::<DbRef>(@pos)"

// The length of vectors is written at the start of their allocation.
fn OpLengthVector(r: vector) -> integer;
#rust "vector::length_vector(&@r, &s.database.allocations) as i32"
pub fn len(both: vector) -> integer { OpLengthVector(both) }

fn OpClearVector(r: vector);
#rust "vector::clear_vector(&@r, &mut s.database.allocations);"
pub fn clear(self: vector) { OpClearVector(self); }

// This returns the position inside the vector of a record or a value, get the actual value with fld=0
fn OpGetVector(r: vector, size: const u16, index: integer) -> reference[r];
#rust "vector::get_vector(&@r, u32::from(@size), @index, &s.database.allocations)"

fn OpCastVectorFromText(val: text, db_tp: const u16) -> vector;

fn OpRemoveVector(r: vector, size: const u16, index: integer) -> boolean;
#rust "vector::remove_vector(&@r, u32::from(@size), @index as u32, &mut s.database.allocations)"

// Insert space into a vector, no data written
fn OpInsertVector(r: vector, size: const u16, index: integer, db_tp: const u16) -> reference[r];

// Claim space for a new record for the given structure
fn OpNewRecord(data: reference, parent_tp: const u16, fld: const u16) -> reference[data];

// Write the new record into the given structure (when not already done)
fn OpFinishRecord(data: reference, rec: reference, parent_tp: const u16, fld: const u16);

// Add all elements of another vector with the same type
fn OpAppendVector(r: vector, other: vector, tp: const u16);
#rust "s.database.vector_add(&@r, &@other, @tp);"

// Get a record from a structure. This operator also reads a dynamic key from stack (not shown here)
fn OpGetRecord(data: reference, db_tp: const u16, no_keys: const u8) -> reference[data];
fn OpStart(data: reference, db_tp: const u16, no_keys: const u8) -> integer;
fn OpNext(data: reference, pos: const u16, db_tp: const u16, no_keys: const u8) -> reference[data];
fn OpValidate(data: reference, db_tp: const u16);

// These types should eventually become unnecessary because of the unified internal database API
type hash;

fn OpHashAdd(data: reference, rec: reference, tp: const u16);
fn OpHashFind(data: reference, tp: const u16) -> reference[data];
fn OpHashRemove(data: reference, rec: reference, tp: const u16);
type index;
// type spacial;

fn OpEqBool(v1: boolean, v2: boolean) -> boolean;
#rust "@v1 == @v2"
fn OpNeBool(v1: boolean, v2: boolean) -> boolean;
#rust "@v1 != @v2"

fn OpPanic(message: text);
#rust "panic!(\"{{}}\", @message);"

fn assert(test: boolean, message: text);
#rust "assert!(@test, \"{{}}\", @message);"

fn OpPrint(v1: text);
#rust "print!(\"{{}}\", @v1);"
fn print(v1: text) { OpPrint(v1); }

type keys_definition;

fn OpIterate(data: reference, on: const u8, arg: const u16, keys: const keys_definition, from_key: const u8, till_key: const u8) -> long;
fn OpStep(state_var: const u16, data: reference, on: const u8, arg: const u16) -> reference[data];

type iterator;

fn OpStaticCall(call: const u16);
fn OpCreateRef(pos: const u16) -> reference;
fn OpGetRefText(r: reference, fld: const u16) -> text[r];
fn OpGetDbRef(r: reference, fld: const u16) -> reference;
fn OpSetDbRef(r: reference, fld: const u16, v1: reference);
fn OpAppendRefText(r: reference, fld: const u16, v1: text);
fn OpClearRefText(r: reference);
